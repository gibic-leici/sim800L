
sim800L.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f44  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d8  08005050  08005050  00015050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a28  08005a28  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005a28  08005a28  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a28  08005a28  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a28  08005a28  00015a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a2c  08005a2c  00015a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000070  08005aa0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08005aa0  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b33  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a80  00000000  00000000  00027bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000830  00000000  00000000  00029650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000788  00000000  00000000  00029e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c2b  00000000  00000000  0002a608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ab3  00000000  00000000  00042233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083d0e  00000000  00000000  0004ace6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ce9f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e0c  00000000  00000000  000cea44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08005038 	.word	0x08005038

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08005038 	.word	0x08005038

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000164:	1d39      	adds	r1, r7, #4
 8000166:	f04f 33ff 	mov.w	r3, #4294967295
 800016a:	2201      	movs	r2, #1
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <__io_putchar+0x20>)
 800016e:	f002 f8c6 	bl	80022fe <HAL_UART_Transmit>
  return ch;
 8000172:	687b      	ldr	r3, [r7, #4]
}
 8000174:	4618      	mov	r0, r3
 8000176:	3708      	adds	r7, #8
 8000178:	46bd      	mov	sp, r7
 800017a:	bd80      	pop	{r7, pc}
 800017c:	2000008c 	.word	0x2000008c

08000180 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8000186:	2300      	movs	r3, #0
 8000188:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart1);
 800018a:	2300      	movs	r3, #0
 800018c:	603b      	str	r3, [r7, #0]
 800018e:	4b0e      	ldr	r3, [pc, #56]	; (80001c8 <__io_getchar+0x48>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	603b      	str	r3, [r7, #0]
 8000196:	4b0c      	ldr	r3, [pc, #48]	; (80001c8 <__io_getchar+0x48>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	603b      	str	r3, [r7, #0]
 800019e:	683b      	ldr	r3, [r7, #0]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80001a0:	1df9      	adds	r1, r7, #7
 80001a2:	f04f 33ff 	mov.w	r3, #4294967295
 80001a6:	2201      	movs	r2, #1
 80001a8:	4807      	ldr	r0, [pc, #28]	; (80001c8 <__io_getchar+0x48>)
 80001aa:	f002 f93a 	bl	8002422 <HAL_UART_Receive>
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80001ae:	1df9      	adds	r1, r7, #7
 80001b0:	f04f 33ff 	mov.w	r3, #4294967295
 80001b4:	2201      	movs	r2, #1
 80001b6:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__io_getchar+0x48>)
 80001b8:	f002 f8a1 	bl	80022fe <HAL_UART_Transmit>

  return ch;
 80001bc:	79fb      	ldrb	r3, [r7, #7]
}
 80001be:	4618      	mov	r0, r3
 80001c0:	3708      	adds	r7, #8
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bd80      	pop	{r7, pc}
 80001c6:	bf00      	nop
 80001c8:	2000008c 	.word	0x2000008c

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b5b0      	push	{r4, r5, r7, lr}
 80001ce:	f5ad 6d2b 	sub.w	sp, sp, #2736	; 0xab0
 80001d2:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f001 f832 	bl	800123c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f9b4 	bl	8000544 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  setvbuf(stdin, NULL, _IONBF, 0);	// Esto es necesario para que scanf ande bien
 80001dc:	4bb8      	ldr	r3, [pc, #736]	; (80004c0 <main+0x2f4>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	6858      	ldr	r0, [r3, #4]
 80001e2:	2300      	movs	r3, #0
 80001e4:	2202      	movs	r2, #2
 80001e6:	2100      	movs	r1, #0
 80001e8:	f003 f980 	bl	80034ec <setvbuf>
  	  	  	  	  	  	  	  	    // con esto y lo de arriba ya anda el scanf :)

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ec:	f000 fa3a 	bl	8000664 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001f0:	f000 f9e4 	bl	80005bc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80001f4:	f000 fa0c 	bl	8000610 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */

  printf("Test de comandos AT... \r\n");
 80001f8:	48b2      	ldr	r0, [pc, #712]	; (80004c4 <main+0x2f8>)
 80001fa:	f003 f947 	bl	800348c <puts>

  // Inicializacion de la clase con la que manejo el sim800L

  SIM800 sim800;
  InitSIM(&sim800,&huart2,1);
 80001fe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000202:	2201      	movs	r2, #1
 8000204:	49b0      	ldr	r1, [pc, #704]	; (80004c8 <main+0x2fc>)
 8000206:	4618      	mov	r0, r3
 8000208:	f000 fa86 	bl	8000718 <InitSIM>

  EnviarAT(&sim800);
 800020c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000210:	4618      	mov	r0, r3
 8000212:	f000 fbb1 	bl	8000978 <EnviarAT>
  ConsultarEstadoSIM(&sim800);
 8000216:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800021a:	4618      	mov	r0, r3
 800021c:	f000 fbcc 	bl	80009b8 <ConsultarEstadoSIM>

  int bypass_conection = 0;
 8000220:	2300      	movs	r3, #0
 8000222:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4

  printf("Conectando a la red...(Presione alguna tecla para diagnosticar)\r\n");
 8000226:	48a9      	ldr	r0, [pc, #676]	; (80004cc <main+0x300>)
 8000228:	f003 f930 	bl	800348c <puts>


  while( ( isConnected(&sim800,0) != 1 ) && (bypass_conection == 0) )
 800022c:	e04a      	b.n	80002c4 <main+0xf8>
  {
	  if (getchar() != EOF)
 800022e:	f002 ff7b 	bl	8003128 <getchar>
 8000232:	4603      	mov	r3, r0
 8000234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000238:	d044      	beq.n	80002c4 <main+0xf8>
	  {
		  {
			  printf("Todavia no se ha podido establecer la conexion.\r\n");
 800023a:	48a5      	ldr	r0, [pc, #660]	; (80004d0 <main+0x304>)
 800023c:	f003 f926 	bl	800348c <puts>
		  	  printf("1) Reintentar\r\n");
 8000240:	48a4      	ldr	r0, [pc, #656]	; (80004d4 <main+0x308>)
 8000242:	f003 f923 	bl	800348c <puts>
		  	  printf("2) Diagnosticar\r\n");
 8000246:	48a4      	ldr	r0, [pc, #656]	; (80004d8 <main+0x30c>)
 8000248:	f003 f920 	bl	800348c <puts>
		  	  printf("3) Serial Debug\r\n");
 800024c:	48a3      	ldr	r0, [pc, #652]	; (80004dc <main+0x310>)
 800024e:	f003 f91d 	bl	800348c <puts>
		  	  printf("4) Continuar sin conexion\r\n");
 8000252:	48a3      	ldr	r0, [pc, #652]	; (80004e0 <main+0x314>)
 8000254:	f003 f91a 	bl	800348c <puts>

		  	  int opcion;
		  	  scanf("%d",&opcion);
 8000258:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800025c:	4619      	mov	r1, r3
 800025e:	48a1      	ldr	r0, [pc, #644]	; (80004e4 <main+0x318>)
 8000260:	f003 f92c 	bl	80034bc <iscanf>
		  	  switch(opcion)
 8000264:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8000268:	f6a3 2338 	subw	r3, r3, #2616	; 0xa38
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	3b01      	subs	r3, #1
 8000270:	2b03      	cmp	r3, #3
 8000272:	d827      	bhi.n	80002c4 <main+0xf8>
 8000274:	a201      	add	r2, pc, #4	; (adr r2, 800027c <main+0xb0>)
 8000276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800027a:	bf00      	nop
 800027c:	080002c5 	.word	0x080002c5
 8000280:	0800028d 	.word	0x0800028d
 8000284:	080002ab 	.word	0x080002ab
 8000288:	080002bd 	.word	0x080002bd
		  	  {
		  	  case 1:
		  		  break;
		  	  case 2:
		  		  ConsultarSignal(&sim800);
 800028c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000290:	4618      	mov	r0, r3
 8000292:	f000 fb81 	bl	8000998 <ConsultarSignal>
		  		  HAL_Delay(1000);
 8000296:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800029a:	f001 f831 	bl	8001300 <HAL_Delay>
		  		  ListarRedesDisponibles(&sim800);
 800029e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 fb98 	bl	80009d8 <ListarRedesDisponibles>
		  		  break;
 80002a8:	e00c      	b.n	80002c4 <main+0xf8>
		  	  case 3:
		  		  printf("Modo de Serial Debug. Ingrese ctr+z para salir\r\n");
 80002aa:	488f      	ldr	r0, [pc, #572]	; (80004e8 <main+0x31c>)
 80002ac:	f003 f8ee 	bl	800348c <puts>
		  		  SerialDebug(&huart1,&huart2,26);
 80002b0:	221a      	movs	r2, #26
 80002b2:	4985      	ldr	r1, [pc, #532]	; (80004c8 <main+0x2fc>)
 80002b4:	488d      	ldr	r0, [pc, #564]	; (80004ec <main+0x320>)
 80002b6:	f000 fb27 	bl	8000908 <SerialDebug>
		  		  break;
 80002ba:	e003      	b.n	80002c4 <main+0xf8>

		  	  case 4:
		  		  bypass_conection=1;
 80002bc:	2301      	movs	r3, #1
 80002be:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
		  		  break;
 80002c2:	bf00      	nop
  while( ( isConnected(&sim800,0) != 1 ) && (bypass_conection == 0) )
 80002c4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 fb98 	bl	8000a00 <isConnected>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	d003      	beq.n	80002de <main+0x112>
 80002d6:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d0a7      	beq.n	800022e <main+0x62>
		  	  }
		    }
	  }
  }
  printf("Conectado con exito\r\n");
 80002de:	4884      	ldr	r0, [pc, #528]	; (80004f0 <main+0x324>)
 80002e0:	f003 f8d4 	bl	800348c <puts>


  InitGPRS(&sim800,1);
 80002e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80002e8:	2101      	movs	r1, #1
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 fa4a 	bl	8000784 <InitGPRS>
  BorrarAllSMS(&sim800, 1);
 80002f0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80002f4:	2101      	movs	r1, #1
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 fd06 	bl	8000d08 <BorrarAllSMS>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	printf("Bienvenido al Test de SIM800L\r\n");
 80002fc:	487d      	ldr	r0, [pc, #500]	; (80004f4 <main+0x328>)
 80002fe:	f003 f8c5 	bl	800348c <puts>
	printf("1) Serial Debug\r\n");
 8000302:	487d      	ldr	r0, [pc, #500]	; (80004f8 <main+0x32c>)
 8000304:	f003 f8c2 	bl	800348c <puts>
	printf("2) Recibir msj SMS \r\n");
 8000308:	487c      	ldr	r0, [pc, #496]	; (80004fc <main+0x330>)
 800030a:	f003 f8bf 	bl	800348c <puts>
	printf("3) Enviar msj SMS \r\n");
 800030e:	487c      	ldr	r0, [pc, #496]	; (8000500 <main+0x334>)
 8000310:	f003 f8bc 	bl	800348c <puts>
	printf("4) Testear el modo GPRS\r\n");
 8000314:	487b      	ldr	r0, [pc, #492]	; (8000504 <main+0x338>)
 8000316:	f003 f8b9 	bl	800348c <puts>
	printf("5) Enviar un msj TCP\r\n");
 800031a:	487b      	ldr	r0, [pc, #492]	; (8000508 <main+0x33c>)
 800031c:	f003 f8b6 	bl	800348c <puts>
	printf("6) Enviar un msj largo (500 bytes) por TCP\r\n");
 8000320:	487a      	ldr	r0, [pc, #488]	; (800050c <main+0x340>)
 8000322:	f003 f8b3 	bl	800348c <puts>

	int opcion1;
	char opcion2;
	fflush(stdin);scanf("%d",&opcion1);
 8000326:	4b66      	ldr	r3, [pc, #408]	; (80004c0 <main+0x2f4>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	4618      	mov	r0, r3
 800032e:	f002 fdd7 	bl	8002ee0 <fflush>
 8000332:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000336:	4619      	mov	r1, r3
 8000338:	486a      	ldr	r0, [pc, #424]	; (80004e4 <main+0x318>)
 800033a:	f003 f8bf 	bl	80034bc <iscanf>

	char IP [50] = "163.10.76.36";
 800033e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8000342:	f6a3 25a4 	subw	r5, r3, #2724	; 0xaa4
 8000346:	4b72      	ldr	r3, [pc, #456]	; (8000510 <main+0x344>)
 8000348:	462c      	mov	r4, r5
 800034a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800034c:	c407      	stmia	r4!, {r0, r1, r2}
 800034e:	7023      	strb	r3, [r4, #0]
 8000350:	f105 030d 	add.w	r3, r5, #13
 8000354:	2225      	movs	r2, #37	; 0x25
 8000356:	2100      	movs	r1, #0
 8000358:	4618      	mov	r0, r3
 800035a:	f002 ff2c 	bl	80031b6 <memset>
	int puerto = 1050;
 800035e:	f240 431a 	movw	r3, #1050	; 0x41a
 8000362:	f8c7 3aa0 	str.w	r3, [r7, #2720]	; 0xaa0

	switch(opcion1)
 8000366:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800036a:	f6a3 233c 	subw	r3, r3, #2620	; 0xa3c
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	3b01      	subs	r3, #1
 8000372:	2b05      	cmp	r3, #5
 8000374:	d8c2      	bhi.n	80002fc <main+0x130>
 8000376:	a201      	add	r2, pc, #4	; (adr r2, 800037c <main+0x1b0>)
 8000378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800037c:	08000395 	.word	0x08000395
 8000380:	080003a9 	.word	0x080003a9
 8000384:	08000453 	.word	0x08000453
 8000388:	08000463 	.word	0x08000463
 800038c:	08000477 	.word	0x08000477
 8000390:	08000497 	.word	0x08000497
	{
	case 1:
		printf("Modo de Serial Debug. Ingrese ctr+z para salir\r\n");
 8000394:	4854      	ldr	r0, [pc, #336]	; (80004e8 <main+0x31c>)
 8000396:	f003 f879 	bl	800348c <puts>
		SerialDebug(&huart1,&huart2,26);
 800039a:	221a      	movs	r2, #26
 800039c:	494a      	ldr	r1, [pc, #296]	; (80004c8 <main+0x2fc>)
 800039e:	4853      	ldr	r0, [pc, #332]	; (80004ec <main+0x320>)
 80003a0:	f000 fab2 	bl	8000908 <SerialDebug>
		break;
 80003a4:	e08a      	b.n	80004bc <main+0x2f0>
	case 2:
 80003a6:	bf00      	nop
			do{
				printf("Esperando por SMS...\r\n");
 80003a8:	485a      	ldr	r0, [pc, #360]	; (8000514 <main+0x348>)
 80003aa:	f003 f86f 	bl	800348c <puts>
				char comando1 [LEN_CMD] = "\r\nLED_TOGGLE\r\n";
 80003ae:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80003b2:	f5a3 6527 	sub.w	r5, r3, #2672	; 0xa70
 80003b6:	4b58      	ldr	r3, [pc, #352]	; (8000518 <main+0x34c>)
 80003b8:	462c      	mov	r4, r5
 80003ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003bc:	c407      	stmia	r4!, {r0, r1, r2}
 80003be:	8023      	strh	r3, [r4, #0]
 80003c0:	3402      	adds	r4, #2
 80003c2:	0c1b      	lsrs	r3, r3, #16
 80003c4:	7023      	strb	r3, [r4, #0]
 80003c6:	f105 030f 	add.w	r3, r5, #15
 80003ca:	2223      	movs	r2, #35	; 0x23
 80003cc:	2100      	movs	r1, #0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f002 fef1 	bl	80031b6 <memset>

				if (ListenSMS(&sim800,&huart1) == 1)
 80003d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80003d8:	4944      	ldr	r1, [pc, #272]	; (80004ec <main+0x320>)
 80003da:	4618      	mov	r0, r3
 80003dc:	f000 fcbe 	bl	8000d5c <ListenSMS>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	d11e      	bne.n	8000424 <main+0x258>
				{
					printf("Texto del mensaje: %s",sim800.txt_last_sms);
 80003e6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80003ea:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 80003ee:	4619      	mov	r1, r3
 80003f0:	484a      	ldr	r0, [pc, #296]	; (800051c <main+0x350>)
 80003f2:	f002 ffc5 	bl	8003380 <iprintf>
					if(strncmp((sim800.txt_last_sms),comando1,strlen(comando1)) == 0)
 80003f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff fea6 	bl	800014c <strlen>
 8000400:	4602      	mov	r2, r0
 8000402:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000406:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800040a:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 800040e:	4618      	mov	r0, r3
 8000410:	f003 f995 	bl	800373e <strncmp>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d104      	bne.n	8000424 <main+0x258>
					{
						HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800041a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800041e:	4840      	ldr	r0, [pc, #256]	; (8000520 <main+0x354>)
 8000420:	f001 faec 	bl	80019fc <HAL_GPIO_TogglePin>
					}
				}


				printf("Desea esperar por otro SMS? (s/n) \r\n");
 8000424:	483f      	ldr	r0, [pc, #252]	; (8000524 <main+0x358>)
 8000426:	f003 f831 	bl	800348c <puts>
				fflush(stdin);
 800042a:	4b25      	ldr	r3, [pc, #148]	; (80004c0 <main+0x2f4>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	685b      	ldr	r3, [r3, #4]
 8000430:	4618      	mov	r0, r3
 8000432:	f002 fd55 	bl	8002ee0 <fflush>
				scanf("%c",&opcion2);
 8000436:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800043a:	4619      	mov	r1, r3
 800043c:	483a      	ldr	r0, [pc, #232]	; (8000528 <main+0x35c>)
 800043e:	f003 f83d 	bl	80034bc <iscanf>
				}while( opcion2 == 's');
 8000442:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8000446:	f6a3 233d 	subw	r3, r3, #2621	; 0xa3d
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	2b73      	cmp	r3, #115	; 0x73
 800044e:	d0aa      	beq.n	80003a6 <main+0x1da>

			break;
 8000450:	e034      	b.n	80004bc <main+0x2f0>

	case 3:
		EnviarSMS(&sim800,"+5492966544589","Hola desde el SIM800 por SMS",1);
 8000452:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8000456:	2301      	movs	r3, #1
 8000458:	4a34      	ldr	r2, [pc, #208]	; (800052c <main+0x360>)
 800045a:	4935      	ldr	r1, [pc, #212]	; (8000530 <main+0x364>)
 800045c:	f000 fc2e 	bl	8000cbc <EnviarSMS>
		break;
 8000460:	e02c      	b.n	80004bc <main+0x2f0>

	case 4:
		printf("Probando GPRS, recuperando algo de una pag web... \r\n");
 8000462:	4834      	ldr	r0, [pc, #208]	; (8000534 <main+0x368>)
 8000464:	f003 f812 	bl	800348c <puts>
		TestGPRS(&sim800,1);
 8000468:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800046c:	2101      	movs	r1, #1
 800046e:	4618      	mov	r0, r3
 8000470:	f000 fb26 	bl	8000ac0 <TestGPRS>
		break;
 8000474:	e022      	b.n	80004bc <main+0x2f0>

	case 5:
		printf("Enviando un msj al IP: %s\r\n",IP);
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	4619      	mov	r1, r3
 800047a:	482f      	ldr	r0, [pc, #188]	; (8000538 <main+0x36c>)
 800047c:	f002 ff80 	bl	8003380 <iprintf>
		SendTCPtoIP(&sim800, "Hola desde el SIM800L por protocolo TCP\r\n", IP, puerto,1);
 8000480:	1d3a      	adds	r2, r7, #4
 8000482:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8000486:	2301      	movs	r3, #1
 8000488:	9300      	str	r3, [sp, #0]
 800048a:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 800048e:	492b      	ldr	r1, [pc, #172]	; (800053c <main+0x370>)
 8000490:	f000 fbc0 	bl	8000c14 <SendTCPtoIP>
		break;
 8000494:	e012      	b.n	80004bc <main+0x2f0>

	case 6:
		printf("Enviando un msj largo al IP: %s\r\n",IP);
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	4619      	mov	r1, r3
 800049a:	4829      	ldr	r0, [pc, #164]	; (8000540 <main+0x374>)
 800049c:	f002 ff70 	bl	8003380 <iprintf>
		SendTCPtoIP(&sim800, sim800.buffer_largo , IP, puerto,1);
 80004a0:	1d3a      	adds	r2, r7, #4
 80004a2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80004a6:	f603 0138 	addw	r1, r3, #2104	; 0x838
 80004aa:	f107 0074 	add.w	r0, r7, #116	; 0x74
 80004ae:	2301      	movs	r3, #1
 80004b0:	9300      	str	r3, [sp, #0]
 80004b2:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 80004b6:	f000 fbad 	bl	8000c14 <SendTCPtoIP>
		break;
 80004ba:	bf00      	nop
  {
 80004bc:	e71e      	b.n	80002fc <main+0x130>
 80004be:	bf00      	nop
 80004c0:	2000000c 	.word	0x2000000c
 80004c4:	08005050 	.word	0x08005050
 80004c8:	200000d0 	.word	0x200000d0
 80004cc:	0800506c 	.word	0x0800506c
 80004d0:	080050b0 	.word	0x080050b0
 80004d4:	080050e4 	.word	0x080050e4
 80004d8:	080050f4 	.word	0x080050f4
 80004dc:	08005108 	.word	0x08005108
 80004e0:	0800511c 	.word	0x0800511c
 80004e4:	08005138 	.word	0x08005138
 80004e8:	0800513c 	.word	0x0800513c
 80004ec:	2000008c 	.word	0x2000008c
 80004f0:	0800516c 	.word	0x0800516c
 80004f4:	08005184 	.word	0x08005184
 80004f8:	080051a4 	.word	0x080051a4
 80004fc:	080051b8 	.word	0x080051b8
 8000500:	080051d0 	.word	0x080051d0
 8000504:	080051e4 	.word	0x080051e4
 8000508:	08005200 	.word	0x08005200
 800050c:	08005218 	.word	0x08005218
 8000510:	0800536c 	.word	0x0800536c
 8000514:	08005244 	.word	0x08005244
 8000518:	080053a0 	.word	0x080053a0
 800051c:	0800525c 	.word	0x0800525c
 8000520:	40011000 	.word	0x40011000
 8000524:	08005274 	.word	0x08005274
 8000528:	08005298 	.word	0x08005298
 800052c:	0800529c 	.word	0x0800529c
 8000530:	080052bc 	.word	0x080052bc
 8000534:	080052cc 	.word	0x080052cc
 8000538:	08005300 	.word	0x08005300
 800053c:	0800531c 	.word	0x0800531c
 8000540:	08005348 	.word	0x08005348

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b090      	sub	sp, #64	; 0x40
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0318 	add.w	r3, r7, #24
 800054e:	2228      	movs	r2, #40	; 0x28
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f002 fe2f 	bl	80031b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000566:	2302      	movs	r3, #2
 8000568:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056a:	2301      	movs	r3, #1
 800056c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056e:	2310      	movs	r3, #16
 8000570:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000572:	2300      	movs	r3, #0
 8000574:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000576:	f107 0318 	add.w	r3, r7, #24
 800057a:	4618      	mov	r0, r3
 800057c:	f001 fa58 	bl	8001a30 <HAL_RCC_OscConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000586:	f000 f8c1 	bl	800070c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058a:	230f      	movs	r3, #15
 800058c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800058e:	2300      	movs	r3, #0
 8000590:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f001 fcc6 	bl	8001f34 <HAL_RCC_ClockConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005ae:	f000 f8ad 	bl	800070c <Error_Handler>
  }
}
 80005b2:	bf00      	nop
 80005b4:	3740      	adds	r7, #64	; 0x40
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
	...

080005bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005c0:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_USART1_UART_Init+0x4c>)
 80005c2:	4a12      	ldr	r2, [pc, #72]	; (800060c <MX_USART1_UART_Init+0x50>)
 80005c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005c6:	4b10      	ldr	r3, [pc, #64]	; (8000608 <MX_USART1_UART_Init+0x4c>)
 80005c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <MX_USART1_UART_Init+0x4c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <MX_USART1_UART_Init+0x4c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <MX_USART1_UART_Init+0x4c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005e0:	4b09      	ldr	r3, [pc, #36]	; (8000608 <MX_USART1_UART_Init+0x4c>)
 80005e2:	220c      	movs	r2, #12
 80005e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <MX_USART1_UART_Init+0x4c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <MX_USART1_UART_Init+0x4c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005f2:	4805      	ldr	r0, [pc, #20]	; (8000608 <MX_USART1_UART_Init+0x4c>)
 80005f4:	f001 fe36 	bl	8002264 <HAL_UART_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005fe:	f000 f885 	bl	800070c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	2000008c 	.word	0x2000008c
 800060c:	40013800 	.word	0x40013800

08000610 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_USART2_UART_Init+0x4c>)
 8000616:	4a12      	ldr	r2, [pc, #72]	; (8000660 <MX_USART2_UART_Init+0x50>)
 8000618:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <MX_USART2_UART_Init+0x4c>)
 800061c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000620:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MX_USART2_UART_Init+0x4c>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <MX_USART2_UART_Init+0x4c>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <MX_USART2_UART_Init+0x4c>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_USART2_UART_Init+0x4c>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <MX_USART2_UART_Init+0x4c>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_USART2_UART_Init+0x4c>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <MX_USART2_UART_Init+0x4c>)
 8000648:	f001 fe0c 	bl	8002264 <HAL_UART_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000652:	f000 f85b 	bl	800070c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	200000d0 	.word	0x200000d0
 8000660:	40004400 	.word	0x40004400

08000664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000678:	4b21      	ldr	r3, [pc, #132]	; (8000700 <MX_GPIO_Init+0x9c>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a20      	ldr	r2, [pc, #128]	; (8000700 <MX_GPIO_Init+0x9c>)
 800067e:	f043 0310 	orr.w	r3, r3, #16
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <MX_GPIO_Init+0x9c>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f003 0310 	and.w	r3, r3, #16
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <MX_GPIO_Init+0x9c>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a1a      	ldr	r2, [pc, #104]	; (8000700 <MX_GPIO_Init+0x9c>)
 8000696:	f043 0304 	orr.w	r3, r3, #4
 800069a:	6193      	str	r3, [r2, #24]
 800069c:	4b18      	ldr	r3, [pc, #96]	; (8000700 <MX_GPIO_Init+0x9c>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f003 0304 	and.w	r3, r3, #4
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ae:	4815      	ldr	r0, [pc, #84]	; (8000704 <MX_GPIO_Init+0xa0>)
 80006b0:	f001 f98c 	bl	80019cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_SIM_GPIO_Port, RST_SIM_Pin, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	2120      	movs	r1, #32
 80006b8:	4813      	ldr	r0, [pc, #76]	; (8000708 <MX_GPIO_Init+0xa4>)
 80006ba:	f001 f987 	bl	80019cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c4:	2301      	movs	r3, #1
 80006c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006c8:	2302      	movs	r3, #2
 80006ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	2302      	movs	r3, #2
 80006ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	4619      	mov	r1, r3
 80006d6:	480b      	ldr	r0, [pc, #44]	; (8000704 <MX_GPIO_Init+0xa0>)
 80006d8:	f000 fff4 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_SIM_Pin */
  GPIO_InitStruct.Pin = RST_SIM_Pin;
 80006dc:	2320      	movs	r3, #32
 80006de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006e4:	2301      	movs	r3, #1
 80006e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2302      	movs	r3, #2
 80006ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RST_SIM_GPIO_Port, &GPIO_InitStruct);
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	4619      	mov	r1, r3
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_GPIO_Init+0xa4>)
 80006f4:	f000 ffe6 	bl	80016c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006f8:	bf00      	nop
 80006fa:	3718      	adds	r7, #24
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40021000 	.word	0x40021000
 8000704:	40011000 	.word	0x40011000
 8000708:	40010800 	.word	0x40010800

0800070c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000710:	b672      	cpsid	i
}
 8000712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000714:	e7fe      	b.n	8000714 <Error_Handler+0x8>
	...

08000718 <InitSIM>:
/* ------------------------------------------------------------------------------*/
/* ------------------------ Funciones de Inicializacion ------------------------ */
/* ------------------------------------------------------------------------------*/

void InitSIM(SIM800* sim, UART_HandleTypeDef * huart,int print)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]

	sim-> huart = huart;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	68ba      	ldr	r2, [r7, #8]
 8000728:	601a      	str	r2, [r3, #0]
	memset(sim->response, 0, LENGTH);
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	3304      	adds	r3, #4
 800072e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f002 fd3e 	bl	80031b6 <memset>
	memset(sim->txt_last_sms, 0, LEN_TXT);
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 8000740:	2264      	movs	r2, #100	; 0x64
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f002 fd36 	bl	80031b6 <memset>

	InitBufferLargo(sim);
 800074a:	68f8      	ldr	r0, [r7, #12]
 800074c:	f000 f840 	bl	80007d0 <InitBufferLargo>

	EnviarComandoAT(sim,"AT+CMGF=1\r\n",print); // Activa modo texto
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	4909      	ldr	r1, [pc, #36]	; (8000778 <InitSIM+0x60>)
 8000754:	68f8      	ldr	r0, [r7, #12]
 8000756:	f000 f851 	bl	80007fc <EnviarComandoAT>
	EnviarComandoAT(sim,"AT+CNMI=2,1,0,0,0\r\n",print); // Configura recepcion de SMS
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	4907      	ldr	r1, [pc, #28]	; (800077c <InitSIM+0x64>)
 800075e:	68f8      	ldr	r0, [r7, #12]
 8000760:	f000 f84c 	bl	80007fc <EnviarComandoAT>
												  // Esto es importante : Primer num: el 2 es para que guarde los msj en un buffer si la conexion Uart esta ocupada
												 // Segundo num: el 1 es para que guarde internamente los msj, despues para leerlos hay que usar CMGR. Si esto lo pones en 2 forwardea el msj directamente y no guarda nada

	EnviarComandoAT(sim, "AT+CFUN=1\r\n",print); // Esto me parece que es innecesario... (activa todas las funcionalidades pero creo que esta en 1 por defecto)
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	4906      	ldr	r1, [pc, #24]	; (8000780 <InitSIM+0x68>)
 8000768:	68f8      	ldr	r0, [r7, #12]
 800076a:	f000 f847 	bl	80007fc <EnviarComandoAT>
}
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	080053d4 	.word	0x080053d4
 800077c:	080053e0 	.word	0x080053e0
 8000780:	080053f4 	.word	0x080053f4

08000784 <InitGPRS>:

void InitGPRS(SIM800 *sim,int print)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
	if(isConnectedGPRS(sim,print) == 0)
 800078e:	6839      	ldr	r1, [r7, #0]
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f000 f965 	bl	8000a60 <isConnectedGPRS>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d10e      	bne.n	80007ba <InitGPRS+0x36>
	{
		//EnviarComandoAT(sim,"AT+CSTT=\"igprs.claro.com.ar\",\"ctigprs\",\"ctigprs999\"\r\n",print);
		EnviarComandoAT(sim,"AT+CSTT=\"igprs.claro.com.ar\",\"\",\"\"\r\n",print);
 800079c:	683a      	ldr	r2, [r7, #0]
 800079e:	4909      	ldr	r1, [pc, #36]	; (80007c4 <InitGPRS+0x40>)
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f000 f82b 	bl	80007fc <EnviarComandoAT>
			// Esto setea el APN contraseña y usuario de Claro. Sin esto se conecta igual a red celular pero no anda el GPRS

		EnviarComandoAT(sim,"AT+CIICR\r\n",print);	// Inicializa el GPRS
 80007a6:	683a      	ldr	r2, [r7, #0]
 80007a8:	4907      	ldr	r1, [pc, #28]	; (80007c8 <InitGPRS+0x44>)
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f000 f826 	bl	80007fc <EnviarComandoAT>


		EnviarComandoAT(sim,"AT+CIFSR\r\n",print);	// Debería imprimir el IP
 80007b0:	683a      	ldr	r2, [r7, #0]
 80007b2:	4906      	ldr	r1, [pc, #24]	; (80007cc <InitGPRS+0x48>)
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f000 f821 	bl	80007fc <EnviarComandoAT>
	}
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	08005400 	.word	0x08005400
 80007c8:	08005428 	.word	0x08005428
 80007cc:	08005434 	.word	0x08005434

080007d0 <InitBufferLargo>:

void InitBufferLargo(SIM800 *sim)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	strcpy(sim->buffer_largo,"En Argentina naci. Tierra del Diego y Lionel. De los pibes de Malvinas. Que jamas olvidare. No te lo puedo explicar. Porque no vas a entender. Las finales que perdimos. Cuantos anos la llore. Pero eso se termino. Porque en el Maracana. La final con los brazucas. La volvio a ganar papa. Muchachos. Ahora nos volvimos a ilusionar. Quiero ganar la tercera. Quiero ser campeon mundial. Y al Diego. Desde el cielo lo podemos ver. Con Don Diego y La Tota. Alentandolo a Lionel. ");
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f603 0338 	addw	r3, r3, #2104	; 0x838
 80007de:	4a06      	ldr	r2, [pc, #24]	; (80007f8 <InitBufferLargo+0x28>)
 80007e0:	4618      	mov	r0, r3
 80007e2:	4611      	mov	r1, r2
 80007e4:	f44f 73ed 	mov.w	r3, #474	; 0x1da
 80007e8:	461a      	mov	r2, r3
 80007ea:	f002 fcd6 	bl	800319a <memcpy>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	08005440 	.word	0x08005440

080007fc <EnviarComandoAT>:
/* ---------------------------- Funciones generales ---------------------------- */
/* ------------------------------------------------------------------------------*/


void EnviarComandoAT(SIM800* sim, char* comando, int print)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
	Enviar(sim,comando);
 8000808:	68b9      	ldr	r1, [r7, #8]
 800080a:	68f8      	ldr	r0, [r7, #12]
 800080c:	f000 f80b 	bl	8000826 <Enviar>
	WaitForAnswer(sim,print);
 8000810:	6879      	ldr	r1, [r7, #4]
 8000812:	68f8      	ldr	r0, [r7, #12]
 8000814:	f000 f83e 	bl	8000894 <WaitForAnswer>
	HAL_Delay(100);
 8000818:	2064      	movs	r0, #100	; 0x64
 800081a:	f000 fd71 	bl	8001300 <HAL_Delay>
}
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <Enviar>:

void Enviar(SIM800 *sim, char * cadena)
{
 8000826:	b590      	push	{r4, r7, lr}
 8000828:	b083      	sub	sp, #12
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
 800082e:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit (sim->huart, (uint8_t*) cadena, strlen(cadena),TIMEOUT);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681c      	ldr	r4, [r3, #0]
 8000834:	6838      	ldr	r0, [r7, #0]
 8000836:	f7ff fc89 	bl	800014c <strlen>
 800083a:	4603      	mov	r3, r0
 800083c:	b29a      	uxth	r2, r3
 800083e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000842:	6839      	ldr	r1, [r7, #0]
 8000844:	4620      	mov	r0, r4
 8000846:	f001 fd5a 	bl	80022fe <HAL_UART_Transmit>
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	bd90      	pop	{r4, r7, pc}
	...

08000854 <Imprimir_respuesta>:

void Imprimir_respuesta(SIM800 *sim)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	printf("Respuesta: %s\r\n",sim->response);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3304      	adds	r3, #4
 8000860:	4619      	mov	r1, r3
 8000862:	4803      	ldr	r0, [pc, #12]	; (8000870 <Imprimir_respuesta+0x1c>)
 8000864:	f002 fd8c 	bl	8003380 <iprintf>
}
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	0800561c 	.word	0x0800561c

08000874 <Borrar_respuesta>:

void Borrar_respuesta(SIM800 *sim)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	memset(sim->response, 0, LENGTH);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3304      	adds	r3, #4
 8000880:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f002 fc95 	bl	80031b6 <memset>
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <WaitForAnswer>:

int WaitForAnswer(SIM800* sim,int print)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
	int counter=0;
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
	Borrar_respuesta(sim);
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f7ff ffe6 	bl	8000874 <Borrar_respuesta>
	while((strlen(sim->response)==0) && (counter < WAIT_MAX / TIMEOUT) )
 80008a8:	e00c      	b.n	80008c4 <WaitForAnswer+0x30>
	{
		counter++;
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	3301      	adds	r3, #1
 80008ae:	60fb      	str	r3, [r7, #12]
		HAL_UART_Receive (sim->huart, (uint8_t*) sim->response, LENGTH,TIMEOUT);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6818      	ldr	r0, [r3, #0]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	1d19      	adds	r1, r3, #4
 80008b8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008bc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80008c0:	f001 fdaf 	bl	8002422 <HAL_UART_Receive>
	while((strlen(sim->response)==0) && (counter < WAIT_MAX / TIMEOUT) )
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3304      	adds	r3, #4
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d102      	bne.n	80008d4 <WaitForAnswer+0x40>
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	2b13      	cmp	r3, #19
 80008d2:	ddea      	ble.n	80008aa <WaitForAnswer+0x16>
	}
	if(print == 1)
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d109      	bne.n	80008ee <WaitForAnswer+0x5a>
	{
		if(counter ==  WAIT_MAX / TIMEOUT)
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	2b14      	cmp	r3, #20
 80008de:	d103      	bne.n	80008e8 <WaitForAnswer+0x54>
		{
			printf("Tiempo de espera agotado\r\n");
 80008e0:	4808      	ldr	r0, [pc, #32]	; (8000904 <WaitForAnswer+0x70>)
 80008e2:	f002 fdd3 	bl	800348c <puts>
 80008e6:	e002      	b.n	80008ee <WaitForAnswer+0x5a>
		}
		else
		{
			Imprimir_respuesta(sim);
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f7ff ffb3 	bl	8000854 <Imprimir_respuesta>
		}

	}
	return (counter ==  WAIT_MAX / TIMEOUT)? 0:1;
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	2b14      	cmp	r3, #20
 80008f2:	bf14      	ite	ne
 80008f4:	2301      	movne	r3, #1
 80008f6:	2300      	moveq	r3, #0
 80008f8:	b2db      	uxtb	r3, r3
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	0800562c 	.word	0x0800562c

08000908 <SerialDebug>:

void SerialDebug( UART_HandleTypeDef * huart1 , UART_HandleTypeDef * huart2 , char caracter_finalizacion )
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	4613      	mov	r3, r2
 8000914:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_byte = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	75fb      	strb	r3, [r7, #23]

	while(rx_byte != caracter_finalizacion)
 800091a:	e024      	b.n	8000966 <SerialDebug+0x5e>
	{
		while (HAL_UART_Receive(huart2, &rx_byte, 1, 0) == HAL_OK)
		{
		    HAL_UART_Transmit(huart1, &rx_byte, 1, 0xFFFF); // Forward received byte to UART1
 800091c:	f107 0117 	add.w	r1, r7, #23
 8000920:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000924:	2201      	movs	r2, #1
 8000926:	68f8      	ldr	r0, [r7, #12]
 8000928:	f001 fce9 	bl	80022fe <HAL_UART_Transmit>
		while (HAL_UART_Receive(huart2, &rx_byte, 1, 0) == HAL_OK)
 800092c:	f107 0117 	add.w	r1, r7, #23
 8000930:	2300      	movs	r3, #0
 8000932:	2201      	movs	r2, #1
 8000934:	68b8      	ldr	r0, [r7, #8]
 8000936:	f001 fd74 	bl	8002422 <HAL_UART_Receive>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d0ed      	beq.n	800091c <SerialDebug+0x14>
		}
		while (HAL_UART_Receive(huart1, &rx_byte, 1, 0) == HAL_OK)
 8000940:	e007      	b.n	8000952 <SerialDebug+0x4a>
		{
		    HAL_UART_Transmit(huart2, &rx_byte, 1, 0xFFFF); // Forward received byte to UART2
 8000942:	f107 0117 	add.w	r1, r7, #23
 8000946:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800094a:	2201      	movs	r2, #1
 800094c:	68b8      	ldr	r0, [r7, #8]
 800094e:	f001 fcd6 	bl	80022fe <HAL_UART_Transmit>
		while (HAL_UART_Receive(huart1, &rx_byte, 1, 0) == HAL_OK)
 8000952:	f107 0117 	add.w	r1, r7, #23
 8000956:	2300      	movs	r3, #0
 8000958:	2201      	movs	r2, #1
 800095a:	68f8      	ldr	r0, [r7, #12]
 800095c:	f001 fd61 	bl	8002422 <HAL_UART_Receive>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d0ed      	beq.n	8000942 <SerialDebug+0x3a>
	while(rx_byte != caracter_finalizacion)
 8000966:	7dfb      	ldrb	r3, [r7, #23]
 8000968:	79fa      	ldrb	r2, [r7, #7]
 800096a:	429a      	cmp	r2, r3
 800096c:	d1de      	bne.n	800092c <SerialDebug+0x24>
		}


	}
}
 800096e:	bf00      	nop
 8000970:	bf00      	nop
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <EnviarAT>:
/* ------------------------------------------------------------------------------*/
/* ---------------------------- Funciones de status ---------------------------- */
/* ------------------------------------------------------------------------------*/

void EnviarAT(SIM800* sim)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	EnviarComandoAT(sim,"AT\r\n",1);
 8000980:	2201      	movs	r2, #1
 8000982:	4904      	ldr	r1, [pc, #16]	; (8000994 <EnviarAT+0x1c>)
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff ff39 	bl	80007fc <EnviarComandoAT>
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	08005648 	.word	0x08005648

08000998 <ConsultarSignal>:

void ConsultarSignal(SIM800* sim)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	EnviarComandoAT(sim,"AT+CSQ\r\n",1);
 80009a0:	2201      	movs	r2, #1
 80009a2:	4904      	ldr	r1, [pc, #16]	; (80009b4 <ConsultarSignal+0x1c>)
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff ff29 	bl	80007fc <EnviarComandoAT>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	08005650 	.word	0x08005650

080009b8 <ConsultarEstadoSIM>:

void ConsultarEstadoSIM(SIM800* sim)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	EnviarComandoAT(sim,"AT+CPIN?\r\n",1);
 80009c0:	2201      	movs	r2, #1
 80009c2:	4904      	ldr	r1, [pc, #16]	; (80009d4 <ConsultarEstadoSIM+0x1c>)
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f7ff ff19 	bl	80007fc <EnviarComandoAT>
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	0800565c 	.word	0x0800565c

080009d8 <ListarRedesDisponibles>:

void ListarRedesDisponibles(SIM800* sim)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	EnviarComandoAT(sim,"AT+COPS=?\r\n",1);
 80009e0:	2201      	movs	r2, #1
 80009e2:	4906      	ldr	r1, [pc, #24]	; (80009fc <ListarRedesDisponibles+0x24>)
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff ff09 	bl	80007fc <EnviarComandoAT>
	WaitForAnswer(sim,1);
 80009ea:	2101      	movs	r1, #1
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f7ff ff51 	bl	8000894 <WaitForAnswer>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	08005668 	.word	0x08005668

08000a00 <isConnected>:

int isConnected(SIM800 *sim,int print)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
	// Si esta conectado creg me devuelve 0,1. Espero a la coma y me fijo el siguiente caracter
	EnviarComandoAT(sim,"AT+CREG?\r\n",print);
 8000a0a:	683a      	ldr	r2, [r7, #0]
 8000a0c:	4913      	ldr	r1, [pc, #76]	; (8000a5c <isConnected+0x5c>)
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff fef4 	bl	80007fc <EnviarComandoAT>

	int index = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
	while( (*(sim->response +index) != ',') && (*(sim->response+index) != '\0') )
 8000a18:	e002      	b.n	8000a20 <isConnected+0x20>
	{
		index++;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
	while( (*(sim->response +index) != ',') && (*(sim->response+index) != '\0') )
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	1d1a      	adds	r2, r3, #4
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	4413      	add	r3, r2
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b2c      	cmp	r3, #44	; 0x2c
 8000a2c:	d006      	beq.n	8000a3c <isConnected+0x3c>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	1d1a      	adds	r2, r3, #4
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	4413      	add	r3, r2
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d1ee      	bne.n	8000a1a <isConnected+0x1a>
	}

	return (*(sim->response+index+1) == '1' )?1:0;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	1d1a      	adds	r2, r3, #4
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	3301      	adds	r3, #1
 8000a44:	4413      	add	r3, r2
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b31      	cmp	r3, #49	; 0x31
 8000a4a:	bf0c      	ite	eq
 8000a4c:	2301      	moveq	r3, #1
 8000a4e:	2300      	movne	r3, #0
 8000a50:	b2db      	uxtb	r3, r3
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	08005674 	.word	0x08005674

08000a60 <isConnectedGPRS>:

int isConnectedGPRS(SIM800 *sim,int print)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
	// Si esta conectado cgatt me devuelve +CGATT: 1. Espero al espacio y me fijo el siguiente caracter
	EnviarComandoAT(sim,"AT+CGATT?\r\n",print);
 8000a6a:	683a      	ldr	r2, [r7, #0]
 8000a6c:	4913      	ldr	r1, [pc, #76]	; (8000abc <isConnectedGPRS+0x5c>)
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f7ff fec4 	bl	80007fc <EnviarComandoAT>

	int index = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
	while( (*(sim->response +index) != 32) && (*(sim->response+index) != '\0') )
 8000a78:	e002      	b.n	8000a80 <isConnectedGPRS+0x20>
	{
		index++;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
	while( (*(sim->response +index) != 32) && (*(sim->response+index) != '\0') )
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	1d1a      	adds	r2, r3, #4
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4413      	add	r3, r2
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b20      	cmp	r3, #32
 8000a8c:	d006      	beq.n	8000a9c <isConnectedGPRS+0x3c>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	1d1a      	adds	r2, r3, #4
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	4413      	add	r3, r2
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1ee      	bne.n	8000a7a <isConnectedGPRS+0x1a>
	}

	return (*(sim->response+index+1) == '1' )?1:0;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	1d1a      	adds	r2, r3, #4
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	4413      	add	r3, r2
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b31      	cmp	r3, #49	; 0x31
 8000aaa:	bf0c      	ite	eq
 8000aac:	2301      	moveq	r3, #1
 8000aae:	2300      	movne	r3, #0
 8000ab0:	b2db      	uxtb	r3, r3

}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	08005680 	.word	0x08005680

08000ac0 <TestGPRS>:
/* ------------------------------------------------------------------------------*/
/* ------------------------------ Funciones de gprs ----------------------------- */
/* ------------------------------------------------------------------------------*/

void TestGPRS(SIM800* sim,int print)
{
 8000ac0:	b5b0      	push	{r4, r5, r7, lr}
 8000ac2:	b0ce      	sub	sp, #312	; 0x138
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000aca:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000ace:	6018      	str	r0, [r3, #0]
 8000ad0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000ad4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000ad8:	6019      	str	r1, [r3, #0]
	InitGPRS(sim, 0);
 8000ada:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000ade:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	6818      	ldr	r0, [r3, #0]
 8000ae6:	f7ff fe4d 	bl	8000784 <InitGPRS>

	char cmd [LEN_TXT] = "AT+CIPSTART=\"TCP\",\"httpbin.org\",80\r\n";
 8000aea:	4b46      	ldr	r3, [pc, #280]	; (8000c04 <TestGPRS+0x144>)
 8000aec:	f107 04d4 	add.w	r4, r7, #212	; 0xd4
 8000af0:	461d      	mov	r5, r3
 8000af2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000afa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000afe:	6020      	str	r0, [r4, #0]
 8000b00:	3404      	adds	r4, #4
 8000b02:	7021      	strb	r1, [r4, #0]
 8000b04:	f107 03f9 	add.w	r3, r7, #249	; 0xf9
 8000b08:	223f      	movs	r2, #63	; 0x3f
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f002 fb52 	bl	80031b6 <memset>
	EnviarComandoAT(sim,cmd,print);
 8000b12:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b16:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 8000b1a:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8000b1e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b22:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000b26:	6812      	ldr	r2, [r2, #0]
 8000b28:	6818      	ldr	r0, [r3, #0]
 8000b2a:	f7ff fe67 	bl	80007fc <EnviarComandoAT>
	WaitForAnswer(sim, 1); // Aca espero dos veces porque primero va el OK y despues el connect OK
 8000b2e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b32:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000b36:	2101      	movs	r1, #1
 8000b38:	6818      	ldr	r0, [r3, #0]
 8000b3a:	f7ff feab 	bl	8000894 <WaitForAnswer>

	// HTTP Request:
	char cmd2 [LEN_TXT] = "GET /get HTTP/1.1\r\nHost: httpbin.org\r\nAccept: */* \r\n\r\n";
 8000b3e:	4b32      	ldr	r3, [pc, #200]	; (8000c08 <TestGPRS+0x148>)
 8000b40:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000b44:	461d      	mov	r5, r3
 8000b46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b52:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b56:	6020      	str	r0, [r4, #0]
 8000b58:	3404      	adds	r4, #4
 8000b5a:	8021      	strh	r1, [r4, #0]
 8000b5c:	3402      	adds	r4, #2
 8000b5e:	0c0b      	lsrs	r3, r1, #16
 8000b60:	7023      	strb	r3, [r4, #0]
 8000b62:	f107 03a7 	add.w	r3, r7, #167	; 0xa7
 8000b66:	222d      	movs	r2, #45	; 0x2d
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f002 fb23 	bl	80031b6 <memset>
	char cmd3 [LEN_TXT];
	sprintf(cmd3,"AT+CIPSEND=%d\r\n",strlen(cmd2));
 8000b70:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fae9 	bl	800014c <strlen>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	f107 030c 	add.w	r3, r7, #12
 8000b80:	4922      	ldr	r1, [pc, #136]	; (8000c0c <TestGPRS+0x14c>)
 8000b82:	4618      	mov	r0, r3
 8000b84:	f002 fd78 	bl	8003678 <siprintf>
	EnviarComandoAT(sim,cmd3,print);
 8000b88:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b8c:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 8000b90:	f107 010c 	add.w	r1, r7, #12
 8000b94:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b98:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000b9c:	6812      	ldr	r2, [r2, #0]
 8000b9e:	6818      	ldr	r0, [r3, #0]
 8000ba0:	f7ff fe2c 	bl	80007fc <EnviarComandoAT>

	EnviarComandoAT(sim,cmd2,print);
 8000ba4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000ba8:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 8000bac:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000bb0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000bb4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000bb8:	6812      	ldr	r2, [r2, #0]
 8000bba:	6818      	ldr	r0, [r3, #0]
 8000bbc:	f7ff fe1e 	bl	80007fc <EnviarComandoAT>

	// Esperamos la respuesta y despues cerramos
	WaitForAnswer(sim,1);
 8000bc0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000bc4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000bc8:	2101      	movs	r1, #1
 8000bca:	6818      	ldr	r0, [r3, #0]
 8000bcc:	f7ff fe62 	bl	8000894 <WaitForAnswer>
	WaitForAnswer(sim,1);
 8000bd0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000bd4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000bd8:	2101      	movs	r1, #1
 8000bda:	6818      	ldr	r0, [r3, #0]
 8000bdc:	f7ff fe5a 	bl	8000894 <WaitForAnswer>

	EnviarComandoAT(sim,"AT+CIPCLOSE\r\n",print);
 8000be0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000be4:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 8000be8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000bec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000bf0:	6812      	ldr	r2, [r2, #0]
 8000bf2:	4907      	ldr	r1, [pc, #28]	; (8000c10 <TestGPRS+0x150>)
 8000bf4:	6818      	ldr	r0, [r3, #0]
 8000bf6:	f7ff fe01 	bl	80007fc <EnviarComandoAT>

}
 8000bfa:	bf00      	nop
 8000bfc:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bdb0      	pop	{r4, r5, r7, pc}
 8000c04:	080056ac 	.word	0x080056ac
 8000c08:	08005710 	.word	0x08005710
 8000c0c:	0800568c 	.word	0x0800568c
 8000c10:	0800569c 	.word	0x0800569c

08000c14 <SendTCPtoIP>:

// IMPORTANTE -> Esto anda hasta unos 500 bytes x msj!
void SendTCPtoIP(SIM800* sim, char * msj, char* IP, int port,int print)
{
 8000c14:	b590      	push	{r4, r7, lr}
 8000c16:	b0b7      	sub	sp, #220	; 0xdc
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
 8000c20:	603b      	str	r3, [r7, #0]
	InitGPRS(sim, print);
 8000c22:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8000c26:	68f8      	ldr	r0, [r7, #12]
 8000c28:	f7ff fdac 	bl	8000784 <InitGPRS>

	char cmd [LEN_TXT];
	sprintf(cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",IP,port);
 8000c2c:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	491d      	ldr	r1, [pc, #116]	; (8000cac <SendTCPtoIP+0x98>)
 8000c36:	f002 fd1f 	bl	8003678 <siprintf>
	EnviarComandoAT(sim,cmd,print);
 8000c3a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c3e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000c42:	4619      	mov	r1, r3
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	f7ff fdd9 	bl	80007fc <EnviarComandoAT>
	WaitForAnswer(sim, print); // Aca espero dos veces porque primero va el OK y despues el connect OK
 8000c4a:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8000c4e:	68f8      	ldr	r0, [r7, #12]
 8000c50:	f7ff fe20 	bl	8000894 <WaitForAnswer>

	char cmd2 [LEN_TXT] = "AT+CIPSEND\r\n";
 8000c54:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <SendTCPtoIP+0x9c>)
 8000c56:	f107 0410 	add.w	r4, r7, #16
 8000c5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c5c:	c407      	stmia	r4!, {r0, r1, r2}
 8000c5e:	7023      	strb	r3, [r4, #0]
 8000c60:	f107 031d 	add.w	r3, r7, #29
 8000c64:	2257      	movs	r2, #87	; 0x57
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f002 faa4 	bl	80031b6 <memset>
	EnviarComandoAT(sim,cmd2,print);
 8000c6e:	f107 0310 	add.w	r3, r7, #16
 8000c72:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000c76:	4619      	mov	r1, r3
 8000c78:	68f8      	ldr	r0, [r7, #12]
 8000c7a:	f7ff fdbf 	bl	80007fc <EnviarComandoAT>

	Enviar(sim,msj);
 8000c7e:	68b9      	ldr	r1, [r7, #8]
 8000c80:	68f8      	ldr	r0, [r7, #12]
 8000c82:	f7ff fdd0 	bl	8000826 <Enviar>
	Enviar(sim,"\r\n\032");
 8000c86:	490b      	ldr	r1, [pc, #44]	; (8000cb4 <SendTCPtoIP+0xa0>)
 8000c88:	68f8      	ldr	r0, [r7, #12]
 8000c8a:	f7ff fdcc 	bl	8000826 <Enviar>
	WaitForAnswer(sim, print);
 8000c8e:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8000c92:	68f8      	ldr	r0, [r7, #12]
 8000c94:	f7ff fdfe 	bl	8000894 <WaitForAnswer>

	EnviarComandoAT(sim,"AT+CIPCLOSE\r\n",print);
 8000c98:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000c9c:	4906      	ldr	r1, [pc, #24]	; (8000cb8 <SendTCPtoIP+0xa4>)
 8000c9e:	68f8      	ldr	r0, [r7, #12]
 8000ca0:	f7ff fdac 	bl	80007fc <EnviarComandoAT>

}
 8000ca4:	bf00      	nop
 8000ca6:	37dc      	adds	r7, #220	; 0xdc
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd90      	pop	{r4, r7, pc}
 8000cac:	08005774 	.word	0x08005774
 8000cb0:	08005794 	.word	0x08005794
 8000cb4:	08005790 	.word	0x08005790
 8000cb8:	0800569c 	.word	0x0800569c

08000cbc <EnviarSMS>:
/* ------------------------------------------------------------------------------*/
/* ------------------------------ Funciones de sms ----------------------------- */
/* ------------------------------------------------------------------------------*/

void EnviarSMS(SIM800 * sim, char * numero, char* mensaje, int print )
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b092      	sub	sp, #72	; 0x48
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
 8000cc8:	603b      	str	r3, [r7, #0]
	char cmd [LEN_CMD];

	sprintf(cmd,"AT+CMGS=\"%s\"\r\n",numero);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	490b      	ldr	r1, [pc, #44]	; (8000d00 <EnviarSMS+0x44>)
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f002 fcd0 	bl	8003678 <siprintf>

	EnviarComandoAT(sim,cmd,print);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	683a      	ldr	r2, [r7, #0]
 8000cde:	4619      	mov	r1, r3
 8000ce0:	68f8      	ldr	r0, [r7, #12]
 8000ce2:	f7ff fd8b 	bl	80007fc <EnviarComandoAT>

	Enviar(sim,mensaje);
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	68f8      	ldr	r0, [r7, #12]
 8000cea:	f7ff fd9c 	bl	8000826 <Enviar>
	Enviar(sim,"\r\n\032");
 8000cee:	4905      	ldr	r1, [pc, #20]	; (8000d04 <EnviarSMS+0x48>)
 8000cf0:	68f8      	ldr	r0, [r7, #12]
 8000cf2:	f7ff fd98 	bl	8000826 <Enviar>

}
 8000cf6:	bf00      	nop
 8000cf8:	3748      	adds	r7, #72	; 0x48
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	080057f8 	.word	0x080057f8
 8000d04:	08005790 	.word	0x08005790

08000d08 <BorrarAllSMS>:

	EnviarComandoAT(sim,"AT+CMGL=\"ALL\"\r\n",1);
}

void BorrarAllSMS(SIM800 *sim, int print)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
	EnviarComandoAT(sim,"AT+CMGDA=\"DEL ALL\"\r\n",print);
 8000d12:	683a      	ldr	r2, [r7, #0]
 8000d14:	4903      	ldr	r1, [pc, #12]	; (8000d24 <BorrarAllSMS+0x1c>)
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff fd70 	bl	80007fc <EnviarComandoAT>
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	08005818 	.word	0x08005818

08000d28 <LeerSMS_i>:

void LeerSMS_i(SIM800 *sim, int i, int print)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b092      	sub	sp, #72	; 0x48
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
	char msj [LEN_CMD];
	sprintf(msj,"AT+CMGR=%d\r\n",i);
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	68ba      	ldr	r2, [r7, #8]
 8000d3a:	4907      	ldr	r1, [pc, #28]	; (8000d58 <LeerSMS_i+0x30>)
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f002 fc9b 	bl	8003678 <siprintf>
	EnviarComandoAT(sim,msj,print);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	68f8      	ldr	r0, [r7, #12]
 8000d4c:	f7ff fd56 	bl	80007fc <EnviarComandoAT>
}
 8000d50:	bf00      	nop
 8000d52:	3748      	adds	r7, #72	; 0x48
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	08005830 	.word	0x08005830

08000d5c <ListenSMS>:

// Esto se rompio arreglalo antes de irte para ser feliz
int ListenSMS(SIM800 * sim, UART_HandleTypeDef * huart1 )
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
	Borrar_respuesta(sim);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff fd84 	bl	8000874 <Borrar_respuesta>
	uint8_t rx_byte = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	72fb      	strb	r3, [r7, #11]

	while ( ( strlen(sim->response) == 0 ) )
 8000d70:	e01d      	b.n	8000dae <ListenSMS+0x52>
	{
		HAL_UART_Receive (sim->huart, (uint8_t*) sim->response, LENGTH,TIMEOUT);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6818      	ldr	r0, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	1d19      	adds	r1, r3, #4
 8000d7a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d7e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d82:	f001 fb4e 	bl	8002422 <HAL_UART_Receive>

		if (__HAL_UART_GET_FLAG(huart1, UART_FLAG_RXNE) == SET)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f003 0320 	and.w	r3, r3, #32
 8000d90:	2b20      	cmp	r3, #32
 8000d92:	d10c      	bne.n	8000dae <ListenSMS+0x52>
		{
		    HAL_UART_Receive (huart1, &rx_byte, 1,TIMEOUT); // Leer el dato recibido en UART1
 8000d94:	f107 010b 	add.w	r1, r7, #11
 8000d98:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	6838      	ldr	r0, [r7, #0]
 8000da0:	f001 fb3f 	bl	8002422 <HAL_UART_Receive>
		    if(rx_byte==26)
 8000da4:	7afb      	ldrb	r3, [r7, #11]
 8000da6:	2b1a      	cmp	r3, #26
 8000da8:	d101      	bne.n	8000dae <ListenSMS+0x52>
		    {
		    	return 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	e013      	b.n	8000dd6 <ListenSMS+0x7a>
	while ( ( strlen(sim->response) == 0 ) )
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3304      	adds	r3, #4
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d0dc      	beq.n	8000d72 <ListenSMS+0x16>
		    }
		}
	}

	int indice = ExtraerIndiceCMTI(sim->response);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3304      	adds	r3, #4
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 f80e 	bl	8000dde <ExtraerIndiceCMTI>
 8000dc2:	60f8      	str	r0, [r7, #12]
	ExtraerTextoDeSMS(sim,indice,sim->txt_last_sms);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 8000dca:	461a      	mov	r2, r3
 8000dcc:	68f9      	ldr	r1, [r7, #12]
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f000 f820 	bl	8000e14 <ExtraerTextoDeSMS>
	return 1;
 8000dd4:	2301      	movs	r3, #1

}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <ExtraerIndiceCMTI>:


int ExtraerIndiceCMTI(char * codigo)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b085      	sub	sp, #20
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
	// Forma del codigo -> +CMTI: "SM",5

	int i = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
	while(*(codigo+i) !=',' ){i++;}
 8000dea:	e002      	b.n	8000df2 <ExtraerIndiceCMTI+0x14>
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	3301      	adds	r3, #1
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	4413      	add	r3, r2
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b2c      	cmp	r3, #44	; 0x2c
 8000dfc:	d1f6      	bne.n	8000dec <ExtraerIndiceCMTI+0xe>

	return *(codigo+i+1)-48;	// Para pasarlo a entero
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	3301      	adds	r3, #1
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	3b30      	subs	r3, #48	; 0x30
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3714      	adds	r7, #20
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr

08000e14 <ExtraerTextoDeSMS>:

void ExtraerTextoDeSMS(SIM800 *sim, int indice, char * texto)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
	LeerSMS_i(sim,indice,0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	68b9      	ldr	r1, [r7, #8]
 8000e24:	68f8      	ldr	r0, [r7, #12]
 8000e26:	f7ff ff7f 	bl	8000d28 <LeerSMS_i>
	// Extrae el texto del SMS guardado en la posicion i
	// Formato del codigo -> 3,"READ/UNREAD","NUM","","FECHA" MSJ
	// Voy a contar comillas, serían 8

	int comillas = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
	int tam_header = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
	while(comillas < 8)
 8000e32:	e00c      	b.n	8000e4e <ExtraerTextoDeSMS+0x3a>
	{
		if(*(sim->response + tam_header) == '"') { comillas++; }
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	1d1a      	adds	r2, r3, #4
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b22      	cmp	r3, #34	; 0x22
 8000e40:	d102      	bne.n	8000e48 <ExtraerTextoDeSMS+0x34>
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3301      	adds	r3, #1
 8000e46:	61fb      	str	r3, [r7, #28]
		tam_header++;
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	61bb      	str	r3, [r7, #24]
	while(comillas < 8)
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	2b07      	cmp	r3, #7
 8000e52:	ddef      	ble.n	8000e34 <ExtraerTextoDeSMS+0x20>
	}

	int j;

	for (j = 0; j<strlen(sim->response)-tam_header;j++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	e00d      	b.n	8000e76 <ExtraerTextoDeSMS+0x62>
	{
		*(texto+j) = *(sim->response + tam_header + j);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	1d1a      	adds	r2, r3, #4
 8000e5e:	69b9      	ldr	r1, [r7, #24]
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	440b      	add	r3, r1
 8000e64:	441a      	add	r2, r3
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	6879      	ldr	r1, [r7, #4]
 8000e6a:	440b      	add	r3, r1
 8000e6c:	7812      	ldrb	r2, [r2, #0]
 8000e6e:	701a      	strb	r2, [r3, #0]
	for (j = 0; j<strlen(sim->response)-tam_header;j++)
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	3301      	adds	r3, #1
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff f966 	bl	800014c <strlen>
 8000e80:	4602      	mov	r2, r0
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	1ad2      	subs	r2, r2, r3
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d8e6      	bhi.n	8000e5a <ExtraerTextoDeSMS+0x46>
	}
	*(texto+j+1)='\0';
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	4413      	add	r3, r2
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	3720      	adds	r7, #32
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <HAL_MspInit+0x5c>)
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	4a14      	ldr	r2, [pc, #80]	; (8000efc <HAL_MspInit+0x5c>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6193      	str	r3, [r2, #24]
 8000eb2:	4b12      	ldr	r3, [pc, #72]	; (8000efc <HAL_MspInit+0x5c>)
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <HAL_MspInit+0x5c>)
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <HAL_MspInit+0x5c>)
 8000ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	61d3      	str	r3, [r2, #28]
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <HAL_MspInit+0x5c>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <HAL_MspInit+0x60>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <HAL_MspInit+0x60>)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40010000 	.word	0x40010000

08000f04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	; 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0318 	add.w	r3, r7, #24
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a3f      	ldr	r2, [pc, #252]	; (800101c <HAL_UART_MspInit+0x118>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d13a      	bne.n	8000f9a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f24:	4b3e      	ldr	r3, [pc, #248]	; (8001020 <HAL_UART_MspInit+0x11c>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	4a3d      	ldr	r2, [pc, #244]	; (8001020 <HAL_UART_MspInit+0x11c>)
 8000f2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f2e:	6193      	str	r3, [r2, #24]
 8000f30:	4b3b      	ldr	r3, [pc, #236]	; (8001020 <HAL_UART_MspInit+0x11c>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f38:	617b      	str	r3, [r7, #20]
 8000f3a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3c:	4b38      	ldr	r3, [pc, #224]	; (8001020 <HAL_UART_MspInit+0x11c>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	4a37      	ldr	r2, [pc, #220]	; (8001020 <HAL_UART_MspInit+0x11c>)
 8000f42:	f043 0304 	orr.w	r3, r3, #4
 8000f46:	6193      	str	r3, [r2, #24]
 8000f48:	4b35      	ldr	r3, [pc, #212]	; (8001020 <HAL_UART_MspInit+0x11c>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	f003 0304 	and.w	r3, r3, #4
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	f107 0318 	add.w	r3, r7, #24
 8000f66:	4619      	mov	r1, r3
 8000f68:	482e      	ldr	r0, [pc, #184]	; (8001024 <HAL_UART_MspInit+0x120>)
 8000f6a:	f000 fbab 	bl	80016c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7c:	f107 0318 	add.w	r3, r7, #24
 8000f80:	4619      	mov	r1, r3
 8000f82:	4828      	ldr	r0, [pc, #160]	; (8001024 <HAL_UART_MspInit+0x120>)
 8000f84:	f000 fb9e 	bl	80016c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	2025      	movs	r0, #37	; 0x25
 8000f8e:	f000 fab2 	bl	80014f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f92:	2025      	movs	r0, #37	; 0x25
 8000f94:	f000 facb 	bl	800152e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f98:	e03c      	b.n	8001014 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a22      	ldr	r2, [pc, #136]	; (8001028 <HAL_UART_MspInit+0x124>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d137      	bne.n	8001014 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fa4:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <HAL_UART_MspInit+0x11c>)
 8000fa6:	69db      	ldr	r3, [r3, #28]
 8000fa8:	4a1d      	ldr	r2, [pc, #116]	; (8001020 <HAL_UART_MspInit+0x11c>)
 8000faa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fae:	61d3      	str	r3, [r2, #28]
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <HAL_UART_MspInit+0x11c>)
 8000fb2:	69db      	ldr	r3, [r3, #28]
 8000fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbc:	4b18      	ldr	r3, [pc, #96]	; (8001020 <HAL_UART_MspInit+0x11c>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a17      	ldr	r2, [pc, #92]	; (8001020 <HAL_UART_MspInit+0x11c>)
 8000fc2:	f043 0304 	orr.w	r3, r3, #4
 8000fc6:	6193      	str	r3, [r2, #24]
 8000fc8:	4b15      	ldr	r3, [pc, #84]	; (8001020 <HAL_UART_MspInit+0x11c>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe0:	f107 0318 	add.w	r3, r7, #24
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	480f      	ldr	r0, [pc, #60]	; (8001024 <HAL_UART_MspInit+0x120>)
 8000fe8:	f000 fb6c 	bl	80016c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fec:	2308      	movs	r3, #8
 8000fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff8:	f107 0318 	add.w	r3, r7, #24
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4809      	ldr	r0, [pc, #36]	; (8001024 <HAL_UART_MspInit+0x120>)
 8001000:	f000 fb60 	bl	80016c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	2100      	movs	r1, #0
 8001008:	2026      	movs	r0, #38	; 0x26
 800100a:	f000 fa74 	bl	80014f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800100e:	2026      	movs	r0, #38	; 0x26
 8001010:	f000 fa8d 	bl	800152e <HAL_NVIC_EnableIRQ>
}
 8001014:	bf00      	nop
 8001016:	3728      	adds	r7, #40	; 0x28
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40013800 	.word	0x40013800
 8001020:	40021000 	.word	0x40021000
 8001024:	40010800 	.word	0x40010800
 8001028:	40004400 	.word	0x40004400

0800102c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <NMI_Handler+0x4>

08001032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <HardFault_Handler+0x4>

08001038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <MemManage_Handler+0x4>

0800103e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <BusFault_Handler+0x4>

08001044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <UsageFault_Handler+0x4>

0800104a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr

08001056 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr

08001062 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr

0800106e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001072:	f000 f929 	bl	80012c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <USART1_IRQHandler+0x10>)
 8001082:	f001 fa71 	bl	8002568 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2000008c 	.word	0x2000008c

08001090 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <USART2_IRQHandler+0x10>)
 8001096:	f001 fa67 	bl	8002568 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200000d0 	.word	0x200000d0

080010a4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	e00a      	b.n	80010cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010b6:	f7ff f863 	bl	8000180 <__io_getchar>
 80010ba:	4601      	mov	r1, r0
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	1c5a      	adds	r2, r3, #1
 80010c0:	60ba      	str	r2, [r7, #8]
 80010c2:	b2ca      	uxtb	r2, r1
 80010c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	3301      	adds	r3, #1
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	697a      	ldr	r2, [r7, #20]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	dbf0      	blt.n	80010b6 <_read+0x12>
  }

  return len;
 80010d4:	687b      	ldr	r3, [r7, #4]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	60f8      	str	r0, [r7, #12]
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	e009      	b.n	8001104 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	1c5a      	adds	r2, r3, #1
 80010f4:	60ba      	str	r2, [r7, #8]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff f82f 	bl	800015c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	3301      	adds	r3, #1
 8001102:	617b      	str	r3, [r7, #20]
 8001104:	697a      	ldr	r2, [r7, #20]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	429a      	cmp	r2, r3
 800110a:	dbf1      	blt.n	80010f0 <_write+0x12>
  }
  return len;
 800110c:	687b      	ldr	r3, [r7, #4]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <_close>:

int _close(int file)
{
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001122:	4618      	mov	r0, r3
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800113c:	605a      	str	r2, [r3, #4]
  return 0;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr

0800114a <_isatty>:

int _isatty(int file)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001152:	2301      	movs	r3, #1
}
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr

0800115e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800115e:	b480      	push	{r7}
 8001160:	b085      	sub	sp, #20
 8001162:	af00      	add	r7, sp, #0
 8001164:	60f8      	str	r0, [r7, #12]
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
	...

08001178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001180:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <_sbrk+0x5c>)
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <_sbrk+0x60>)
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <_sbrk+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d102      	bne.n	800119a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <_sbrk+0x64>)
 8001196:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <_sbrk+0x68>)
 8001198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <_sbrk+0x64>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d207      	bcs.n	80011b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a8:	f001 fdd6 	bl	8002d58 <__errno>
 80011ac:	4603      	mov	r3, r0
 80011ae:	220c      	movs	r2, #12
 80011b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295
 80011b6:	e009      	b.n	80011cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <_sbrk+0x64>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <_sbrk+0x64>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	4a05      	ldr	r2, [pc, #20]	; (80011dc <_sbrk+0x64>)
 80011c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ca:	68fb      	ldr	r3, [r7, #12]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20005000 	.word	0x20005000
 80011d8:	00000400 	.word	0x00000400
 80011dc:	20000114 	.word	0x20000114
 80011e0:	20000130 	.word	0x20000130

080011e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr

080011f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f0:	480c      	ldr	r0, [pc, #48]	; (8001224 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011f2:	490d      	ldr	r1, [pc, #52]	; (8001228 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011f4:	4a0d      	ldr	r2, [pc, #52]	; (800122c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f8:	e002      	b.n	8001200 <LoopCopyDataInit>

080011fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fe:	3304      	adds	r3, #4

08001200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001204:	d3f9      	bcc.n	80011fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001208:	4c0a      	ldr	r4, [pc, #40]	; (8001234 <LoopFillZerobss+0x22>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800120c:	e001      	b.n	8001212 <LoopFillZerobss>

0800120e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001210:	3204      	adds	r2, #4

08001212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001214:	d3fb      	bcc.n	800120e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001216:	f7ff ffe5 	bl	80011e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800121a:	f001 ff97 	bl	800314c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800121e:	f7fe ffd5 	bl	80001cc <main>
  bx lr
 8001222:	4770      	bx	lr
  ldr r0, =_sdata
 8001224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001228:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800122c:	08005a30 	.word	0x08005a30
  ldr r2, =_sbss
 8001230:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001234:	2000012c 	.word	0x2000012c

08001238 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001238:	e7fe      	b.n	8001238 <ADC1_2_IRQHandler>
	...

0800123c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <HAL_Init+0x28>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a07      	ldr	r2, [pc, #28]	; (8001264 <HAL_Init+0x28>)
 8001246:	f043 0310 	orr.w	r3, r3, #16
 800124a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800124c:	2003      	movs	r0, #3
 800124e:	f000 f947 	bl	80014e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001252:	200f      	movs	r0, #15
 8001254:	f000 f808 	bl	8001268 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001258:	f7ff fe22 	bl	8000ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40022000 	.word	0x40022000

08001268 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_InitTick+0x54>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_InitTick+0x58>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4619      	mov	r1, r3
 800127a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001282:	fbb2 f3f3 	udiv	r3, r2, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f95f 	bl	800154a <HAL_SYSTICK_Config>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e00e      	b.n	80012b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b0f      	cmp	r3, #15
 800129a:	d80a      	bhi.n	80012b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800129c:	2200      	movs	r2, #0
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f000 f927 	bl	80014f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a8:	4a06      	ldr	r2, [pc, #24]	; (80012c4 <HAL_InitTick+0x5c>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	e000      	b.n	80012b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000000 	.word	0x20000000
 80012c0:	20000008 	.word	0x20000008
 80012c4:	20000004 	.word	0x20000004

080012c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <HAL_IncTick+0x1c>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <HAL_IncTick+0x20>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	4a03      	ldr	r2, [pc, #12]	; (80012e8 <HAL_IncTick+0x20>)
 80012da:	6013      	str	r3, [r2, #0]
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	20000008 	.word	0x20000008
 80012e8:	20000118 	.word	0x20000118

080012ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return uwTick;
 80012f0:	4b02      	ldr	r3, [pc, #8]	; (80012fc <HAL_GetTick+0x10>)
 80012f2:	681b      	ldr	r3, [r3, #0]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	20000118 	.word	0x20000118

08001300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001308:	f7ff fff0 	bl	80012ec <HAL_GetTick>
 800130c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001318:	d005      	beq.n	8001326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <HAL_Delay+0x44>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001326:	bf00      	nop
 8001328:	f7ff ffe0 	bl	80012ec <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	429a      	cmp	r2, r3
 8001336:	d8f7      	bhi.n	8001328 <HAL_Delay+0x28>
  {
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000008 	.word	0x20000008

08001348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001364:	4013      	ands	r3, r2
 8001366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001370:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137a:	4a04      	ldr	r2, [pc, #16]	; (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	60d3      	str	r3, [r2, #12]
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	0a1b      	lsrs	r3, r3, #8
 800139a:	f003 0307 	and.w	r3, r3, #7
}
 800139e:	4618      	mov	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	db0b      	blt.n	80013d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	f003 021f 	and.w	r2, r3, #31
 80013c4:	4906      	ldr	r1, [pc, #24]	; (80013e0 <__NVIC_EnableIRQ+0x34>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	095b      	lsrs	r3, r3, #5
 80013cc:	2001      	movs	r0, #1
 80013ce:	fa00 f202 	lsl.w	r2, r0, r2
 80013d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	e000e100 	.word	0xe000e100

080013e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	db0a      	blt.n	800140e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	490c      	ldr	r1, [pc, #48]	; (8001430 <__NVIC_SetPriority+0x4c>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	0112      	lsls	r2, r2, #4
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	440b      	add	r3, r1
 8001408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800140c:	e00a      	b.n	8001424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4908      	ldr	r1, [pc, #32]	; (8001434 <__NVIC_SetPriority+0x50>)
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	3b04      	subs	r3, #4
 800141c:	0112      	lsls	r2, r2, #4
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	440b      	add	r3, r1
 8001422:	761a      	strb	r2, [r3, #24]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000e100 	.word	0xe000e100
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001438:	b480      	push	{r7}
 800143a:	b089      	sub	sp, #36	; 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f1c3 0307 	rsb	r3, r3, #7
 8001452:	2b04      	cmp	r3, #4
 8001454:	bf28      	it	cs
 8001456:	2304      	movcs	r3, #4
 8001458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3304      	adds	r3, #4
 800145e:	2b06      	cmp	r3, #6
 8001460:	d902      	bls.n	8001468 <NVIC_EncodePriority+0x30>
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3b03      	subs	r3, #3
 8001466:	e000      	b.n	800146a <NVIC_EncodePriority+0x32>
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	f04f 32ff 	mov.w	r2, #4294967295
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	401a      	ands	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001480:	f04f 31ff 	mov.w	r1, #4294967295
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	fa01 f303 	lsl.w	r3, r1, r3
 800148a:	43d9      	mvns	r1, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	4313      	orrs	r3, r2
         );
}
 8001492:	4618      	mov	r0, r3
 8001494:	3724      	adds	r7, #36	; 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014ac:	d301      	bcc.n	80014b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ae:	2301      	movs	r3, #1
 80014b0:	e00f      	b.n	80014d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b2:	4a0a      	ldr	r2, [pc, #40]	; (80014dc <SysTick_Config+0x40>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ba:	210f      	movs	r1, #15
 80014bc:	f04f 30ff 	mov.w	r0, #4294967295
 80014c0:	f7ff ff90 	bl	80013e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <SysTick_Config+0x40>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ca:	4b04      	ldr	r3, [pc, #16]	; (80014dc <SysTick_Config+0x40>)
 80014cc:	2207      	movs	r2, #7
 80014ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	e000e010 	.word	0xe000e010

080014e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff ff2d 	bl	8001348 <__NVIC_SetPriorityGrouping>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b086      	sub	sp, #24
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001508:	f7ff ff42 	bl	8001390 <__NVIC_GetPriorityGrouping>
 800150c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	6978      	ldr	r0, [r7, #20]
 8001514:	f7ff ff90 	bl	8001438 <NVIC_EncodePriority>
 8001518:	4602      	mov	r2, r0
 800151a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151e:	4611      	mov	r1, r2
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff5f 	bl	80013e4 <__NVIC_SetPriority>
}
 8001526:	bf00      	nop
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	4603      	mov	r3, r0
 8001536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff35 	bl	80013ac <__NVIC_EnableIRQ>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff ffa2 	bl	800149c <SysTick_Config>
 8001558:	4603      	mov	r3, r0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001562:	b480      	push	{r7}
 8001564:	b085      	sub	sp, #20
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001574:	2b02      	cmp	r3, #2
 8001576:	d008      	beq.n	800158a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2204      	movs	r2, #4
 800157c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e020      	b.n	80015cc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 020e 	bic.w	r2, r2, #14
 8001598:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 0201 	bic.w	r2, r2, #1
 80015a8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b2:	2101      	movs	r1, #1
 80015b4:	fa01 f202 	lsl.w	r2, r1, r2
 80015b8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2201      	movs	r2, #1
 80015be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr
	...

080015d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d005      	beq.n	80015fa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2204      	movs	r2, #4
 80015f2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	73fb      	strb	r3, [r7, #15]
 80015f8:	e051      	b.n	800169e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 020e 	bic.w	r2, r2, #14
 8001608:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0201 	bic.w	r2, r2, #1
 8001618:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a22      	ldr	r2, [pc, #136]	; (80016a8 <HAL_DMA_Abort_IT+0xd0>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d029      	beq.n	8001678 <HAL_DMA_Abort_IT+0xa0>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a20      	ldr	r2, [pc, #128]	; (80016ac <HAL_DMA_Abort_IT+0xd4>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d022      	beq.n	8001674 <HAL_DMA_Abort_IT+0x9c>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a1f      	ldr	r2, [pc, #124]	; (80016b0 <HAL_DMA_Abort_IT+0xd8>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d01a      	beq.n	800166e <HAL_DMA_Abort_IT+0x96>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a1d      	ldr	r2, [pc, #116]	; (80016b4 <HAL_DMA_Abort_IT+0xdc>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d012      	beq.n	8001668 <HAL_DMA_Abort_IT+0x90>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a1c      	ldr	r2, [pc, #112]	; (80016b8 <HAL_DMA_Abort_IT+0xe0>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d00a      	beq.n	8001662 <HAL_DMA_Abort_IT+0x8a>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a1a      	ldr	r2, [pc, #104]	; (80016bc <HAL_DMA_Abort_IT+0xe4>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d102      	bne.n	800165c <HAL_DMA_Abort_IT+0x84>
 8001656:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800165a:	e00e      	b.n	800167a <HAL_DMA_Abort_IT+0xa2>
 800165c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001660:	e00b      	b.n	800167a <HAL_DMA_Abort_IT+0xa2>
 8001662:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001666:	e008      	b.n	800167a <HAL_DMA_Abort_IT+0xa2>
 8001668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800166c:	e005      	b.n	800167a <HAL_DMA_Abort_IT+0xa2>
 800166e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001672:	e002      	b.n	800167a <HAL_DMA_Abort_IT+0xa2>
 8001674:	2310      	movs	r3, #16
 8001676:	e000      	b.n	800167a <HAL_DMA_Abort_IT+0xa2>
 8001678:	2301      	movs	r3, #1
 800167a:	4a11      	ldr	r2, [pc, #68]	; (80016c0 <HAL_DMA_Abort_IT+0xe8>)
 800167c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	4798      	blx	r3
    } 
  }
  return status;
 800169e:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40020008 	.word	0x40020008
 80016ac:	4002001c 	.word	0x4002001c
 80016b0:	40020030 	.word	0x40020030
 80016b4:	40020044 	.word	0x40020044
 80016b8:	40020058 	.word	0x40020058
 80016bc:	4002006c 	.word	0x4002006c
 80016c0:	40020000 	.word	0x40020000

080016c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b08b      	sub	sp, #44	; 0x2c
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ce:	2300      	movs	r3, #0
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016d2:	2300      	movs	r3, #0
 80016d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d6:	e169      	b.n	80019ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016d8:	2201      	movs	r2, #1
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	69fa      	ldr	r2, [r7, #28]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	f040 8158 	bne.w	80019a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	4a9a      	ldr	r2, [pc, #616]	; (8001964 <HAL_GPIO_Init+0x2a0>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d05e      	beq.n	80017be <HAL_GPIO_Init+0xfa>
 8001700:	4a98      	ldr	r2, [pc, #608]	; (8001964 <HAL_GPIO_Init+0x2a0>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d875      	bhi.n	80017f2 <HAL_GPIO_Init+0x12e>
 8001706:	4a98      	ldr	r2, [pc, #608]	; (8001968 <HAL_GPIO_Init+0x2a4>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d058      	beq.n	80017be <HAL_GPIO_Init+0xfa>
 800170c:	4a96      	ldr	r2, [pc, #600]	; (8001968 <HAL_GPIO_Init+0x2a4>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d86f      	bhi.n	80017f2 <HAL_GPIO_Init+0x12e>
 8001712:	4a96      	ldr	r2, [pc, #600]	; (800196c <HAL_GPIO_Init+0x2a8>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d052      	beq.n	80017be <HAL_GPIO_Init+0xfa>
 8001718:	4a94      	ldr	r2, [pc, #592]	; (800196c <HAL_GPIO_Init+0x2a8>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d869      	bhi.n	80017f2 <HAL_GPIO_Init+0x12e>
 800171e:	4a94      	ldr	r2, [pc, #592]	; (8001970 <HAL_GPIO_Init+0x2ac>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d04c      	beq.n	80017be <HAL_GPIO_Init+0xfa>
 8001724:	4a92      	ldr	r2, [pc, #584]	; (8001970 <HAL_GPIO_Init+0x2ac>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d863      	bhi.n	80017f2 <HAL_GPIO_Init+0x12e>
 800172a:	4a92      	ldr	r2, [pc, #584]	; (8001974 <HAL_GPIO_Init+0x2b0>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d046      	beq.n	80017be <HAL_GPIO_Init+0xfa>
 8001730:	4a90      	ldr	r2, [pc, #576]	; (8001974 <HAL_GPIO_Init+0x2b0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d85d      	bhi.n	80017f2 <HAL_GPIO_Init+0x12e>
 8001736:	2b12      	cmp	r3, #18
 8001738:	d82a      	bhi.n	8001790 <HAL_GPIO_Init+0xcc>
 800173a:	2b12      	cmp	r3, #18
 800173c:	d859      	bhi.n	80017f2 <HAL_GPIO_Init+0x12e>
 800173e:	a201      	add	r2, pc, #4	; (adr r2, 8001744 <HAL_GPIO_Init+0x80>)
 8001740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001744:	080017bf 	.word	0x080017bf
 8001748:	08001799 	.word	0x08001799
 800174c:	080017ab 	.word	0x080017ab
 8001750:	080017ed 	.word	0x080017ed
 8001754:	080017f3 	.word	0x080017f3
 8001758:	080017f3 	.word	0x080017f3
 800175c:	080017f3 	.word	0x080017f3
 8001760:	080017f3 	.word	0x080017f3
 8001764:	080017f3 	.word	0x080017f3
 8001768:	080017f3 	.word	0x080017f3
 800176c:	080017f3 	.word	0x080017f3
 8001770:	080017f3 	.word	0x080017f3
 8001774:	080017f3 	.word	0x080017f3
 8001778:	080017f3 	.word	0x080017f3
 800177c:	080017f3 	.word	0x080017f3
 8001780:	080017f3 	.word	0x080017f3
 8001784:	080017f3 	.word	0x080017f3
 8001788:	080017a1 	.word	0x080017a1
 800178c:	080017b5 	.word	0x080017b5
 8001790:	4a79      	ldr	r2, [pc, #484]	; (8001978 <HAL_GPIO_Init+0x2b4>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d013      	beq.n	80017be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001796:	e02c      	b.n	80017f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	623b      	str	r3, [r7, #32]
          break;
 800179e:	e029      	b.n	80017f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	3304      	adds	r3, #4
 80017a6:	623b      	str	r3, [r7, #32]
          break;
 80017a8:	e024      	b.n	80017f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	3308      	adds	r3, #8
 80017b0:	623b      	str	r3, [r7, #32]
          break;
 80017b2:	e01f      	b.n	80017f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	330c      	adds	r3, #12
 80017ba:	623b      	str	r3, [r7, #32]
          break;
 80017bc:	e01a      	b.n	80017f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d102      	bne.n	80017cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017c6:	2304      	movs	r3, #4
 80017c8:	623b      	str	r3, [r7, #32]
          break;
 80017ca:	e013      	b.n	80017f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d105      	bne.n	80017e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017d4:	2308      	movs	r3, #8
 80017d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69fa      	ldr	r2, [r7, #28]
 80017dc:	611a      	str	r2, [r3, #16]
          break;
 80017de:	e009      	b.n	80017f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017e0:	2308      	movs	r3, #8
 80017e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	69fa      	ldr	r2, [r7, #28]
 80017e8:	615a      	str	r2, [r3, #20]
          break;
 80017ea:	e003      	b.n	80017f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017ec:	2300      	movs	r3, #0
 80017ee:	623b      	str	r3, [r7, #32]
          break;
 80017f0:	e000      	b.n	80017f4 <HAL_GPIO_Init+0x130>
          break;
 80017f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	2bff      	cmp	r3, #255	; 0xff
 80017f8:	d801      	bhi.n	80017fe <HAL_GPIO_Init+0x13a>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	e001      	b.n	8001802 <HAL_GPIO_Init+0x13e>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3304      	adds	r3, #4
 8001802:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	2bff      	cmp	r3, #255	; 0xff
 8001808:	d802      	bhi.n	8001810 <HAL_GPIO_Init+0x14c>
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	e002      	b.n	8001816 <HAL_GPIO_Init+0x152>
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	3b08      	subs	r3, #8
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	210f      	movs	r1, #15
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	fa01 f303 	lsl.w	r3, r1, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	401a      	ands	r2, r3
 8001828:	6a39      	ldr	r1, [r7, #32]
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	fa01 f303 	lsl.w	r3, r1, r3
 8001830:	431a      	orrs	r2, r3
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 80b1 	beq.w	80019a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001844:	4b4d      	ldr	r3, [pc, #308]	; (800197c <HAL_GPIO_Init+0x2b8>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	4a4c      	ldr	r2, [pc, #304]	; (800197c <HAL_GPIO_Init+0x2b8>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6193      	str	r3, [r2, #24]
 8001850:	4b4a      	ldr	r3, [pc, #296]	; (800197c <HAL_GPIO_Init+0x2b8>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800185c:	4a48      	ldr	r2, [pc, #288]	; (8001980 <HAL_GPIO_Init+0x2bc>)
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	089b      	lsrs	r3, r3, #2
 8001862:	3302      	adds	r3, #2
 8001864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001868:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	220f      	movs	r2, #15
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	4013      	ands	r3, r2
 800187e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a40      	ldr	r2, [pc, #256]	; (8001984 <HAL_GPIO_Init+0x2c0>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d013      	beq.n	80018b0 <HAL_GPIO_Init+0x1ec>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a3f      	ldr	r2, [pc, #252]	; (8001988 <HAL_GPIO_Init+0x2c4>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d00d      	beq.n	80018ac <HAL_GPIO_Init+0x1e8>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a3e      	ldr	r2, [pc, #248]	; (800198c <HAL_GPIO_Init+0x2c8>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d007      	beq.n	80018a8 <HAL_GPIO_Init+0x1e4>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a3d      	ldr	r2, [pc, #244]	; (8001990 <HAL_GPIO_Init+0x2cc>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d101      	bne.n	80018a4 <HAL_GPIO_Init+0x1e0>
 80018a0:	2303      	movs	r3, #3
 80018a2:	e006      	b.n	80018b2 <HAL_GPIO_Init+0x1ee>
 80018a4:	2304      	movs	r3, #4
 80018a6:	e004      	b.n	80018b2 <HAL_GPIO_Init+0x1ee>
 80018a8:	2302      	movs	r3, #2
 80018aa:	e002      	b.n	80018b2 <HAL_GPIO_Init+0x1ee>
 80018ac:	2301      	movs	r3, #1
 80018ae:	e000      	b.n	80018b2 <HAL_GPIO_Init+0x1ee>
 80018b0:	2300      	movs	r3, #0
 80018b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b4:	f002 0203 	and.w	r2, r2, #3
 80018b8:	0092      	lsls	r2, r2, #2
 80018ba:	4093      	lsls	r3, r2
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	4313      	orrs	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018c2:	492f      	ldr	r1, [pc, #188]	; (8001980 <HAL_GPIO_Init+0x2bc>)
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	089b      	lsrs	r3, r3, #2
 80018c8:	3302      	adds	r3, #2
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d006      	beq.n	80018ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018dc:	4b2d      	ldr	r3, [pc, #180]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	492c      	ldr	r1, [pc, #176]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	600b      	str	r3, [r1, #0]
 80018e8:	e006      	b.n	80018f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018ea:	4b2a      	ldr	r3, [pc, #168]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	4928      	ldr	r1, [pc, #160]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d006      	beq.n	8001912 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001904:	4b23      	ldr	r3, [pc, #140]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	4922      	ldr	r1, [pc, #136]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	604b      	str	r3, [r1, #4]
 8001910:	e006      	b.n	8001920 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001912:	4b20      	ldr	r3, [pc, #128]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	43db      	mvns	r3, r3
 800191a:	491e      	ldr	r1, [pc, #120]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 800191c:	4013      	ands	r3, r2
 800191e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d006      	beq.n	800193a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800192c:	4b19      	ldr	r3, [pc, #100]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	4918      	ldr	r1, [pc, #96]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	608b      	str	r3, [r1, #8]
 8001938:	e006      	b.n	8001948 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800193a:	4b16      	ldr	r3, [pc, #88]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	43db      	mvns	r3, r3
 8001942:	4914      	ldr	r1, [pc, #80]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 8001944:	4013      	ands	r3, r2
 8001946:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d021      	beq.n	8001998 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001954:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 8001956:	68da      	ldr	r2, [r3, #12]
 8001958:	490e      	ldr	r1, [pc, #56]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	60cb      	str	r3, [r1, #12]
 8001960:	e021      	b.n	80019a6 <HAL_GPIO_Init+0x2e2>
 8001962:	bf00      	nop
 8001964:	10320000 	.word	0x10320000
 8001968:	10310000 	.word	0x10310000
 800196c:	10220000 	.word	0x10220000
 8001970:	10210000 	.word	0x10210000
 8001974:	10120000 	.word	0x10120000
 8001978:	10110000 	.word	0x10110000
 800197c:	40021000 	.word	0x40021000
 8001980:	40010000 	.word	0x40010000
 8001984:	40010800 	.word	0x40010800
 8001988:	40010c00 	.word	0x40010c00
 800198c:	40011000 	.word	0x40011000
 8001990:	40011400 	.word	0x40011400
 8001994:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_GPIO_Init+0x304>)
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	43db      	mvns	r3, r3
 80019a0:	4909      	ldr	r1, [pc, #36]	; (80019c8 <HAL_GPIO_Init+0x304>)
 80019a2:	4013      	ands	r3, r2
 80019a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	3301      	adds	r3, #1
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	fa22 f303 	lsr.w	r3, r2, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f47f ae8e 	bne.w	80016d8 <HAL_GPIO_Init+0x14>
  }
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	372c      	adds	r7, #44	; 0x2c
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	40010400 	.word	0x40010400

080019cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	807b      	strh	r3, [r7, #2]
 80019d8:	4613      	mov	r3, r2
 80019da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019dc:	787b      	ldrb	r3, [r7, #1]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019e2:	887a      	ldrh	r2, [r7, #2]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019e8:	e003      	b.n	80019f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019ea:	887b      	ldrh	r3, [r7, #2]
 80019ec:	041a      	lsls	r2, r3, #16
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	611a      	str	r2, [r3, #16]
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a0e:	887a      	ldrh	r2, [r7, #2]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4013      	ands	r3, r2
 8001a14:	041a      	lsls	r2, r3, #16
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	43d9      	mvns	r1, r3
 8001a1a:	887b      	ldrh	r3, [r7, #2]
 8001a1c:	400b      	ands	r3, r1
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	611a      	str	r2, [r3, #16]
}
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr
	...

08001a30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e272      	b.n	8001f28 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f000 8087 	beq.w	8001b5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a50:	4b92      	ldr	r3, [pc, #584]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 030c 	and.w	r3, r3, #12
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	d00c      	beq.n	8001a76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a5c:	4b8f      	ldr	r3, [pc, #572]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 030c 	and.w	r3, r3, #12
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d112      	bne.n	8001a8e <HAL_RCC_OscConfig+0x5e>
 8001a68:	4b8c      	ldr	r3, [pc, #560]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a74:	d10b      	bne.n	8001a8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a76:	4b89      	ldr	r3, [pc, #548]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d06c      	beq.n	8001b5c <HAL_RCC_OscConfig+0x12c>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d168      	bne.n	8001b5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e24c      	b.n	8001f28 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a96:	d106      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x76>
 8001a98:	4b80      	ldr	r3, [pc, #512]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a7f      	ldr	r2, [pc, #508]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	e02e      	b.n	8001b04 <HAL_RCC_OscConfig+0xd4>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10c      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x98>
 8001aae:	4b7b      	ldr	r3, [pc, #492]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a7a      	ldr	r2, [pc, #488]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	4b78      	ldr	r3, [pc, #480]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a77      	ldr	r2, [pc, #476]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	e01d      	b.n	8001b04 <HAL_RCC_OscConfig+0xd4>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ad0:	d10c      	bne.n	8001aec <HAL_RCC_OscConfig+0xbc>
 8001ad2:	4b72      	ldr	r3, [pc, #456]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a71      	ldr	r2, [pc, #452]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	4b6f      	ldr	r3, [pc, #444]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a6e      	ldr	r2, [pc, #440]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	e00b      	b.n	8001b04 <HAL_RCC_OscConfig+0xd4>
 8001aec:	4b6b      	ldr	r3, [pc, #428]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a6a      	ldr	r2, [pc, #424]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	4b68      	ldr	r3, [pc, #416]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a67      	ldr	r2, [pc, #412]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d013      	beq.n	8001b34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0c:	f7ff fbee 	bl	80012ec <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b14:	f7ff fbea 	bl	80012ec <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b64      	cmp	r3, #100	; 0x64
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e200      	b.n	8001f28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b26:	4b5d      	ldr	r3, [pc, #372]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0f0      	beq.n	8001b14 <HAL_RCC_OscConfig+0xe4>
 8001b32:	e014      	b.n	8001b5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b34:	f7ff fbda 	bl	80012ec <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b3c:	f7ff fbd6 	bl	80012ec <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b64      	cmp	r3, #100	; 0x64
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e1ec      	b.n	8001f28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4e:	4b53      	ldr	r3, [pc, #332]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f0      	bne.n	8001b3c <HAL_RCC_OscConfig+0x10c>
 8001b5a:	e000      	b.n	8001b5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d063      	beq.n	8001c32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b6a:	4b4c      	ldr	r3, [pc, #304]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 030c 	and.w	r3, r3, #12
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00b      	beq.n	8001b8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b76:	4b49      	ldr	r3, [pc, #292]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d11c      	bne.n	8001bbc <HAL_RCC_OscConfig+0x18c>
 8001b82:	4b46      	ldr	r3, [pc, #280]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d116      	bne.n	8001bbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8e:	4b43      	ldr	r3, [pc, #268]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d005      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x176>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d001      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e1c0      	b.n	8001f28 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba6:	4b3d      	ldr	r3, [pc, #244]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	4939      	ldr	r1, [pc, #228]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bba:	e03a      	b.n	8001c32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d020      	beq.n	8001c06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bc4:	4b36      	ldr	r3, [pc, #216]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bca:	f7ff fb8f 	bl	80012ec <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bd2:	f7ff fb8b 	bl	80012ec <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e1a1      	b.n	8001f28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be4:	4b2d      	ldr	r3, [pc, #180]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0f0      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf0:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	4927      	ldr	r1, [pc, #156]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	600b      	str	r3, [r1, #0]
 8001c04:	e015      	b.n	8001c32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c06:	4b26      	ldr	r3, [pc, #152]	; (8001ca0 <HAL_RCC_OscConfig+0x270>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0c:	f7ff fb6e 	bl	80012ec <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c14:	f7ff fb6a 	bl	80012ec <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e180      	b.n	8001f28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c26:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d03a      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d019      	beq.n	8001c7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c46:	4b17      	ldr	r3, [pc, #92]	; (8001ca4 <HAL_RCC_OscConfig+0x274>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4c:	f7ff fb4e 	bl	80012ec <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c54:	f7ff fb4a 	bl	80012ec <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e160      	b.n	8001f28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c66:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <HAL_RCC_OscConfig+0x26c>)
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0f0      	beq.n	8001c54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c72:	2001      	movs	r0, #1
 8001c74:	f000 fad8 	bl	8002228 <RCC_Delay>
 8001c78:	e01c      	b.n	8001cb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <HAL_RCC_OscConfig+0x274>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c80:	f7ff fb34 	bl	80012ec <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c86:	e00f      	b.n	8001ca8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c88:	f7ff fb30 	bl	80012ec <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d908      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e146      	b.n	8001f28 <HAL_RCC_OscConfig+0x4f8>
 8001c9a:	bf00      	nop
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	42420000 	.word	0x42420000
 8001ca4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca8:	4b92      	ldr	r3, [pc, #584]	; (8001ef4 <HAL_RCC_OscConfig+0x4c4>)
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1e9      	bne.n	8001c88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 80a6 	beq.w	8001e0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cc6:	4b8b      	ldr	r3, [pc, #556]	; (8001ef4 <HAL_RCC_OscConfig+0x4c4>)
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10d      	bne.n	8001cee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	4b88      	ldr	r3, [pc, #544]	; (8001ef4 <HAL_RCC_OscConfig+0x4c4>)
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	4a87      	ldr	r2, [pc, #540]	; (8001ef4 <HAL_RCC_OscConfig+0x4c4>)
 8001cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	61d3      	str	r3, [r2, #28]
 8001cde:	4b85      	ldr	r3, [pc, #532]	; (8001ef4 <HAL_RCC_OscConfig+0x4c4>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cea:	2301      	movs	r3, #1
 8001cec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cee:	4b82      	ldr	r3, [pc, #520]	; (8001ef8 <HAL_RCC_OscConfig+0x4c8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d118      	bne.n	8001d2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cfa:	4b7f      	ldr	r3, [pc, #508]	; (8001ef8 <HAL_RCC_OscConfig+0x4c8>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a7e      	ldr	r2, [pc, #504]	; (8001ef8 <HAL_RCC_OscConfig+0x4c8>)
 8001d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d06:	f7ff faf1 	bl	80012ec <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d0e:	f7ff faed 	bl	80012ec <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b64      	cmp	r3, #100	; 0x64
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e103      	b.n	8001f28 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d20:	4b75      	ldr	r3, [pc, #468]	; (8001ef8 <HAL_RCC_OscConfig+0x4c8>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d106      	bne.n	8001d42 <HAL_RCC_OscConfig+0x312>
 8001d34:	4b6f      	ldr	r3, [pc, #444]	; (8001ef4 <HAL_RCC_OscConfig+0x4c4>)
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	4a6e      	ldr	r2, [pc, #440]	; (8001ef4 <HAL_RCC_OscConfig+0x4c4>)
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	6213      	str	r3, [r2, #32]
 8001d40:	e02d      	b.n	8001d9e <HAL_RCC_OscConfig+0x36e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10c      	bne.n	8001d64 <HAL_RCC_OscConfig+0x334>
 8001d4a:	4b6a      	ldr	r3, [pc, #424]	; (8001ef4 <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	4a69      	ldr	r2, [pc, #420]	; (8001ef4 <HAL_RCC_OscConfig+0x4c4>)
 8001d50:	f023 0301 	bic.w	r3, r3, #1
 8001d54:	6213      	str	r3, [r2, #32]
 8001d56:	4b67      	ldr	r3, [pc, #412]	; (8001ef4 <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	4a66      	ldr	r2, [pc, #408]	; (8001ef4 <HAL_RCC_OscConfig+0x4c4>)
 8001d5c:	f023 0304 	bic.w	r3, r3, #4
 8001d60:	6213      	str	r3, [r2, #32]
 8001d62:	e01c      	b.n	8001d9e <HAL_RCC_OscConfig+0x36e>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	2b05      	cmp	r3, #5
 8001d6a:	d10c      	bne.n	8001d86 <HAL_RCC_OscConfig+0x356>
 8001d6c:	4b61      	ldr	r3, [pc, #388]	; (8001ef4 <HAL_RCC_OscConfig+0x4c4>)
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	4a60      	ldr	r2, [pc, #384]	; (8001ef4 <HAL_RCC_OscConfig+0x4c4>)
 8001d72:	f043 0304 	orr.w	r3, r3, #4
 8001d76:	6213      	str	r3, [r2, #32]
 8001d78:	4b5e      	ldr	r3, [pc, #376]	; (8001ef4 <HAL_RCC_OscConfig+0x4c4>)
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	4a5d      	ldr	r2, [pc, #372]	; (8001ef4 <HAL_RCC_OscConfig+0x4c4>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6213      	str	r3, [r2, #32]
 8001d84:	e00b      	b.n	8001d9e <HAL_RCC_OscConfig+0x36e>
 8001d86:	4b5b      	ldr	r3, [pc, #364]	; (8001ef4 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	4a5a      	ldr	r2, [pc, #360]	; (8001ef4 <HAL_RCC_OscConfig+0x4c4>)
 8001d8c:	f023 0301 	bic.w	r3, r3, #1
 8001d90:	6213      	str	r3, [r2, #32]
 8001d92:	4b58      	ldr	r3, [pc, #352]	; (8001ef4 <HAL_RCC_OscConfig+0x4c4>)
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	4a57      	ldr	r2, [pc, #348]	; (8001ef4 <HAL_RCC_OscConfig+0x4c4>)
 8001d98:	f023 0304 	bic.w	r3, r3, #4
 8001d9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d015      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da6:	f7ff faa1 	bl	80012ec <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dac:	e00a      	b.n	8001dc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dae:	f7ff fa9d 	bl	80012ec <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e0b1      	b.n	8001f28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc4:	4b4b      	ldr	r3, [pc, #300]	; (8001ef4 <HAL_RCC_OscConfig+0x4c4>)
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0ee      	beq.n	8001dae <HAL_RCC_OscConfig+0x37e>
 8001dd0:	e014      	b.n	8001dfc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd2:	f7ff fa8b 	bl	80012ec <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd8:	e00a      	b.n	8001df0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dda:	f7ff fa87 	bl	80012ec <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e09b      	b.n	8001f28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df0:	4b40      	ldr	r3, [pc, #256]	; (8001ef4 <HAL_RCC_OscConfig+0x4c4>)
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1ee      	bne.n	8001dda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dfc:	7dfb      	ldrb	r3, [r7, #23]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d105      	bne.n	8001e0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e02:	4b3c      	ldr	r3, [pc, #240]	; (8001ef4 <HAL_RCC_OscConfig+0x4c4>)
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	4a3b      	ldr	r2, [pc, #236]	; (8001ef4 <HAL_RCC_OscConfig+0x4c4>)
 8001e08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 8087 	beq.w	8001f26 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e18:	4b36      	ldr	r3, [pc, #216]	; (8001ef4 <HAL_RCC_OscConfig+0x4c4>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 030c 	and.w	r3, r3, #12
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d061      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d146      	bne.n	8001eba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2c:	4b33      	ldr	r3, [pc, #204]	; (8001efc <HAL_RCC_OscConfig+0x4cc>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e32:	f7ff fa5b 	bl	80012ec <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3a:	f7ff fa57 	bl	80012ec <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e06d      	b.n	8001f28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4c:	4b29      	ldr	r3, [pc, #164]	; (8001ef4 <HAL_RCC_OscConfig+0x4c4>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1f0      	bne.n	8001e3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e60:	d108      	bne.n	8001e74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e62:	4b24      	ldr	r3, [pc, #144]	; (8001ef4 <HAL_RCC_OscConfig+0x4c4>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	4921      	ldr	r1, [pc, #132]	; (8001ef4 <HAL_RCC_OscConfig+0x4c4>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e74:	4b1f      	ldr	r3, [pc, #124]	; (8001ef4 <HAL_RCC_OscConfig+0x4c4>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a19      	ldr	r1, [r3, #32]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	430b      	orrs	r3, r1
 8001e86:	491b      	ldr	r1, [pc, #108]	; (8001ef4 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <HAL_RCC_OscConfig+0x4cc>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e92:	f7ff fa2b 	bl	80012ec <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9a:	f7ff fa27 	bl	80012ec <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e03d      	b.n	8001f28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eac:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <HAL_RCC_OscConfig+0x4c4>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCC_OscConfig+0x46a>
 8001eb8:	e035      	b.n	8001f26 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eba:	4b10      	ldr	r3, [pc, #64]	; (8001efc <HAL_RCC_OscConfig+0x4cc>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec0:	f7ff fa14 	bl	80012ec <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec8:	f7ff fa10 	bl	80012ec <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e026      	b.n	8001f28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eda:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <HAL_RCC_OscConfig+0x4c4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x498>
 8001ee6:	e01e      	b.n	8001f26 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d107      	bne.n	8001f00 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e019      	b.n	8001f28 <HAL_RCC_OscConfig+0x4f8>
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40007000 	.word	0x40007000
 8001efc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_RCC_OscConfig+0x500>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d106      	bne.n	8001f22 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d001      	beq.n	8001f26 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40021000 	.word	0x40021000

08001f34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0d0      	b.n	80020ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f48:	4b6a      	ldr	r3, [pc, #424]	; (80020f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d910      	bls.n	8001f78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f56:	4b67      	ldr	r3, [pc, #412]	; (80020f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f023 0207 	bic.w	r2, r3, #7
 8001f5e:	4965      	ldr	r1, [pc, #404]	; (80020f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f66:	4b63      	ldr	r3, [pc, #396]	; (80020f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d001      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0b8      	b.n	80020ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d020      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d005      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f90:	4b59      	ldr	r3, [pc, #356]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	4a58      	ldr	r2, [pc, #352]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0308 	and.w	r3, r3, #8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d005      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fa8:	4b53      	ldr	r3, [pc, #332]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	4a52      	ldr	r2, [pc, #328]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fb2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb4:	4b50      	ldr	r3, [pc, #320]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	494d      	ldr	r1, [pc, #308]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d040      	beq.n	8002054 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d107      	bne.n	8001fea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fda:	4b47      	ldr	r3, [pc, #284]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d115      	bne.n	8002012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e07f      	b.n	80020ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d107      	bne.n	8002002 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff2:	4b41      	ldr	r3, [pc, #260]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d109      	bne.n	8002012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e073      	b.n	80020ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002002:	4b3d      	ldr	r3, [pc, #244]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e06b      	b.n	80020ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002012:	4b39      	ldr	r3, [pc, #228]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f023 0203 	bic.w	r2, r3, #3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	4936      	ldr	r1, [pc, #216]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002020:	4313      	orrs	r3, r2
 8002022:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002024:	f7ff f962 	bl	80012ec <HAL_GetTick>
 8002028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202a:	e00a      	b.n	8002042 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800202c:	f7ff f95e 	bl	80012ec <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	f241 3288 	movw	r2, #5000	; 0x1388
 800203a:	4293      	cmp	r3, r2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e053      	b.n	80020ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002042:	4b2d      	ldr	r3, [pc, #180]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 020c 	and.w	r2, r3, #12
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	429a      	cmp	r2, r3
 8002052:	d1eb      	bne.n	800202c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002054:	4b27      	ldr	r3, [pc, #156]	; (80020f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d210      	bcs.n	8002084 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002062:	4b24      	ldr	r3, [pc, #144]	; (80020f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 0207 	bic.w	r2, r3, #7
 800206a:	4922      	ldr	r1, [pc, #136]	; (80020f4 <HAL_RCC_ClockConfig+0x1c0>)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	4313      	orrs	r3, r2
 8002070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002072:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d001      	beq.n	8002084 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e032      	b.n	80020ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	d008      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002090:	4b19      	ldr	r3, [pc, #100]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	4916      	ldr	r1, [pc, #88]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d009      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020ae:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	490e      	ldr	r1, [pc, #56]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020c2:	f000 f821 	bl	8002108 <HAL_RCC_GetSysClockFreq>
 80020c6:	4602      	mov	r2, r0
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	091b      	lsrs	r3, r3, #4
 80020ce:	f003 030f 	and.w	r3, r3, #15
 80020d2:	490a      	ldr	r1, [pc, #40]	; (80020fc <HAL_RCC_ClockConfig+0x1c8>)
 80020d4:	5ccb      	ldrb	r3, [r1, r3]
 80020d6:	fa22 f303 	lsr.w	r3, r2, r3
 80020da:	4a09      	ldr	r2, [pc, #36]	; (8002100 <HAL_RCC_ClockConfig+0x1cc>)
 80020dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <HAL_RCC_ClockConfig+0x1d0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff f8c0 	bl	8001268 <HAL_InitTick>

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40022000 	.word	0x40022000
 80020f8:	40021000 	.word	0x40021000
 80020fc:	0800585c 	.word	0x0800585c
 8002100:	20000000 	.word	0x20000000
 8002104:	20000004 	.word	0x20000004

08002108 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002108:	b490      	push	{r4, r7}
 800210a:	b08a      	sub	sp, #40	; 0x28
 800210c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800210e:	4b29      	ldr	r3, [pc, #164]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002110:	1d3c      	adds	r4, r7, #4
 8002112:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002114:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002118:	f240 2301 	movw	r3, #513	; 0x201
 800211c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800211e:	2300      	movs	r3, #0
 8002120:	61fb      	str	r3, [r7, #28]
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
 8002126:	2300      	movs	r3, #0
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800212e:	2300      	movs	r3, #0
 8002130:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002132:	4b21      	ldr	r3, [pc, #132]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	2b04      	cmp	r3, #4
 8002140:	d002      	beq.n	8002148 <HAL_RCC_GetSysClockFreq+0x40>
 8002142:	2b08      	cmp	r3, #8
 8002144:	d003      	beq.n	800214e <HAL_RCC_GetSysClockFreq+0x46>
 8002146:	e02b      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002148:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800214a:	623b      	str	r3, [r7, #32]
      break;
 800214c:	e02b      	b.n	80021a6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	0c9b      	lsrs	r3, r3, #18
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	3328      	adds	r3, #40	; 0x28
 8002158:	443b      	add	r3, r7
 800215a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800215e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d012      	beq.n	8002190 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800216a:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	0c5b      	lsrs	r3, r3, #17
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	3328      	adds	r3, #40	; 0x28
 8002176:	443b      	add	r3, r7
 8002178:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800217c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	4a0e      	ldr	r2, [pc, #56]	; (80021bc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002182:	fb03 f202 	mul.w	r2, r3, r2
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	fbb2 f3f3 	udiv	r3, r2, r3
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
 800218e:	e004      	b.n	800219a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	4a0b      	ldr	r2, [pc, #44]	; (80021c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002194:	fb02 f303 	mul.w	r3, r2, r3
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	623b      	str	r3, [r7, #32]
      break;
 800219e:	e002      	b.n	80021a6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021a0:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_RCC_GetSysClockFreq+0xb4>)
 80021a2:	623b      	str	r3, [r7, #32]
      break;
 80021a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021a6:	6a3b      	ldr	r3, [r7, #32]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3728      	adds	r7, #40	; 0x28
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc90      	pop	{r4, r7}
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	08005840 	.word	0x08005840
 80021b8:	40021000 	.word	0x40021000
 80021bc:	007a1200 	.word	0x007a1200
 80021c0:	003d0900 	.word	0x003d0900

080021c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021c8:	4b02      	ldr	r3, [pc, #8]	; (80021d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80021ca:	681b      	ldr	r3, [r3, #0]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr
 80021d4:	20000000 	.word	0x20000000

080021d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021dc:	f7ff fff2 	bl	80021c4 <HAL_RCC_GetHCLKFreq>
 80021e0:	4602      	mov	r2, r0
 80021e2:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	0a1b      	lsrs	r3, r3, #8
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	4903      	ldr	r1, [pc, #12]	; (80021fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ee:	5ccb      	ldrb	r3, [r1, r3]
 80021f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40021000 	.word	0x40021000
 80021fc:	0800586c 	.word	0x0800586c

08002200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002204:	f7ff ffde 	bl	80021c4 <HAL_RCC_GetHCLKFreq>
 8002208:	4602      	mov	r2, r0
 800220a:	4b05      	ldr	r3, [pc, #20]	; (8002220 <HAL_RCC_GetPCLK2Freq+0x20>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	0adb      	lsrs	r3, r3, #11
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	4903      	ldr	r1, [pc, #12]	; (8002224 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002216:	5ccb      	ldrb	r3, [r1, r3]
 8002218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800221c:	4618      	mov	r0, r3
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40021000 	.word	0x40021000
 8002224:	0800586c 	.word	0x0800586c

08002228 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002230:	4b0a      	ldr	r3, [pc, #40]	; (800225c <RCC_Delay+0x34>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a0a      	ldr	r2, [pc, #40]	; (8002260 <RCC_Delay+0x38>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	0a5b      	lsrs	r3, r3, #9
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	fb02 f303 	mul.w	r3, r2, r3
 8002242:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002244:	bf00      	nop
  }
  while (Delay --);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1e5a      	subs	r2, r3, #1
 800224a:	60fa      	str	r2, [r7, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1f9      	bne.n	8002244 <RCC_Delay+0x1c>
}
 8002250:	bf00      	nop
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	20000000 	.word	0x20000000
 8002260:	10624dd3 	.word	0x10624dd3

08002264 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e03f      	b.n	80022f6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7fe fe3a 	bl	8000f04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2224      	movs	r2, #36	; 0x24
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 fcc7 	bl	8002c3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	695a      	ldr	r2, [r3, #20]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b08a      	sub	sp, #40	; 0x28
 8002302:	af02      	add	r7, sp, #8
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	603b      	str	r3, [r7, #0]
 800230a:	4613      	mov	r3, r2
 800230c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b20      	cmp	r3, #32
 800231c:	d17c      	bne.n	8002418 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <HAL_UART_Transmit+0x2c>
 8002324:	88fb      	ldrh	r3, [r7, #6]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e075      	b.n	800241a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <HAL_UART_Transmit+0x3e>
 8002338:	2302      	movs	r3, #2
 800233a:	e06e      	b.n	800241a <HAL_UART_Transmit+0x11c>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2221      	movs	r2, #33	; 0x21
 800234e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002352:	f7fe ffcb 	bl	80012ec <HAL_GetTick>
 8002356:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	88fa      	ldrh	r2, [r7, #6]
 800235c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	88fa      	ldrh	r2, [r7, #6]
 8002362:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800236c:	d108      	bne.n	8002380 <HAL_UART_Transmit+0x82>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d104      	bne.n	8002380 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	61bb      	str	r3, [r7, #24]
 800237e:	e003      	b.n	8002388 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002384:	2300      	movs	r3, #0
 8002386:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002390:	e02a      	b.n	80023e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2200      	movs	r2, #0
 800239a:	2180      	movs	r1, #128	; 0x80
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 fab3 	bl	8002908 <UART_WaitOnFlagUntilTimeout>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e036      	b.n	800241a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10b      	bne.n	80023ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	3302      	adds	r3, #2
 80023c6:	61bb      	str	r3, [r7, #24]
 80023c8:	e007      	b.n	80023da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	781a      	ldrb	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	3301      	adds	r3, #1
 80023d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023de:	b29b      	uxth	r3, r3
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1cf      	bne.n	8002392 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2200      	movs	r2, #0
 80023fa:	2140      	movs	r1, #64	; 0x40
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 fa83 	bl	8002908 <UART_WaitOnFlagUntilTimeout>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e006      	b.n	800241a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2220      	movs	r2, #32
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002414:	2300      	movs	r3, #0
 8002416:	e000      	b.n	800241a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002418:	2302      	movs	r3, #2
  }
}
 800241a:	4618      	mov	r0, r3
 800241c:	3720      	adds	r7, #32
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b08a      	sub	sp, #40	; 0x28
 8002426:	af02      	add	r7, sp, #8
 8002428:	60f8      	str	r0, [r7, #12]
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	603b      	str	r3, [r7, #0]
 800242e:	4613      	mov	r3, r2
 8002430:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b20      	cmp	r3, #32
 8002440:	f040 808c 	bne.w	800255c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d002      	beq.n	8002450 <HAL_UART_Receive+0x2e>
 800244a:	88fb      	ldrh	r3, [r7, #6]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e084      	b.n	800255e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_UART_Receive+0x40>
 800245e:	2302      	movs	r3, #2
 8002460:	e07d      	b.n	800255e <HAL_UART_Receive+0x13c>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2222      	movs	r2, #34	; 0x22
 8002474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800247e:	f7fe ff35 	bl	80012ec <HAL_GetTick>
 8002482:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	88fa      	ldrh	r2, [r7, #6]
 8002488:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	88fa      	ldrh	r2, [r7, #6]
 800248e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002498:	d108      	bne.n	80024ac <HAL_UART_Receive+0x8a>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d104      	bne.n	80024ac <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	61bb      	str	r3, [r7, #24]
 80024aa:	e003      	b.n	80024b4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80024bc:	e043      	b.n	8002546 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2200      	movs	r2, #0
 80024c6:	2120      	movs	r1, #32
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 fa1d 	bl	8002908 <UART_WaitOnFlagUntilTimeout>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e042      	b.n	800255e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10c      	bne.n	80024f8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	3302      	adds	r3, #2
 80024f4:	61bb      	str	r3, [r7, #24]
 80024f6:	e01f      	b.n	8002538 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002500:	d007      	beq.n	8002512 <HAL_UART_Receive+0xf0>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10a      	bne.n	8002520 <HAL_UART_Receive+0xfe>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d106      	bne.n	8002520 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	b2da      	uxtb	r2, r3
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	701a      	strb	r2, [r3, #0]
 800251e:	e008      	b.n	8002532 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	b2db      	uxtb	r3, r3
 8002528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800252c:	b2da      	uxtb	r2, r3
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	3301      	adds	r3, #1
 8002536:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800253c:	b29b      	uxth	r3, r3
 800253e:	3b01      	subs	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800254a:	b29b      	uxth	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1b6      	bne.n	80024be <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2220      	movs	r2, #32
 8002554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	e000      	b.n	800255e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800255c:	2302      	movs	r3, #2
  }
}
 800255e:	4618      	mov	r0, r3
 8002560:	3720      	adds	r7, #32
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08a      	sub	sp, #40	; 0x28
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002588:	2300      	movs	r3, #0
 800258a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10d      	bne.n	80025ba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	f003 0320 	and.w	r3, r3, #32
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <HAL_UART_IRQHandler+0x52>
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	f003 0320 	and.w	r3, r3, #32
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fa99 	bl	8002aea <UART_Receive_IT>
      return;
 80025b8:	e17b      	b.n	80028b2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 80b1 	beq.w	8002724 <HAL_UART_IRQHandler+0x1bc>
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d105      	bne.n	80025d8 <HAL_UART_IRQHandler+0x70>
 80025cc:	6a3b      	ldr	r3, [r7, #32]
 80025ce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 80a6 	beq.w	8002724 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00a      	beq.n	80025f8 <HAL_UART_IRQHandler+0x90>
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d005      	beq.n	80025f8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	f043 0201 	orr.w	r2, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	f003 0304 	and.w	r3, r3, #4
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <HAL_UART_IRQHandler+0xb0>
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	f043 0202 	orr.w	r2, r3, #2
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00a      	beq.n	8002638 <HAL_UART_IRQHandler+0xd0>
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	f043 0204 	orr.w	r2, r3, #4
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00f      	beq.n	8002662 <HAL_UART_IRQHandler+0xfa>
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	f003 0320 	and.w	r3, r3, #32
 8002648:	2b00      	cmp	r3, #0
 800264a:	d104      	bne.n	8002656 <HAL_UART_IRQHandler+0xee>
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d005      	beq.n	8002662 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	f043 0208 	orr.w	r2, r3, #8
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 811e 	beq.w	80028a8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	f003 0320 	and.w	r3, r3, #32
 8002672:	2b00      	cmp	r3, #0
 8002674:	d007      	beq.n	8002686 <HAL_UART_IRQHandler+0x11e>
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	f003 0320 	and.w	r3, r3, #32
 800267c:	2b00      	cmp	r3, #0
 800267e:	d002      	beq.n	8002686 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 fa32 	bl	8002aea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002690:	2b00      	cmp	r3, #0
 8002692:	bf14      	ite	ne
 8002694:	2301      	movne	r3, #1
 8002696:	2300      	moveq	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d102      	bne.n	80026ae <HAL_UART_IRQHandler+0x146>
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d031      	beq.n	8002712 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f974 	bl	800299c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d023      	beq.n	800270a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695a      	ldr	r2, [r3, #20]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026d0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d013      	beq.n	8002702 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026de:	4a76      	ldr	r2, [pc, #472]	; (80028b8 <HAL_UART_IRQHandler+0x350>)
 80026e0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe ff76 	bl	80015d8 <HAL_DMA_Abort_IT>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d016      	beq.n	8002720 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026fc:	4610      	mov	r0, r2
 80026fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002700:	e00e      	b.n	8002720 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f8ec 	bl	80028e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002708:	e00a      	b.n	8002720 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f8e8 	bl	80028e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002710:	e006      	b.n	8002720 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f8e4 	bl	80028e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800271e:	e0c3      	b.n	80028a8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002720:	bf00      	nop
    return;
 8002722:	e0c1      	b.n	80028a8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002728:	2b01      	cmp	r3, #1
 800272a:	f040 80a1 	bne.w	8002870 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	f003 0310 	and.w	r3, r3, #16
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 809b 	beq.w	8002870 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	f003 0310 	and.w	r3, r3, #16
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 8095 	beq.w	8002870 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002746:	2300      	movs	r3, #0
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002766:	2b00      	cmp	r3, #0
 8002768:	d04e      	beq.n	8002808 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002774:	8a3b      	ldrh	r3, [r7, #16]
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 8098 	beq.w	80028ac <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002780:	8a3a      	ldrh	r2, [r7, #16]
 8002782:	429a      	cmp	r2, r3
 8002784:	f080 8092 	bcs.w	80028ac <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	8a3a      	ldrh	r2, [r7, #16]
 800278c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	2b20      	cmp	r3, #32
 8002796:	d02b      	beq.n	80027f0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027a6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695a      	ldr	r2, [r3, #20]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0201 	bic.w	r2, r2, #1
 80027b6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695a      	ldr	r2, [r3, #20]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027c6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2220      	movs	r2, #32
 80027cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0210 	bic.w	r2, r2, #16
 80027e4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fe feb9 	bl	8001562 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	4619      	mov	r1, r3
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f876 	bl	80028f2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002806:	e051      	b.n	80028ac <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002810:	b29b      	uxth	r3, r3
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800281a:	b29b      	uxth	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d047      	beq.n	80028b0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002820:	8a7b      	ldrh	r3, [r7, #18]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d044      	beq.n	80028b0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002834:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	695a      	ldr	r2, [r3, #20]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0201 	bic.w	r2, r2, #1
 8002844:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2220      	movs	r2, #32
 800284a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0210 	bic.w	r2, r2, #16
 8002862:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002864:	8a7b      	ldrh	r3, [r7, #18]
 8002866:	4619      	mov	r1, r3
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 f842 	bl	80028f2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800286e:	e01f      	b.n	80028b0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002876:	2b00      	cmp	r3, #0
 8002878:	d008      	beq.n	800288c <HAL_UART_IRQHandler+0x324>
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f8c9 	bl	8002a1c <UART_Transmit_IT>
    return;
 800288a:	e012      	b.n	80028b2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00d      	beq.n	80028b2 <HAL_UART_IRQHandler+0x34a>
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289c:	2b00      	cmp	r3, #0
 800289e:	d008      	beq.n	80028b2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f90a 	bl	8002aba <UART_EndTransmit_IT>
    return;
 80028a6:	e004      	b.n	80028b2 <HAL_UART_IRQHandler+0x34a>
    return;
 80028a8:	bf00      	nop
 80028aa:	e002      	b.n	80028b2 <HAL_UART_IRQHandler+0x34a>
      return;
 80028ac:	bf00      	nop
 80028ae:	e000      	b.n	80028b2 <HAL_UART_IRQHandler+0x34a>
      return;
 80028b0:	bf00      	nop
  }
}
 80028b2:	3728      	adds	r7, #40	; 0x28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	080029f5 	.word	0x080029f5

080028bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr

080028ce <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr

080028f2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	460b      	mov	r3, r1
 80028fc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	603b      	str	r3, [r7, #0]
 8002914:	4613      	mov	r3, r2
 8002916:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002918:	e02c      	b.n	8002974 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002920:	d028      	beq.n	8002974 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d007      	beq.n	8002938 <UART_WaitOnFlagUntilTimeout+0x30>
 8002928:	f7fe fce0 	bl	80012ec <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	429a      	cmp	r2, r3
 8002936:	d21d      	bcs.n	8002974 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002946:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695a      	ldr	r2, [r3, #20]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0201 	bic.w	r2, r2, #1
 8002956:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e00f      	b.n	8002994 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	4013      	ands	r3, r2
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	429a      	cmp	r2, r3
 8002982:	bf0c      	ite	eq
 8002984:	2301      	moveq	r3, #1
 8002986:	2300      	movne	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	461a      	mov	r2, r3
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	429a      	cmp	r2, r3
 8002990:	d0c3      	beq.n	800291a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80029b2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695a      	ldr	r2, [r3, #20]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0201 	bic.w	r2, r2, #1
 80029c2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d107      	bne.n	80029dc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0210 	bic.w	r2, r2, #16
 80029da:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2220      	movs	r2, #32
 80029e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f7ff ff66 	bl	80028e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a14:	bf00      	nop
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b21      	cmp	r3, #33	; 0x21
 8002a2e:	d13e      	bne.n	8002aae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a38:	d114      	bne.n	8002a64 <UART_Transmit_IT+0x48>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d110      	bne.n	8002a64 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	881b      	ldrh	r3, [r3, #0]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a56:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	1c9a      	adds	r2, r3, #2
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	621a      	str	r2, [r3, #32]
 8002a62:	e008      	b.n	8002a76 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	1c59      	adds	r1, r3, #1
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6211      	str	r1, [r2, #32]
 8002a6e:	781a      	ldrb	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	4619      	mov	r1, r3
 8002a84:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10f      	bne.n	8002aaa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68da      	ldr	r2, [r3, #12]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a98:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aa8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e000      	b.n	8002ab0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002aae:	2302      	movs	r3, #2
  }
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr

08002aba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff feee 	bl	80028bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b086      	sub	sp, #24
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b22      	cmp	r3, #34	; 0x22
 8002afc:	f040 8099 	bne.w	8002c32 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b08:	d117      	bne.n	8002b3a <UART_Receive_IT+0x50>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d113      	bne.n	8002b3a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b32:	1c9a      	adds	r2, r3, #2
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	629a      	str	r2, [r3, #40]	; 0x28
 8002b38:	e026      	b.n	8002b88 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b4c:	d007      	beq.n	8002b5e <UART_Receive_IT+0x74>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10a      	bne.n	8002b6c <UART_Receive_IT+0x82>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d106      	bne.n	8002b6c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	701a      	strb	r2, [r3, #0]
 8002b6a:	e008      	b.n	8002b7e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b82:	1c5a      	adds	r2, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	4619      	mov	r1, r3
 8002b96:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d148      	bne.n	8002c2e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0220 	bic.w	r2, r2, #32
 8002baa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695a      	ldr	r2, [r3, #20]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0201 	bic.w	r2, r2, #1
 8002bca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d123      	bne.n	8002c24 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0210 	bic.w	r2, r2, #16
 8002bf0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	2b10      	cmp	r3, #16
 8002bfe:	d10a      	bne.n	8002c16 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c00:	2300      	movs	r3, #0
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7ff fe68 	bl	80028f2 <HAL_UARTEx_RxEventCallback>
 8002c22:	e002      	b.n	8002c2a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff fe52 	bl	80028ce <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	e002      	b.n	8002c34 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	e000      	b.n	8002c34 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002c32:	2302      	movs	r3, #2
  }
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c76:	f023 030c 	bic.w	r3, r3, #12
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6812      	ldr	r2, [r2, #0]
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	430b      	orrs	r3, r1
 8002c82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699a      	ldr	r2, [r3, #24]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a2c      	ldr	r2, [pc, #176]	; (8002d50 <UART_SetConfig+0x114>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d103      	bne.n	8002cac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ca4:	f7ff faac 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 8002ca8:	60f8      	str	r0, [r7, #12]
 8002caa:	e002      	b.n	8002cb2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002cac:	f7ff fa94 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
 8002cb0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	009a      	lsls	r2, r3, #2
 8002cbc:	441a      	add	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc8:	4a22      	ldr	r2, [pc, #136]	; (8002d54 <UART_SetConfig+0x118>)
 8002cca:	fba2 2303 	umull	r2, r3, r2, r3
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	0119      	lsls	r1, r3, #4
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	009a      	lsls	r2, r3, #2
 8002cdc:	441a      	add	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ce8:	4b1a      	ldr	r3, [pc, #104]	; (8002d54 <UART_SetConfig+0x118>)
 8002cea:	fba3 0302 	umull	r0, r3, r3, r2
 8002cee:	095b      	lsrs	r3, r3, #5
 8002cf0:	2064      	movs	r0, #100	; 0x64
 8002cf2:	fb00 f303 	mul.w	r3, r0, r3
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	3332      	adds	r3, #50	; 0x32
 8002cfc:	4a15      	ldr	r2, [pc, #84]	; (8002d54 <UART_SetConfig+0x118>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	095b      	lsrs	r3, r3, #5
 8002d04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d08:	4419      	add	r1, r3
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	009a      	lsls	r2, r3, #2
 8002d14:	441a      	add	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d20:	4b0c      	ldr	r3, [pc, #48]	; (8002d54 <UART_SetConfig+0x118>)
 8002d22:	fba3 0302 	umull	r0, r3, r3, r2
 8002d26:	095b      	lsrs	r3, r3, #5
 8002d28:	2064      	movs	r0, #100	; 0x64
 8002d2a:	fb00 f303 	mul.w	r3, r0, r3
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	3332      	adds	r3, #50	; 0x32
 8002d34:	4a07      	ldr	r2, [pc, #28]	; (8002d54 <UART_SetConfig+0x118>)
 8002d36:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	f003 020f 	and.w	r2, r3, #15
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	440a      	add	r2, r1
 8002d46:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d48:	bf00      	nop
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40013800 	.word	0x40013800
 8002d54:	51eb851f 	.word	0x51eb851f

08002d58 <__errno>:
 8002d58:	4b01      	ldr	r3, [pc, #4]	; (8002d60 <__errno+0x8>)
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	2000000c 	.word	0x2000000c

08002d64 <__sflush_r>:
 8002d64:	898a      	ldrh	r2, [r1, #12]
 8002d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d68:	4605      	mov	r5, r0
 8002d6a:	0710      	lsls	r0, r2, #28
 8002d6c:	460c      	mov	r4, r1
 8002d6e:	d457      	bmi.n	8002e20 <__sflush_r+0xbc>
 8002d70:	684b      	ldr	r3, [r1, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	dc04      	bgt.n	8002d80 <__sflush_r+0x1c>
 8002d76:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	dc01      	bgt.n	8002d80 <__sflush_r+0x1c>
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d82:	2e00      	cmp	r6, #0
 8002d84:	d0fa      	beq.n	8002d7c <__sflush_r+0x18>
 8002d86:	2300      	movs	r3, #0
 8002d88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002d8c:	682f      	ldr	r7, [r5, #0]
 8002d8e:	602b      	str	r3, [r5, #0]
 8002d90:	d032      	beq.n	8002df8 <__sflush_r+0x94>
 8002d92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d94:	89a3      	ldrh	r3, [r4, #12]
 8002d96:	075a      	lsls	r2, r3, #29
 8002d98:	d505      	bpl.n	8002da6 <__sflush_r+0x42>
 8002d9a:	6863      	ldr	r3, [r4, #4]
 8002d9c:	1ac0      	subs	r0, r0, r3
 8002d9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002da0:	b10b      	cbz	r3, 8002da6 <__sflush_r+0x42>
 8002da2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002da4:	1ac0      	subs	r0, r0, r3
 8002da6:	2300      	movs	r3, #0
 8002da8:	4602      	mov	r2, r0
 8002daa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002dac:	4628      	mov	r0, r5
 8002dae:	6a21      	ldr	r1, [r4, #32]
 8002db0:	47b0      	blx	r6
 8002db2:	1c43      	adds	r3, r0, #1
 8002db4:	89a3      	ldrh	r3, [r4, #12]
 8002db6:	d106      	bne.n	8002dc6 <__sflush_r+0x62>
 8002db8:	6829      	ldr	r1, [r5, #0]
 8002dba:	291d      	cmp	r1, #29
 8002dbc:	d82c      	bhi.n	8002e18 <__sflush_r+0xb4>
 8002dbe:	4a29      	ldr	r2, [pc, #164]	; (8002e64 <__sflush_r+0x100>)
 8002dc0:	40ca      	lsrs	r2, r1
 8002dc2:	07d6      	lsls	r6, r2, #31
 8002dc4:	d528      	bpl.n	8002e18 <__sflush_r+0xb4>
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	6062      	str	r2, [r4, #4]
 8002dca:	6922      	ldr	r2, [r4, #16]
 8002dcc:	04d9      	lsls	r1, r3, #19
 8002dce:	6022      	str	r2, [r4, #0]
 8002dd0:	d504      	bpl.n	8002ddc <__sflush_r+0x78>
 8002dd2:	1c42      	adds	r2, r0, #1
 8002dd4:	d101      	bne.n	8002dda <__sflush_r+0x76>
 8002dd6:	682b      	ldr	r3, [r5, #0]
 8002dd8:	b903      	cbnz	r3, 8002ddc <__sflush_r+0x78>
 8002dda:	6560      	str	r0, [r4, #84]	; 0x54
 8002ddc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002dde:	602f      	str	r7, [r5, #0]
 8002de0:	2900      	cmp	r1, #0
 8002de2:	d0cb      	beq.n	8002d7c <__sflush_r+0x18>
 8002de4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002de8:	4299      	cmp	r1, r3
 8002dea:	d002      	beq.n	8002df2 <__sflush_r+0x8e>
 8002dec:	4628      	mov	r0, r5
 8002dee:	f000 f9eb 	bl	80031c8 <_free_r>
 8002df2:	2000      	movs	r0, #0
 8002df4:	6360      	str	r0, [r4, #52]	; 0x34
 8002df6:	e7c2      	b.n	8002d7e <__sflush_r+0x1a>
 8002df8:	6a21      	ldr	r1, [r4, #32]
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	4628      	mov	r0, r5
 8002dfe:	47b0      	blx	r6
 8002e00:	1c41      	adds	r1, r0, #1
 8002e02:	d1c7      	bne.n	8002d94 <__sflush_r+0x30>
 8002e04:	682b      	ldr	r3, [r5, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0c4      	beq.n	8002d94 <__sflush_r+0x30>
 8002e0a:	2b1d      	cmp	r3, #29
 8002e0c:	d001      	beq.n	8002e12 <__sflush_r+0xae>
 8002e0e:	2b16      	cmp	r3, #22
 8002e10:	d101      	bne.n	8002e16 <__sflush_r+0xb2>
 8002e12:	602f      	str	r7, [r5, #0]
 8002e14:	e7b2      	b.n	8002d7c <__sflush_r+0x18>
 8002e16:	89a3      	ldrh	r3, [r4, #12]
 8002e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e1c:	81a3      	strh	r3, [r4, #12]
 8002e1e:	e7ae      	b.n	8002d7e <__sflush_r+0x1a>
 8002e20:	690f      	ldr	r7, [r1, #16]
 8002e22:	2f00      	cmp	r7, #0
 8002e24:	d0aa      	beq.n	8002d7c <__sflush_r+0x18>
 8002e26:	0793      	lsls	r3, r2, #30
 8002e28:	bf18      	it	ne
 8002e2a:	2300      	movne	r3, #0
 8002e2c:	680e      	ldr	r6, [r1, #0]
 8002e2e:	bf08      	it	eq
 8002e30:	694b      	ldreq	r3, [r1, #20]
 8002e32:	1bf6      	subs	r6, r6, r7
 8002e34:	600f      	str	r7, [r1, #0]
 8002e36:	608b      	str	r3, [r1, #8]
 8002e38:	2e00      	cmp	r6, #0
 8002e3a:	dd9f      	ble.n	8002d7c <__sflush_r+0x18>
 8002e3c:	4633      	mov	r3, r6
 8002e3e:	463a      	mov	r2, r7
 8002e40:	4628      	mov	r0, r5
 8002e42:	6a21      	ldr	r1, [r4, #32]
 8002e44:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002e48:	47e0      	blx	ip
 8002e4a:	2800      	cmp	r0, #0
 8002e4c:	dc06      	bgt.n	8002e5c <__sflush_r+0xf8>
 8002e4e:	89a3      	ldrh	r3, [r4, #12]
 8002e50:	f04f 30ff 	mov.w	r0, #4294967295
 8002e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e58:	81a3      	strh	r3, [r4, #12]
 8002e5a:	e790      	b.n	8002d7e <__sflush_r+0x1a>
 8002e5c:	4407      	add	r7, r0
 8002e5e:	1a36      	subs	r6, r6, r0
 8002e60:	e7ea      	b.n	8002e38 <__sflush_r+0xd4>
 8002e62:	bf00      	nop
 8002e64:	20400001 	.word	0x20400001

08002e68 <_fflush_r>:
 8002e68:	b538      	push	{r3, r4, r5, lr}
 8002e6a:	690b      	ldr	r3, [r1, #16]
 8002e6c:	4605      	mov	r5, r0
 8002e6e:	460c      	mov	r4, r1
 8002e70:	b913      	cbnz	r3, 8002e78 <_fflush_r+0x10>
 8002e72:	2500      	movs	r5, #0
 8002e74:	4628      	mov	r0, r5
 8002e76:	bd38      	pop	{r3, r4, r5, pc}
 8002e78:	b118      	cbz	r0, 8002e82 <_fflush_r+0x1a>
 8002e7a:	6983      	ldr	r3, [r0, #24]
 8002e7c:	b90b      	cbnz	r3, 8002e82 <_fflush_r+0x1a>
 8002e7e:	f000 f899 	bl	8002fb4 <__sinit>
 8002e82:	4b14      	ldr	r3, [pc, #80]	; (8002ed4 <_fflush_r+0x6c>)
 8002e84:	429c      	cmp	r4, r3
 8002e86:	d11b      	bne.n	8002ec0 <_fflush_r+0x58>
 8002e88:	686c      	ldr	r4, [r5, #4]
 8002e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d0ef      	beq.n	8002e72 <_fflush_r+0xa>
 8002e92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002e94:	07d0      	lsls	r0, r2, #31
 8002e96:	d404      	bmi.n	8002ea2 <_fflush_r+0x3a>
 8002e98:	0599      	lsls	r1, r3, #22
 8002e9a:	d402      	bmi.n	8002ea2 <_fflush_r+0x3a>
 8002e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e9e:	f000 f97a 	bl	8003196 <__retarget_lock_acquire_recursive>
 8002ea2:	4628      	mov	r0, r5
 8002ea4:	4621      	mov	r1, r4
 8002ea6:	f7ff ff5d 	bl	8002d64 <__sflush_r>
 8002eaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002eac:	4605      	mov	r5, r0
 8002eae:	07da      	lsls	r2, r3, #31
 8002eb0:	d4e0      	bmi.n	8002e74 <_fflush_r+0xc>
 8002eb2:	89a3      	ldrh	r3, [r4, #12]
 8002eb4:	059b      	lsls	r3, r3, #22
 8002eb6:	d4dd      	bmi.n	8002e74 <_fflush_r+0xc>
 8002eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002eba:	f000 f96d 	bl	8003198 <__retarget_lock_release_recursive>
 8002ebe:	e7d9      	b.n	8002e74 <_fflush_r+0xc>
 8002ec0:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <_fflush_r+0x70>)
 8002ec2:	429c      	cmp	r4, r3
 8002ec4:	d101      	bne.n	8002eca <_fflush_r+0x62>
 8002ec6:	68ac      	ldr	r4, [r5, #8]
 8002ec8:	e7df      	b.n	8002e8a <_fflush_r+0x22>
 8002eca:	4b04      	ldr	r3, [pc, #16]	; (8002edc <_fflush_r+0x74>)
 8002ecc:	429c      	cmp	r4, r3
 8002ece:	bf08      	it	eq
 8002ed0:	68ec      	ldreq	r4, [r5, #12]
 8002ed2:	e7da      	b.n	8002e8a <_fflush_r+0x22>
 8002ed4:	08005894 	.word	0x08005894
 8002ed8:	080058b4 	.word	0x080058b4
 8002edc:	08005874 	.word	0x08005874

08002ee0 <fflush>:
 8002ee0:	4601      	mov	r1, r0
 8002ee2:	b920      	cbnz	r0, 8002eee <fflush+0xe>
 8002ee4:	4b04      	ldr	r3, [pc, #16]	; (8002ef8 <fflush+0x18>)
 8002ee6:	4905      	ldr	r1, [pc, #20]	; (8002efc <fflush+0x1c>)
 8002ee8:	6818      	ldr	r0, [r3, #0]
 8002eea:	f000 b8fe 	b.w	80030ea <_fwalk_reent>
 8002eee:	4b04      	ldr	r3, [pc, #16]	; (8002f00 <fflush+0x20>)
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	f7ff bfb9 	b.w	8002e68 <_fflush_r>
 8002ef6:	bf00      	nop
 8002ef8:	080058d4 	.word	0x080058d4
 8002efc:	08002e69 	.word	0x08002e69
 8002f00:	2000000c 	.word	0x2000000c

08002f04 <std>:
 8002f04:	2300      	movs	r3, #0
 8002f06:	b510      	push	{r4, lr}
 8002f08:	4604      	mov	r4, r0
 8002f0a:	e9c0 3300 	strd	r3, r3, [r0]
 8002f0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f12:	6083      	str	r3, [r0, #8]
 8002f14:	8181      	strh	r1, [r0, #12]
 8002f16:	6643      	str	r3, [r0, #100]	; 0x64
 8002f18:	81c2      	strh	r2, [r0, #14]
 8002f1a:	6183      	str	r3, [r0, #24]
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	2208      	movs	r2, #8
 8002f20:	305c      	adds	r0, #92	; 0x5c
 8002f22:	f000 f948 	bl	80031b6 <memset>
 8002f26:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <std+0x38>)
 8002f28:	6224      	str	r4, [r4, #32]
 8002f2a:	6263      	str	r3, [r4, #36]	; 0x24
 8002f2c:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <std+0x3c>)
 8002f2e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f30:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <std+0x40>)
 8002f32:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f34:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <std+0x44>)
 8002f36:	6323      	str	r3, [r4, #48]	; 0x30
 8002f38:	bd10      	pop	{r4, pc}
 8002f3a:	bf00      	nop
 8002f3c:	080036b9 	.word	0x080036b9
 8002f40:	080036db 	.word	0x080036db
 8002f44:	08003713 	.word	0x08003713
 8002f48:	08003737 	.word	0x08003737

08002f4c <_cleanup_r>:
 8002f4c:	4901      	ldr	r1, [pc, #4]	; (8002f54 <_cleanup_r+0x8>)
 8002f4e:	f000 b8cc 	b.w	80030ea <_fwalk_reent>
 8002f52:	bf00      	nop
 8002f54:	08002e69 	.word	0x08002e69

08002f58 <__sfmoreglue>:
 8002f58:	2268      	movs	r2, #104	; 0x68
 8002f5a:	b570      	push	{r4, r5, r6, lr}
 8002f5c:	1e4d      	subs	r5, r1, #1
 8002f5e:	4355      	muls	r5, r2
 8002f60:	460e      	mov	r6, r1
 8002f62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002f66:	f000 f997 	bl	8003298 <_malloc_r>
 8002f6a:	4604      	mov	r4, r0
 8002f6c:	b140      	cbz	r0, 8002f80 <__sfmoreglue+0x28>
 8002f6e:	2100      	movs	r1, #0
 8002f70:	e9c0 1600 	strd	r1, r6, [r0]
 8002f74:	300c      	adds	r0, #12
 8002f76:	60a0      	str	r0, [r4, #8]
 8002f78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002f7c:	f000 f91b 	bl	80031b6 <memset>
 8002f80:	4620      	mov	r0, r4
 8002f82:	bd70      	pop	{r4, r5, r6, pc}

08002f84 <__sfp_lock_acquire>:
 8002f84:	4801      	ldr	r0, [pc, #4]	; (8002f8c <__sfp_lock_acquire+0x8>)
 8002f86:	f000 b906 	b.w	8003196 <__retarget_lock_acquire_recursive>
 8002f8a:	bf00      	nop
 8002f8c:	2000011d 	.word	0x2000011d

08002f90 <__sfp_lock_release>:
 8002f90:	4801      	ldr	r0, [pc, #4]	; (8002f98 <__sfp_lock_release+0x8>)
 8002f92:	f000 b901 	b.w	8003198 <__retarget_lock_release_recursive>
 8002f96:	bf00      	nop
 8002f98:	2000011d 	.word	0x2000011d

08002f9c <__sinit_lock_acquire>:
 8002f9c:	4801      	ldr	r0, [pc, #4]	; (8002fa4 <__sinit_lock_acquire+0x8>)
 8002f9e:	f000 b8fa 	b.w	8003196 <__retarget_lock_acquire_recursive>
 8002fa2:	bf00      	nop
 8002fa4:	2000011e 	.word	0x2000011e

08002fa8 <__sinit_lock_release>:
 8002fa8:	4801      	ldr	r0, [pc, #4]	; (8002fb0 <__sinit_lock_release+0x8>)
 8002faa:	f000 b8f5 	b.w	8003198 <__retarget_lock_release_recursive>
 8002fae:	bf00      	nop
 8002fb0:	2000011e 	.word	0x2000011e

08002fb4 <__sinit>:
 8002fb4:	b510      	push	{r4, lr}
 8002fb6:	4604      	mov	r4, r0
 8002fb8:	f7ff fff0 	bl	8002f9c <__sinit_lock_acquire>
 8002fbc:	69a3      	ldr	r3, [r4, #24]
 8002fbe:	b11b      	cbz	r3, 8002fc8 <__sinit+0x14>
 8002fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fc4:	f7ff bff0 	b.w	8002fa8 <__sinit_lock_release>
 8002fc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002fcc:	6523      	str	r3, [r4, #80]	; 0x50
 8002fce:	4b13      	ldr	r3, [pc, #76]	; (800301c <__sinit+0x68>)
 8002fd0:	4a13      	ldr	r2, [pc, #76]	; (8003020 <__sinit+0x6c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8002fd6:	42a3      	cmp	r3, r4
 8002fd8:	bf08      	it	eq
 8002fda:	2301      	moveq	r3, #1
 8002fdc:	4620      	mov	r0, r4
 8002fde:	bf08      	it	eq
 8002fe0:	61a3      	streq	r3, [r4, #24]
 8002fe2:	f000 f81f 	bl	8003024 <__sfp>
 8002fe6:	6060      	str	r0, [r4, #4]
 8002fe8:	4620      	mov	r0, r4
 8002fea:	f000 f81b 	bl	8003024 <__sfp>
 8002fee:	60a0      	str	r0, [r4, #8]
 8002ff0:	4620      	mov	r0, r4
 8002ff2:	f000 f817 	bl	8003024 <__sfp>
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2104      	movs	r1, #4
 8002ffa:	60e0      	str	r0, [r4, #12]
 8002ffc:	6860      	ldr	r0, [r4, #4]
 8002ffe:	f7ff ff81 	bl	8002f04 <std>
 8003002:	2201      	movs	r2, #1
 8003004:	2109      	movs	r1, #9
 8003006:	68a0      	ldr	r0, [r4, #8]
 8003008:	f7ff ff7c 	bl	8002f04 <std>
 800300c:	2202      	movs	r2, #2
 800300e:	2112      	movs	r1, #18
 8003010:	68e0      	ldr	r0, [r4, #12]
 8003012:	f7ff ff77 	bl	8002f04 <std>
 8003016:	2301      	movs	r3, #1
 8003018:	61a3      	str	r3, [r4, #24]
 800301a:	e7d1      	b.n	8002fc0 <__sinit+0xc>
 800301c:	080058d4 	.word	0x080058d4
 8003020:	08002f4d 	.word	0x08002f4d

08003024 <__sfp>:
 8003024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003026:	4607      	mov	r7, r0
 8003028:	f7ff ffac 	bl	8002f84 <__sfp_lock_acquire>
 800302c:	4b1e      	ldr	r3, [pc, #120]	; (80030a8 <__sfp+0x84>)
 800302e:	681e      	ldr	r6, [r3, #0]
 8003030:	69b3      	ldr	r3, [r6, #24]
 8003032:	b913      	cbnz	r3, 800303a <__sfp+0x16>
 8003034:	4630      	mov	r0, r6
 8003036:	f7ff ffbd 	bl	8002fb4 <__sinit>
 800303a:	3648      	adds	r6, #72	; 0x48
 800303c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003040:	3b01      	subs	r3, #1
 8003042:	d503      	bpl.n	800304c <__sfp+0x28>
 8003044:	6833      	ldr	r3, [r6, #0]
 8003046:	b30b      	cbz	r3, 800308c <__sfp+0x68>
 8003048:	6836      	ldr	r6, [r6, #0]
 800304a:	e7f7      	b.n	800303c <__sfp+0x18>
 800304c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003050:	b9d5      	cbnz	r5, 8003088 <__sfp+0x64>
 8003052:	4b16      	ldr	r3, [pc, #88]	; (80030ac <__sfp+0x88>)
 8003054:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003058:	60e3      	str	r3, [r4, #12]
 800305a:	6665      	str	r5, [r4, #100]	; 0x64
 800305c:	f000 f89a 	bl	8003194 <__retarget_lock_init_recursive>
 8003060:	f7ff ff96 	bl	8002f90 <__sfp_lock_release>
 8003064:	2208      	movs	r2, #8
 8003066:	4629      	mov	r1, r5
 8003068:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800306c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003070:	6025      	str	r5, [r4, #0]
 8003072:	61a5      	str	r5, [r4, #24]
 8003074:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003078:	f000 f89d 	bl	80031b6 <memset>
 800307c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003080:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003084:	4620      	mov	r0, r4
 8003086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003088:	3468      	adds	r4, #104	; 0x68
 800308a:	e7d9      	b.n	8003040 <__sfp+0x1c>
 800308c:	2104      	movs	r1, #4
 800308e:	4638      	mov	r0, r7
 8003090:	f7ff ff62 	bl	8002f58 <__sfmoreglue>
 8003094:	4604      	mov	r4, r0
 8003096:	6030      	str	r0, [r6, #0]
 8003098:	2800      	cmp	r0, #0
 800309a:	d1d5      	bne.n	8003048 <__sfp+0x24>
 800309c:	f7ff ff78 	bl	8002f90 <__sfp_lock_release>
 80030a0:	230c      	movs	r3, #12
 80030a2:	603b      	str	r3, [r7, #0]
 80030a4:	e7ee      	b.n	8003084 <__sfp+0x60>
 80030a6:	bf00      	nop
 80030a8:	080058d4 	.word	0x080058d4
 80030ac:	ffff0001 	.word	0xffff0001

080030b0 <_fwalk>:
 80030b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030b4:	460f      	mov	r7, r1
 80030b6:	2600      	movs	r6, #0
 80030b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80030bc:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 80030c0:	f1b8 0801 	subs.w	r8, r8, #1
 80030c4:	d505      	bpl.n	80030d2 <_fwalk+0x22>
 80030c6:	6824      	ldr	r4, [r4, #0]
 80030c8:	2c00      	cmp	r4, #0
 80030ca:	d1f7      	bne.n	80030bc <_fwalk+0xc>
 80030cc:	4630      	mov	r0, r6
 80030ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030d2:	89ab      	ldrh	r3, [r5, #12]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d906      	bls.n	80030e6 <_fwalk+0x36>
 80030d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80030dc:	3301      	adds	r3, #1
 80030de:	d002      	beq.n	80030e6 <_fwalk+0x36>
 80030e0:	4628      	mov	r0, r5
 80030e2:	47b8      	blx	r7
 80030e4:	4306      	orrs	r6, r0
 80030e6:	3568      	adds	r5, #104	; 0x68
 80030e8:	e7ea      	b.n	80030c0 <_fwalk+0x10>

080030ea <_fwalk_reent>:
 80030ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030ee:	4606      	mov	r6, r0
 80030f0:	4688      	mov	r8, r1
 80030f2:	2700      	movs	r7, #0
 80030f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80030f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80030fc:	f1b9 0901 	subs.w	r9, r9, #1
 8003100:	d505      	bpl.n	800310e <_fwalk_reent+0x24>
 8003102:	6824      	ldr	r4, [r4, #0]
 8003104:	2c00      	cmp	r4, #0
 8003106:	d1f7      	bne.n	80030f8 <_fwalk_reent+0xe>
 8003108:	4638      	mov	r0, r7
 800310a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800310e:	89ab      	ldrh	r3, [r5, #12]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d907      	bls.n	8003124 <_fwalk_reent+0x3a>
 8003114:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003118:	3301      	adds	r3, #1
 800311a:	d003      	beq.n	8003124 <_fwalk_reent+0x3a>
 800311c:	4629      	mov	r1, r5
 800311e:	4630      	mov	r0, r6
 8003120:	47c0      	blx	r8
 8003122:	4307      	orrs	r7, r0
 8003124:	3568      	adds	r5, #104	; 0x68
 8003126:	e7e9      	b.n	80030fc <_fwalk_reent+0x12>

08003128 <getchar>:
 8003128:	4b07      	ldr	r3, [pc, #28]	; (8003148 <getchar+0x20>)
 800312a:	b510      	push	{r4, lr}
 800312c:	681c      	ldr	r4, [r3, #0]
 800312e:	b124      	cbz	r4, 800313a <getchar+0x12>
 8003130:	69a3      	ldr	r3, [r4, #24]
 8003132:	b913      	cbnz	r3, 800313a <getchar+0x12>
 8003134:	4620      	mov	r0, r4
 8003136:	f7ff ff3d 	bl	8002fb4 <__sinit>
 800313a:	4620      	mov	r0, r4
 800313c:	6861      	ldr	r1, [r4, #4]
 800313e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003142:	f000 bbf3 	b.w	800392c <_getc_r>
 8003146:	bf00      	nop
 8003148:	2000000c 	.word	0x2000000c

0800314c <__libc_init_array>:
 800314c:	b570      	push	{r4, r5, r6, lr}
 800314e:	2600      	movs	r6, #0
 8003150:	4d0c      	ldr	r5, [pc, #48]	; (8003184 <__libc_init_array+0x38>)
 8003152:	4c0d      	ldr	r4, [pc, #52]	; (8003188 <__libc_init_array+0x3c>)
 8003154:	1b64      	subs	r4, r4, r5
 8003156:	10a4      	asrs	r4, r4, #2
 8003158:	42a6      	cmp	r6, r4
 800315a:	d109      	bne.n	8003170 <__libc_init_array+0x24>
 800315c:	f001 ff6c 	bl	8005038 <_init>
 8003160:	2600      	movs	r6, #0
 8003162:	4d0a      	ldr	r5, [pc, #40]	; (800318c <__libc_init_array+0x40>)
 8003164:	4c0a      	ldr	r4, [pc, #40]	; (8003190 <__libc_init_array+0x44>)
 8003166:	1b64      	subs	r4, r4, r5
 8003168:	10a4      	asrs	r4, r4, #2
 800316a:	42a6      	cmp	r6, r4
 800316c:	d105      	bne.n	800317a <__libc_init_array+0x2e>
 800316e:	bd70      	pop	{r4, r5, r6, pc}
 8003170:	f855 3b04 	ldr.w	r3, [r5], #4
 8003174:	4798      	blx	r3
 8003176:	3601      	adds	r6, #1
 8003178:	e7ee      	b.n	8003158 <__libc_init_array+0xc>
 800317a:	f855 3b04 	ldr.w	r3, [r5], #4
 800317e:	4798      	blx	r3
 8003180:	3601      	adds	r6, #1
 8003182:	e7f2      	b.n	800316a <__libc_init_array+0x1e>
 8003184:	08005a28 	.word	0x08005a28
 8003188:	08005a28 	.word	0x08005a28
 800318c:	08005a28 	.word	0x08005a28
 8003190:	08005a2c 	.word	0x08005a2c

08003194 <__retarget_lock_init_recursive>:
 8003194:	4770      	bx	lr

08003196 <__retarget_lock_acquire_recursive>:
 8003196:	4770      	bx	lr

08003198 <__retarget_lock_release_recursive>:
 8003198:	4770      	bx	lr

0800319a <memcpy>:
 800319a:	440a      	add	r2, r1
 800319c:	4291      	cmp	r1, r2
 800319e:	f100 33ff 	add.w	r3, r0, #4294967295
 80031a2:	d100      	bne.n	80031a6 <memcpy+0xc>
 80031a4:	4770      	bx	lr
 80031a6:	b510      	push	{r4, lr}
 80031a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031ac:	4291      	cmp	r1, r2
 80031ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031b2:	d1f9      	bne.n	80031a8 <memcpy+0xe>
 80031b4:	bd10      	pop	{r4, pc}

080031b6 <memset>:
 80031b6:	4603      	mov	r3, r0
 80031b8:	4402      	add	r2, r0
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d100      	bne.n	80031c0 <memset+0xa>
 80031be:	4770      	bx	lr
 80031c0:	f803 1b01 	strb.w	r1, [r3], #1
 80031c4:	e7f9      	b.n	80031ba <memset+0x4>
	...

080031c8 <_free_r>:
 80031c8:	b538      	push	{r3, r4, r5, lr}
 80031ca:	4605      	mov	r5, r0
 80031cc:	2900      	cmp	r1, #0
 80031ce:	d040      	beq.n	8003252 <_free_r+0x8a>
 80031d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031d4:	1f0c      	subs	r4, r1, #4
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	bfb8      	it	lt
 80031da:	18e4      	addlt	r4, r4, r3
 80031dc:	f000 fc66 	bl	8003aac <__malloc_lock>
 80031e0:	4a1c      	ldr	r2, [pc, #112]	; (8003254 <_free_r+0x8c>)
 80031e2:	6813      	ldr	r3, [r2, #0]
 80031e4:	b933      	cbnz	r3, 80031f4 <_free_r+0x2c>
 80031e6:	6063      	str	r3, [r4, #4]
 80031e8:	6014      	str	r4, [r2, #0]
 80031ea:	4628      	mov	r0, r5
 80031ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031f0:	f000 bc62 	b.w	8003ab8 <__malloc_unlock>
 80031f4:	42a3      	cmp	r3, r4
 80031f6:	d908      	bls.n	800320a <_free_r+0x42>
 80031f8:	6820      	ldr	r0, [r4, #0]
 80031fa:	1821      	adds	r1, r4, r0
 80031fc:	428b      	cmp	r3, r1
 80031fe:	bf01      	itttt	eq
 8003200:	6819      	ldreq	r1, [r3, #0]
 8003202:	685b      	ldreq	r3, [r3, #4]
 8003204:	1809      	addeq	r1, r1, r0
 8003206:	6021      	streq	r1, [r4, #0]
 8003208:	e7ed      	b.n	80031e6 <_free_r+0x1e>
 800320a:	461a      	mov	r2, r3
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	b10b      	cbz	r3, 8003214 <_free_r+0x4c>
 8003210:	42a3      	cmp	r3, r4
 8003212:	d9fa      	bls.n	800320a <_free_r+0x42>
 8003214:	6811      	ldr	r1, [r2, #0]
 8003216:	1850      	adds	r0, r2, r1
 8003218:	42a0      	cmp	r0, r4
 800321a:	d10b      	bne.n	8003234 <_free_r+0x6c>
 800321c:	6820      	ldr	r0, [r4, #0]
 800321e:	4401      	add	r1, r0
 8003220:	1850      	adds	r0, r2, r1
 8003222:	4283      	cmp	r3, r0
 8003224:	6011      	str	r1, [r2, #0]
 8003226:	d1e0      	bne.n	80031ea <_free_r+0x22>
 8003228:	6818      	ldr	r0, [r3, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	4401      	add	r1, r0
 800322e:	6011      	str	r1, [r2, #0]
 8003230:	6053      	str	r3, [r2, #4]
 8003232:	e7da      	b.n	80031ea <_free_r+0x22>
 8003234:	d902      	bls.n	800323c <_free_r+0x74>
 8003236:	230c      	movs	r3, #12
 8003238:	602b      	str	r3, [r5, #0]
 800323a:	e7d6      	b.n	80031ea <_free_r+0x22>
 800323c:	6820      	ldr	r0, [r4, #0]
 800323e:	1821      	adds	r1, r4, r0
 8003240:	428b      	cmp	r3, r1
 8003242:	bf01      	itttt	eq
 8003244:	6819      	ldreq	r1, [r3, #0]
 8003246:	685b      	ldreq	r3, [r3, #4]
 8003248:	1809      	addeq	r1, r1, r0
 800324a:	6021      	streq	r1, [r4, #0]
 800324c:	6063      	str	r3, [r4, #4]
 800324e:	6054      	str	r4, [r2, #4]
 8003250:	e7cb      	b.n	80031ea <_free_r+0x22>
 8003252:	bd38      	pop	{r3, r4, r5, pc}
 8003254:	20000120 	.word	0x20000120

08003258 <sbrk_aligned>:
 8003258:	b570      	push	{r4, r5, r6, lr}
 800325a:	4e0e      	ldr	r6, [pc, #56]	; (8003294 <sbrk_aligned+0x3c>)
 800325c:	460c      	mov	r4, r1
 800325e:	6831      	ldr	r1, [r6, #0]
 8003260:	4605      	mov	r5, r0
 8003262:	b911      	cbnz	r1, 800326a <sbrk_aligned+0x12>
 8003264:	f000 f91a 	bl	800349c <_sbrk_r>
 8003268:	6030      	str	r0, [r6, #0]
 800326a:	4621      	mov	r1, r4
 800326c:	4628      	mov	r0, r5
 800326e:	f000 f915 	bl	800349c <_sbrk_r>
 8003272:	1c43      	adds	r3, r0, #1
 8003274:	d00a      	beq.n	800328c <sbrk_aligned+0x34>
 8003276:	1cc4      	adds	r4, r0, #3
 8003278:	f024 0403 	bic.w	r4, r4, #3
 800327c:	42a0      	cmp	r0, r4
 800327e:	d007      	beq.n	8003290 <sbrk_aligned+0x38>
 8003280:	1a21      	subs	r1, r4, r0
 8003282:	4628      	mov	r0, r5
 8003284:	f000 f90a 	bl	800349c <_sbrk_r>
 8003288:	3001      	adds	r0, #1
 800328a:	d101      	bne.n	8003290 <sbrk_aligned+0x38>
 800328c:	f04f 34ff 	mov.w	r4, #4294967295
 8003290:	4620      	mov	r0, r4
 8003292:	bd70      	pop	{r4, r5, r6, pc}
 8003294:	20000124 	.word	0x20000124

08003298 <_malloc_r>:
 8003298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800329c:	1ccd      	adds	r5, r1, #3
 800329e:	f025 0503 	bic.w	r5, r5, #3
 80032a2:	3508      	adds	r5, #8
 80032a4:	2d0c      	cmp	r5, #12
 80032a6:	bf38      	it	cc
 80032a8:	250c      	movcc	r5, #12
 80032aa:	2d00      	cmp	r5, #0
 80032ac:	4607      	mov	r7, r0
 80032ae:	db01      	blt.n	80032b4 <_malloc_r+0x1c>
 80032b0:	42a9      	cmp	r1, r5
 80032b2:	d905      	bls.n	80032c0 <_malloc_r+0x28>
 80032b4:	230c      	movs	r3, #12
 80032b6:	2600      	movs	r6, #0
 80032b8:	603b      	str	r3, [r7, #0]
 80032ba:	4630      	mov	r0, r6
 80032bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032c0:	4e2e      	ldr	r6, [pc, #184]	; (800337c <_malloc_r+0xe4>)
 80032c2:	f000 fbf3 	bl	8003aac <__malloc_lock>
 80032c6:	6833      	ldr	r3, [r6, #0]
 80032c8:	461c      	mov	r4, r3
 80032ca:	bb34      	cbnz	r4, 800331a <_malloc_r+0x82>
 80032cc:	4629      	mov	r1, r5
 80032ce:	4638      	mov	r0, r7
 80032d0:	f7ff ffc2 	bl	8003258 <sbrk_aligned>
 80032d4:	1c43      	adds	r3, r0, #1
 80032d6:	4604      	mov	r4, r0
 80032d8:	d14d      	bne.n	8003376 <_malloc_r+0xde>
 80032da:	6834      	ldr	r4, [r6, #0]
 80032dc:	4626      	mov	r6, r4
 80032de:	2e00      	cmp	r6, #0
 80032e0:	d140      	bne.n	8003364 <_malloc_r+0xcc>
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	4631      	mov	r1, r6
 80032e6:	4638      	mov	r0, r7
 80032e8:	eb04 0803 	add.w	r8, r4, r3
 80032ec:	f000 f8d6 	bl	800349c <_sbrk_r>
 80032f0:	4580      	cmp	r8, r0
 80032f2:	d13a      	bne.n	800336a <_malloc_r+0xd2>
 80032f4:	6821      	ldr	r1, [r4, #0]
 80032f6:	3503      	adds	r5, #3
 80032f8:	1a6d      	subs	r5, r5, r1
 80032fa:	f025 0503 	bic.w	r5, r5, #3
 80032fe:	3508      	adds	r5, #8
 8003300:	2d0c      	cmp	r5, #12
 8003302:	bf38      	it	cc
 8003304:	250c      	movcc	r5, #12
 8003306:	4638      	mov	r0, r7
 8003308:	4629      	mov	r1, r5
 800330a:	f7ff ffa5 	bl	8003258 <sbrk_aligned>
 800330e:	3001      	adds	r0, #1
 8003310:	d02b      	beq.n	800336a <_malloc_r+0xd2>
 8003312:	6823      	ldr	r3, [r4, #0]
 8003314:	442b      	add	r3, r5
 8003316:	6023      	str	r3, [r4, #0]
 8003318:	e00e      	b.n	8003338 <_malloc_r+0xa0>
 800331a:	6822      	ldr	r2, [r4, #0]
 800331c:	1b52      	subs	r2, r2, r5
 800331e:	d41e      	bmi.n	800335e <_malloc_r+0xc6>
 8003320:	2a0b      	cmp	r2, #11
 8003322:	d916      	bls.n	8003352 <_malloc_r+0xba>
 8003324:	1961      	adds	r1, r4, r5
 8003326:	42a3      	cmp	r3, r4
 8003328:	6025      	str	r5, [r4, #0]
 800332a:	bf18      	it	ne
 800332c:	6059      	strne	r1, [r3, #4]
 800332e:	6863      	ldr	r3, [r4, #4]
 8003330:	bf08      	it	eq
 8003332:	6031      	streq	r1, [r6, #0]
 8003334:	5162      	str	r2, [r4, r5]
 8003336:	604b      	str	r3, [r1, #4]
 8003338:	4638      	mov	r0, r7
 800333a:	f104 060b 	add.w	r6, r4, #11
 800333e:	f000 fbbb 	bl	8003ab8 <__malloc_unlock>
 8003342:	f026 0607 	bic.w	r6, r6, #7
 8003346:	1d23      	adds	r3, r4, #4
 8003348:	1af2      	subs	r2, r6, r3
 800334a:	d0b6      	beq.n	80032ba <_malloc_r+0x22>
 800334c:	1b9b      	subs	r3, r3, r6
 800334e:	50a3      	str	r3, [r4, r2]
 8003350:	e7b3      	b.n	80032ba <_malloc_r+0x22>
 8003352:	6862      	ldr	r2, [r4, #4]
 8003354:	42a3      	cmp	r3, r4
 8003356:	bf0c      	ite	eq
 8003358:	6032      	streq	r2, [r6, #0]
 800335a:	605a      	strne	r2, [r3, #4]
 800335c:	e7ec      	b.n	8003338 <_malloc_r+0xa0>
 800335e:	4623      	mov	r3, r4
 8003360:	6864      	ldr	r4, [r4, #4]
 8003362:	e7b2      	b.n	80032ca <_malloc_r+0x32>
 8003364:	4634      	mov	r4, r6
 8003366:	6876      	ldr	r6, [r6, #4]
 8003368:	e7b9      	b.n	80032de <_malloc_r+0x46>
 800336a:	230c      	movs	r3, #12
 800336c:	4638      	mov	r0, r7
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	f000 fba2 	bl	8003ab8 <__malloc_unlock>
 8003374:	e7a1      	b.n	80032ba <_malloc_r+0x22>
 8003376:	6025      	str	r5, [r4, #0]
 8003378:	e7de      	b.n	8003338 <_malloc_r+0xa0>
 800337a:	bf00      	nop
 800337c:	20000120 	.word	0x20000120

08003380 <iprintf>:
 8003380:	b40f      	push	{r0, r1, r2, r3}
 8003382:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <iprintf+0x2c>)
 8003384:	b513      	push	{r0, r1, r4, lr}
 8003386:	681c      	ldr	r4, [r3, #0]
 8003388:	b124      	cbz	r4, 8003394 <iprintf+0x14>
 800338a:	69a3      	ldr	r3, [r4, #24]
 800338c:	b913      	cbnz	r3, 8003394 <iprintf+0x14>
 800338e:	4620      	mov	r0, r4
 8003390:	f7ff fe10 	bl	8002fb4 <__sinit>
 8003394:	ab05      	add	r3, sp, #20
 8003396:	4620      	mov	r0, r4
 8003398:	9a04      	ldr	r2, [sp, #16]
 800339a:	68a1      	ldr	r1, [r4, #8]
 800339c:	9301      	str	r3, [sp, #4]
 800339e:	f000 fd15 	bl	8003dcc <_vfiprintf_r>
 80033a2:	b002      	add	sp, #8
 80033a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033a8:	b004      	add	sp, #16
 80033aa:	4770      	bx	lr
 80033ac:	2000000c 	.word	0x2000000c

080033b0 <_puts_r>:
 80033b0:	b570      	push	{r4, r5, r6, lr}
 80033b2:	460e      	mov	r6, r1
 80033b4:	4605      	mov	r5, r0
 80033b6:	b118      	cbz	r0, 80033c0 <_puts_r+0x10>
 80033b8:	6983      	ldr	r3, [r0, #24]
 80033ba:	b90b      	cbnz	r3, 80033c0 <_puts_r+0x10>
 80033bc:	f7ff fdfa 	bl	8002fb4 <__sinit>
 80033c0:	69ab      	ldr	r3, [r5, #24]
 80033c2:	68ac      	ldr	r4, [r5, #8]
 80033c4:	b913      	cbnz	r3, 80033cc <_puts_r+0x1c>
 80033c6:	4628      	mov	r0, r5
 80033c8:	f7ff fdf4 	bl	8002fb4 <__sinit>
 80033cc:	4b2c      	ldr	r3, [pc, #176]	; (8003480 <_puts_r+0xd0>)
 80033ce:	429c      	cmp	r4, r3
 80033d0:	d120      	bne.n	8003414 <_puts_r+0x64>
 80033d2:	686c      	ldr	r4, [r5, #4]
 80033d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033d6:	07db      	lsls	r3, r3, #31
 80033d8:	d405      	bmi.n	80033e6 <_puts_r+0x36>
 80033da:	89a3      	ldrh	r3, [r4, #12]
 80033dc:	0598      	lsls	r0, r3, #22
 80033de:	d402      	bmi.n	80033e6 <_puts_r+0x36>
 80033e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033e2:	f7ff fed8 	bl	8003196 <__retarget_lock_acquire_recursive>
 80033e6:	89a3      	ldrh	r3, [r4, #12]
 80033e8:	0719      	lsls	r1, r3, #28
 80033ea:	d51d      	bpl.n	8003428 <_puts_r+0x78>
 80033ec:	6923      	ldr	r3, [r4, #16]
 80033ee:	b1db      	cbz	r3, 8003428 <_puts_r+0x78>
 80033f0:	3e01      	subs	r6, #1
 80033f2:	68a3      	ldr	r3, [r4, #8]
 80033f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80033f8:	3b01      	subs	r3, #1
 80033fa:	60a3      	str	r3, [r4, #8]
 80033fc:	bb39      	cbnz	r1, 800344e <_puts_r+0x9e>
 80033fe:	2b00      	cmp	r3, #0
 8003400:	da38      	bge.n	8003474 <_puts_r+0xc4>
 8003402:	4622      	mov	r2, r4
 8003404:	210a      	movs	r1, #10
 8003406:	4628      	mov	r0, r5
 8003408:	f000 f9ae 	bl	8003768 <__swbuf_r>
 800340c:	3001      	adds	r0, #1
 800340e:	d011      	beq.n	8003434 <_puts_r+0x84>
 8003410:	250a      	movs	r5, #10
 8003412:	e011      	b.n	8003438 <_puts_r+0x88>
 8003414:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <_puts_r+0xd4>)
 8003416:	429c      	cmp	r4, r3
 8003418:	d101      	bne.n	800341e <_puts_r+0x6e>
 800341a:	68ac      	ldr	r4, [r5, #8]
 800341c:	e7da      	b.n	80033d4 <_puts_r+0x24>
 800341e:	4b1a      	ldr	r3, [pc, #104]	; (8003488 <_puts_r+0xd8>)
 8003420:	429c      	cmp	r4, r3
 8003422:	bf08      	it	eq
 8003424:	68ec      	ldreq	r4, [r5, #12]
 8003426:	e7d5      	b.n	80033d4 <_puts_r+0x24>
 8003428:	4621      	mov	r1, r4
 800342a:	4628      	mov	r0, r5
 800342c:	f000 fa00 	bl	8003830 <__swsetup_r>
 8003430:	2800      	cmp	r0, #0
 8003432:	d0dd      	beq.n	80033f0 <_puts_r+0x40>
 8003434:	f04f 35ff 	mov.w	r5, #4294967295
 8003438:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800343a:	07da      	lsls	r2, r3, #31
 800343c:	d405      	bmi.n	800344a <_puts_r+0x9a>
 800343e:	89a3      	ldrh	r3, [r4, #12]
 8003440:	059b      	lsls	r3, r3, #22
 8003442:	d402      	bmi.n	800344a <_puts_r+0x9a>
 8003444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003446:	f7ff fea7 	bl	8003198 <__retarget_lock_release_recursive>
 800344a:	4628      	mov	r0, r5
 800344c:	bd70      	pop	{r4, r5, r6, pc}
 800344e:	2b00      	cmp	r3, #0
 8003450:	da04      	bge.n	800345c <_puts_r+0xac>
 8003452:	69a2      	ldr	r2, [r4, #24]
 8003454:	429a      	cmp	r2, r3
 8003456:	dc06      	bgt.n	8003466 <_puts_r+0xb6>
 8003458:	290a      	cmp	r1, #10
 800345a:	d004      	beq.n	8003466 <_puts_r+0xb6>
 800345c:	6823      	ldr	r3, [r4, #0]
 800345e:	1c5a      	adds	r2, r3, #1
 8003460:	6022      	str	r2, [r4, #0]
 8003462:	7019      	strb	r1, [r3, #0]
 8003464:	e7c5      	b.n	80033f2 <_puts_r+0x42>
 8003466:	4622      	mov	r2, r4
 8003468:	4628      	mov	r0, r5
 800346a:	f000 f97d 	bl	8003768 <__swbuf_r>
 800346e:	3001      	adds	r0, #1
 8003470:	d1bf      	bne.n	80033f2 <_puts_r+0x42>
 8003472:	e7df      	b.n	8003434 <_puts_r+0x84>
 8003474:	250a      	movs	r5, #10
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	1c5a      	adds	r2, r3, #1
 800347a:	6022      	str	r2, [r4, #0]
 800347c:	701d      	strb	r5, [r3, #0]
 800347e:	e7db      	b.n	8003438 <_puts_r+0x88>
 8003480:	08005894 	.word	0x08005894
 8003484:	080058b4 	.word	0x080058b4
 8003488:	08005874 	.word	0x08005874

0800348c <puts>:
 800348c:	4b02      	ldr	r3, [pc, #8]	; (8003498 <puts+0xc>)
 800348e:	4601      	mov	r1, r0
 8003490:	6818      	ldr	r0, [r3, #0]
 8003492:	f7ff bf8d 	b.w	80033b0 <_puts_r>
 8003496:	bf00      	nop
 8003498:	2000000c 	.word	0x2000000c

0800349c <_sbrk_r>:
 800349c:	b538      	push	{r3, r4, r5, lr}
 800349e:	2300      	movs	r3, #0
 80034a0:	4d05      	ldr	r5, [pc, #20]	; (80034b8 <_sbrk_r+0x1c>)
 80034a2:	4604      	mov	r4, r0
 80034a4:	4608      	mov	r0, r1
 80034a6:	602b      	str	r3, [r5, #0]
 80034a8:	f7fd fe66 	bl	8001178 <_sbrk>
 80034ac:	1c43      	adds	r3, r0, #1
 80034ae:	d102      	bne.n	80034b6 <_sbrk_r+0x1a>
 80034b0:	682b      	ldr	r3, [r5, #0]
 80034b2:	b103      	cbz	r3, 80034b6 <_sbrk_r+0x1a>
 80034b4:	6023      	str	r3, [r4, #0]
 80034b6:	bd38      	pop	{r3, r4, r5, pc}
 80034b8:	20000128 	.word	0x20000128

080034bc <iscanf>:
 80034bc:	b40f      	push	{r0, r1, r2, r3}
 80034be:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <iscanf+0x2c>)
 80034c0:	b513      	push	{r0, r1, r4, lr}
 80034c2:	681c      	ldr	r4, [r3, #0]
 80034c4:	b124      	cbz	r4, 80034d0 <iscanf+0x14>
 80034c6:	69a3      	ldr	r3, [r4, #24]
 80034c8:	b913      	cbnz	r3, 80034d0 <iscanf+0x14>
 80034ca:	4620      	mov	r0, r4
 80034cc:	f7ff fd72 	bl	8002fb4 <__sinit>
 80034d0:	ab05      	add	r3, sp, #20
 80034d2:	4620      	mov	r0, r4
 80034d4:	9a04      	ldr	r2, [sp, #16]
 80034d6:	6861      	ldr	r1, [r4, #4]
 80034d8:	9301      	str	r3, [sp, #4]
 80034da:	f001 f8e3 	bl	80046a4 <_vfiscanf_r>
 80034de:	b002      	add	sp, #8
 80034e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034e4:	b004      	add	sp, #16
 80034e6:	4770      	bx	lr
 80034e8:	2000000c 	.word	0x2000000c

080034ec <setvbuf>:
 80034ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80034f0:	461d      	mov	r5, r3
 80034f2:	4b5d      	ldr	r3, [pc, #372]	; (8003668 <setvbuf+0x17c>)
 80034f4:	4604      	mov	r4, r0
 80034f6:	681f      	ldr	r7, [r3, #0]
 80034f8:	460e      	mov	r6, r1
 80034fa:	4690      	mov	r8, r2
 80034fc:	b127      	cbz	r7, 8003508 <setvbuf+0x1c>
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	b913      	cbnz	r3, 8003508 <setvbuf+0x1c>
 8003502:	4638      	mov	r0, r7
 8003504:	f7ff fd56 	bl	8002fb4 <__sinit>
 8003508:	4b58      	ldr	r3, [pc, #352]	; (800366c <setvbuf+0x180>)
 800350a:	429c      	cmp	r4, r3
 800350c:	d167      	bne.n	80035de <setvbuf+0xf2>
 800350e:	687c      	ldr	r4, [r7, #4]
 8003510:	f1b8 0f02 	cmp.w	r8, #2
 8003514:	d006      	beq.n	8003524 <setvbuf+0x38>
 8003516:	f1b8 0f01 	cmp.w	r8, #1
 800351a:	f200 809f 	bhi.w	800365c <setvbuf+0x170>
 800351e:	2d00      	cmp	r5, #0
 8003520:	f2c0 809c 	blt.w	800365c <setvbuf+0x170>
 8003524:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003526:	07db      	lsls	r3, r3, #31
 8003528:	d405      	bmi.n	8003536 <setvbuf+0x4a>
 800352a:	89a3      	ldrh	r3, [r4, #12]
 800352c:	0598      	lsls	r0, r3, #22
 800352e:	d402      	bmi.n	8003536 <setvbuf+0x4a>
 8003530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003532:	f7ff fe30 	bl	8003196 <__retarget_lock_acquire_recursive>
 8003536:	4621      	mov	r1, r4
 8003538:	4638      	mov	r0, r7
 800353a:	f7ff fc95 	bl	8002e68 <_fflush_r>
 800353e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003540:	b141      	cbz	r1, 8003554 <setvbuf+0x68>
 8003542:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003546:	4299      	cmp	r1, r3
 8003548:	d002      	beq.n	8003550 <setvbuf+0x64>
 800354a:	4638      	mov	r0, r7
 800354c:	f7ff fe3c 	bl	80031c8 <_free_r>
 8003550:	2300      	movs	r3, #0
 8003552:	6363      	str	r3, [r4, #52]	; 0x34
 8003554:	2300      	movs	r3, #0
 8003556:	61a3      	str	r3, [r4, #24]
 8003558:	6063      	str	r3, [r4, #4]
 800355a:	89a3      	ldrh	r3, [r4, #12]
 800355c:	0619      	lsls	r1, r3, #24
 800355e:	d503      	bpl.n	8003568 <setvbuf+0x7c>
 8003560:	4638      	mov	r0, r7
 8003562:	6921      	ldr	r1, [r4, #16]
 8003564:	f7ff fe30 	bl	80031c8 <_free_r>
 8003568:	89a3      	ldrh	r3, [r4, #12]
 800356a:	f1b8 0f02 	cmp.w	r8, #2
 800356e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003572:	f023 0303 	bic.w	r3, r3, #3
 8003576:	81a3      	strh	r3, [r4, #12]
 8003578:	d06c      	beq.n	8003654 <setvbuf+0x168>
 800357a:	ab01      	add	r3, sp, #4
 800357c:	466a      	mov	r2, sp
 800357e:	4621      	mov	r1, r4
 8003580:	4638      	mov	r0, r7
 8003582:	f000 fa25 	bl	80039d0 <__swhatbuf_r>
 8003586:	89a3      	ldrh	r3, [r4, #12]
 8003588:	4318      	orrs	r0, r3
 800358a:	81a0      	strh	r0, [r4, #12]
 800358c:	2d00      	cmp	r5, #0
 800358e:	d130      	bne.n	80035f2 <setvbuf+0x106>
 8003590:	9d00      	ldr	r5, [sp, #0]
 8003592:	4628      	mov	r0, r5
 8003594:	f000 fa82 	bl	8003a9c <malloc>
 8003598:	4606      	mov	r6, r0
 800359a:	2800      	cmp	r0, #0
 800359c:	d155      	bne.n	800364a <setvbuf+0x15e>
 800359e:	f8dd 9000 	ldr.w	r9, [sp]
 80035a2:	45a9      	cmp	r9, r5
 80035a4:	d14a      	bne.n	800363c <setvbuf+0x150>
 80035a6:	f04f 35ff 	mov.w	r5, #4294967295
 80035aa:	2200      	movs	r2, #0
 80035ac:	60a2      	str	r2, [r4, #8]
 80035ae:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80035b2:	6022      	str	r2, [r4, #0]
 80035b4:	6122      	str	r2, [r4, #16]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035bc:	6162      	str	r2, [r4, #20]
 80035be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80035c0:	f043 0302 	orr.w	r3, r3, #2
 80035c4:	07d2      	lsls	r2, r2, #31
 80035c6:	81a3      	strh	r3, [r4, #12]
 80035c8:	d405      	bmi.n	80035d6 <setvbuf+0xea>
 80035ca:	f413 7f00 	tst.w	r3, #512	; 0x200
 80035ce:	d102      	bne.n	80035d6 <setvbuf+0xea>
 80035d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035d2:	f7ff fde1 	bl	8003198 <__retarget_lock_release_recursive>
 80035d6:	4628      	mov	r0, r5
 80035d8:	b003      	add	sp, #12
 80035da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035de:	4b24      	ldr	r3, [pc, #144]	; (8003670 <setvbuf+0x184>)
 80035e0:	429c      	cmp	r4, r3
 80035e2:	d101      	bne.n	80035e8 <setvbuf+0xfc>
 80035e4:	68bc      	ldr	r4, [r7, #8]
 80035e6:	e793      	b.n	8003510 <setvbuf+0x24>
 80035e8:	4b22      	ldr	r3, [pc, #136]	; (8003674 <setvbuf+0x188>)
 80035ea:	429c      	cmp	r4, r3
 80035ec:	bf08      	it	eq
 80035ee:	68fc      	ldreq	r4, [r7, #12]
 80035f0:	e78e      	b.n	8003510 <setvbuf+0x24>
 80035f2:	2e00      	cmp	r6, #0
 80035f4:	d0cd      	beq.n	8003592 <setvbuf+0xa6>
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	b913      	cbnz	r3, 8003600 <setvbuf+0x114>
 80035fa:	4638      	mov	r0, r7
 80035fc:	f7ff fcda 	bl	8002fb4 <__sinit>
 8003600:	f1b8 0f01 	cmp.w	r8, #1
 8003604:	bf08      	it	eq
 8003606:	89a3      	ldrheq	r3, [r4, #12]
 8003608:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800360c:	bf04      	itt	eq
 800360e:	f043 0301 	orreq.w	r3, r3, #1
 8003612:	81a3      	strheq	r3, [r4, #12]
 8003614:	89a2      	ldrh	r2, [r4, #12]
 8003616:	6026      	str	r6, [r4, #0]
 8003618:	f012 0308 	ands.w	r3, r2, #8
 800361c:	d01c      	beq.n	8003658 <setvbuf+0x16c>
 800361e:	07d3      	lsls	r3, r2, #31
 8003620:	bf41      	itttt	mi
 8003622:	2300      	movmi	r3, #0
 8003624:	426d      	negmi	r5, r5
 8003626:	60a3      	strmi	r3, [r4, #8]
 8003628:	61a5      	strmi	r5, [r4, #24]
 800362a:	bf58      	it	pl
 800362c:	60a5      	strpl	r5, [r4, #8]
 800362e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003630:	f015 0501 	ands.w	r5, r5, #1
 8003634:	d115      	bne.n	8003662 <setvbuf+0x176>
 8003636:	f412 7f00 	tst.w	r2, #512	; 0x200
 800363a:	e7c8      	b.n	80035ce <setvbuf+0xe2>
 800363c:	4648      	mov	r0, r9
 800363e:	f000 fa2d 	bl	8003a9c <malloc>
 8003642:	4606      	mov	r6, r0
 8003644:	2800      	cmp	r0, #0
 8003646:	d0ae      	beq.n	80035a6 <setvbuf+0xba>
 8003648:	464d      	mov	r5, r9
 800364a:	89a3      	ldrh	r3, [r4, #12]
 800364c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003650:	81a3      	strh	r3, [r4, #12]
 8003652:	e7d0      	b.n	80035f6 <setvbuf+0x10a>
 8003654:	2500      	movs	r5, #0
 8003656:	e7a8      	b.n	80035aa <setvbuf+0xbe>
 8003658:	60a3      	str	r3, [r4, #8]
 800365a:	e7e8      	b.n	800362e <setvbuf+0x142>
 800365c:	f04f 35ff 	mov.w	r5, #4294967295
 8003660:	e7b9      	b.n	80035d6 <setvbuf+0xea>
 8003662:	2500      	movs	r5, #0
 8003664:	e7b7      	b.n	80035d6 <setvbuf+0xea>
 8003666:	bf00      	nop
 8003668:	2000000c 	.word	0x2000000c
 800366c:	08005894 	.word	0x08005894
 8003670:	080058b4 	.word	0x080058b4
 8003674:	08005874 	.word	0x08005874

08003678 <siprintf>:
 8003678:	b40e      	push	{r1, r2, r3}
 800367a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800367e:	b500      	push	{lr}
 8003680:	b09c      	sub	sp, #112	; 0x70
 8003682:	ab1d      	add	r3, sp, #116	; 0x74
 8003684:	9002      	str	r0, [sp, #8]
 8003686:	9006      	str	r0, [sp, #24]
 8003688:	9107      	str	r1, [sp, #28]
 800368a:	9104      	str	r1, [sp, #16]
 800368c:	4808      	ldr	r0, [pc, #32]	; (80036b0 <siprintf+0x38>)
 800368e:	4909      	ldr	r1, [pc, #36]	; (80036b4 <siprintf+0x3c>)
 8003690:	f853 2b04 	ldr.w	r2, [r3], #4
 8003694:	9105      	str	r1, [sp, #20]
 8003696:	6800      	ldr	r0, [r0, #0]
 8003698:	a902      	add	r1, sp, #8
 800369a:	9301      	str	r3, [sp, #4]
 800369c:	f000 fa6e 	bl	8003b7c <_svfiprintf_r>
 80036a0:	2200      	movs	r2, #0
 80036a2:	9b02      	ldr	r3, [sp, #8]
 80036a4:	701a      	strb	r2, [r3, #0]
 80036a6:	b01c      	add	sp, #112	; 0x70
 80036a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80036ac:	b003      	add	sp, #12
 80036ae:	4770      	bx	lr
 80036b0:	2000000c 	.word	0x2000000c
 80036b4:	ffff0208 	.word	0xffff0208

080036b8 <__sread>:
 80036b8:	b510      	push	{r4, lr}
 80036ba:	460c      	mov	r4, r1
 80036bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036c0:	f001 f96a 	bl	8004998 <_read_r>
 80036c4:	2800      	cmp	r0, #0
 80036c6:	bfab      	itete	ge
 80036c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80036ca:	89a3      	ldrhlt	r3, [r4, #12]
 80036cc:	181b      	addge	r3, r3, r0
 80036ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80036d2:	bfac      	ite	ge
 80036d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80036d6:	81a3      	strhlt	r3, [r4, #12]
 80036d8:	bd10      	pop	{r4, pc}

080036da <__swrite>:
 80036da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036de:	461f      	mov	r7, r3
 80036e0:	898b      	ldrh	r3, [r1, #12]
 80036e2:	4605      	mov	r5, r0
 80036e4:	05db      	lsls	r3, r3, #23
 80036e6:	460c      	mov	r4, r1
 80036e8:	4616      	mov	r6, r2
 80036ea:	d505      	bpl.n	80036f8 <__swrite+0x1e>
 80036ec:	2302      	movs	r3, #2
 80036ee:	2200      	movs	r2, #0
 80036f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036f4:	f000 f95a 	bl	80039ac <_lseek_r>
 80036f8:	89a3      	ldrh	r3, [r4, #12]
 80036fa:	4632      	mov	r2, r6
 80036fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003700:	81a3      	strh	r3, [r4, #12]
 8003702:	4628      	mov	r0, r5
 8003704:	463b      	mov	r3, r7
 8003706:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800370a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800370e:	f000 b87d 	b.w	800380c <_write_r>

08003712 <__sseek>:
 8003712:	b510      	push	{r4, lr}
 8003714:	460c      	mov	r4, r1
 8003716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800371a:	f000 f947 	bl	80039ac <_lseek_r>
 800371e:	1c43      	adds	r3, r0, #1
 8003720:	89a3      	ldrh	r3, [r4, #12]
 8003722:	bf15      	itete	ne
 8003724:	6560      	strne	r0, [r4, #84]	; 0x54
 8003726:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800372a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800372e:	81a3      	strheq	r3, [r4, #12]
 8003730:	bf18      	it	ne
 8003732:	81a3      	strhne	r3, [r4, #12]
 8003734:	bd10      	pop	{r4, pc}

08003736 <__sclose>:
 8003736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800373a:	f000 b8e7 	b.w	800390c <_close_r>

0800373e <strncmp>:
 800373e:	4603      	mov	r3, r0
 8003740:	b510      	push	{r4, lr}
 8003742:	b172      	cbz	r2, 8003762 <strncmp+0x24>
 8003744:	3901      	subs	r1, #1
 8003746:	1884      	adds	r4, r0, r2
 8003748:	f813 0b01 	ldrb.w	r0, [r3], #1
 800374c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003750:	4290      	cmp	r0, r2
 8003752:	d101      	bne.n	8003758 <strncmp+0x1a>
 8003754:	42a3      	cmp	r3, r4
 8003756:	d101      	bne.n	800375c <strncmp+0x1e>
 8003758:	1a80      	subs	r0, r0, r2
 800375a:	bd10      	pop	{r4, pc}
 800375c:	2800      	cmp	r0, #0
 800375e:	d1f3      	bne.n	8003748 <strncmp+0xa>
 8003760:	e7fa      	b.n	8003758 <strncmp+0x1a>
 8003762:	4610      	mov	r0, r2
 8003764:	e7f9      	b.n	800375a <strncmp+0x1c>
	...

08003768 <__swbuf_r>:
 8003768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376a:	460e      	mov	r6, r1
 800376c:	4614      	mov	r4, r2
 800376e:	4605      	mov	r5, r0
 8003770:	b118      	cbz	r0, 800377a <__swbuf_r+0x12>
 8003772:	6983      	ldr	r3, [r0, #24]
 8003774:	b90b      	cbnz	r3, 800377a <__swbuf_r+0x12>
 8003776:	f7ff fc1d 	bl	8002fb4 <__sinit>
 800377a:	4b21      	ldr	r3, [pc, #132]	; (8003800 <__swbuf_r+0x98>)
 800377c:	429c      	cmp	r4, r3
 800377e:	d12b      	bne.n	80037d8 <__swbuf_r+0x70>
 8003780:	686c      	ldr	r4, [r5, #4]
 8003782:	69a3      	ldr	r3, [r4, #24]
 8003784:	60a3      	str	r3, [r4, #8]
 8003786:	89a3      	ldrh	r3, [r4, #12]
 8003788:	071a      	lsls	r2, r3, #28
 800378a:	d52f      	bpl.n	80037ec <__swbuf_r+0x84>
 800378c:	6923      	ldr	r3, [r4, #16]
 800378e:	b36b      	cbz	r3, 80037ec <__swbuf_r+0x84>
 8003790:	6923      	ldr	r3, [r4, #16]
 8003792:	6820      	ldr	r0, [r4, #0]
 8003794:	b2f6      	uxtb	r6, r6
 8003796:	1ac0      	subs	r0, r0, r3
 8003798:	6963      	ldr	r3, [r4, #20]
 800379a:	4637      	mov	r7, r6
 800379c:	4283      	cmp	r3, r0
 800379e:	dc04      	bgt.n	80037aa <__swbuf_r+0x42>
 80037a0:	4621      	mov	r1, r4
 80037a2:	4628      	mov	r0, r5
 80037a4:	f7ff fb60 	bl	8002e68 <_fflush_r>
 80037a8:	bb30      	cbnz	r0, 80037f8 <__swbuf_r+0x90>
 80037aa:	68a3      	ldr	r3, [r4, #8]
 80037ac:	3001      	adds	r0, #1
 80037ae:	3b01      	subs	r3, #1
 80037b0:	60a3      	str	r3, [r4, #8]
 80037b2:	6823      	ldr	r3, [r4, #0]
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	6022      	str	r2, [r4, #0]
 80037b8:	701e      	strb	r6, [r3, #0]
 80037ba:	6963      	ldr	r3, [r4, #20]
 80037bc:	4283      	cmp	r3, r0
 80037be:	d004      	beq.n	80037ca <__swbuf_r+0x62>
 80037c0:	89a3      	ldrh	r3, [r4, #12]
 80037c2:	07db      	lsls	r3, r3, #31
 80037c4:	d506      	bpl.n	80037d4 <__swbuf_r+0x6c>
 80037c6:	2e0a      	cmp	r6, #10
 80037c8:	d104      	bne.n	80037d4 <__swbuf_r+0x6c>
 80037ca:	4621      	mov	r1, r4
 80037cc:	4628      	mov	r0, r5
 80037ce:	f7ff fb4b 	bl	8002e68 <_fflush_r>
 80037d2:	b988      	cbnz	r0, 80037f8 <__swbuf_r+0x90>
 80037d4:	4638      	mov	r0, r7
 80037d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037d8:	4b0a      	ldr	r3, [pc, #40]	; (8003804 <__swbuf_r+0x9c>)
 80037da:	429c      	cmp	r4, r3
 80037dc:	d101      	bne.n	80037e2 <__swbuf_r+0x7a>
 80037de:	68ac      	ldr	r4, [r5, #8]
 80037e0:	e7cf      	b.n	8003782 <__swbuf_r+0x1a>
 80037e2:	4b09      	ldr	r3, [pc, #36]	; (8003808 <__swbuf_r+0xa0>)
 80037e4:	429c      	cmp	r4, r3
 80037e6:	bf08      	it	eq
 80037e8:	68ec      	ldreq	r4, [r5, #12]
 80037ea:	e7ca      	b.n	8003782 <__swbuf_r+0x1a>
 80037ec:	4621      	mov	r1, r4
 80037ee:	4628      	mov	r0, r5
 80037f0:	f000 f81e 	bl	8003830 <__swsetup_r>
 80037f4:	2800      	cmp	r0, #0
 80037f6:	d0cb      	beq.n	8003790 <__swbuf_r+0x28>
 80037f8:	f04f 37ff 	mov.w	r7, #4294967295
 80037fc:	e7ea      	b.n	80037d4 <__swbuf_r+0x6c>
 80037fe:	bf00      	nop
 8003800:	08005894 	.word	0x08005894
 8003804:	080058b4 	.word	0x080058b4
 8003808:	08005874 	.word	0x08005874

0800380c <_write_r>:
 800380c:	b538      	push	{r3, r4, r5, lr}
 800380e:	4604      	mov	r4, r0
 8003810:	4608      	mov	r0, r1
 8003812:	4611      	mov	r1, r2
 8003814:	2200      	movs	r2, #0
 8003816:	4d05      	ldr	r5, [pc, #20]	; (800382c <_write_r+0x20>)
 8003818:	602a      	str	r2, [r5, #0]
 800381a:	461a      	mov	r2, r3
 800381c:	f7fd fc5f 	bl	80010de <_write>
 8003820:	1c43      	adds	r3, r0, #1
 8003822:	d102      	bne.n	800382a <_write_r+0x1e>
 8003824:	682b      	ldr	r3, [r5, #0]
 8003826:	b103      	cbz	r3, 800382a <_write_r+0x1e>
 8003828:	6023      	str	r3, [r4, #0]
 800382a:	bd38      	pop	{r3, r4, r5, pc}
 800382c:	20000128 	.word	0x20000128

08003830 <__swsetup_r>:
 8003830:	4b32      	ldr	r3, [pc, #200]	; (80038fc <__swsetup_r+0xcc>)
 8003832:	b570      	push	{r4, r5, r6, lr}
 8003834:	681d      	ldr	r5, [r3, #0]
 8003836:	4606      	mov	r6, r0
 8003838:	460c      	mov	r4, r1
 800383a:	b125      	cbz	r5, 8003846 <__swsetup_r+0x16>
 800383c:	69ab      	ldr	r3, [r5, #24]
 800383e:	b913      	cbnz	r3, 8003846 <__swsetup_r+0x16>
 8003840:	4628      	mov	r0, r5
 8003842:	f7ff fbb7 	bl	8002fb4 <__sinit>
 8003846:	4b2e      	ldr	r3, [pc, #184]	; (8003900 <__swsetup_r+0xd0>)
 8003848:	429c      	cmp	r4, r3
 800384a:	d10f      	bne.n	800386c <__swsetup_r+0x3c>
 800384c:	686c      	ldr	r4, [r5, #4]
 800384e:	89a3      	ldrh	r3, [r4, #12]
 8003850:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003854:	0719      	lsls	r1, r3, #28
 8003856:	d42c      	bmi.n	80038b2 <__swsetup_r+0x82>
 8003858:	06dd      	lsls	r5, r3, #27
 800385a:	d411      	bmi.n	8003880 <__swsetup_r+0x50>
 800385c:	2309      	movs	r3, #9
 800385e:	6033      	str	r3, [r6, #0]
 8003860:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003864:	f04f 30ff 	mov.w	r0, #4294967295
 8003868:	81a3      	strh	r3, [r4, #12]
 800386a:	e03e      	b.n	80038ea <__swsetup_r+0xba>
 800386c:	4b25      	ldr	r3, [pc, #148]	; (8003904 <__swsetup_r+0xd4>)
 800386e:	429c      	cmp	r4, r3
 8003870:	d101      	bne.n	8003876 <__swsetup_r+0x46>
 8003872:	68ac      	ldr	r4, [r5, #8]
 8003874:	e7eb      	b.n	800384e <__swsetup_r+0x1e>
 8003876:	4b24      	ldr	r3, [pc, #144]	; (8003908 <__swsetup_r+0xd8>)
 8003878:	429c      	cmp	r4, r3
 800387a:	bf08      	it	eq
 800387c:	68ec      	ldreq	r4, [r5, #12]
 800387e:	e7e6      	b.n	800384e <__swsetup_r+0x1e>
 8003880:	0758      	lsls	r0, r3, #29
 8003882:	d512      	bpl.n	80038aa <__swsetup_r+0x7a>
 8003884:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003886:	b141      	cbz	r1, 800389a <__swsetup_r+0x6a>
 8003888:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800388c:	4299      	cmp	r1, r3
 800388e:	d002      	beq.n	8003896 <__swsetup_r+0x66>
 8003890:	4630      	mov	r0, r6
 8003892:	f7ff fc99 	bl	80031c8 <_free_r>
 8003896:	2300      	movs	r3, #0
 8003898:	6363      	str	r3, [r4, #52]	; 0x34
 800389a:	89a3      	ldrh	r3, [r4, #12]
 800389c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80038a0:	81a3      	strh	r3, [r4, #12]
 80038a2:	2300      	movs	r3, #0
 80038a4:	6063      	str	r3, [r4, #4]
 80038a6:	6923      	ldr	r3, [r4, #16]
 80038a8:	6023      	str	r3, [r4, #0]
 80038aa:	89a3      	ldrh	r3, [r4, #12]
 80038ac:	f043 0308 	orr.w	r3, r3, #8
 80038b0:	81a3      	strh	r3, [r4, #12]
 80038b2:	6923      	ldr	r3, [r4, #16]
 80038b4:	b94b      	cbnz	r3, 80038ca <__swsetup_r+0x9a>
 80038b6:	89a3      	ldrh	r3, [r4, #12]
 80038b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80038bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038c0:	d003      	beq.n	80038ca <__swsetup_r+0x9a>
 80038c2:	4621      	mov	r1, r4
 80038c4:	4630      	mov	r0, r6
 80038c6:	f000 f8a9 	bl	8003a1c <__smakebuf_r>
 80038ca:	89a0      	ldrh	r0, [r4, #12]
 80038cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038d0:	f010 0301 	ands.w	r3, r0, #1
 80038d4:	d00a      	beq.n	80038ec <__swsetup_r+0xbc>
 80038d6:	2300      	movs	r3, #0
 80038d8:	60a3      	str	r3, [r4, #8]
 80038da:	6963      	ldr	r3, [r4, #20]
 80038dc:	425b      	negs	r3, r3
 80038de:	61a3      	str	r3, [r4, #24]
 80038e0:	6923      	ldr	r3, [r4, #16]
 80038e2:	b943      	cbnz	r3, 80038f6 <__swsetup_r+0xc6>
 80038e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80038e8:	d1ba      	bne.n	8003860 <__swsetup_r+0x30>
 80038ea:	bd70      	pop	{r4, r5, r6, pc}
 80038ec:	0781      	lsls	r1, r0, #30
 80038ee:	bf58      	it	pl
 80038f0:	6963      	ldrpl	r3, [r4, #20]
 80038f2:	60a3      	str	r3, [r4, #8]
 80038f4:	e7f4      	b.n	80038e0 <__swsetup_r+0xb0>
 80038f6:	2000      	movs	r0, #0
 80038f8:	e7f7      	b.n	80038ea <__swsetup_r+0xba>
 80038fa:	bf00      	nop
 80038fc:	2000000c 	.word	0x2000000c
 8003900:	08005894 	.word	0x08005894
 8003904:	080058b4 	.word	0x080058b4
 8003908:	08005874 	.word	0x08005874

0800390c <_close_r>:
 800390c:	b538      	push	{r3, r4, r5, lr}
 800390e:	2300      	movs	r3, #0
 8003910:	4d05      	ldr	r5, [pc, #20]	; (8003928 <_close_r+0x1c>)
 8003912:	4604      	mov	r4, r0
 8003914:	4608      	mov	r0, r1
 8003916:	602b      	str	r3, [r5, #0]
 8003918:	f7fd fbfd 	bl	8001116 <_close>
 800391c:	1c43      	adds	r3, r0, #1
 800391e:	d102      	bne.n	8003926 <_close_r+0x1a>
 8003920:	682b      	ldr	r3, [r5, #0]
 8003922:	b103      	cbz	r3, 8003926 <_close_r+0x1a>
 8003924:	6023      	str	r3, [r4, #0]
 8003926:	bd38      	pop	{r3, r4, r5, pc}
 8003928:	20000128 	.word	0x20000128

0800392c <_getc_r>:
 800392c:	b538      	push	{r3, r4, r5, lr}
 800392e:	460c      	mov	r4, r1
 8003930:	4605      	mov	r5, r0
 8003932:	b118      	cbz	r0, 800393c <_getc_r+0x10>
 8003934:	6983      	ldr	r3, [r0, #24]
 8003936:	b90b      	cbnz	r3, 800393c <_getc_r+0x10>
 8003938:	f7ff fb3c 	bl	8002fb4 <__sinit>
 800393c:	4b18      	ldr	r3, [pc, #96]	; (80039a0 <_getc_r+0x74>)
 800393e:	429c      	cmp	r4, r3
 8003940:	d11e      	bne.n	8003980 <_getc_r+0x54>
 8003942:	686c      	ldr	r4, [r5, #4]
 8003944:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003946:	07d8      	lsls	r0, r3, #31
 8003948:	d405      	bmi.n	8003956 <_getc_r+0x2a>
 800394a:	89a3      	ldrh	r3, [r4, #12]
 800394c:	0599      	lsls	r1, r3, #22
 800394e:	d402      	bmi.n	8003956 <_getc_r+0x2a>
 8003950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003952:	f7ff fc20 	bl	8003196 <__retarget_lock_acquire_recursive>
 8003956:	6863      	ldr	r3, [r4, #4]
 8003958:	3b01      	subs	r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	6063      	str	r3, [r4, #4]
 800395e:	da19      	bge.n	8003994 <_getc_r+0x68>
 8003960:	4628      	mov	r0, r5
 8003962:	4621      	mov	r1, r4
 8003964:	f001 f8c0 	bl	8004ae8 <__srget_r>
 8003968:	4605      	mov	r5, r0
 800396a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800396c:	07da      	lsls	r2, r3, #31
 800396e:	d405      	bmi.n	800397c <_getc_r+0x50>
 8003970:	89a3      	ldrh	r3, [r4, #12]
 8003972:	059b      	lsls	r3, r3, #22
 8003974:	d402      	bmi.n	800397c <_getc_r+0x50>
 8003976:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003978:	f7ff fc0e 	bl	8003198 <__retarget_lock_release_recursive>
 800397c:	4628      	mov	r0, r5
 800397e:	bd38      	pop	{r3, r4, r5, pc}
 8003980:	4b08      	ldr	r3, [pc, #32]	; (80039a4 <_getc_r+0x78>)
 8003982:	429c      	cmp	r4, r3
 8003984:	d101      	bne.n	800398a <_getc_r+0x5e>
 8003986:	68ac      	ldr	r4, [r5, #8]
 8003988:	e7dc      	b.n	8003944 <_getc_r+0x18>
 800398a:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <_getc_r+0x7c>)
 800398c:	429c      	cmp	r4, r3
 800398e:	bf08      	it	eq
 8003990:	68ec      	ldreq	r4, [r5, #12]
 8003992:	e7d7      	b.n	8003944 <_getc_r+0x18>
 8003994:	6823      	ldr	r3, [r4, #0]
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	6022      	str	r2, [r4, #0]
 800399a:	781d      	ldrb	r5, [r3, #0]
 800399c:	e7e5      	b.n	800396a <_getc_r+0x3e>
 800399e:	bf00      	nop
 80039a0:	08005894 	.word	0x08005894
 80039a4:	080058b4 	.word	0x080058b4
 80039a8:	08005874 	.word	0x08005874

080039ac <_lseek_r>:
 80039ac:	b538      	push	{r3, r4, r5, lr}
 80039ae:	4604      	mov	r4, r0
 80039b0:	4608      	mov	r0, r1
 80039b2:	4611      	mov	r1, r2
 80039b4:	2200      	movs	r2, #0
 80039b6:	4d05      	ldr	r5, [pc, #20]	; (80039cc <_lseek_r+0x20>)
 80039b8:	602a      	str	r2, [r5, #0]
 80039ba:	461a      	mov	r2, r3
 80039bc:	f7fd fbcf 	bl	800115e <_lseek>
 80039c0:	1c43      	adds	r3, r0, #1
 80039c2:	d102      	bne.n	80039ca <_lseek_r+0x1e>
 80039c4:	682b      	ldr	r3, [r5, #0]
 80039c6:	b103      	cbz	r3, 80039ca <_lseek_r+0x1e>
 80039c8:	6023      	str	r3, [r4, #0]
 80039ca:	bd38      	pop	{r3, r4, r5, pc}
 80039cc:	20000128 	.word	0x20000128

080039d0 <__swhatbuf_r>:
 80039d0:	b570      	push	{r4, r5, r6, lr}
 80039d2:	460e      	mov	r6, r1
 80039d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039d8:	4614      	mov	r4, r2
 80039da:	2900      	cmp	r1, #0
 80039dc:	461d      	mov	r5, r3
 80039de:	b096      	sub	sp, #88	; 0x58
 80039e0:	da08      	bge.n	80039f4 <__swhatbuf_r+0x24>
 80039e2:	2200      	movs	r2, #0
 80039e4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80039e8:	602a      	str	r2, [r5, #0]
 80039ea:	061a      	lsls	r2, r3, #24
 80039ec:	d410      	bmi.n	8003a10 <__swhatbuf_r+0x40>
 80039ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039f2:	e00e      	b.n	8003a12 <__swhatbuf_r+0x42>
 80039f4:	466a      	mov	r2, sp
 80039f6:	f001 fa9d 	bl	8004f34 <_fstat_r>
 80039fa:	2800      	cmp	r0, #0
 80039fc:	dbf1      	blt.n	80039e2 <__swhatbuf_r+0x12>
 80039fe:	9a01      	ldr	r2, [sp, #4]
 8003a00:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003a04:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003a08:	425a      	negs	r2, r3
 8003a0a:	415a      	adcs	r2, r3
 8003a0c:	602a      	str	r2, [r5, #0]
 8003a0e:	e7ee      	b.n	80039ee <__swhatbuf_r+0x1e>
 8003a10:	2340      	movs	r3, #64	; 0x40
 8003a12:	2000      	movs	r0, #0
 8003a14:	6023      	str	r3, [r4, #0]
 8003a16:	b016      	add	sp, #88	; 0x58
 8003a18:	bd70      	pop	{r4, r5, r6, pc}
	...

08003a1c <__smakebuf_r>:
 8003a1c:	898b      	ldrh	r3, [r1, #12]
 8003a1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a20:	079d      	lsls	r5, r3, #30
 8003a22:	4606      	mov	r6, r0
 8003a24:	460c      	mov	r4, r1
 8003a26:	d507      	bpl.n	8003a38 <__smakebuf_r+0x1c>
 8003a28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003a2c:	6023      	str	r3, [r4, #0]
 8003a2e:	6123      	str	r3, [r4, #16]
 8003a30:	2301      	movs	r3, #1
 8003a32:	6163      	str	r3, [r4, #20]
 8003a34:	b002      	add	sp, #8
 8003a36:	bd70      	pop	{r4, r5, r6, pc}
 8003a38:	466a      	mov	r2, sp
 8003a3a:	ab01      	add	r3, sp, #4
 8003a3c:	f7ff ffc8 	bl	80039d0 <__swhatbuf_r>
 8003a40:	9900      	ldr	r1, [sp, #0]
 8003a42:	4605      	mov	r5, r0
 8003a44:	4630      	mov	r0, r6
 8003a46:	f7ff fc27 	bl	8003298 <_malloc_r>
 8003a4a:	b948      	cbnz	r0, 8003a60 <__smakebuf_r+0x44>
 8003a4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a50:	059a      	lsls	r2, r3, #22
 8003a52:	d4ef      	bmi.n	8003a34 <__smakebuf_r+0x18>
 8003a54:	f023 0303 	bic.w	r3, r3, #3
 8003a58:	f043 0302 	orr.w	r3, r3, #2
 8003a5c:	81a3      	strh	r3, [r4, #12]
 8003a5e:	e7e3      	b.n	8003a28 <__smakebuf_r+0xc>
 8003a60:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <__smakebuf_r+0x7c>)
 8003a62:	62b3      	str	r3, [r6, #40]	; 0x28
 8003a64:	89a3      	ldrh	r3, [r4, #12]
 8003a66:	6020      	str	r0, [r4, #0]
 8003a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a6c:	81a3      	strh	r3, [r4, #12]
 8003a6e:	9b00      	ldr	r3, [sp, #0]
 8003a70:	6120      	str	r0, [r4, #16]
 8003a72:	6163      	str	r3, [r4, #20]
 8003a74:	9b01      	ldr	r3, [sp, #4]
 8003a76:	b15b      	cbz	r3, 8003a90 <__smakebuf_r+0x74>
 8003a78:	4630      	mov	r0, r6
 8003a7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a7e:	f001 fa6b 	bl	8004f58 <_isatty_r>
 8003a82:	b128      	cbz	r0, 8003a90 <__smakebuf_r+0x74>
 8003a84:	89a3      	ldrh	r3, [r4, #12]
 8003a86:	f023 0303 	bic.w	r3, r3, #3
 8003a8a:	f043 0301 	orr.w	r3, r3, #1
 8003a8e:	81a3      	strh	r3, [r4, #12]
 8003a90:	89a0      	ldrh	r0, [r4, #12]
 8003a92:	4305      	orrs	r5, r0
 8003a94:	81a5      	strh	r5, [r4, #12]
 8003a96:	e7cd      	b.n	8003a34 <__smakebuf_r+0x18>
 8003a98:	08002f4d 	.word	0x08002f4d

08003a9c <malloc>:
 8003a9c:	4b02      	ldr	r3, [pc, #8]	; (8003aa8 <malloc+0xc>)
 8003a9e:	4601      	mov	r1, r0
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	f7ff bbf9 	b.w	8003298 <_malloc_r>
 8003aa6:	bf00      	nop
 8003aa8:	2000000c 	.word	0x2000000c

08003aac <__malloc_lock>:
 8003aac:	4801      	ldr	r0, [pc, #4]	; (8003ab4 <__malloc_lock+0x8>)
 8003aae:	f7ff bb72 	b.w	8003196 <__retarget_lock_acquire_recursive>
 8003ab2:	bf00      	nop
 8003ab4:	2000011c 	.word	0x2000011c

08003ab8 <__malloc_unlock>:
 8003ab8:	4801      	ldr	r0, [pc, #4]	; (8003ac0 <__malloc_unlock+0x8>)
 8003aba:	f7ff bb6d 	b.w	8003198 <__retarget_lock_release_recursive>
 8003abe:	bf00      	nop
 8003ac0:	2000011c 	.word	0x2000011c

08003ac4 <__ssputs_r>:
 8003ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ac8:	688e      	ldr	r6, [r1, #8]
 8003aca:	4682      	mov	sl, r0
 8003acc:	429e      	cmp	r6, r3
 8003ace:	460c      	mov	r4, r1
 8003ad0:	4690      	mov	r8, r2
 8003ad2:	461f      	mov	r7, r3
 8003ad4:	d838      	bhi.n	8003b48 <__ssputs_r+0x84>
 8003ad6:	898a      	ldrh	r2, [r1, #12]
 8003ad8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003adc:	d032      	beq.n	8003b44 <__ssputs_r+0x80>
 8003ade:	6825      	ldr	r5, [r4, #0]
 8003ae0:	6909      	ldr	r1, [r1, #16]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	eba5 0901 	sub.w	r9, r5, r1
 8003ae8:	6965      	ldr	r5, [r4, #20]
 8003aea:	444b      	add	r3, r9
 8003aec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003af0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003af4:	106d      	asrs	r5, r5, #1
 8003af6:	429d      	cmp	r5, r3
 8003af8:	bf38      	it	cc
 8003afa:	461d      	movcc	r5, r3
 8003afc:	0553      	lsls	r3, r2, #21
 8003afe:	d531      	bpl.n	8003b64 <__ssputs_r+0xa0>
 8003b00:	4629      	mov	r1, r5
 8003b02:	f7ff fbc9 	bl	8003298 <_malloc_r>
 8003b06:	4606      	mov	r6, r0
 8003b08:	b950      	cbnz	r0, 8003b20 <__ssputs_r+0x5c>
 8003b0a:	230c      	movs	r3, #12
 8003b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b10:	f8ca 3000 	str.w	r3, [sl]
 8003b14:	89a3      	ldrh	r3, [r4, #12]
 8003b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b1a:	81a3      	strh	r3, [r4, #12]
 8003b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b20:	464a      	mov	r2, r9
 8003b22:	6921      	ldr	r1, [r4, #16]
 8003b24:	f7ff fb39 	bl	800319a <memcpy>
 8003b28:	89a3      	ldrh	r3, [r4, #12]
 8003b2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b32:	81a3      	strh	r3, [r4, #12]
 8003b34:	6126      	str	r6, [r4, #16]
 8003b36:	444e      	add	r6, r9
 8003b38:	6026      	str	r6, [r4, #0]
 8003b3a:	463e      	mov	r6, r7
 8003b3c:	6165      	str	r5, [r4, #20]
 8003b3e:	eba5 0509 	sub.w	r5, r5, r9
 8003b42:	60a5      	str	r5, [r4, #8]
 8003b44:	42be      	cmp	r6, r7
 8003b46:	d900      	bls.n	8003b4a <__ssputs_r+0x86>
 8003b48:	463e      	mov	r6, r7
 8003b4a:	4632      	mov	r2, r6
 8003b4c:	4641      	mov	r1, r8
 8003b4e:	6820      	ldr	r0, [r4, #0]
 8003b50:	f001 fa20 	bl	8004f94 <memmove>
 8003b54:	68a3      	ldr	r3, [r4, #8]
 8003b56:	2000      	movs	r0, #0
 8003b58:	1b9b      	subs	r3, r3, r6
 8003b5a:	60a3      	str	r3, [r4, #8]
 8003b5c:	6823      	ldr	r3, [r4, #0]
 8003b5e:	4433      	add	r3, r6
 8003b60:	6023      	str	r3, [r4, #0]
 8003b62:	e7db      	b.n	8003b1c <__ssputs_r+0x58>
 8003b64:	462a      	mov	r2, r5
 8003b66:	f001 fa2f 	bl	8004fc8 <_realloc_r>
 8003b6a:	4606      	mov	r6, r0
 8003b6c:	2800      	cmp	r0, #0
 8003b6e:	d1e1      	bne.n	8003b34 <__ssputs_r+0x70>
 8003b70:	4650      	mov	r0, sl
 8003b72:	6921      	ldr	r1, [r4, #16]
 8003b74:	f7ff fb28 	bl	80031c8 <_free_r>
 8003b78:	e7c7      	b.n	8003b0a <__ssputs_r+0x46>
	...

08003b7c <_svfiprintf_r>:
 8003b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b80:	4698      	mov	r8, r3
 8003b82:	898b      	ldrh	r3, [r1, #12]
 8003b84:	4607      	mov	r7, r0
 8003b86:	061b      	lsls	r3, r3, #24
 8003b88:	460d      	mov	r5, r1
 8003b8a:	4614      	mov	r4, r2
 8003b8c:	b09d      	sub	sp, #116	; 0x74
 8003b8e:	d50e      	bpl.n	8003bae <_svfiprintf_r+0x32>
 8003b90:	690b      	ldr	r3, [r1, #16]
 8003b92:	b963      	cbnz	r3, 8003bae <_svfiprintf_r+0x32>
 8003b94:	2140      	movs	r1, #64	; 0x40
 8003b96:	f7ff fb7f 	bl	8003298 <_malloc_r>
 8003b9a:	6028      	str	r0, [r5, #0]
 8003b9c:	6128      	str	r0, [r5, #16]
 8003b9e:	b920      	cbnz	r0, 8003baa <_svfiprintf_r+0x2e>
 8003ba0:	230c      	movs	r3, #12
 8003ba2:	603b      	str	r3, [r7, #0]
 8003ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba8:	e0d1      	b.n	8003d4e <_svfiprintf_r+0x1d2>
 8003baa:	2340      	movs	r3, #64	; 0x40
 8003bac:	616b      	str	r3, [r5, #20]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8003bb2:	2320      	movs	r3, #32
 8003bb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bb8:	2330      	movs	r3, #48	; 0x30
 8003bba:	f04f 0901 	mov.w	r9, #1
 8003bbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bc2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003d68 <_svfiprintf_r+0x1ec>
 8003bc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bca:	4623      	mov	r3, r4
 8003bcc:	469a      	mov	sl, r3
 8003bce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bd2:	b10a      	cbz	r2, 8003bd8 <_svfiprintf_r+0x5c>
 8003bd4:	2a25      	cmp	r2, #37	; 0x25
 8003bd6:	d1f9      	bne.n	8003bcc <_svfiprintf_r+0x50>
 8003bd8:	ebba 0b04 	subs.w	fp, sl, r4
 8003bdc:	d00b      	beq.n	8003bf6 <_svfiprintf_r+0x7a>
 8003bde:	465b      	mov	r3, fp
 8003be0:	4622      	mov	r2, r4
 8003be2:	4629      	mov	r1, r5
 8003be4:	4638      	mov	r0, r7
 8003be6:	f7ff ff6d 	bl	8003ac4 <__ssputs_r>
 8003bea:	3001      	adds	r0, #1
 8003bec:	f000 80aa 	beq.w	8003d44 <_svfiprintf_r+0x1c8>
 8003bf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003bf2:	445a      	add	r2, fp
 8003bf4:	9209      	str	r2, [sp, #36]	; 0x24
 8003bf6:	f89a 3000 	ldrb.w	r3, [sl]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 80a2 	beq.w	8003d44 <_svfiprintf_r+0x1c8>
 8003c00:	2300      	movs	r3, #0
 8003c02:	f04f 32ff 	mov.w	r2, #4294967295
 8003c06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c0a:	f10a 0a01 	add.w	sl, sl, #1
 8003c0e:	9304      	str	r3, [sp, #16]
 8003c10:	9307      	str	r3, [sp, #28]
 8003c12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c16:	931a      	str	r3, [sp, #104]	; 0x68
 8003c18:	4654      	mov	r4, sl
 8003c1a:	2205      	movs	r2, #5
 8003c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c20:	4851      	ldr	r0, [pc, #324]	; (8003d68 <_svfiprintf_r+0x1ec>)
 8003c22:	f001 f9a9 	bl	8004f78 <memchr>
 8003c26:	9a04      	ldr	r2, [sp, #16]
 8003c28:	b9d8      	cbnz	r0, 8003c62 <_svfiprintf_r+0xe6>
 8003c2a:	06d0      	lsls	r0, r2, #27
 8003c2c:	bf44      	itt	mi
 8003c2e:	2320      	movmi	r3, #32
 8003c30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c34:	0711      	lsls	r1, r2, #28
 8003c36:	bf44      	itt	mi
 8003c38:	232b      	movmi	r3, #43	; 0x2b
 8003c3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c3e:	f89a 3000 	ldrb.w	r3, [sl]
 8003c42:	2b2a      	cmp	r3, #42	; 0x2a
 8003c44:	d015      	beq.n	8003c72 <_svfiprintf_r+0xf6>
 8003c46:	4654      	mov	r4, sl
 8003c48:	2000      	movs	r0, #0
 8003c4a:	f04f 0c0a 	mov.w	ip, #10
 8003c4e:	9a07      	ldr	r2, [sp, #28]
 8003c50:	4621      	mov	r1, r4
 8003c52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c56:	3b30      	subs	r3, #48	; 0x30
 8003c58:	2b09      	cmp	r3, #9
 8003c5a:	d94e      	bls.n	8003cfa <_svfiprintf_r+0x17e>
 8003c5c:	b1b0      	cbz	r0, 8003c8c <_svfiprintf_r+0x110>
 8003c5e:	9207      	str	r2, [sp, #28]
 8003c60:	e014      	b.n	8003c8c <_svfiprintf_r+0x110>
 8003c62:	eba0 0308 	sub.w	r3, r0, r8
 8003c66:	fa09 f303 	lsl.w	r3, r9, r3
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	46a2      	mov	sl, r4
 8003c6e:	9304      	str	r3, [sp, #16]
 8003c70:	e7d2      	b.n	8003c18 <_svfiprintf_r+0x9c>
 8003c72:	9b03      	ldr	r3, [sp, #12]
 8003c74:	1d19      	adds	r1, r3, #4
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	9103      	str	r1, [sp, #12]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	bfbb      	ittet	lt
 8003c7e:	425b      	neglt	r3, r3
 8003c80:	f042 0202 	orrlt.w	r2, r2, #2
 8003c84:	9307      	strge	r3, [sp, #28]
 8003c86:	9307      	strlt	r3, [sp, #28]
 8003c88:	bfb8      	it	lt
 8003c8a:	9204      	strlt	r2, [sp, #16]
 8003c8c:	7823      	ldrb	r3, [r4, #0]
 8003c8e:	2b2e      	cmp	r3, #46	; 0x2e
 8003c90:	d10c      	bne.n	8003cac <_svfiprintf_r+0x130>
 8003c92:	7863      	ldrb	r3, [r4, #1]
 8003c94:	2b2a      	cmp	r3, #42	; 0x2a
 8003c96:	d135      	bne.n	8003d04 <_svfiprintf_r+0x188>
 8003c98:	9b03      	ldr	r3, [sp, #12]
 8003c9a:	3402      	adds	r4, #2
 8003c9c:	1d1a      	adds	r2, r3, #4
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	9203      	str	r2, [sp, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	bfb8      	it	lt
 8003ca6:	f04f 33ff 	movlt.w	r3, #4294967295
 8003caa:	9305      	str	r3, [sp, #20]
 8003cac:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003d6c <_svfiprintf_r+0x1f0>
 8003cb0:	2203      	movs	r2, #3
 8003cb2:	4650      	mov	r0, sl
 8003cb4:	7821      	ldrb	r1, [r4, #0]
 8003cb6:	f001 f95f 	bl	8004f78 <memchr>
 8003cba:	b140      	cbz	r0, 8003cce <_svfiprintf_r+0x152>
 8003cbc:	2340      	movs	r3, #64	; 0x40
 8003cbe:	eba0 000a 	sub.w	r0, r0, sl
 8003cc2:	fa03 f000 	lsl.w	r0, r3, r0
 8003cc6:	9b04      	ldr	r3, [sp, #16]
 8003cc8:	3401      	adds	r4, #1
 8003cca:	4303      	orrs	r3, r0
 8003ccc:	9304      	str	r3, [sp, #16]
 8003cce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cd2:	2206      	movs	r2, #6
 8003cd4:	4826      	ldr	r0, [pc, #152]	; (8003d70 <_svfiprintf_r+0x1f4>)
 8003cd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cda:	f001 f94d 	bl	8004f78 <memchr>
 8003cde:	2800      	cmp	r0, #0
 8003ce0:	d038      	beq.n	8003d54 <_svfiprintf_r+0x1d8>
 8003ce2:	4b24      	ldr	r3, [pc, #144]	; (8003d74 <_svfiprintf_r+0x1f8>)
 8003ce4:	bb1b      	cbnz	r3, 8003d2e <_svfiprintf_r+0x1b2>
 8003ce6:	9b03      	ldr	r3, [sp, #12]
 8003ce8:	3307      	adds	r3, #7
 8003cea:	f023 0307 	bic.w	r3, r3, #7
 8003cee:	3308      	adds	r3, #8
 8003cf0:	9303      	str	r3, [sp, #12]
 8003cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cf4:	4433      	add	r3, r6
 8003cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8003cf8:	e767      	b.n	8003bca <_svfiprintf_r+0x4e>
 8003cfa:	460c      	mov	r4, r1
 8003cfc:	2001      	movs	r0, #1
 8003cfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d02:	e7a5      	b.n	8003c50 <_svfiprintf_r+0xd4>
 8003d04:	2300      	movs	r3, #0
 8003d06:	f04f 0c0a 	mov.w	ip, #10
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	3401      	adds	r4, #1
 8003d0e:	9305      	str	r3, [sp, #20]
 8003d10:	4620      	mov	r0, r4
 8003d12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d16:	3a30      	subs	r2, #48	; 0x30
 8003d18:	2a09      	cmp	r2, #9
 8003d1a:	d903      	bls.n	8003d24 <_svfiprintf_r+0x1a8>
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0c5      	beq.n	8003cac <_svfiprintf_r+0x130>
 8003d20:	9105      	str	r1, [sp, #20]
 8003d22:	e7c3      	b.n	8003cac <_svfiprintf_r+0x130>
 8003d24:	4604      	mov	r4, r0
 8003d26:	2301      	movs	r3, #1
 8003d28:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d2c:	e7f0      	b.n	8003d10 <_svfiprintf_r+0x194>
 8003d2e:	ab03      	add	r3, sp, #12
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	462a      	mov	r2, r5
 8003d34:	4638      	mov	r0, r7
 8003d36:	4b10      	ldr	r3, [pc, #64]	; (8003d78 <_svfiprintf_r+0x1fc>)
 8003d38:	a904      	add	r1, sp, #16
 8003d3a:	f3af 8000 	nop.w
 8003d3e:	1c42      	adds	r2, r0, #1
 8003d40:	4606      	mov	r6, r0
 8003d42:	d1d6      	bne.n	8003cf2 <_svfiprintf_r+0x176>
 8003d44:	89ab      	ldrh	r3, [r5, #12]
 8003d46:	065b      	lsls	r3, r3, #25
 8003d48:	f53f af2c 	bmi.w	8003ba4 <_svfiprintf_r+0x28>
 8003d4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d4e:	b01d      	add	sp, #116	; 0x74
 8003d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d54:	ab03      	add	r3, sp, #12
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	462a      	mov	r2, r5
 8003d5a:	4638      	mov	r0, r7
 8003d5c:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <_svfiprintf_r+0x1fc>)
 8003d5e:	a904      	add	r1, sp, #16
 8003d60:	f000 f9d4 	bl	800410c <_printf_i>
 8003d64:	e7eb      	b.n	8003d3e <_svfiprintf_r+0x1c2>
 8003d66:	bf00      	nop
 8003d68:	080058d8 	.word	0x080058d8
 8003d6c:	080058de 	.word	0x080058de
 8003d70:	080058e2 	.word	0x080058e2
 8003d74:	00000000 	.word	0x00000000
 8003d78:	08003ac5 	.word	0x08003ac5

08003d7c <__sfputc_r>:
 8003d7c:	6893      	ldr	r3, [r2, #8]
 8003d7e:	b410      	push	{r4}
 8003d80:	3b01      	subs	r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	6093      	str	r3, [r2, #8]
 8003d86:	da07      	bge.n	8003d98 <__sfputc_r+0x1c>
 8003d88:	6994      	ldr	r4, [r2, #24]
 8003d8a:	42a3      	cmp	r3, r4
 8003d8c:	db01      	blt.n	8003d92 <__sfputc_r+0x16>
 8003d8e:	290a      	cmp	r1, #10
 8003d90:	d102      	bne.n	8003d98 <__sfputc_r+0x1c>
 8003d92:	bc10      	pop	{r4}
 8003d94:	f7ff bce8 	b.w	8003768 <__swbuf_r>
 8003d98:	6813      	ldr	r3, [r2, #0]
 8003d9a:	1c58      	adds	r0, r3, #1
 8003d9c:	6010      	str	r0, [r2, #0]
 8003d9e:	7019      	strb	r1, [r3, #0]
 8003da0:	4608      	mov	r0, r1
 8003da2:	bc10      	pop	{r4}
 8003da4:	4770      	bx	lr

08003da6 <__sfputs_r>:
 8003da6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da8:	4606      	mov	r6, r0
 8003daa:	460f      	mov	r7, r1
 8003dac:	4614      	mov	r4, r2
 8003dae:	18d5      	adds	r5, r2, r3
 8003db0:	42ac      	cmp	r4, r5
 8003db2:	d101      	bne.n	8003db8 <__sfputs_r+0x12>
 8003db4:	2000      	movs	r0, #0
 8003db6:	e007      	b.n	8003dc8 <__sfputs_r+0x22>
 8003db8:	463a      	mov	r2, r7
 8003dba:	4630      	mov	r0, r6
 8003dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dc0:	f7ff ffdc 	bl	8003d7c <__sfputc_r>
 8003dc4:	1c43      	adds	r3, r0, #1
 8003dc6:	d1f3      	bne.n	8003db0 <__sfputs_r+0xa>
 8003dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003dcc <_vfiprintf_r>:
 8003dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd0:	460d      	mov	r5, r1
 8003dd2:	4614      	mov	r4, r2
 8003dd4:	4698      	mov	r8, r3
 8003dd6:	4606      	mov	r6, r0
 8003dd8:	b09d      	sub	sp, #116	; 0x74
 8003dda:	b118      	cbz	r0, 8003de4 <_vfiprintf_r+0x18>
 8003ddc:	6983      	ldr	r3, [r0, #24]
 8003dde:	b90b      	cbnz	r3, 8003de4 <_vfiprintf_r+0x18>
 8003de0:	f7ff f8e8 	bl	8002fb4 <__sinit>
 8003de4:	4b89      	ldr	r3, [pc, #548]	; (800400c <_vfiprintf_r+0x240>)
 8003de6:	429d      	cmp	r5, r3
 8003de8:	d11b      	bne.n	8003e22 <_vfiprintf_r+0x56>
 8003dea:	6875      	ldr	r5, [r6, #4]
 8003dec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003dee:	07d9      	lsls	r1, r3, #31
 8003df0:	d405      	bmi.n	8003dfe <_vfiprintf_r+0x32>
 8003df2:	89ab      	ldrh	r3, [r5, #12]
 8003df4:	059a      	lsls	r2, r3, #22
 8003df6:	d402      	bmi.n	8003dfe <_vfiprintf_r+0x32>
 8003df8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003dfa:	f7ff f9cc 	bl	8003196 <__retarget_lock_acquire_recursive>
 8003dfe:	89ab      	ldrh	r3, [r5, #12]
 8003e00:	071b      	lsls	r3, r3, #28
 8003e02:	d501      	bpl.n	8003e08 <_vfiprintf_r+0x3c>
 8003e04:	692b      	ldr	r3, [r5, #16]
 8003e06:	b9eb      	cbnz	r3, 8003e44 <_vfiprintf_r+0x78>
 8003e08:	4629      	mov	r1, r5
 8003e0a:	4630      	mov	r0, r6
 8003e0c:	f7ff fd10 	bl	8003830 <__swsetup_r>
 8003e10:	b1c0      	cbz	r0, 8003e44 <_vfiprintf_r+0x78>
 8003e12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e14:	07dc      	lsls	r4, r3, #31
 8003e16:	d50e      	bpl.n	8003e36 <_vfiprintf_r+0x6a>
 8003e18:	f04f 30ff 	mov.w	r0, #4294967295
 8003e1c:	b01d      	add	sp, #116	; 0x74
 8003e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e22:	4b7b      	ldr	r3, [pc, #492]	; (8004010 <_vfiprintf_r+0x244>)
 8003e24:	429d      	cmp	r5, r3
 8003e26:	d101      	bne.n	8003e2c <_vfiprintf_r+0x60>
 8003e28:	68b5      	ldr	r5, [r6, #8]
 8003e2a:	e7df      	b.n	8003dec <_vfiprintf_r+0x20>
 8003e2c:	4b79      	ldr	r3, [pc, #484]	; (8004014 <_vfiprintf_r+0x248>)
 8003e2e:	429d      	cmp	r5, r3
 8003e30:	bf08      	it	eq
 8003e32:	68f5      	ldreq	r5, [r6, #12]
 8003e34:	e7da      	b.n	8003dec <_vfiprintf_r+0x20>
 8003e36:	89ab      	ldrh	r3, [r5, #12]
 8003e38:	0598      	lsls	r0, r3, #22
 8003e3a:	d4ed      	bmi.n	8003e18 <_vfiprintf_r+0x4c>
 8003e3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e3e:	f7ff f9ab 	bl	8003198 <__retarget_lock_release_recursive>
 8003e42:	e7e9      	b.n	8003e18 <_vfiprintf_r+0x4c>
 8003e44:	2300      	movs	r3, #0
 8003e46:	9309      	str	r3, [sp, #36]	; 0x24
 8003e48:	2320      	movs	r3, #32
 8003e4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e4e:	2330      	movs	r3, #48	; 0x30
 8003e50:	f04f 0901 	mov.w	r9, #1
 8003e54:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e58:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004018 <_vfiprintf_r+0x24c>
 8003e5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e60:	4623      	mov	r3, r4
 8003e62:	469a      	mov	sl, r3
 8003e64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e68:	b10a      	cbz	r2, 8003e6e <_vfiprintf_r+0xa2>
 8003e6a:	2a25      	cmp	r2, #37	; 0x25
 8003e6c:	d1f9      	bne.n	8003e62 <_vfiprintf_r+0x96>
 8003e6e:	ebba 0b04 	subs.w	fp, sl, r4
 8003e72:	d00b      	beq.n	8003e8c <_vfiprintf_r+0xc0>
 8003e74:	465b      	mov	r3, fp
 8003e76:	4622      	mov	r2, r4
 8003e78:	4629      	mov	r1, r5
 8003e7a:	4630      	mov	r0, r6
 8003e7c:	f7ff ff93 	bl	8003da6 <__sfputs_r>
 8003e80:	3001      	adds	r0, #1
 8003e82:	f000 80aa 	beq.w	8003fda <_vfiprintf_r+0x20e>
 8003e86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e88:	445a      	add	r2, fp
 8003e8a:	9209      	str	r2, [sp, #36]	; 0x24
 8003e8c:	f89a 3000 	ldrb.w	r3, [sl]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 80a2 	beq.w	8003fda <_vfiprintf_r+0x20e>
 8003e96:	2300      	movs	r3, #0
 8003e98:	f04f 32ff 	mov.w	r2, #4294967295
 8003e9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ea0:	f10a 0a01 	add.w	sl, sl, #1
 8003ea4:	9304      	str	r3, [sp, #16]
 8003ea6:	9307      	str	r3, [sp, #28]
 8003ea8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003eac:	931a      	str	r3, [sp, #104]	; 0x68
 8003eae:	4654      	mov	r4, sl
 8003eb0:	2205      	movs	r2, #5
 8003eb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eb6:	4858      	ldr	r0, [pc, #352]	; (8004018 <_vfiprintf_r+0x24c>)
 8003eb8:	f001 f85e 	bl	8004f78 <memchr>
 8003ebc:	9a04      	ldr	r2, [sp, #16]
 8003ebe:	b9d8      	cbnz	r0, 8003ef8 <_vfiprintf_r+0x12c>
 8003ec0:	06d1      	lsls	r1, r2, #27
 8003ec2:	bf44      	itt	mi
 8003ec4:	2320      	movmi	r3, #32
 8003ec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eca:	0713      	lsls	r3, r2, #28
 8003ecc:	bf44      	itt	mi
 8003ece:	232b      	movmi	r3, #43	; 0x2b
 8003ed0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ed4:	f89a 3000 	ldrb.w	r3, [sl]
 8003ed8:	2b2a      	cmp	r3, #42	; 0x2a
 8003eda:	d015      	beq.n	8003f08 <_vfiprintf_r+0x13c>
 8003edc:	4654      	mov	r4, sl
 8003ede:	2000      	movs	r0, #0
 8003ee0:	f04f 0c0a 	mov.w	ip, #10
 8003ee4:	9a07      	ldr	r2, [sp, #28]
 8003ee6:	4621      	mov	r1, r4
 8003ee8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003eec:	3b30      	subs	r3, #48	; 0x30
 8003eee:	2b09      	cmp	r3, #9
 8003ef0:	d94e      	bls.n	8003f90 <_vfiprintf_r+0x1c4>
 8003ef2:	b1b0      	cbz	r0, 8003f22 <_vfiprintf_r+0x156>
 8003ef4:	9207      	str	r2, [sp, #28]
 8003ef6:	e014      	b.n	8003f22 <_vfiprintf_r+0x156>
 8003ef8:	eba0 0308 	sub.w	r3, r0, r8
 8003efc:	fa09 f303 	lsl.w	r3, r9, r3
 8003f00:	4313      	orrs	r3, r2
 8003f02:	46a2      	mov	sl, r4
 8003f04:	9304      	str	r3, [sp, #16]
 8003f06:	e7d2      	b.n	8003eae <_vfiprintf_r+0xe2>
 8003f08:	9b03      	ldr	r3, [sp, #12]
 8003f0a:	1d19      	adds	r1, r3, #4
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	9103      	str	r1, [sp, #12]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	bfbb      	ittet	lt
 8003f14:	425b      	neglt	r3, r3
 8003f16:	f042 0202 	orrlt.w	r2, r2, #2
 8003f1a:	9307      	strge	r3, [sp, #28]
 8003f1c:	9307      	strlt	r3, [sp, #28]
 8003f1e:	bfb8      	it	lt
 8003f20:	9204      	strlt	r2, [sp, #16]
 8003f22:	7823      	ldrb	r3, [r4, #0]
 8003f24:	2b2e      	cmp	r3, #46	; 0x2e
 8003f26:	d10c      	bne.n	8003f42 <_vfiprintf_r+0x176>
 8003f28:	7863      	ldrb	r3, [r4, #1]
 8003f2a:	2b2a      	cmp	r3, #42	; 0x2a
 8003f2c:	d135      	bne.n	8003f9a <_vfiprintf_r+0x1ce>
 8003f2e:	9b03      	ldr	r3, [sp, #12]
 8003f30:	3402      	adds	r4, #2
 8003f32:	1d1a      	adds	r2, r3, #4
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	9203      	str	r2, [sp, #12]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	bfb8      	it	lt
 8003f3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f40:	9305      	str	r3, [sp, #20]
 8003f42:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800401c <_vfiprintf_r+0x250>
 8003f46:	2203      	movs	r2, #3
 8003f48:	4650      	mov	r0, sl
 8003f4a:	7821      	ldrb	r1, [r4, #0]
 8003f4c:	f001 f814 	bl	8004f78 <memchr>
 8003f50:	b140      	cbz	r0, 8003f64 <_vfiprintf_r+0x198>
 8003f52:	2340      	movs	r3, #64	; 0x40
 8003f54:	eba0 000a 	sub.w	r0, r0, sl
 8003f58:	fa03 f000 	lsl.w	r0, r3, r0
 8003f5c:	9b04      	ldr	r3, [sp, #16]
 8003f5e:	3401      	adds	r4, #1
 8003f60:	4303      	orrs	r3, r0
 8003f62:	9304      	str	r3, [sp, #16]
 8003f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f68:	2206      	movs	r2, #6
 8003f6a:	482d      	ldr	r0, [pc, #180]	; (8004020 <_vfiprintf_r+0x254>)
 8003f6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f70:	f001 f802 	bl	8004f78 <memchr>
 8003f74:	2800      	cmp	r0, #0
 8003f76:	d03f      	beq.n	8003ff8 <_vfiprintf_r+0x22c>
 8003f78:	4b2a      	ldr	r3, [pc, #168]	; (8004024 <_vfiprintf_r+0x258>)
 8003f7a:	bb1b      	cbnz	r3, 8003fc4 <_vfiprintf_r+0x1f8>
 8003f7c:	9b03      	ldr	r3, [sp, #12]
 8003f7e:	3307      	adds	r3, #7
 8003f80:	f023 0307 	bic.w	r3, r3, #7
 8003f84:	3308      	adds	r3, #8
 8003f86:	9303      	str	r3, [sp, #12]
 8003f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f8a:	443b      	add	r3, r7
 8003f8c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f8e:	e767      	b.n	8003e60 <_vfiprintf_r+0x94>
 8003f90:	460c      	mov	r4, r1
 8003f92:	2001      	movs	r0, #1
 8003f94:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f98:	e7a5      	b.n	8003ee6 <_vfiprintf_r+0x11a>
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f04f 0c0a 	mov.w	ip, #10
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	3401      	adds	r4, #1
 8003fa4:	9305      	str	r3, [sp, #20]
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fac:	3a30      	subs	r2, #48	; 0x30
 8003fae:	2a09      	cmp	r2, #9
 8003fb0:	d903      	bls.n	8003fba <_vfiprintf_r+0x1ee>
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0c5      	beq.n	8003f42 <_vfiprintf_r+0x176>
 8003fb6:	9105      	str	r1, [sp, #20]
 8003fb8:	e7c3      	b.n	8003f42 <_vfiprintf_r+0x176>
 8003fba:	4604      	mov	r4, r0
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fc2:	e7f0      	b.n	8003fa6 <_vfiprintf_r+0x1da>
 8003fc4:	ab03      	add	r3, sp, #12
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	462a      	mov	r2, r5
 8003fca:	4630      	mov	r0, r6
 8003fcc:	4b16      	ldr	r3, [pc, #88]	; (8004028 <_vfiprintf_r+0x25c>)
 8003fce:	a904      	add	r1, sp, #16
 8003fd0:	f3af 8000 	nop.w
 8003fd4:	4607      	mov	r7, r0
 8003fd6:	1c78      	adds	r0, r7, #1
 8003fd8:	d1d6      	bne.n	8003f88 <_vfiprintf_r+0x1bc>
 8003fda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fdc:	07d9      	lsls	r1, r3, #31
 8003fde:	d405      	bmi.n	8003fec <_vfiprintf_r+0x220>
 8003fe0:	89ab      	ldrh	r3, [r5, #12]
 8003fe2:	059a      	lsls	r2, r3, #22
 8003fe4:	d402      	bmi.n	8003fec <_vfiprintf_r+0x220>
 8003fe6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fe8:	f7ff f8d6 	bl	8003198 <__retarget_lock_release_recursive>
 8003fec:	89ab      	ldrh	r3, [r5, #12]
 8003fee:	065b      	lsls	r3, r3, #25
 8003ff0:	f53f af12 	bmi.w	8003e18 <_vfiprintf_r+0x4c>
 8003ff4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ff6:	e711      	b.n	8003e1c <_vfiprintf_r+0x50>
 8003ff8:	ab03      	add	r3, sp, #12
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	462a      	mov	r2, r5
 8003ffe:	4630      	mov	r0, r6
 8004000:	4b09      	ldr	r3, [pc, #36]	; (8004028 <_vfiprintf_r+0x25c>)
 8004002:	a904      	add	r1, sp, #16
 8004004:	f000 f882 	bl	800410c <_printf_i>
 8004008:	e7e4      	b.n	8003fd4 <_vfiprintf_r+0x208>
 800400a:	bf00      	nop
 800400c:	08005894 	.word	0x08005894
 8004010:	080058b4 	.word	0x080058b4
 8004014:	08005874 	.word	0x08005874
 8004018:	080058d8 	.word	0x080058d8
 800401c:	080058de 	.word	0x080058de
 8004020:	080058e2 	.word	0x080058e2
 8004024:	00000000 	.word	0x00000000
 8004028:	08003da7 	.word	0x08003da7

0800402c <_printf_common>:
 800402c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004030:	4616      	mov	r6, r2
 8004032:	4699      	mov	r9, r3
 8004034:	688a      	ldr	r2, [r1, #8]
 8004036:	690b      	ldr	r3, [r1, #16]
 8004038:	4607      	mov	r7, r0
 800403a:	4293      	cmp	r3, r2
 800403c:	bfb8      	it	lt
 800403e:	4613      	movlt	r3, r2
 8004040:	6033      	str	r3, [r6, #0]
 8004042:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004046:	460c      	mov	r4, r1
 8004048:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800404c:	b10a      	cbz	r2, 8004052 <_printf_common+0x26>
 800404e:	3301      	adds	r3, #1
 8004050:	6033      	str	r3, [r6, #0]
 8004052:	6823      	ldr	r3, [r4, #0]
 8004054:	0699      	lsls	r1, r3, #26
 8004056:	bf42      	ittt	mi
 8004058:	6833      	ldrmi	r3, [r6, #0]
 800405a:	3302      	addmi	r3, #2
 800405c:	6033      	strmi	r3, [r6, #0]
 800405e:	6825      	ldr	r5, [r4, #0]
 8004060:	f015 0506 	ands.w	r5, r5, #6
 8004064:	d106      	bne.n	8004074 <_printf_common+0x48>
 8004066:	f104 0a19 	add.w	sl, r4, #25
 800406a:	68e3      	ldr	r3, [r4, #12]
 800406c:	6832      	ldr	r2, [r6, #0]
 800406e:	1a9b      	subs	r3, r3, r2
 8004070:	42ab      	cmp	r3, r5
 8004072:	dc28      	bgt.n	80040c6 <_printf_common+0x9a>
 8004074:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004078:	1e13      	subs	r3, r2, #0
 800407a:	6822      	ldr	r2, [r4, #0]
 800407c:	bf18      	it	ne
 800407e:	2301      	movne	r3, #1
 8004080:	0692      	lsls	r2, r2, #26
 8004082:	d42d      	bmi.n	80040e0 <_printf_common+0xb4>
 8004084:	4649      	mov	r1, r9
 8004086:	4638      	mov	r0, r7
 8004088:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800408c:	47c0      	blx	r8
 800408e:	3001      	adds	r0, #1
 8004090:	d020      	beq.n	80040d4 <_printf_common+0xa8>
 8004092:	6823      	ldr	r3, [r4, #0]
 8004094:	68e5      	ldr	r5, [r4, #12]
 8004096:	f003 0306 	and.w	r3, r3, #6
 800409a:	2b04      	cmp	r3, #4
 800409c:	bf18      	it	ne
 800409e:	2500      	movne	r5, #0
 80040a0:	6832      	ldr	r2, [r6, #0]
 80040a2:	f04f 0600 	mov.w	r6, #0
 80040a6:	68a3      	ldr	r3, [r4, #8]
 80040a8:	bf08      	it	eq
 80040aa:	1aad      	subeq	r5, r5, r2
 80040ac:	6922      	ldr	r2, [r4, #16]
 80040ae:	bf08      	it	eq
 80040b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040b4:	4293      	cmp	r3, r2
 80040b6:	bfc4      	itt	gt
 80040b8:	1a9b      	subgt	r3, r3, r2
 80040ba:	18ed      	addgt	r5, r5, r3
 80040bc:	341a      	adds	r4, #26
 80040be:	42b5      	cmp	r5, r6
 80040c0:	d11a      	bne.n	80040f8 <_printf_common+0xcc>
 80040c2:	2000      	movs	r0, #0
 80040c4:	e008      	b.n	80040d8 <_printf_common+0xac>
 80040c6:	2301      	movs	r3, #1
 80040c8:	4652      	mov	r2, sl
 80040ca:	4649      	mov	r1, r9
 80040cc:	4638      	mov	r0, r7
 80040ce:	47c0      	blx	r8
 80040d0:	3001      	adds	r0, #1
 80040d2:	d103      	bne.n	80040dc <_printf_common+0xb0>
 80040d4:	f04f 30ff 	mov.w	r0, #4294967295
 80040d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040dc:	3501      	adds	r5, #1
 80040de:	e7c4      	b.n	800406a <_printf_common+0x3e>
 80040e0:	2030      	movs	r0, #48	; 0x30
 80040e2:	18e1      	adds	r1, r4, r3
 80040e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040ee:	4422      	add	r2, r4
 80040f0:	3302      	adds	r3, #2
 80040f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040f6:	e7c5      	b.n	8004084 <_printf_common+0x58>
 80040f8:	2301      	movs	r3, #1
 80040fa:	4622      	mov	r2, r4
 80040fc:	4649      	mov	r1, r9
 80040fe:	4638      	mov	r0, r7
 8004100:	47c0      	blx	r8
 8004102:	3001      	adds	r0, #1
 8004104:	d0e6      	beq.n	80040d4 <_printf_common+0xa8>
 8004106:	3601      	adds	r6, #1
 8004108:	e7d9      	b.n	80040be <_printf_common+0x92>
	...

0800410c <_printf_i>:
 800410c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004110:	7e0f      	ldrb	r7, [r1, #24]
 8004112:	4691      	mov	r9, r2
 8004114:	2f78      	cmp	r7, #120	; 0x78
 8004116:	4680      	mov	r8, r0
 8004118:	460c      	mov	r4, r1
 800411a:	469a      	mov	sl, r3
 800411c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800411e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004122:	d807      	bhi.n	8004134 <_printf_i+0x28>
 8004124:	2f62      	cmp	r7, #98	; 0x62
 8004126:	d80a      	bhi.n	800413e <_printf_i+0x32>
 8004128:	2f00      	cmp	r7, #0
 800412a:	f000 80d9 	beq.w	80042e0 <_printf_i+0x1d4>
 800412e:	2f58      	cmp	r7, #88	; 0x58
 8004130:	f000 80a4 	beq.w	800427c <_printf_i+0x170>
 8004134:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004138:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800413c:	e03a      	b.n	80041b4 <_printf_i+0xa8>
 800413e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004142:	2b15      	cmp	r3, #21
 8004144:	d8f6      	bhi.n	8004134 <_printf_i+0x28>
 8004146:	a101      	add	r1, pc, #4	; (adr r1, 800414c <_printf_i+0x40>)
 8004148:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800414c:	080041a5 	.word	0x080041a5
 8004150:	080041b9 	.word	0x080041b9
 8004154:	08004135 	.word	0x08004135
 8004158:	08004135 	.word	0x08004135
 800415c:	08004135 	.word	0x08004135
 8004160:	08004135 	.word	0x08004135
 8004164:	080041b9 	.word	0x080041b9
 8004168:	08004135 	.word	0x08004135
 800416c:	08004135 	.word	0x08004135
 8004170:	08004135 	.word	0x08004135
 8004174:	08004135 	.word	0x08004135
 8004178:	080042c7 	.word	0x080042c7
 800417c:	080041e9 	.word	0x080041e9
 8004180:	080042a9 	.word	0x080042a9
 8004184:	08004135 	.word	0x08004135
 8004188:	08004135 	.word	0x08004135
 800418c:	080042e9 	.word	0x080042e9
 8004190:	08004135 	.word	0x08004135
 8004194:	080041e9 	.word	0x080041e9
 8004198:	08004135 	.word	0x08004135
 800419c:	08004135 	.word	0x08004135
 80041a0:	080042b1 	.word	0x080042b1
 80041a4:	682b      	ldr	r3, [r5, #0]
 80041a6:	1d1a      	adds	r2, r3, #4
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	602a      	str	r2, [r5, #0]
 80041ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041b4:	2301      	movs	r3, #1
 80041b6:	e0a4      	b.n	8004302 <_printf_i+0x1f6>
 80041b8:	6820      	ldr	r0, [r4, #0]
 80041ba:	6829      	ldr	r1, [r5, #0]
 80041bc:	0606      	lsls	r6, r0, #24
 80041be:	f101 0304 	add.w	r3, r1, #4
 80041c2:	d50a      	bpl.n	80041da <_printf_i+0xce>
 80041c4:	680e      	ldr	r6, [r1, #0]
 80041c6:	602b      	str	r3, [r5, #0]
 80041c8:	2e00      	cmp	r6, #0
 80041ca:	da03      	bge.n	80041d4 <_printf_i+0xc8>
 80041cc:	232d      	movs	r3, #45	; 0x2d
 80041ce:	4276      	negs	r6, r6
 80041d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041d4:	230a      	movs	r3, #10
 80041d6:	485e      	ldr	r0, [pc, #376]	; (8004350 <_printf_i+0x244>)
 80041d8:	e019      	b.n	800420e <_printf_i+0x102>
 80041da:	680e      	ldr	r6, [r1, #0]
 80041dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80041e0:	602b      	str	r3, [r5, #0]
 80041e2:	bf18      	it	ne
 80041e4:	b236      	sxthne	r6, r6
 80041e6:	e7ef      	b.n	80041c8 <_printf_i+0xbc>
 80041e8:	682b      	ldr	r3, [r5, #0]
 80041ea:	6820      	ldr	r0, [r4, #0]
 80041ec:	1d19      	adds	r1, r3, #4
 80041ee:	6029      	str	r1, [r5, #0]
 80041f0:	0601      	lsls	r1, r0, #24
 80041f2:	d501      	bpl.n	80041f8 <_printf_i+0xec>
 80041f4:	681e      	ldr	r6, [r3, #0]
 80041f6:	e002      	b.n	80041fe <_printf_i+0xf2>
 80041f8:	0646      	lsls	r6, r0, #25
 80041fa:	d5fb      	bpl.n	80041f4 <_printf_i+0xe8>
 80041fc:	881e      	ldrh	r6, [r3, #0]
 80041fe:	2f6f      	cmp	r7, #111	; 0x6f
 8004200:	bf0c      	ite	eq
 8004202:	2308      	moveq	r3, #8
 8004204:	230a      	movne	r3, #10
 8004206:	4852      	ldr	r0, [pc, #328]	; (8004350 <_printf_i+0x244>)
 8004208:	2100      	movs	r1, #0
 800420a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800420e:	6865      	ldr	r5, [r4, #4]
 8004210:	2d00      	cmp	r5, #0
 8004212:	bfa8      	it	ge
 8004214:	6821      	ldrge	r1, [r4, #0]
 8004216:	60a5      	str	r5, [r4, #8]
 8004218:	bfa4      	itt	ge
 800421a:	f021 0104 	bicge.w	r1, r1, #4
 800421e:	6021      	strge	r1, [r4, #0]
 8004220:	b90e      	cbnz	r6, 8004226 <_printf_i+0x11a>
 8004222:	2d00      	cmp	r5, #0
 8004224:	d04d      	beq.n	80042c2 <_printf_i+0x1b6>
 8004226:	4615      	mov	r5, r2
 8004228:	fbb6 f1f3 	udiv	r1, r6, r3
 800422c:	fb03 6711 	mls	r7, r3, r1, r6
 8004230:	5dc7      	ldrb	r7, [r0, r7]
 8004232:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004236:	4637      	mov	r7, r6
 8004238:	42bb      	cmp	r3, r7
 800423a:	460e      	mov	r6, r1
 800423c:	d9f4      	bls.n	8004228 <_printf_i+0x11c>
 800423e:	2b08      	cmp	r3, #8
 8004240:	d10b      	bne.n	800425a <_printf_i+0x14e>
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	07de      	lsls	r6, r3, #31
 8004246:	d508      	bpl.n	800425a <_printf_i+0x14e>
 8004248:	6923      	ldr	r3, [r4, #16]
 800424a:	6861      	ldr	r1, [r4, #4]
 800424c:	4299      	cmp	r1, r3
 800424e:	bfde      	ittt	le
 8004250:	2330      	movle	r3, #48	; 0x30
 8004252:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004256:	f105 35ff 	addle.w	r5, r5, #4294967295
 800425a:	1b52      	subs	r2, r2, r5
 800425c:	6122      	str	r2, [r4, #16]
 800425e:	464b      	mov	r3, r9
 8004260:	4621      	mov	r1, r4
 8004262:	4640      	mov	r0, r8
 8004264:	f8cd a000 	str.w	sl, [sp]
 8004268:	aa03      	add	r2, sp, #12
 800426a:	f7ff fedf 	bl	800402c <_printf_common>
 800426e:	3001      	adds	r0, #1
 8004270:	d14c      	bne.n	800430c <_printf_i+0x200>
 8004272:	f04f 30ff 	mov.w	r0, #4294967295
 8004276:	b004      	add	sp, #16
 8004278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800427c:	4834      	ldr	r0, [pc, #208]	; (8004350 <_printf_i+0x244>)
 800427e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004282:	6829      	ldr	r1, [r5, #0]
 8004284:	6823      	ldr	r3, [r4, #0]
 8004286:	f851 6b04 	ldr.w	r6, [r1], #4
 800428a:	6029      	str	r1, [r5, #0]
 800428c:	061d      	lsls	r5, r3, #24
 800428e:	d514      	bpl.n	80042ba <_printf_i+0x1ae>
 8004290:	07df      	lsls	r7, r3, #31
 8004292:	bf44      	itt	mi
 8004294:	f043 0320 	orrmi.w	r3, r3, #32
 8004298:	6023      	strmi	r3, [r4, #0]
 800429a:	b91e      	cbnz	r6, 80042a4 <_printf_i+0x198>
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	f023 0320 	bic.w	r3, r3, #32
 80042a2:	6023      	str	r3, [r4, #0]
 80042a4:	2310      	movs	r3, #16
 80042a6:	e7af      	b.n	8004208 <_printf_i+0xfc>
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	f043 0320 	orr.w	r3, r3, #32
 80042ae:	6023      	str	r3, [r4, #0]
 80042b0:	2378      	movs	r3, #120	; 0x78
 80042b2:	4828      	ldr	r0, [pc, #160]	; (8004354 <_printf_i+0x248>)
 80042b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042b8:	e7e3      	b.n	8004282 <_printf_i+0x176>
 80042ba:	0659      	lsls	r1, r3, #25
 80042bc:	bf48      	it	mi
 80042be:	b2b6      	uxthmi	r6, r6
 80042c0:	e7e6      	b.n	8004290 <_printf_i+0x184>
 80042c2:	4615      	mov	r5, r2
 80042c4:	e7bb      	b.n	800423e <_printf_i+0x132>
 80042c6:	682b      	ldr	r3, [r5, #0]
 80042c8:	6826      	ldr	r6, [r4, #0]
 80042ca:	1d18      	adds	r0, r3, #4
 80042cc:	6961      	ldr	r1, [r4, #20]
 80042ce:	6028      	str	r0, [r5, #0]
 80042d0:	0635      	lsls	r5, r6, #24
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	d501      	bpl.n	80042da <_printf_i+0x1ce>
 80042d6:	6019      	str	r1, [r3, #0]
 80042d8:	e002      	b.n	80042e0 <_printf_i+0x1d4>
 80042da:	0670      	lsls	r0, r6, #25
 80042dc:	d5fb      	bpl.n	80042d6 <_printf_i+0x1ca>
 80042de:	8019      	strh	r1, [r3, #0]
 80042e0:	2300      	movs	r3, #0
 80042e2:	4615      	mov	r5, r2
 80042e4:	6123      	str	r3, [r4, #16]
 80042e6:	e7ba      	b.n	800425e <_printf_i+0x152>
 80042e8:	682b      	ldr	r3, [r5, #0]
 80042ea:	2100      	movs	r1, #0
 80042ec:	1d1a      	adds	r2, r3, #4
 80042ee:	602a      	str	r2, [r5, #0]
 80042f0:	681d      	ldr	r5, [r3, #0]
 80042f2:	6862      	ldr	r2, [r4, #4]
 80042f4:	4628      	mov	r0, r5
 80042f6:	f000 fe3f 	bl	8004f78 <memchr>
 80042fa:	b108      	cbz	r0, 8004300 <_printf_i+0x1f4>
 80042fc:	1b40      	subs	r0, r0, r5
 80042fe:	6060      	str	r0, [r4, #4]
 8004300:	6863      	ldr	r3, [r4, #4]
 8004302:	6123      	str	r3, [r4, #16]
 8004304:	2300      	movs	r3, #0
 8004306:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800430a:	e7a8      	b.n	800425e <_printf_i+0x152>
 800430c:	462a      	mov	r2, r5
 800430e:	4649      	mov	r1, r9
 8004310:	4640      	mov	r0, r8
 8004312:	6923      	ldr	r3, [r4, #16]
 8004314:	47d0      	blx	sl
 8004316:	3001      	adds	r0, #1
 8004318:	d0ab      	beq.n	8004272 <_printf_i+0x166>
 800431a:	6823      	ldr	r3, [r4, #0]
 800431c:	079b      	lsls	r3, r3, #30
 800431e:	d413      	bmi.n	8004348 <_printf_i+0x23c>
 8004320:	68e0      	ldr	r0, [r4, #12]
 8004322:	9b03      	ldr	r3, [sp, #12]
 8004324:	4298      	cmp	r0, r3
 8004326:	bfb8      	it	lt
 8004328:	4618      	movlt	r0, r3
 800432a:	e7a4      	b.n	8004276 <_printf_i+0x16a>
 800432c:	2301      	movs	r3, #1
 800432e:	4632      	mov	r2, r6
 8004330:	4649      	mov	r1, r9
 8004332:	4640      	mov	r0, r8
 8004334:	47d0      	blx	sl
 8004336:	3001      	adds	r0, #1
 8004338:	d09b      	beq.n	8004272 <_printf_i+0x166>
 800433a:	3501      	adds	r5, #1
 800433c:	68e3      	ldr	r3, [r4, #12]
 800433e:	9903      	ldr	r1, [sp, #12]
 8004340:	1a5b      	subs	r3, r3, r1
 8004342:	42ab      	cmp	r3, r5
 8004344:	dcf2      	bgt.n	800432c <_printf_i+0x220>
 8004346:	e7eb      	b.n	8004320 <_printf_i+0x214>
 8004348:	2500      	movs	r5, #0
 800434a:	f104 0619 	add.w	r6, r4, #25
 800434e:	e7f5      	b.n	800433c <_printf_i+0x230>
 8004350:	080058e9 	.word	0x080058e9
 8004354:	080058fa 	.word	0x080058fa

08004358 <__svfiscanf_r>:
 8004358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800435c:	461d      	mov	r5, r3
 800435e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8004360:	4606      	mov	r6, r0
 8004362:	07df      	lsls	r7, r3, #31
 8004364:	460c      	mov	r4, r1
 8004366:	4692      	mov	sl, r2
 8004368:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800436c:	d405      	bmi.n	800437a <__svfiscanf_r+0x22>
 800436e:	898b      	ldrh	r3, [r1, #12]
 8004370:	0598      	lsls	r0, r3, #22
 8004372:	d402      	bmi.n	800437a <__svfiscanf_r+0x22>
 8004374:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8004376:	f7fe ff0e 	bl	8003196 <__retarget_lock_acquire_recursive>
 800437a:	2300      	movs	r3, #0
 800437c:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8004380:	4ba6      	ldr	r3, [pc, #664]	; (800461c <__svfiscanf_r+0x2c4>)
 8004382:	f10d 0804 	add.w	r8, sp, #4
 8004386:	93a0      	str	r3, [sp, #640]	; 0x280
 8004388:	4ba5      	ldr	r3, [pc, #660]	; (8004620 <__svfiscanf_r+0x2c8>)
 800438a:	4fa6      	ldr	r7, [pc, #664]	; (8004624 <__svfiscanf_r+0x2cc>)
 800438c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8004628 <__svfiscanf_r+0x2d0>
 8004390:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004394:	93a1      	str	r3, [sp, #644]	; 0x284
 8004396:	9500      	str	r5, [sp, #0]
 8004398:	f89a 3000 	ldrb.w	r3, [sl]
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 8173 	beq.w	8004688 <__svfiscanf_r+0x330>
 80043a2:	5dd9      	ldrb	r1, [r3, r7]
 80043a4:	f10a 0501 	add.w	r5, sl, #1
 80043a8:	f011 0108 	ands.w	r1, r1, #8
 80043ac:	d019      	beq.n	80043e2 <__svfiscanf_r+0x8a>
 80043ae:	6863      	ldr	r3, [r4, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	dd0f      	ble.n	80043d4 <__svfiscanf_r+0x7c>
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	781a      	ldrb	r2, [r3, #0]
 80043b8:	5cba      	ldrb	r2, [r7, r2]
 80043ba:	0711      	lsls	r1, r2, #28
 80043bc:	d401      	bmi.n	80043c2 <__svfiscanf_r+0x6a>
 80043be:	46aa      	mov	sl, r5
 80043c0:	e7ea      	b.n	8004398 <__svfiscanf_r+0x40>
 80043c2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80043c4:	3301      	adds	r3, #1
 80043c6:	3201      	adds	r2, #1
 80043c8:	9245      	str	r2, [sp, #276]	; 0x114
 80043ca:	6862      	ldr	r2, [r4, #4]
 80043cc:	6023      	str	r3, [r4, #0]
 80043ce:	3a01      	subs	r2, #1
 80043d0:	6062      	str	r2, [r4, #4]
 80043d2:	e7ec      	b.n	80043ae <__svfiscanf_r+0x56>
 80043d4:	4621      	mov	r1, r4
 80043d6:	4630      	mov	r0, r6
 80043d8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80043da:	4798      	blx	r3
 80043dc:	2800      	cmp	r0, #0
 80043de:	d0e9      	beq.n	80043b4 <__svfiscanf_r+0x5c>
 80043e0:	e7ed      	b.n	80043be <__svfiscanf_r+0x66>
 80043e2:	2b25      	cmp	r3, #37	; 0x25
 80043e4:	d012      	beq.n	800440c <__svfiscanf_r+0xb4>
 80043e6:	469a      	mov	sl, r3
 80043e8:	6863      	ldr	r3, [r4, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f340 8095 	ble.w	800451a <__svfiscanf_r+0x1c2>
 80043f0:	6822      	ldr	r2, [r4, #0]
 80043f2:	7813      	ldrb	r3, [r2, #0]
 80043f4:	4553      	cmp	r3, sl
 80043f6:	f040 8147 	bne.w	8004688 <__svfiscanf_r+0x330>
 80043fa:	6863      	ldr	r3, [r4, #4]
 80043fc:	3201      	adds	r2, #1
 80043fe:	3b01      	subs	r3, #1
 8004400:	6063      	str	r3, [r4, #4]
 8004402:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004404:	6022      	str	r2, [r4, #0]
 8004406:	3301      	adds	r3, #1
 8004408:	9345      	str	r3, [sp, #276]	; 0x114
 800440a:	e7d8      	b.n	80043be <__svfiscanf_r+0x66>
 800440c:	9141      	str	r1, [sp, #260]	; 0x104
 800440e:	9143      	str	r1, [sp, #268]	; 0x10c
 8004410:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8004414:	220a      	movs	r2, #10
 8004416:	2b2a      	cmp	r3, #42	; 0x2a
 8004418:	bf02      	ittt	eq
 800441a:	2310      	moveq	r3, #16
 800441c:	f10a 0502 	addeq.w	r5, sl, #2
 8004420:	9341      	streq	r3, [sp, #260]	; 0x104
 8004422:	46aa      	mov	sl, r5
 8004424:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8004428:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800442c:	2b09      	cmp	r3, #9
 800442e:	d91e      	bls.n	800446e <__svfiscanf_r+0x116>
 8004430:	2203      	movs	r2, #3
 8004432:	487d      	ldr	r0, [pc, #500]	; (8004628 <__svfiscanf_r+0x2d0>)
 8004434:	f000 fda0 	bl	8004f78 <memchr>
 8004438:	b140      	cbz	r0, 800444c <__svfiscanf_r+0xf4>
 800443a:	2301      	movs	r3, #1
 800443c:	4655      	mov	r5, sl
 800443e:	eba0 0009 	sub.w	r0, r0, r9
 8004442:	fa03 f000 	lsl.w	r0, r3, r0
 8004446:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004448:	4318      	orrs	r0, r3
 800444a:	9041      	str	r0, [sp, #260]	; 0x104
 800444c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004450:	2b78      	cmp	r3, #120	; 0x78
 8004452:	d807      	bhi.n	8004464 <__svfiscanf_r+0x10c>
 8004454:	2b57      	cmp	r3, #87	; 0x57
 8004456:	d811      	bhi.n	800447c <__svfiscanf_r+0x124>
 8004458:	2b25      	cmp	r3, #37	; 0x25
 800445a:	d0c4      	beq.n	80043e6 <__svfiscanf_r+0x8e>
 800445c:	d858      	bhi.n	8004510 <__svfiscanf_r+0x1b8>
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 80c8 	beq.w	80045f4 <__svfiscanf_r+0x29c>
 8004464:	2303      	movs	r3, #3
 8004466:	9347      	str	r3, [sp, #284]	; 0x11c
 8004468:	230a      	movs	r3, #10
 800446a:	9342      	str	r3, [sp, #264]	; 0x108
 800446c:	e07c      	b.n	8004568 <__svfiscanf_r+0x210>
 800446e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004470:	4655      	mov	r5, sl
 8004472:	fb02 1103 	mla	r1, r2, r3, r1
 8004476:	3930      	subs	r1, #48	; 0x30
 8004478:	9143      	str	r1, [sp, #268]	; 0x10c
 800447a:	e7d2      	b.n	8004422 <__svfiscanf_r+0xca>
 800447c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8004480:	2a20      	cmp	r2, #32
 8004482:	d8ef      	bhi.n	8004464 <__svfiscanf_r+0x10c>
 8004484:	a101      	add	r1, pc, #4	; (adr r1, 800448c <__svfiscanf_r+0x134>)
 8004486:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800448a:	bf00      	nop
 800448c:	08004553 	.word	0x08004553
 8004490:	08004465 	.word	0x08004465
 8004494:	08004465 	.word	0x08004465
 8004498:	080045b1 	.word	0x080045b1
 800449c:	08004465 	.word	0x08004465
 80044a0:	08004465 	.word	0x08004465
 80044a4:	08004465 	.word	0x08004465
 80044a8:	08004465 	.word	0x08004465
 80044ac:	08004465 	.word	0x08004465
 80044b0:	08004465 	.word	0x08004465
 80044b4:	08004465 	.word	0x08004465
 80044b8:	080045c7 	.word	0x080045c7
 80044bc:	0800459d 	.word	0x0800459d
 80044c0:	08004517 	.word	0x08004517
 80044c4:	08004517 	.word	0x08004517
 80044c8:	08004517 	.word	0x08004517
 80044cc:	08004465 	.word	0x08004465
 80044d0:	080045a1 	.word	0x080045a1
 80044d4:	08004465 	.word	0x08004465
 80044d8:	08004465 	.word	0x08004465
 80044dc:	08004465 	.word	0x08004465
 80044e0:	08004465 	.word	0x08004465
 80044e4:	080045d7 	.word	0x080045d7
 80044e8:	080045a9 	.word	0x080045a9
 80044ec:	0800454b 	.word	0x0800454b
 80044f0:	08004465 	.word	0x08004465
 80044f4:	08004465 	.word	0x08004465
 80044f8:	080045d3 	.word	0x080045d3
 80044fc:	08004465 	.word	0x08004465
 8004500:	0800459d 	.word	0x0800459d
 8004504:	08004465 	.word	0x08004465
 8004508:	08004465 	.word	0x08004465
 800450c:	08004553 	.word	0x08004553
 8004510:	3b45      	subs	r3, #69	; 0x45
 8004512:	2b02      	cmp	r3, #2
 8004514:	d8a6      	bhi.n	8004464 <__svfiscanf_r+0x10c>
 8004516:	2305      	movs	r3, #5
 8004518:	e025      	b.n	8004566 <__svfiscanf_r+0x20e>
 800451a:	4621      	mov	r1, r4
 800451c:	4630      	mov	r0, r6
 800451e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004520:	4798      	blx	r3
 8004522:	2800      	cmp	r0, #0
 8004524:	f43f af64 	beq.w	80043f0 <__svfiscanf_r+0x98>
 8004528:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800452a:	07da      	lsls	r2, r3, #31
 800452c:	f140 80a4 	bpl.w	8004678 <__svfiscanf_r+0x320>
 8004530:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004532:	2800      	cmp	r0, #0
 8004534:	d067      	beq.n	8004606 <__svfiscanf_r+0x2ae>
 8004536:	89a3      	ldrh	r3, [r4, #12]
 8004538:	f013 0f40 	tst.w	r3, #64	; 0x40
 800453c:	bf18      	it	ne
 800453e:	f04f 30ff 	movne.w	r0, #4294967295
 8004542:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8004546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800454a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800454c:	f042 0220 	orr.w	r2, r2, #32
 8004550:	9241      	str	r2, [sp, #260]	; 0x104
 8004552:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004558:	9241      	str	r2, [sp, #260]	; 0x104
 800455a:	2210      	movs	r2, #16
 800455c:	2b6f      	cmp	r3, #111	; 0x6f
 800455e:	bf34      	ite	cc
 8004560:	2303      	movcc	r3, #3
 8004562:	2304      	movcs	r3, #4
 8004564:	9242      	str	r2, [sp, #264]	; 0x108
 8004566:	9347      	str	r3, [sp, #284]	; 0x11c
 8004568:	6863      	ldr	r3, [r4, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	dd4e      	ble.n	800460c <__svfiscanf_r+0x2b4>
 800456e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004570:	065b      	lsls	r3, r3, #25
 8004572:	d404      	bmi.n	800457e <__svfiscanf_r+0x226>
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	781a      	ldrb	r2, [r3, #0]
 8004578:	5cba      	ldrb	r2, [r7, r2]
 800457a:	0710      	lsls	r0, r2, #28
 800457c:	d456      	bmi.n	800462c <__svfiscanf_r+0x2d4>
 800457e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004580:	2b02      	cmp	r3, #2
 8004582:	dc65      	bgt.n	8004650 <__svfiscanf_r+0x2f8>
 8004584:	466b      	mov	r3, sp
 8004586:	4622      	mov	r2, r4
 8004588:	4630      	mov	r0, r6
 800458a:	a941      	add	r1, sp, #260	; 0x104
 800458c:	f000 f8b2 	bl	80046f4 <_scanf_chars>
 8004590:	2801      	cmp	r0, #1
 8004592:	d079      	beq.n	8004688 <__svfiscanf_r+0x330>
 8004594:	2802      	cmp	r0, #2
 8004596:	f47f af12 	bne.w	80043be <__svfiscanf_r+0x66>
 800459a:	e7c5      	b.n	8004528 <__svfiscanf_r+0x1d0>
 800459c:	220a      	movs	r2, #10
 800459e:	e7dd      	b.n	800455c <__svfiscanf_r+0x204>
 80045a0:	2300      	movs	r3, #0
 80045a2:	9342      	str	r3, [sp, #264]	; 0x108
 80045a4:	2303      	movs	r3, #3
 80045a6:	e7de      	b.n	8004566 <__svfiscanf_r+0x20e>
 80045a8:	2308      	movs	r3, #8
 80045aa:	9342      	str	r3, [sp, #264]	; 0x108
 80045ac:	2304      	movs	r3, #4
 80045ae:	e7da      	b.n	8004566 <__svfiscanf_r+0x20e>
 80045b0:	4629      	mov	r1, r5
 80045b2:	4640      	mov	r0, r8
 80045b4:	f000 fac4 	bl	8004b40 <__sccl>
 80045b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80045ba:	4605      	mov	r5, r0
 80045bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045c0:	9341      	str	r3, [sp, #260]	; 0x104
 80045c2:	2301      	movs	r3, #1
 80045c4:	e7cf      	b.n	8004566 <__svfiscanf_r+0x20e>
 80045c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80045c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045cc:	9341      	str	r3, [sp, #260]	; 0x104
 80045ce:	2300      	movs	r3, #0
 80045d0:	e7c9      	b.n	8004566 <__svfiscanf_r+0x20e>
 80045d2:	2302      	movs	r3, #2
 80045d4:	e7c7      	b.n	8004566 <__svfiscanf_r+0x20e>
 80045d6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80045d8:	06c3      	lsls	r3, r0, #27
 80045da:	f53f aef0 	bmi.w	80043be <__svfiscanf_r+0x66>
 80045de:	9b00      	ldr	r3, [sp, #0]
 80045e0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80045e2:	1d19      	adds	r1, r3, #4
 80045e4:	9100      	str	r1, [sp, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f010 0f01 	tst.w	r0, #1
 80045ec:	bf14      	ite	ne
 80045ee:	801a      	strhne	r2, [r3, #0]
 80045f0:	601a      	streq	r2, [r3, #0]
 80045f2:	e6e4      	b.n	80043be <__svfiscanf_r+0x66>
 80045f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045f6:	07d8      	lsls	r0, r3, #31
 80045f8:	d405      	bmi.n	8004606 <__svfiscanf_r+0x2ae>
 80045fa:	89a3      	ldrh	r3, [r4, #12]
 80045fc:	0599      	lsls	r1, r3, #22
 80045fe:	d402      	bmi.n	8004606 <__svfiscanf_r+0x2ae>
 8004600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004602:	f7fe fdc9 	bl	8003198 <__retarget_lock_release_recursive>
 8004606:	f04f 30ff 	mov.w	r0, #4294967295
 800460a:	e79a      	b.n	8004542 <__svfiscanf_r+0x1ea>
 800460c:	4621      	mov	r1, r4
 800460e:	4630      	mov	r0, r6
 8004610:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004612:	4798      	blx	r3
 8004614:	2800      	cmp	r0, #0
 8004616:	d0aa      	beq.n	800456e <__svfiscanf_r+0x216>
 8004618:	e786      	b.n	8004528 <__svfiscanf_r+0x1d0>
 800461a:	bf00      	nop
 800461c:	08004e05 	.word	0x08004e05
 8004620:	080049d1 	.word	0x080049d1
 8004624:	08005927 	.word	0x08005927
 8004628:	080058de 	.word	0x080058de
 800462c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800462e:	3201      	adds	r2, #1
 8004630:	9245      	str	r2, [sp, #276]	; 0x114
 8004632:	6862      	ldr	r2, [r4, #4]
 8004634:	3a01      	subs	r2, #1
 8004636:	2a00      	cmp	r2, #0
 8004638:	6062      	str	r2, [r4, #4]
 800463a:	dd02      	ble.n	8004642 <__svfiscanf_r+0x2ea>
 800463c:	3301      	adds	r3, #1
 800463e:	6023      	str	r3, [r4, #0]
 8004640:	e798      	b.n	8004574 <__svfiscanf_r+0x21c>
 8004642:	4621      	mov	r1, r4
 8004644:	4630      	mov	r0, r6
 8004646:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004648:	4798      	blx	r3
 800464a:	2800      	cmp	r0, #0
 800464c:	d092      	beq.n	8004574 <__svfiscanf_r+0x21c>
 800464e:	e76b      	b.n	8004528 <__svfiscanf_r+0x1d0>
 8004650:	2b04      	cmp	r3, #4
 8004652:	dc06      	bgt.n	8004662 <__svfiscanf_r+0x30a>
 8004654:	466b      	mov	r3, sp
 8004656:	4622      	mov	r2, r4
 8004658:	4630      	mov	r0, r6
 800465a:	a941      	add	r1, sp, #260	; 0x104
 800465c:	f000 f8a4 	bl	80047a8 <_scanf_i>
 8004660:	e796      	b.n	8004590 <__svfiscanf_r+0x238>
 8004662:	4b0f      	ldr	r3, [pc, #60]	; (80046a0 <__svfiscanf_r+0x348>)
 8004664:	2b00      	cmp	r3, #0
 8004666:	f43f aeaa 	beq.w	80043be <__svfiscanf_r+0x66>
 800466a:	466b      	mov	r3, sp
 800466c:	4622      	mov	r2, r4
 800466e:	4630      	mov	r0, r6
 8004670:	a941      	add	r1, sp, #260	; 0x104
 8004672:	f3af 8000 	nop.w
 8004676:	e78b      	b.n	8004590 <__svfiscanf_r+0x238>
 8004678:	89a3      	ldrh	r3, [r4, #12]
 800467a:	0599      	lsls	r1, r3, #22
 800467c:	f53f af58 	bmi.w	8004530 <__svfiscanf_r+0x1d8>
 8004680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004682:	f7fe fd89 	bl	8003198 <__retarget_lock_release_recursive>
 8004686:	e753      	b.n	8004530 <__svfiscanf_r+0x1d8>
 8004688:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800468a:	07da      	lsls	r2, r3, #31
 800468c:	d405      	bmi.n	800469a <__svfiscanf_r+0x342>
 800468e:	89a3      	ldrh	r3, [r4, #12]
 8004690:	059b      	lsls	r3, r3, #22
 8004692:	d402      	bmi.n	800469a <__svfiscanf_r+0x342>
 8004694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004696:	f7fe fd7f 	bl	8003198 <__retarget_lock_release_recursive>
 800469a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800469c:	e751      	b.n	8004542 <__svfiscanf_r+0x1ea>
 800469e:	bf00      	nop
 80046a0:	00000000 	.word	0x00000000

080046a4 <_vfiscanf_r>:
 80046a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046a8:	460c      	mov	r4, r1
 80046aa:	4616      	mov	r6, r2
 80046ac:	461f      	mov	r7, r3
 80046ae:	4605      	mov	r5, r0
 80046b0:	b118      	cbz	r0, 80046ba <_vfiscanf_r+0x16>
 80046b2:	6983      	ldr	r3, [r0, #24]
 80046b4:	b90b      	cbnz	r3, 80046ba <_vfiscanf_r+0x16>
 80046b6:	f7fe fc7d 	bl	8002fb4 <__sinit>
 80046ba:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <_vfiscanf_r+0x44>)
 80046bc:	429c      	cmp	r4, r3
 80046be:	d108      	bne.n	80046d2 <_vfiscanf_r+0x2e>
 80046c0:	686c      	ldr	r4, [r5, #4]
 80046c2:	463b      	mov	r3, r7
 80046c4:	4632      	mov	r2, r6
 80046c6:	4621      	mov	r1, r4
 80046c8:	4628      	mov	r0, r5
 80046ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046ce:	f7ff be43 	b.w	8004358 <__svfiscanf_r>
 80046d2:	4b06      	ldr	r3, [pc, #24]	; (80046ec <_vfiscanf_r+0x48>)
 80046d4:	429c      	cmp	r4, r3
 80046d6:	d101      	bne.n	80046dc <_vfiscanf_r+0x38>
 80046d8:	68ac      	ldr	r4, [r5, #8]
 80046da:	e7f2      	b.n	80046c2 <_vfiscanf_r+0x1e>
 80046dc:	4b04      	ldr	r3, [pc, #16]	; (80046f0 <_vfiscanf_r+0x4c>)
 80046de:	429c      	cmp	r4, r3
 80046e0:	bf08      	it	eq
 80046e2:	68ec      	ldreq	r4, [r5, #12]
 80046e4:	e7ed      	b.n	80046c2 <_vfiscanf_r+0x1e>
 80046e6:	bf00      	nop
 80046e8:	08005894 	.word	0x08005894
 80046ec:	080058b4 	.word	0x080058b4
 80046f0:	08005874 	.word	0x08005874

080046f4 <_scanf_chars>:
 80046f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046f8:	4615      	mov	r5, r2
 80046fa:	688a      	ldr	r2, [r1, #8]
 80046fc:	4680      	mov	r8, r0
 80046fe:	460c      	mov	r4, r1
 8004700:	b932      	cbnz	r2, 8004710 <_scanf_chars+0x1c>
 8004702:	698a      	ldr	r2, [r1, #24]
 8004704:	2a00      	cmp	r2, #0
 8004706:	bf0c      	ite	eq
 8004708:	2201      	moveq	r2, #1
 800470a:	f04f 32ff 	movne.w	r2, #4294967295
 800470e:	608a      	str	r2, [r1, #8]
 8004710:	2700      	movs	r7, #0
 8004712:	6822      	ldr	r2, [r4, #0]
 8004714:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80047a4 <_scanf_chars+0xb0>
 8004718:	06d1      	lsls	r1, r2, #27
 800471a:	bf5f      	itttt	pl
 800471c:	681a      	ldrpl	r2, [r3, #0]
 800471e:	1d11      	addpl	r1, r2, #4
 8004720:	6019      	strpl	r1, [r3, #0]
 8004722:	6816      	ldrpl	r6, [r2, #0]
 8004724:	69a0      	ldr	r0, [r4, #24]
 8004726:	b188      	cbz	r0, 800474c <_scanf_chars+0x58>
 8004728:	2801      	cmp	r0, #1
 800472a:	d107      	bne.n	800473c <_scanf_chars+0x48>
 800472c:	682b      	ldr	r3, [r5, #0]
 800472e:	781a      	ldrb	r2, [r3, #0]
 8004730:	6963      	ldr	r3, [r4, #20]
 8004732:	5c9b      	ldrb	r3, [r3, r2]
 8004734:	b953      	cbnz	r3, 800474c <_scanf_chars+0x58>
 8004736:	2f00      	cmp	r7, #0
 8004738:	d031      	beq.n	800479e <_scanf_chars+0xaa>
 800473a:	e022      	b.n	8004782 <_scanf_chars+0x8e>
 800473c:	2802      	cmp	r0, #2
 800473e:	d120      	bne.n	8004782 <_scanf_chars+0x8e>
 8004740:	682b      	ldr	r3, [r5, #0]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	f813 3009 	ldrb.w	r3, [r3, r9]
 8004748:	071b      	lsls	r3, r3, #28
 800474a:	d41a      	bmi.n	8004782 <_scanf_chars+0x8e>
 800474c:	6823      	ldr	r3, [r4, #0]
 800474e:	3701      	adds	r7, #1
 8004750:	06da      	lsls	r2, r3, #27
 8004752:	bf5e      	ittt	pl
 8004754:	682b      	ldrpl	r3, [r5, #0]
 8004756:	781b      	ldrbpl	r3, [r3, #0]
 8004758:	f806 3b01 	strbpl.w	r3, [r6], #1
 800475c:	682a      	ldr	r2, [r5, #0]
 800475e:	686b      	ldr	r3, [r5, #4]
 8004760:	3201      	adds	r2, #1
 8004762:	602a      	str	r2, [r5, #0]
 8004764:	68a2      	ldr	r2, [r4, #8]
 8004766:	3b01      	subs	r3, #1
 8004768:	3a01      	subs	r2, #1
 800476a:	606b      	str	r3, [r5, #4]
 800476c:	60a2      	str	r2, [r4, #8]
 800476e:	b142      	cbz	r2, 8004782 <_scanf_chars+0x8e>
 8004770:	2b00      	cmp	r3, #0
 8004772:	dcd7      	bgt.n	8004724 <_scanf_chars+0x30>
 8004774:	4629      	mov	r1, r5
 8004776:	4640      	mov	r0, r8
 8004778:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800477c:	4798      	blx	r3
 800477e:	2800      	cmp	r0, #0
 8004780:	d0d0      	beq.n	8004724 <_scanf_chars+0x30>
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	f013 0310 	ands.w	r3, r3, #16
 8004788:	d105      	bne.n	8004796 <_scanf_chars+0xa2>
 800478a:	68e2      	ldr	r2, [r4, #12]
 800478c:	3201      	adds	r2, #1
 800478e:	60e2      	str	r2, [r4, #12]
 8004790:	69a2      	ldr	r2, [r4, #24]
 8004792:	b102      	cbz	r2, 8004796 <_scanf_chars+0xa2>
 8004794:	7033      	strb	r3, [r6, #0]
 8004796:	2000      	movs	r0, #0
 8004798:	6923      	ldr	r3, [r4, #16]
 800479a:	443b      	add	r3, r7
 800479c:	6123      	str	r3, [r4, #16]
 800479e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047a2:	bf00      	nop
 80047a4:	08005927 	.word	0x08005927

080047a8 <_scanf_i>:
 80047a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ac:	460c      	mov	r4, r1
 80047ae:	4698      	mov	r8, r3
 80047b0:	4b75      	ldr	r3, [pc, #468]	; (8004988 <_scanf_i+0x1e0>)
 80047b2:	b087      	sub	sp, #28
 80047b4:	4682      	mov	sl, r0
 80047b6:	4616      	mov	r6, r2
 80047b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80047bc:	ab03      	add	r3, sp, #12
 80047be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80047c2:	4b72      	ldr	r3, [pc, #456]	; (800498c <_scanf_i+0x1e4>)
 80047c4:	69a1      	ldr	r1, [r4, #24]
 80047c6:	4a72      	ldr	r2, [pc, #456]	; (8004990 <_scanf_i+0x1e8>)
 80047c8:	4627      	mov	r7, r4
 80047ca:	2903      	cmp	r1, #3
 80047cc:	bf18      	it	ne
 80047ce:	461a      	movne	r2, r3
 80047d0:	68a3      	ldr	r3, [r4, #8]
 80047d2:	9201      	str	r2, [sp, #4]
 80047d4:	1e5a      	subs	r2, r3, #1
 80047d6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80047da:	bf81      	itttt	hi
 80047dc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80047e0:	eb03 0905 	addhi.w	r9, r3, r5
 80047e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80047e8:	60a3      	strhi	r3, [r4, #8]
 80047ea:	f857 3b1c 	ldr.w	r3, [r7], #28
 80047ee:	bf98      	it	ls
 80047f0:	f04f 0900 	movls.w	r9, #0
 80047f4:	463d      	mov	r5, r7
 80047f6:	f04f 0b00 	mov.w	fp, #0
 80047fa:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80047fe:	6023      	str	r3, [r4, #0]
 8004800:	6831      	ldr	r1, [r6, #0]
 8004802:	ab03      	add	r3, sp, #12
 8004804:	2202      	movs	r2, #2
 8004806:	7809      	ldrb	r1, [r1, #0]
 8004808:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800480c:	f000 fbb4 	bl	8004f78 <memchr>
 8004810:	b328      	cbz	r0, 800485e <_scanf_i+0xb6>
 8004812:	f1bb 0f01 	cmp.w	fp, #1
 8004816:	d159      	bne.n	80048cc <_scanf_i+0x124>
 8004818:	6862      	ldr	r2, [r4, #4]
 800481a:	b92a      	cbnz	r2, 8004828 <_scanf_i+0x80>
 800481c:	2308      	movs	r3, #8
 800481e:	6822      	ldr	r2, [r4, #0]
 8004820:	6063      	str	r3, [r4, #4]
 8004822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004826:	6022      	str	r2, [r4, #0]
 8004828:	6822      	ldr	r2, [r4, #0]
 800482a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800482e:	6022      	str	r2, [r4, #0]
 8004830:	68a2      	ldr	r2, [r4, #8]
 8004832:	1e51      	subs	r1, r2, #1
 8004834:	60a1      	str	r1, [r4, #8]
 8004836:	b192      	cbz	r2, 800485e <_scanf_i+0xb6>
 8004838:	6832      	ldr	r2, [r6, #0]
 800483a:	1c51      	adds	r1, r2, #1
 800483c:	6031      	str	r1, [r6, #0]
 800483e:	7812      	ldrb	r2, [r2, #0]
 8004840:	f805 2b01 	strb.w	r2, [r5], #1
 8004844:	6872      	ldr	r2, [r6, #4]
 8004846:	3a01      	subs	r2, #1
 8004848:	2a00      	cmp	r2, #0
 800484a:	6072      	str	r2, [r6, #4]
 800484c:	dc07      	bgt.n	800485e <_scanf_i+0xb6>
 800484e:	4631      	mov	r1, r6
 8004850:	4650      	mov	r0, sl
 8004852:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004856:	4790      	blx	r2
 8004858:	2800      	cmp	r0, #0
 800485a:	f040 8085 	bne.w	8004968 <_scanf_i+0x1c0>
 800485e:	f10b 0b01 	add.w	fp, fp, #1
 8004862:	f1bb 0f03 	cmp.w	fp, #3
 8004866:	d1cb      	bne.n	8004800 <_scanf_i+0x58>
 8004868:	6863      	ldr	r3, [r4, #4]
 800486a:	b90b      	cbnz	r3, 8004870 <_scanf_i+0xc8>
 800486c:	230a      	movs	r3, #10
 800486e:	6063      	str	r3, [r4, #4]
 8004870:	6863      	ldr	r3, [r4, #4]
 8004872:	4948      	ldr	r1, [pc, #288]	; (8004994 <_scanf_i+0x1ec>)
 8004874:	6960      	ldr	r0, [r4, #20]
 8004876:	1ac9      	subs	r1, r1, r3
 8004878:	f000 f962 	bl	8004b40 <__sccl>
 800487c:	f04f 0b00 	mov.w	fp, #0
 8004880:	68a3      	ldr	r3, [r4, #8]
 8004882:	6822      	ldr	r2, [r4, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d03d      	beq.n	8004904 <_scanf_i+0x15c>
 8004888:	6831      	ldr	r1, [r6, #0]
 800488a:	6960      	ldr	r0, [r4, #20]
 800488c:	f891 c000 	ldrb.w	ip, [r1]
 8004890:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004894:	2800      	cmp	r0, #0
 8004896:	d035      	beq.n	8004904 <_scanf_i+0x15c>
 8004898:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800489c:	d124      	bne.n	80048e8 <_scanf_i+0x140>
 800489e:	0510      	lsls	r0, r2, #20
 80048a0:	d522      	bpl.n	80048e8 <_scanf_i+0x140>
 80048a2:	f10b 0b01 	add.w	fp, fp, #1
 80048a6:	f1b9 0f00 	cmp.w	r9, #0
 80048aa:	d003      	beq.n	80048b4 <_scanf_i+0x10c>
 80048ac:	3301      	adds	r3, #1
 80048ae:	f109 39ff 	add.w	r9, r9, #4294967295
 80048b2:	60a3      	str	r3, [r4, #8]
 80048b4:	6873      	ldr	r3, [r6, #4]
 80048b6:	3b01      	subs	r3, #1
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	6073      	str	r3, [r6, #4]
 80048bc:	dd1b      	ble.n	80048f6 <_scanf_i+0x14e>
 80048be:	6833      	ldr	r3, [r6, #0]
 80048c0:	3301      	adds	r3, #1
 80048c2:	6033      	str	r3, [r6, #0]
 80048c4:	68a3      	ldr	r3, [r4, #8]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	60a3      	str	r3, [r4, #8]
 80048ca:	e7d9      	b.n	8004880 <_scanf_i+0xd8>
 80048cc:	f1bb 0f02 	cmp.w	fp, #2
 80048d0:	d1ae      	bne.n	8004830 <_scanf_i+0x88>
 80048d2:	6822      	ldr	r2, [r4, #0]
 80048d4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80048d8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80048dc:	d1bf      	bne.n	800485e <_scanf_i+0xb6>
 80048de:	2310      	movs	r3, #16
 80048e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048e4:	6063      	str	r3, [r4, #4]
 80048e6:	e7a2      	b.n	800482e <_scanf_i+0x86>
 80048e8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80048ec:	6022      	str	r2, [r4, #0]
 80048ee:	780b      	ldrb	r3, [r1, #0]
 80048f0:	f805 3b01 	strb.w	r3, [r5], #1
 80048f4:	e7de      	b.n	80048b4 <_scanf_i+0x10c>
 80048f6:	4631      	mov	r1, r6
 80048f8:	4650      	mov	r0, sl
 80048fa:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80048fe:	4798      	blx	r3
 8004900:	2800      	cmp	r0, #0
 8004902:	d0df      	beq.n	80048c4 <_scanf_i+0x11c>
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	05db      	lsls	r3, r3, #23
 8004908:	d50d      	bpl.n	8004926 <_scanf_i+0x17e>
 800490a:	42bd      	cmp	r5, r7
 800490c:	d909      	bls.n	8004922 <_scanf_i+0x17a>
 800490e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004912:	4632      	mov	r2, r6
 8004914:	4650      	mov	r0, sl
 8004916:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800491a:	f105 39ff 	add.w	r9, r5, #4294967295
 800491e:	4798      	blx	r3
 8004920:	464d      	mov	r5, r9
 8004922:	42bd      	cmp	r5, r7
 8004924:	d02d      	beq.n	8004982 <_scanf_i+0x1da>
 8004926:	6822      	ldr	r2, [r4, #0]
 8004928:	f012 0210 	ands.w	r2, r2, #16
 800492c:	d113      	bne.n	8004956 <_scanf_i+0x1ae>
 800492e:	702a      	strb	r2, [r5, #0]
 8004930:	4639      	mov	r1, r7
 8004932:	6863      	ldr	r3, [r4, #4]
 8004934:	4650      	mov	r0, sl
 8004936:	9e01      	ldr	r6, [sp, #4]
 8004938:	47b0      	blx	r6
 800493a:	6821      	ldr	r1, [r4, #0]
 800493c:	f8d8 3000 	ldr.w	r3, [r8]
 8004940:	f011 0f20 	tst.w	r1, #32
 8004944:	d013      	beq.n	800496e <_scanf_i+0x1c6>
 8004946:	1d1a      	adds	r2, r3, #4
 8004948:	f8c8 2000 	str.w	r2, [r8]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6018      	str	r0, [r3, #0]
 8004950:	68e3      	ldr	r3, [r4, #12]
 8004952:	3301      	adds	r3, #1
 8004954:	60e3      	str	r3, [r4, #12]
 8004956:	2000      	movs	r0, #0
 8004958:	1bed      	subs	r5, r5, r7
 800495a:	44ab      	add	fp, r5
 800495c:	6925      	ldr	r5, [r4, #16]
 800495e:	445d      	add	r5, fp
 8004960:	6125      	str	r5, [r4, #16]
 8004962:	b007      	add	sp, #28
 8004964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004968:	f04f 0b00 	mov.w	fp, #0
 800496c:	e7ca      	b.n	8004904 <_scanf_i+0x15c>
 800496e:	1d1a      	adds	r2, r3, #4
 8004970:	f8c8 2000 	str.w	r2, [r8]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f011 0f01 	tst.w	r1, #1
 800497a:	bf14      	ite	ne
 800497c:	8018      	strhne	r0, [r3, #0]
 800497e:	6018      	streq	r0, [r3, #0]
 8004980:	e7e6      	b.n	8004950 <_scanf_i+0x1a8>
 8004982:	2001      	movs	r0, #1
 8004984:	e7ed      	b.n	8004962 <_scanf_i+0x1ba>
 8004986:	bf00      	nop
 8004988:	08005850 	.word	0x08005850
 800498c:	08004d91 	.word	0x08004d91
 8004990:	08004ca9 	.word	0x08004ca9
 8004994:	08005924 	.word	0x08005924

08004998 <_read_r>:
 8004998:	b538      	push	{r3, r4, r5, lr}
 800499a:	4604      	mov	r4, r0
 800499c:	4608      	mov	r0, r1
 800499e:	4611      	mov	r1, r2
 80049a0:	2200      	movs	r2, #0
 80049a2:	4d05      	ldr	r5, [pc, #20]	; (80049b8 <_read_r+0x20>)
 80049a4:	602a      	str	r2, [r5, #0]
 80049a6:	461a      	mov	r2, r3
 80049a8:	f7fc fb7c 	bl	80010a4 <_read>
 80049ac:	1c43      	adds	r3, r0, #1
 80049ae:	d102      	bne.n	80049b6 <_read_r+0x1e>
 80049b0:	682b      	ldr	r3, [r5, #0]
 80049b2:	b103      	cbz	r3, 80049b6 <_read_r+0x1e>
 80049b4:	6023      	str	r3, [r4, #0]
 80049b6:	bd38      	pop	{r3, r4, r5, pc}
 80049b8:	20000128 	.word	0x20000128

080049bc <lflush>:
 80049bc:	8983      	ldrh	r3, [r0, #12]
 80049be:	f003 0309 	and.w	r3, r3, #9
 80049c2:	2b09      	cmp	r3, #9
 80049c4:	d101      	bne.n	80049ca <lflush+0xe>
 80049c6:	f7fe ba8b 	b.w	8002ee0 <fflush>
 80049ca:	2000      	movs	r0, #0
 80049cc:	4770      	bx	lr
	...

080049d0 <__srefill_r>:
 80049d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d2:	460c      	mov	r4, r1
 80049d4:	4605      	mov	r5, r0
 80049d6:	b118      	cbz	r0, 80049e0 <__srefill_r+0x10>
 80049d8:	6983      	ldr	r3, [r0, #24]
 80049da:	b90b      	cbnz	r3, 80049e0 <__srefill_r+0x10>
 80049dc:	f7fe faea 	bl	8002fb4 <__sinit>
 80049e0:	4b3c      	ldr	r3, [pc, #240]	; (8004ad4 <__srefill_r+0x104>)
 80049e2:	429c      	cmp	r4, r3
 80049e4:	d10a      	bne.n	80049fc <__srefill_r+0x2c>
 80049e6:	686c      	ldr	r4, [r5, #4]
 80049e8:	2300      	movs	r3, #0
 80049ea:	6063      	str	r3, [r4, #4]
 80049ec:	89a3      	ldrh	r3, [r4, #12]
 80049ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049f2:	069e      	lsls	r6, r3, #26
 80049f4:	d50c      	bpl.n	8004a10 <__srefill_r+0x40>
 80049f6:	f04f 30ff 	mov.w	r0, #4294967295
 80049fa:	e067      	b.n	8004acc <__srefill_r+0xfc>
 80049fc:	4b36      	ldr	r3, [pc, #216]	; (8004ad8 <__srefill_r+0x108>)
 80049fe:	429c      	cmp	r4, r3
 8004a00:	d101      	bne.n	8004a06 <__srefill_r+0x36>
 8004a02:	68ac      	ldr	r4, [r5, #8]
 8004a04:	e7f0      	b.n	80049e8 <__srefill_r+0x18>
 8004a06:	4b35      	ldr	r3, [pc, #212]	; (8004adc <__srefill_r+0x10c>)
 8004a08:	429c      	cmp	r4, r3
 8004a0a:	bf08      	it	eq
 8004a0c:	68ec      	ldreq	r4, [r5, #12]
 8004a0e:	e7eb      	b.n	80049e8 <__srefill_r+0x18>
 8004a10:	0758      	lsls	r0, r3, #29
 8004a12:	d449      	bmi.n	8004aa8 <__srefill_r+0xd8>
 8004a14:	06d9      	lsls	r1, r3, #27
 8004a16:	d405      	bmi.n	8004a24 <__srefill_r+0x54>
 8004a18:	2309      	movs	r3, #9
 8004a1a:	602b      	str	r3, [r5, #0]
 8004a1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a20:	81a3      	strh	r3, [r4, #12]
 8004a22:	e7e8      	b.n	80049f6 <__srefill_r+0x26>
 8004a24:	071a      	lsls	r2, r3, #28
 8004a26:	d50b      	bpl.n	8004a40 <__srefill_r+0x70>
 8004a28:	4621      	mov	r1, r4
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	f7fe fa1c 	bl	8002e68 <_fflush_r>
 8004a30:	2800      	cmp	r0, #0
 8004a32:	d1e0      	bne.n	80049f6 <__srefill_r+0x26>
 8004a34:	89a3      	ldrh	r3, [r4, #12]
 8004a36:	60a0      	str	r0, [r4, #8]
 8004a38:	f023 0308 	bic.w	r3, r3, #8
 8004a3c:	81a3      	strh	r3, [r4, #12]
 8004a3e:	61a0      	str	r0, [r4, #24]
 8004a40:	89a3      	ldrh	r3, [r4, #12]
 8004a42:	f043 0304 	orr.w	r3, r3, #4
 8004a46:	81a3      	strh	r3, [r4, #12]
 8004a48:	6923      	ldr	r3, [r4, #16]
 8004a4a:	b91b      	cbnz	r3, 8004a54 <__srefill_r+0x84>
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	4628      	mov	r0, r5
 8004a50:	f7fe ffe4 	bl	8003a1c <__smakebuf_r>
 8004a54:	89a6      	ldrh	r6, [r4, #12]
 8004a56:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8004a5a:	07b3      	lsls	r3, r6, #30
 8004a5c:	d00f      	beq.n	8004a7e <__srefill_r+0xae>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	81a3      	strh	r3, [r4, #12]
 8004a62:	4b1f      	ldr	r3, [pc, #124]	; (8004ae0 <__srefill_r+0x110>)
 8004a64:	491f      	ldr	r1, [pc, #124]	; (8004ae4 <__srefill_r+0x114>)
 8004a66:	6818      	ldr	r0, [r3, #0]
 8004a68:	f006 0609 	and.w	r6, r6, #9
 8004a6c:	f7fe fb20 	bl	80030b0 <_fwalk>
 8004a70:	2e09      	cmp	r6, #9
 8004a72:	81a7      	strh	r7, [r4, #12]
 8004a74:	d103      	bne.n	8004a7e <__srefill_r+0xae>
 8004a76:	4621      	mov	r1, r4
 8004a78:	4628      	mov	r0, r5
 8004a7a:	f7fe f973 	bl	8002d64 <__sflush_r>
 8004a7e:	6922      	ldr	r2, [r4, #16]
 8004a80:	4628      	mov	r0, r5
 8004a82:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004a84:	6963      	ldr	r3, [r4, #20]
 8004a86:	6a21      	ldr	r1, [r4, #32]
 8004a88:	6022      	str	r2, [r4, #0]
 8004a8a:	47b0      	blx	r6
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	6060      	str	r0, [r4, #4]
 8004a90:	dc1d      	bgt.n	8004ace <__srefill_r+0xfe>
 8004a92:	bf18      	it	ne
 8004a94:	2200      	movne	r2, #0
 8004a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a9a:	bf16      	itet	ne
 8004a9c:	6062      	strne	r2, [r4, #4]
 8004a9e:	f043 0320 	orreq.w	r3, r3, #32
 8004aa2:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8004aa6:	e7bb      	b.n	8004a20 <__srefill_r+0x50>
 8004aa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004aaa:	2900      	cmp	r1, #0
 8004aac:	d0cc      	beq.n	8004a48 <__srefill_r+0x78>
 8004aae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ab2:	4299      	cmp	r1, r3
 8004ab4:	d002      	beq.n	8004abc <__srefill_r+0xec>
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	f7fe fb86 	bl	80031c8 <_free_r>
 8004abc:	2000      	movs	r0, #0
 8004abe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ac0:	6360      	str	r0, [r4, #52]	; 0x34
 8004ac2:	6063      	str	r3, [r4, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0bf      	beq.n	8004a48 <__srefill_r+0x78>
 8004ac8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004aca:	6023      	str	r3, [r4, #0]
 8004acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ace:	2000      	movs	r0, #0
 8004ad0:	e7fc      	b.n	8004acc <__srefill_r+0xfc>
 8004ad2:	bf00      	nop
 8004ad4:	08005894 	.word	0x08005894
 8004ad8:	080058b4 	.word	0x080058b4
 8004adc:	08005874 	.word	0x08005874
 8004ae0:	080058d4 	.word	0x080058d4
 8004ae4:	080049bd 	.word	0x080049bd

08004ae8 <__srget_r>:
 8004ae8:	b538      	push	{r3, r4, r5, lr}
 8004aea:	460c      	mov	r4, r1
 8004aec:	4605      	mov	r5, r0
 8004aee:	b118      	cbz	r0, 8004af8 <__srget_r+0x10>
 8004af0:	6983      	ldr	r3, [r0, #24]
 8004af2:	b90b      	cbnz	r3, 8004af8 <__srget_r+0x10>
 8004af4:	f7fe fa5e 	bl	8002fb4 <__sinit>
 8004af8:	4b0e      	ldr	r3, [pc, #56]	; (8004b34 <__srget_r+0x4c>)
 8004afa:	429c      	cmp	r4, r3
 8004afc:	d10d      	bne.n	8004b1a <__srget_r+0x32>
 8004afe:	686c      	ldr	r4, [r5, #4]
 8004b00:	4621      	mov	r1, r4
 8004b02:	4628      	mov	r0, r5
 8004b04:	f7ff ff64 	bl	80049d0 <__srefill_r>
 8004b08:	b988      	cbnz	r0, 8004b2e <__srget_r+0x46>
 8004b0a:	6863      	ldr	r3, [r4, #4]
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	6063      	str	r3, [r4, #4]
 8004b10:	6823      	ldr	r3, [r4, #0]
 8004b12:	1c5a      	adds	r2, r3, #1
 8004b14:	6022      	str	r2, [r4, #0]
 8004b16:	7818      	ldrb	r0, [r3, #0]
 8004b18:	bd38      	pop	{r3, r4, r5, pc}
 8004b1a:	4b07      	ldr	r3, [pc, #28]	; (8004b38 <__srget_r+0x50>)
 8004b1c:	429c      	cmp	r4, r3
 8004b1e:	d101      	bne.n	8004b24 <__srget_r+0x3c>
 8004b20:	68ac      	ldr	r4, [r5, #8]
 8004b22:	e7ed      	b.n	8004b00 <__srget_r+0x18>
 8004b24:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <__srget_r+0x54>)
 8004b26:	429c      	cmp	r4, r3
 8004b28:	bf08      	it	eq
 8004b2a:	68ec      	ldreq	r4, [r5, #12]
 8004b2c:	e7e8      	b.n	8004b00 <__srget_r+0x18>
 8004b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b32:	e7f1      	b.n	8004b18 <__srget_r+0x30>
 8004b34:	08005894 	.word	0x08005894
 8004b38:	080058b4 	.word	0x080058b4
 8004b3c:	08005874 	.word	0x08005874

08004b40 <__sccl>:
 8004b40:	b570      	push	{r4, r5, r6, lr}
 8004b42:	780b      	ldrb	r3, [r1, #0]
 8004b44:	4604      	mov	r4, r0
 8004b46:	2b5e      	cmp	r3, #94	; 0x5e
 8004b48:	bf13      	iteet	ne
 8004b4a:	2200      	movne	r2, #0
 8004b4c:	2201      	moveq	r2, #1
 8004b4e:	784b      	ldrbeq	r3, [r1, #1]
 8004b50:	1c48      	addne	r0, r1, #1
 8004b52:	bf08      	it	eq
 8004b54:	1c88      	addeq	r0, r1, #2
 8004b56:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004b5a:	1e61      	subs	r1, r4, #1
 8004b5c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8004b60:	42a9      	cmp	r1, r5
 8004b62:	d1fb      	bne.n	8004b5c <__sccl+0x1c>
 8004b64:	b90b      	cbnz	r3, 8004b6a <__sccl+0x2a>
 8004b66:	3801      	subs	r0, #1
 8004b68:	bd70      	pop	{r4, r5, r6, pc}
 8004b6a:	f082 0201 	eor.w	r2, r2, #1
 8004b6e:	4605      	mov	r5, r0
 8004b70:	54e2      	strb	r2, [r4, r3]
 8004b72:	4628      	mov	r0, r5
 8004b74:	f810 1b01 	ldrb.w	r1, [r0], #1
 8004b78:	292d      	cmp	r1, #45	; 0x2d
 8004b7a:	d006      	beq.n	8004b8a <__sccl+0x4a>
 8004b7c:	295d      	cmp	r1, #93	; 0x5d
 8004b7e:	d0f3      	beq.n	8004b68 <__sccl+0x28>
 8004b80:	b909      	cbnz	r1, 8004b86 <__sccl+0x46>
 8004b82:	4628      	mov	r0, r5
 8004b84:	e7f0      	b.n	8004b68 <__sccl+0x28>
 8004b86:	460b      	mov	r3, r1
 8004b88:	e7f1      	b.n	8004b6e <__sccl+0x2e>
 8004b8a:	786e      	ldrb	r6, [r5, #1]
 8004b8c:	2e5d      	cmp	r6, #93	; 0x5d
 8004b8e:	d0fa      	beq.n	8004b86 <__sccl+0x46>
 8004b90:	42b3      	cmp	r3, r6
 8004b92:	dcf8      	bgt.n	8004b86 <__sccl+0x46>
 8004b94:	4619      	mov	r1, r3
 8004b96:	3502      	adds	r5, #2
 8004b98:	3101      	adds	r1, #1
 8004b9a:	428e      	cmp	r6, r1
 8004b9c:	5462      	strb	r2, [r4, r1]
 8004b9e:	dcfb      	bgt.n	8004b98 <__sccl+0x58>
 8004ba0:	1af1      	subs	r1, r6, r3
 8004ba2:	3901      	subs	r1, #1
 8004ba4:	42b3      	cmp	r3, r6
 8004ba6:	bfa8      	it	ge
 8004ba8:	2100      	movge	r1, #0
 8004baa:	1c58      	adds	r0, r3, #1
 8004bac:	1843      	adds	r3, r0, r1
 8004bae:	e7e0      	b.n	8004b72 <__sccl+0x32>

08004bb0 <_strtol_l.constprop.0>:
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bb6:	4680      	mov	r8, r0
 8004bb8:	d001      	beq.n	8004bbe <_strtol_l.constprop.0+0xe>
 8004bba:	2b24      	cmp	r3, #36	; 0x24
 8004bbc:	d906      	bls.n	8004bcc <_strtol_l.constprop.0+0x1c>
 8004bbe:	f7fe f8cb 	bl	8002d58 <__errno>
 8004bc2:	2316      	movs	r3, #22
 8004bc4:	6003      	str	r3, [r0, #0]
 8004bc6:	2000      	movs	r0, #0
 8004bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bcc:	460d      	mov	r5, r1
 8004bce:	4f35      	ldr	r7, [pc, #212]	; (8004ca4 <_strtol_l.constprop.0+0xf4>)
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004bd6:	5de6      	ldrb	r6, [r4, r7]
 8004bd8:	f016 0608 	ands.w	r6, r6, #8
 8004bdc:	d1f8      	bne.n	8004bd0 <_strtol_l.constprop.0+0x20>
 8004bde:	2c2d      	cmp	r4, #45	; 0x2d
 8004be0:	d12f      	bne.n	8004c42 <_strtol_l.constprop.0+0x92>
 8004be2:	2601      	movs	r6, #1
 8004be4:	782c      	ldrb	r4, [r5, #0]
 8004be6:	1c85      	adds	r5, r0, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d057      	beq.n	8004c9c <_strtol_l.constprop.0+0xec>
 8004bec:	2b10      	cmp	r3, #16
 8004bee:	d109      	bne.n	8004c04 <_strtol_l.constprop.0+0x54>
 8004bf0:	2c30      	cmp	r4, #48	; 0x30
 8004bf2:	d107      	bne.n	8004c04 <_strtol_l.constprop.0+0x54>
 8004bf4:	7828      	ldrb	r0, [r5, #0]
 8004bf6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004bfa:	2858      	cmp	r0, #88	; 0x58
 8004bfc:	d149      	bne.n	8004c92 <_strtol_l.constprop.0+0xe2>
 8004bfe:	2310      	movs	r3, #16
 8004c00:	786c      	ldrb	r4, [r5, #1]
 8004c02:	3502      	adds	r5, #2
 8004c04:	2700      	movs	r7, #0
 8004c06:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8004c0a:	f10e 3eff 	add.w	lr, lr, #4294967295
 8004c0e:	fbbe f9f3 	udiv	r9, lr, r3
 8004c12:	4638      	mov	r0, r7
 8004c14:	fb03 ea19 	mls	sl, r3, r9, lr
 8004c18:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004c1c:	f1bc 0f09 	cmp.w	ip, #9
 8004c20:	d814      	bhi.n	8004c4c <_strtol_l.constprop.0+0x9c>
 8004c22:	4664      	mov	r4, ip
 8004c24:	42a3      	cmp	r3, r4
 8004c26:	dd22      	ble.n	8004c6e <_strtol_l.constprop.0+0xbe>
 8004c28:	2f00      	cmp	r7, #0
 8004c2a:	db1d      	blt.n	8004c68 <_strtol_l.constprop.0+0xb8>
 8004c2c:	4581      	cmp	r9, r0
 8004c2e:	d31b      	bcc.n	8004c68 <_strtol_l.constprop.0+0xb8>
 8004c30:	d101      	bne.n	8004c36 <_strtol_l.constprop.0+0x86>
 8004c32:	45a2      	cmp	sl, r4
 8004c34:	db18      	blt.n	8004c68 <_strtol_l.constprop.0+0xb8>
 8004c36:	2701      	movs	r7, #1
 8004c38:	fb00 4003 	mla	r0, r0, r3, r4
 8004c3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c40:	e7ea      	b.n	8004c18 <_strtol_l.constprop.0+0x68>
 8004c42:	2c2b      	cmp	r4, #43	; 0x2b
 8004c44:	bf04      	itt	eq
 8004c46:	782c      	ldrbeq	r4, [r5, #0]
 8004c48:	1c85      	addeq	r5, r0, #2
 8004c4a:	e7cd      	b.n	8004be8 <_strtol_l.constprop.0+0x38>
 8004c4c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004c50:	f1bc 0f19 	cmp.w	ip, #25
 8004c54:	d801      	bhi.n	8004c5a <_strtol_l.constprop.0+0xaa>
 8004c56:	3c37      	subs	r4, #55	; 0x37
 8004c58:	e7e4      	b.n	8004c24 <_strtol_l.constprop.0+0x74>
 8004c5a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004c5e:	f1bc 0f19 	cmp.w	ip, #25
 8004c62:	d804      	bhi.n	8004c6e <_strtol_l.constprop.0+0xbe>
 8004c64:	3c57      	subs	r4, #87	; 0x57
 8004c66:	e7dd      	b.n	8004c24 <_strtol_l.constprop.0+0x74>
 8004c68:	f04f 37ff 	mov.w	r7, #4294967295
 8004c6c:	e7e6      	b.n	8004c3c <_strtol_l.constprop.0+0x8c>
 8004c6e:	2f00      	cmp	r7, #0
 8004c70:	da07      	bge.n	8004c82 <_strtol_l.constprop.0+0xd2>
 8004c72:	2322      	movs	r3, #34	; 0x22
 8004c74:	4670      	mov	r0, lr
 8004c76:	f8c8 3000 	str.w	r3, [r8]
 8004c7a:	2a00      	cmp	r2, #0
 8004c7c:	d0a4      	beq.n	8004bc8 <_strtol_l.constprop.0+0x18>
 8004c7e:	1e69      	subs	r1, r5, #1
 8004c80:	e005      	b.n	8004c8e <_strtol_l.constprop.0+0xde>
 8004c82:	b106      	cbz	r6, 8004c86 <_strtol_l.constprop.0+0xd6>
 8004c84:	4240      	negs	r0, r0
 8004c86:	2a00      	cmp	r2, #0
 8004c88:	d09e      	beq.n	8004bc8 <_strtol_l.constprop.0+0x18>
 8004c8a:	2f00      	cmp	r7, #0
 8004c8c:	d1f7      	bne.n	8004c7e <_strtol_l.constprop.0+0xce>
 8004c8e:	6011      	str	r1, [r2, #0]
 8004c90:	e79a      	b.n	8004bc8 <_strtol_l.constprop.0+0x18>
 8004c92:	2430      	movs	r4, #48	; 0x30
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1b5      	bne.n	8004c04 <_strtol_l.constprop.0+0x54>
 8004c98:	2308      	movs	r3, #8
 8004c9a:	e7b3      	b.n	8004c04 <_strtol_l.constprop.0+0x54>
 8004c9c:	2c30      	cmp	r4, #48	; 0x30
 8004c9e:	d0a9      	beq.n	8004bf4 <_strtol_l.constprop.0+0x44>
 8004ca0:	230a      	movs	r3, #10
 8004ca2:	e7af      	b.n	8004c04 <_strtol_l.constprop.0+0x54>
 8004ca4:	08005927 	.word	0x08005927

08004ca8 <_strtol_r>:
 8004ca8:	f7ff bf82 	b.w	8004bb0 <_strtol_l.constprop.0>

08004cac <_strtoul_l.constprop.0>:
 8004cac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004cb0:	4686      	mov	lr, r0
 8004cb2:	460d      	mov	r5, r1
 8004cb4:	4f35      	ldr	r7, [pc, #212]	; (8004d8c <_strtoul_l.constprop.0+0xe0>)
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004cbc:	5de6      	ldrb	r6, [r4, r7]
 8004cbe:	f016 0608 	ands.w	r6, r6, #8
 8004cc2:	d1f8      	bne.n	8004cb6 <_strtoul_l.constprop.0+0xa>
 8004cc4:	2c2d      	cmp	r4, #45	; 0x2d
 8004cc6:	d12f      	bne.n	8004d28 <_strtoul_l.constprop.0+0x7c>
 8004cc8:	2601      	movs	r6, #1
 8004cca:	782c      	ldrb	r4, [r5, #0]
 8004ccc:	1c85      	adds	r5, r0, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d057      	beq.n	8004d82 <_strtoul_l.constprop.0+0xd6>
 8004cd2:	2b10      	cmp	r3, #16
 8004cd4:	d109      	bne.n	8004cea <_strtoul_l.constprop.0+0x3e>
 8004cd6:	2c30      	cmp	r4, #48	; 0x30
 8004cd8:	d107      	bne.n	8004cea <_strtoul_l.constprop.0+0x3e>
 8004cda:	7828      	ldrb	r0, [r5, #0]
 8004cdc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004ce0:	2858      	cmp	r0, #88	; 0x58
 8004ce2:	d149      	bne.n	8004d78 <_strtoul_l.constprop.0+0xcc>
 8004ce4:	2310      	movs	r3, #16
 8004ce6:	786c      	ldrb	r4, [r5, #1]
 8004ce8:	3502      	adds	r5, #2
 8004cea:	f04f 38ff 	mov.w	r8, #4294967295
 8004cee:	fbb8 f8f3 	udiv	r8, r8, r3
 8004cf2:	2700      	movs	r7, #0
 8004cf4:	fb03 f908 	mul.w	r9, r3, r8
 8004cf8:	4638      	mov	r0, r7
 8004cfa:	ea6f 0909 	mvn.w	r9, r9
 8004cfe:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004d02:	f1bc 0f09 	cmp.w	ip, #9
 8004d06:	d814      	bhi.n	8004d32 <_strtoul_l.constprop.0+0x86>
 8004d08:	4664      	mov	r4, ip
 8004d0a:	42a3      	cmp	r3, r4
 8004d0c:	dd22      	ble.n	8004d54 <_strtoul_l.constprop.0+0xa8>
 8004d0e:	2f00      	cmp	r7, #0
 8004d10:	db1d      	blt.n	8004d4e <_strtoul_l.constprop.0+0xa2>
 8004d12:	4580      	cmp	r8, r0
 8004d14:	d31b      	bcc.n	8004d4e <_strtoul_l.constprop.0+0xa2>
 8004d16:	d101      	bne.n	8004d1c <_strtoul_l.constprop.0+0x70>
 8004d18:	45a1      	cmp	r9, r4
 8004d1a:	db18      	blt.n	8004d4e <_strtoul_l.constprop.0+0xa2>
 8004d1c:	2701      	movs	r7, #1
 8004d1e:	fb00 4003 	mla	r0, r0, r3, r4
 8004d22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004d26:	e7ea      	b.n	8004cfe <_strtoul_l.constprop.0+0x52>
 8004d28:	2c2b      	cmp	r4, #43	; 0x2b
 8004d2a:	bf04      	itt	eq
 8004d2c:	782c      	ldrbeq	r4, [r5, #0]
 8004d2e:	1c85      	addeq	r5, r0, #2
 8004d30:	e7cd      	b.n	8004cce <_strtoul_l.constprop.0+0x22>
 8004d32:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004d36:	f1bc 0f19 	cmp.w	ip, #25
 8004d3a:	d801      	bhi.n	8004d40 <_strtoul_l.constprop.0+0x94>
 8004d3c:	3c37      	subs	r4, #55	; 0x37
 8004d3e:	e7e4      	b.n	8004d0a <_strtoul_l.constprop.0+0x5e>
 8004d40:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004d44:	f1bc 0f19 	cmp.w	ip, #25
 8004d48:	d804      	bhi.n	8004d54 <_strtoul_l.constprop.0+0xa8>
 8004d4a:	3c57      	subs	r4, #87	; 0x57
 8004d4c:	e7dd      	b.n	8004d0a <_strtoul_l.constprop.0+0x5e>
 8004d4e:	f04f 37ff 	mov.w	r7, #4294967295
 8004d52:	e7e6      	b.n	8004d22 <_strtoul_l.constprop.0+0x76>
 8004d54:	2f00      	cmp	r7, #0
 8004d56:	da07      	bge.n	8004d68 <_strtoul_l.constprop.0+0xbc>
 8004d58:	2322      	movs	r3, #34	; 0x22
 8004d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d5e:	f8ce 3000 	str.w	r3, [lr]
 8004d62:	b932      	cbnz	r2, 8004d72 <_strtoul_l.constprop.0+0xc6>
 8004d64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d68:	b106      	cbz	r6, 8004d6c <_strtoul_l.constprop.0+0xc0>
 8004d6a:	4240      	negs	r0, r0
 8004d6c:	2a00      	cmp	r2, #0
 8004d6e:	d0f9      	beq.n	8004d64 <_strtoul_l.constprop.0+0xb8>
 8004d70:	b107      	cbz	r7, 8004d74 <_strtoul_l.constprop.0+0xc8>
 8004d72:	1e69      	subs	r1, r5, #1
 8004d74:	6011      	str	r1, [r2, #0]
 8004d76:	e7f5      	b.n	8004d64 <_strtoul_l.constprop.0+0xb8>
 8004d78:	2430      	movs	r4, #48	; 0x30
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1b5      	bne.n	8004cea <_strtoul_l.constprop.0+0x3e>
 8004d7e:	2308      	movs	r3, #8
 8004d80:	e7b3      	b.n	8004cea <_strtoul_l.constprop.0+0x3e>
 8004d82:	2c30      	cmp	r4, #48	; 0x30
 8004d84:	d0a9      	beq.n	8004cda <_strtoul_l.constprop.0+0x2e>
 8004d86:	230a      	movs	r3, #10
 8004d88:	e7af      	b.n	8004cea <_strtoul_l.constprop.0+0x3e>
 8004d8a:	bf00      	nop
 8004d8c:	08005927 	.word	0x08005927

08004d90 <_strtoul_r>:
 8004d90:	f7ff bf8c 	b.w	8004cac <_strtoul_l.constprop.0>

08004d94 <__submore>:
 8004d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d98:	460c      	mov	r4, r1
 8004d9a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004d9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004da0:	4299      	cmp	r1, r3
 8004da2:	d11b      	bne.n	8004ddc <__submore+0x48>
 8004da4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004da8:	f7fe fa76 	bl	8003298 <_malloc_r>
 8004dac:	b918      	cbnz	r0, 8004db6 <__submore+0x22>
 8004dae:	f04f 30ff 	mov.w	r0, #4294967295
 8004db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dba:	63a3      	str	r3, [r4, #56]	; 0x38
 8004dbc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004dc0:	6360      	str	r0, [r4, #52]	; 0x34
 8004dc2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004dc6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004dca:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004dce:	7043      	strb	r3, [r0, #1]
 8004dd0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004dd4:	7003      	strb	r3, [r0, #0]
 8004dd6:	6020      	str	r0, [r4, #0]
 8004dd8:	2000      	movs	r0, #0
 8004dda:	e7ea      	b.n	8004db2 <__submore+0x1e>
 8004ddc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004dde:	0077      	lsls	r7, r6, #1
 8004de0:	463a      	mov	r2, r7
 8004de2:	f000 f8f1 	bl	8004fc8 <_realloc_r>
 8004de6:	4605      	mov	r5, r0
 8004de8:	2800      	cmp	r0, #0
 8004dea:	d0e0      	beq.n	8004dae <__submore+0x1a>
 8004dec:	eb00 0806 	add.w	r8, r0, r6
 8004df0:	4601      	mov	r1, r0
 8004df2:	4632      	mov	r2, r6
 8004df4:	4640      	mov	r0, r8
 8004df6:	f7fe f9d0 	bl	800319a <memcpy>
 8004dfa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004dfe:	f8c4 8000 	str.w	r8, [r4]
 8004e02:	e7e9      	b.n	8004dd8 <__submore+0x44>

08004e04 <_ungetc_r>:
 8004e04:	b570      	push	{r4, r5, r6, lr}
 8004e06:	4614      	mov	r4, r2
 8004e08:	1c4a      	adds	r2, r1, #1
 8004e0a:	4606      	mov	r6, r0
 8004e0c:	460d      	mov	r5, r1
 8004e0e:	d103      	bne.n	8004e18 <_ungetc_r+0x14>
 8004e10:	f04f 35ff 	mov.w	r5, #4294967295
 8004e14:	4628      	mov	r0, r5
 8004e16:	bd70      	pop	{r4, r5, r6, pc}
 8004e18:	b118      	cbz	r0, 8004e22 <_ungetc_r+0x1e>
 8004e1a:	6983      	ldr	r3, [r0, #24]
 8004e1c:	b90b      	cbnz	r3, 8004e22 <_ungetc_r+0x1e>
 8004e1e:	f7fe f8c9 	bl	8002fb4 <__sinit>
 8004e22:	4b41      	ldr	r3, [pc, #260]	; (8004f28 <_ungetc_r+0x124>)
 8004e24:	429c      	cmp	r4, r3
 8004e26:	d11d      	bne.n	8004e64 <_ungetc_r+0x60>
 8004e28:	6874      	ldr	r4, [r6, #4]
 8004e2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e2c:	07db      	lsls	r3, r3, #31
 8004e2e:	d405      	bmi.n	8004e3c <_ungetc_r+0x38>
 8004e30:	89a3      	ldrh	r3, [r4, #12]
 8004e32:	0598      	lsls	r0, r3, #22
 8004e34:	d402      	bmi.n	8004e3c <_ungetc_r+0x38>
 8004e36:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e38:	f7fe f9ad 	bl	8003196 <__retarget_lock_acquire_recursive>
 8004e3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e40:	f023 0320 	bic.w	r3, r3, #32
 8004e44:	0759      	lsls	r1, r3, #29
 8004e46:	81a3      	strh	r3, [r4, #12]
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	d42d      	bmi.n	8004ea8 <_ungetc_r+0xa4>
 8004e4c:	06d3      	lsls	r3, r2, #27
 8004e4e:	d413      	bmi.n	8004e78 <_ungetc_r+0x74>
 8004e50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e52:	07dd      	lsls	r5, r3, #31
 8004e54:	d4dc      	bmi.n	8004e10 <_ungetc_r+0xc>
 8004e56:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004e5a:	d1d9      	bne.n	8004e10 <_ungetc_r+0xc>
 8004e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e5e:	f7fe f99b 	bl	8003198 <__retarget_lock_release_recursive>
 8004e62:	e7d5      	b.n	8004e10 <_ungetc_r+0xc>
 8004e64:	4b31      	ldr	r3, [pc, #196]	; (8004f2c <_ungetc_r+0x128>)
 8004e66:	429c      	cmp	r4, r3
 8004e68:	d101      	bne.n	8004e6e <_ungetc_r+0x6a>
 8004e6a:	68b4      	ldr	r4, [r6, #8]
 8004e6c:	e7dd      	b.n	8004e2a <_ungetc_r+0x26>
 8004e6e:	4b30      	ldr	r3, [pc, #192]	; (8004f30 <_ungetc_r+0x12c>)
 8004e70:	429c      	cmp	r4, r3
 8004e72:	bf08      	it	eq
 8004e74:	68f4      	ldreq	r4, [r6, #12]
 8004e76:	e7d8      	b.n	8004e2a <_ungetc_r+0x26>
 8004e78:	0710      	lsls	r0, r2, #28
 8004e7a:	d511      	bpl.n	8004ea0 <_ungetc_r+0x9c>
 8004e7c:	4621      	mov	r1, r4
 8004e7e:	4630      	mov	r0, r6
 8004e80:	f7fd fff2 	bl	8002e68 <_fflush_r>
 8004e84:	b130      	cbz	r0, 8004e94 <_ungetc_r+0x90>
 8004e86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e88:	07d9      	lsls	r1, r3, #31
 8004e8a:	d4c1      	bmi.n	8004e10 <_ungetc_r+0xc>
 8004e8c:	89a3      	ldrh	r3, [r4, #12]
 8004e8e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004e92:	e7e2      	b.n	8004e5a <_ungetc_r+0x56>
 8004e94:	89a3      	ldrh	r3, [r4, #12]
 8004e96:	60a0      	str	r0, [r4, #8]
 8004e98:	f023 0308 	bic.w	r3, r3, #8
 8004e9c:	81a3      	strh	r3, [r4, #12]
 8004e9e:	61a0      	str	r0, [r4, #24]
 8004ea0:	89a3      	ldrh	r3, [r4, #12]
 8004ea2:	f043 0304 	orr.w	r3, r3, #4
 8004ea6:	81a3      	strh	r3, [r4, #12]
 8004ea8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004eaa:	6862      	ldr	r2, [r4, #4]
 8004eac:	b2ed      	uxtb	r5, r5
 8004eae:	b1d3      	cbz	r3, 8004ee6 <_ungetc_r+0xe2>
 8004eb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	dc05      	bgt.n	8004ec2 <_ungetc_r+0xbe>
 8004eb6:	4621      	mov	r1, r4
 8004eb8:	4630      	mov	r0, r6
 8004eba:	f7ff ff6b 	bl	8004d94 <__submore>
 8004ebe:	2800      	cmp	r0, #0
 8004ec0:	d1e1      	bne.n	8004e86 <_ungetc_r+0x82>
 8004ec2:	6823      	ldr	r3, [r4, #0]
 8004ec4:	1e5a      	subs	r2, r3, #1
 8004ec6:	6022      	str	r2, [r4, #0]
 8004ec8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004ecc:	6863      	ldr	r3, [r4, #4]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	6063      	str	r3, [r4, #4]
 8004ed2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ed4:	07da      	lsls	r2, r3, #31
 8004ed6:	d49d      	bmi.n	8004e14 <_ungetc_r+0x10>
 8004ed8:	89a3      	ldrh	r3, [r4, #12]
 8004eda:	059b      	lsls	r3, r3, #22
 8004edc:	d49a      	bmi.n	8004e14 <_ungetc_r+0x10>
 8004ede:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ee0:	f7fe f95a 	bl	8003198 <__retarget_lock_release_recursive>
 8004ee4:	e796      	b.n	8004e14 <_ungetc_r+0x10>
 8004ee6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004ee8:	6920      	ldr	r0, [r4, #16]
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	f001 0101 	and.w	r1, r1, #1
 8004ef0:	b160      	cbz	r0, 8004f0c <_ungetc_r+0x108>
 8004ef2:	4298      	cmp	r0, r3
 8004ef4:	d20a      	bcs.n	8004f0c <_ungetc_r+0x108>
 8004ef6:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8004efa:	42a8      	cmp	r0, r5
 8004efc:	d106      	bne.n	8004f0c <_ungetc_r+0x108>
 8004efe:	3b01      	subs	r3, #1
 8004f00:	3201      	adds	r2, #1
 8004f02:	6023      	str	r3, [r4, #0]
 8004f04:	6062      	str	r2, [r4, #4]
 8004f06:	2900      	cmp	r1, #0
 8004f08:	d184      	bne.n	8004e14 <_ungetc_r+0x10>
 8004f0a:	e7e5      	b.n	8004ed8 <_ungetc_r+0xd4>
 8004f0c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004f10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f14:	6363      	str	r3, [r4, #52]	; 0x34
 8004f16:	2303      	movs	r3, #3
 8004f18:	63a3      	str	r3, [r4, #56]	; 0x38
 8004f1a:	4623      	mov	r3, r4
 8004f1c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004f20:	6023      	str	r3, [r4, #0]
 8004f22:	2301      	movs	r3, #1
 8004f24:	6063      	str	r3, [r4, #4]
 8004f26:	e7ee      	b.n	8004f06 <_ungetc_r+0x102>
 8004f28:	08005894 	.word	0x08005894
 8004f2c:	080058b4 	.word	0x080058b4
 8004f30:	08005874 	.word	0x08005874

08004f34 <_fstat_r>:
 8004f34:	b538      	push	{r3, r4, r5, lr}
 8004f36:	2300      	movs	r3, #0
 8004f38:	4d06      	ldr	r5, [pc, #24]	; (8004f54 <_fstat_r+0x20>)
 8004f3a:	4604      	mov	r4, r0
 8004f3c:	4608      	mov	r0, r1
 8004f3e:	4611      	mov	r1, r2
 8004f40:	602b      	str	r3, [r5, #0]
 8004f42:	f7fc f8f3 	bl	800112c <_fstat>
 8004f46:	1c43      	adds	r3, r0, #1
 8004f48:	d102      	bne.n	8004f50 <_fstat_r+0x1c>
 8004f4a:	682b      	ldr	r3, [r5, #0]
 8004f4c:	b103      	cbz	r3, 8004f50 <_fstat_r+0x1c>
 8004f4e:	6023      	str	r3, [r4, #0]
 8004f50:	bd38      	pop	{r3, r4, r5, pc}
 8004f52:	bf00      	nop
 8004f54:	20000128 	.word	0x20000128

08004f58 <_isatty_r>:
 8004f58:	b538      	push	{r3, r4, r5, lr}
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	4d05      	ldr	r5, [pc, #20]	; (8004f74 <_isatty_r+0x1c>)
 8004f5e:	4604      	mov	r4, r0
 8004f60:	4608      	mov	r0, r1
 8004f62:	602b      	str	r3, [r5, #0]
 8004f64:	f7fc f8f1 	bl	800114a <_isatty>
 8004f68:	1c43      	adds	r3, r0, #1
 8004f6a:	d102      	bne.n	8004f72 <_isatty_r+0x1a>
 8004f6c:	682b      	ldr	r3, [r5, #0]
 8004f6e:	b103      	cbz	r3, 8004f72 <_isatty_r+0x1a>
 8004f70:	6023      	str	r3, [r4, #0]
 8004f72:	bd38      	pop	{r3, r4, r5, pc}
 8004f74:	20000128 	.word	0x20000128

08004f78 <memchr>:
 8004f78:	4603      	mov	r3, r0
 8004f7a:	b510      	push	{r4, lr}
 8004f7c:	b2c9      	uxtb	r1, r1
 8004f7e:	4402      	add	r2, r0
 8004f80:	4293      	cmp	r3, r2
 8004f82:	4618      	mov	r0, r3
 8004f84:	d101      	bne.n	8004f8a <memchr+0x12>
 8004f86:	2000      	movs	r0, #0
 8004f88:	e003      	b.n	8004f92 <memchr+0x1a>
 8004f8a:	7804      	ldrb	r4, [r0, #0]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	428c      	cmp	r4, r1
 8004f90:	d1f6      	bne.n	8004f80 <memchr+0x8>
 8004f92:	bd10      	pop	{r4, pc}

08004f94 <memmove>:
 8004f94:	4288      	cmp	r0, r1
 8004f96:	b510      	push	{r4, lr}
 8004f98:	eb01 0402 	add.w	r4, r1, r2
 8004f9c:	d902      	bls.n	8004fa4 <memmove+0x10>
 8004f9e:	4284      	cmp	r4, r0
 8004fa0:	4623      	mov	r3, r4
 8004fa2:	d807      	bhi.n	8004fb4 <memmove+0x20>
 8004fa4:	1e43      	subs	r3, r0, #1
 8004fa6:	42a1      	cmp	r1, r4
 8004fa8:	d008      	beq.n	8004fbc <memmove+0x28>
 8004faa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004fb2:	e7f8      	b.n	8004fa6 <memmove+0x12>
 8004fb4:	4601      	mov	r1, r0
 8004fb6:	4402      	add	r2, r0
 8004fb8:	428a      	cmp	r2, r1
 8004fba:	d100      	bne.n	8004fbe <memmove+0x2a>
 8004fbc:	bd10      	pop	{r4, pc}
 8004fbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004fc6:	e7f7      	b.n	8004fb8 <memmove+0x24>

08004fc8 <_realloc_r>:
 8004fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fcc:	4680      	mov	r8, r0
 8004fce:	4614      	mov	r4, r2
 8004fd0:	460e      	mov	r6, r1
 8004fd2:	b921      	cbnz	r1, 8004fde <_realloc_r+0x16>
 8004fd4:	4611      	mov	r1, r2
 8004fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fda:	f7fe b95d 	b.w	8003298 <_malloc_r>
 8004fde:	b92a      	cbnz	r2, 8004fec <_realloc_r+0x24>
 8004fe0:	f7fe f8f2 	bl	80031c8 <_free_r>
 8004fe4:	4625      	mov	r5, r4
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fec:	f000 f81b 	bl	8005026 <_malloc_usable_size_r>
 8004ff0:	4284      	cmp	r4, r0
 8004ff2:	4607      	mov	r7, r0
 8004ff4:	d802      	bhi.n	8004ffc <_realloc_r+0x34>
 8004ff6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004ffa:	d812      	bhi.n	8005022 <_realloc_r+0x5a>
 8004ffc:	4621      	mov	r1, r4
 8004ffe:	4640      	mov	r0, r8
 8005000:	f7fe f94a 	bl	8003298 <_malloc_r>
 8005004:	4605      	mov	r5, r0
 8005006:	2800      	cmp	r0, #0
 8005008:	d0ed      	beq.n	8004fe6 <_realloc_r+0x1e>
 800500a:	42bc      	cmp	r4, r7
 800500c:	4622      	mov	r2, r4
 800500e:	4631      	mov	r1, r6
 8005010:	bf28      	it	cs
 8005012:	463a      	movcs	r2, r7
 8005014:	f7fe f8c1 	bl	800319a <memcpy>
 8005018:	4631      	mov	r1, r6
 800501a:	4640      	mov	r0, r8
 800501c:	f7fe f8d4 	bl	80031c8 <_free_r>
 8005020:	e7e1      	b.n	8004fe6 <_realloc_r+0x1e>
 8005022:	4635      	mov	r5, r6
 8005024:	e7df      	b.n	8004fe6 <_realloc_r+0x1e>

08005026 <_malloc_usable_size_r>:
 8005026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800502a:	1f18      	subs	r0, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	bfbc      	itt	lt
 8005030:	580b      	ldrlt	r3, [r1, r0]
 8005032:	18c0      	addlt	r0, r0, r3
 8005034:	4770      	bx	lr
	...

08005038 <_init>:
 8005038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800503a:	bf00      	nop
 800503c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800503e:	bc08      	pop	{r3}
 8005040:	469e      	mov	lr, r3
 8005042:	4770      	bx	lr

08005044 <_fini>:
 8005044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005046:	bf00      	nop
 8005048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800504a:	bc08      	pop	{r3}
 800504c:	469e      	mov	lr, r3
 800504e:	4770      	bx	lr
