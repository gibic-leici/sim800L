
sim800L.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fd4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000adc  080050e0  080050e0  000150e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bbc  08005bbc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005bbc  08005bbc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005bbc  08005bbc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bbc  08005bbc  00015bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bc0  08005bc0  00015bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005bc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000070  08005c34  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08005c34  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007be5  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a74  00000000  00000000  00027c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  000296f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000798  00000000  00000000  00029f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c2b  00000000  00000000  0002a6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008b32  00000000  00000000  000422fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083d50  00000000  00000000  0004ae2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ceb7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002db8  00000000  00000000  000cebd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080050c8 	.word	0x080050c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080050c8 	.word	0x080050c8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000164:	1d39      	adds	r1, r7, #4
 8000166:	f04f 33ff 	mov.w	r3, #4294967295
 800016a:	2201      	movs	r2, #1
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <__io_putchar+0x20>)
 800016e:	f002 f976 	bl	800245e <HAL_UART_Transmit>
  return ch;
 8000172:	687b      	ldr	r3, [r7, #4]
}
 8000174:	4618      	mov	r0, r3
 8000176:	3708      	adds	r7, #8
 8000178:	46bd      	mov	sp, r7
 800017a:	bd80      	pop	{r7, pc}
 800017c:	2000008c 	.word	0x2000008c

08000180 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8000186:	2300      	movs	r3, #0
 8000188:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart1);
 800018a:	2300      	movs	r3, #0
 800018c:	603b      	str	r3, [r7, #0]
 800018e:	4b0e      	ldr	r3, [pc, #56]	; (80001c8 <__io_getchar+0x48>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	603b      	str	r3, [r7, #0]
 8000196:	4b0c      	ldr	r3, [pc, #48]	; (80001c8 <__io_getchar+0x48>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	603b      	str	r3, [r7, #0]
 800019e:	683b      	ldr	r3, [r7, #0]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80001a0:	1df9      	adds	r1, r7, #7
 80001a2:	f04f 33ff 	mov.w	r3, #4294967295
 80001a6:	2201      	movs	r2, #1
 80001a8:	4807      	ldr	r0, [pc, #28]	; (80001c8 <__io_getchar+0x48>)
 80001aa:	f002 f9ea 	bl	8002582 <HAL_UART_Receive>
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80001ae:	1df9      	adds	r1, r7, #7
 80001b0:	f04f 33ff 	mov.w	r3, #4294967295
 80001b4:	2201      	movs	r2, #1
 80001b6:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__io_getchar+0x48>)
 80001b8:	f002 f951 	bl	800245e <HAL_UART_Transmit>

  return ch;
 80001bc:	79fb      	ldrb	r3, [r7, #7]
}
 80001be:	4618      	mov	r0, r3
 80001c0:	3708      	adds	r7, #8
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bd80      	pop	{r7, pc}
 80001c6:	bf00      	nop
 80001c8:	2000008c 	.word	0x2000008c

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b5b0      	push	{r4, r5, r7, lr}
 80001ce:	f5ad 6d2e 	sub.w	sp, sp, #2784	; 0xae0
 80001d2:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f001 f8e2 	bl	800139c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 fa16 	bl	8000608 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  setvbuf(stdin, NULL, _IONBF, 0);	// Esto es necesario para que scanf ande bien
 80001dc:	4bc2      	ldr	r3, [pc, #776]	; (80004e8 <main+0x31c>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	6858      	ldr	r0, [r3, #4]
 80001e2:	2300      	movs	r3, #0
 80001e4:	2202      	movs	r2, #2
 80001e6:	2100      	movs	r1, #0
 80001e8:	f003 fa1e 	bl	8003628 <setvbuf>
  	  	  	  	  	  	  	  	    // con esto y lo de arriba ya anda el scanf :)

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ec:	f000 fa9c 	bl	8000728 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001f0:	f000 fa46 	bl	8000680 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80001f4:	f000 fa6e 	bl	80006d4 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */

  printf("Test de comandos AT... \r\n");
 80001f8:	48bc      	ldr	r0, [pc, #752]	; (80004ec <main+0x320>)
 80001fa:	f003 f9e5 	bl	80035c8 <puts>

  // Inicializacion de la clase con la que manejo el sim800L

  SIM800 sim800;
  InitSIM(&sim800,&huart2,1);
 80001fe:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000202:	2201      	movs	r2, #1
 8000204:	49ba      	ldr	r1, [pc, #744]	; (80004f0 <main+0x324>)
 8000206:	4618      	mov	r0, r3
 8000208:	f000 fae8 	bl	80007dc <InitSIM>

  EnviarAT(&sim800);
 800020c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000210:	4618      	mov	r0, r3
 8000212:	f000 fc13 	bl	8000a3c <EnviarAT>
  ConsultarEstadoSIM(&sim800);
 8000216:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800021a:	4618      	mov	r0, r3
 800021c:	f000 fc2e 	bl	8000a7c <ConsultarEstadoSIM>

  int bypass_conection = 0;
 8000220:	2300      	movs	r3, #0
 8000222:	f8c7 3ad4 	str.w	r3, [r7, #2772]	; 0xad4

  printf("Conectando a la red...(Presione alguna tecla para diagnosticar)\r\n");
 8000226:	48b3      	ldr	r0, [pc, #716]	; (80004f4 <main+0x328>)
 8000228:	f003 f9ce 	bl	80035c8 <puts>


  while( ( isConnected(&sim800,0) != 1 ) && (bypass_conection == 0) )
 800022c:	e04d      	b.n	80002ca <main+0xfe>
  {
	  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE) == SET)
 800022e:	4bb2      	ldr	r3, [pc, #712]	; (80004f8 <main+0x32c>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	f003 0320 	and.w	r3, r3, #32
 8000238:	2b20      	cmp	r3, #32
 800023a:	d146      	bne.n	80002ca <main+0xfe>
	  {
		  {
			  printf("Todavia no se ha podido establecer la conexion.\r\n");
 800023c:	48af      	ldr	r0, [pc, #700]	; (80004fc <main+0x330>)
 800023e:	f003 f9c3 	bl	80035c8 <puts>
		  	  printf("1) Reintentar\r\n");
 8000242:	48af      	ldr	r0, [pc, #700]	; (8000500 <main+0x334>)
 8000244:	f003 f9c0 	bl	80035c8 <puts>
		  	  printf("2) Diagnosticar\r\n");
 8000248:	48ae      	ldr	r0, [pc, #696]	; (8000504 <main+0x338>)
 800024a:	f003 f9bd 	bl	80035c8 <puts>
		  	  printf("3) Serial Debug\r\n");
 800024e:	48ae      	ldr	r0, [pc, #696]	; (8000508 <main+0x33c>)
 8000250:	f003 f9ba 	bl	80035c8 <puts>
		  	  printf("4) Continuar sin conexion\r\n");
 8000254:	48ad      	ldr	r0, [pc, #692]	; (800050c <main+0x340>)
 8000256:	f003 f9b7 	bl	80035c8 <puts>

		  	  int opcion;
		  	  scanf("%d",&opcion);
 800025a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800025e:	4619      	mov	r1, r3
 8000260:	48ab      	ldr	r0, [pc, #684]	; (8000510 <main+0x344>)
 8000262:	f003 f9c9 	bl	80035f8 <iscanf>
		  	  switch(opcion)
 8000266:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800026a:	f5a3 632a 	sub.w	r3, r3, #2720	; 0xaa0
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	3b01      	subs	r3, #1
 8000272:	2b03      	cmp	r3, #3
 8000274:	d826      	bhi.n	80002c4 <main+0xf8>
 8000276:	a201      	add	r2, pc, #4	; (adr r2, 800027c <main+0xb0>)
 8000278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800027c:	080002c5 	.word	0x080002c5
 8000280:	0800028d 	.word	0x0800028d
 8000284:	080002ab 	.word	0x080002ab
 8000288:	080002bd 	.word	0x080002bd
		  	  {
		  	  case 1:
		  		  break;
		  	  case 2:
		  		  ConsultarSignal(&sim800);
 800028c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000290:	4618      	mov	r0, r3
 8000292:	f000 fbe3 	bl	8000a5c <ConsultarSignal>
		  		  HAL_Delay(1000);
 8000296:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800029a:	f001 f8e1 	bl	8001460 <HAL_Delay>
		  		  ListarRedesDisponibles(&sim800);
 800029e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 fc48 	bl	8000b38 <ListarRedesDisponibles>
		  		  break;
 80002a8:	e00c      	b.n	80002c4 <main+0xf8>
		  	  case 3:
		  		  printf("Modo de Serial Debug. Ingrese ctr+z para salir\r\n");
 80002aa:	489a      	ldr	r0, [pc, #616]	; (8000514 <main+0x348>)
 80002ac:	f003 f98c 	bl	80035c8 <puts>
		  		  SerialDebug(&huart1,&huart2,26);
 80002b0:	221a      	movs	r2, #26
 80002b2:	498f      	ldr	r1, [pc, #572]	; (80004f0 <main+0x324>)
 80002b4:	4890      	ldr	r0, [pc, #576]	; (80004f8 <main+0x32c>)
 80002b6:	f000 fb89 	bl	80009cc <SerialDebug>
		  		  break;
 80002ba:	e003      	b.n	80002c4 <main+0xf8>

		  	  case 4:
		  		  bypass_conection=1;
 80002bc:	2301      	movs	r3, #1
 80002be:	f8c7 3ad4 	str.w	r3, [r7, #2772]	; 0xad4
		  		  break;
 80002c2:	bf00      	nop
		  	  }

		    }
		  printf("Conectando a la red...(Presione alguna tecla para diagnosticar)\r\n");
 80002c4:	488b      	ldr	r0, [pc, #556]	; (80004f4 <main+0x328>)
 80002c6:	f003 f97f 	bl	80035c8 <puts>
  while( ( isConnected(&sim800,0) != 1 ) && (bypass_conection == 0) )
 80002ca:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80002ce:	2100      	movs	r1, #0
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 fc45 	bl	8000b60 <isConnected>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d003      	beq.n	80002e4 <main+0x118>
 80002dc:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d0a4      	beq.n	800022e <main+0x62>
	  }
  }
  printf("Conectado con exito\r\n");
 80002e4:	488c      	ldr	r0, [pc, #560]	; (8000518 <main+0x34c>)
 80002e6:	f003 f96f 	bl	80035c8 <puts>

  ConsultarBateria(&sim800);
 80002ea:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 fbd4 	bl	8000a9c <ConsultarBateria>
  InitGPRS(&sim800,1);
 80002f4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80002f8:	2101      	movs	r1, #1
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 faa4 	bl	8000848 <InitGPRS>
  BorrarAllSMS(&sim800, 1);
 8000300:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000304:	2101      	movs	r1, #1
 8000306:	4618      	mov	r0, r3
 8000308:	f000 fdae 	bl	8000e68 <BorrarAllSMS>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  char IP [50] = "181.231.229.4";
 800030c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8000310:	f6a3 2564 	subw	r5, r3, #2660	; 0xa64
 8000314:	4b81      	ldr	r3, [pc, #516]	; (800051c <main+0x350>)
 8000316:	462c      	mov	r4, r5
 8000318:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800031a:	c407      	stmia	r4!, {r0, r1, r2}
 800031c:	8023      	strh	r3, [r4, #0]
 800031e:	f105 030e 	add.w	r3, r5, #14
 8000322:	2224      	movs	r2, #36	; 0x24
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f002 ffe3 	bl	80032f2 <memset>
  char numero_cel [50] = "+5492966544589";
 800032c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8000330:	f6a3 2598 	subw	r5, r3, #2712	; 0xa98
 8000334:	4b7a      	ldr	r3, [pc, #488]	; (8000520 <main+0x354>)
 8000336:	462c      	mov	r4, r5
 8000338:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800033a:	c407      	stmia	r4!, {r0, r1, r2}
 800033c:	8023      	strh	r3, [r4, #0]
 800033e:	3402      	adds	r4, #2
 8000340:	0c1b      	lsrs	r3, r3, #16
 8000342:	7023      	strb	r3, [r4, #0]
 8000344:	f105 030f 	add.w	r3, r5, #15
 8000348:	2223      	movs	r2, #35	; 0x23
 800034a:	2100      	movs	r1, #0
 800034c:	4618      	mov	r0, r3
 800034e:	f002 ffd0 	bl	80032f2 <memset>
  int puerto = 1150;
 8000352:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8000356:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 800035a:	f240 427e 	movw	r2, #1150	; 0x47e
 800035e:	601a      	str	r2, [r3, #0]

  while (1)
  {
	printf("Bienvenido al Test de SIM800L\r\n");
 8000360:	4870      	ldr	r0, [pc, #448]	; (8000524 <main+0x358>)
 8000362:	f003 f931 	bl	80035c8 <puts>
	printf("1) Serial Debug\r\n");
 8000366:	4870      	ldr	r0, [pc, #448]	; (8000528 <main+0x35c>)
 8000368:	f003 f92e 	bl	80035c8 <puts>
	printf("2) Recibir msj SMS \r\n");
 800036c:	486f      	ldr	r0, [pc, #444]	; (800052c <main+0x360>)
 800036e:	f003 f92b 	bl	80035c8 <puts>
	printf("3) Enviar msj SMS \r\n");
 8000372:	486f      	ldr	r0, [pc, #444]	; (8000530 <main+0x364>)
 8000374:	f003 f928 	bl	80035c8 <puts>
	printf("4) Testear el modo GPRS\r\n");
 8000378:	486e      	ldr	r0, [pc, #440]	; (8000534 <main+0x368>)
 800037a:	f003 f925 	bl	80035c8 <puts>
	printf("5) Enviar un msj TCP\r\n");
 800037e:	486e      	ldr	r0, [pc, #440]	; (8000538 <main+0x36c>)
 8000380:	f003 f922 	bl	80035c8 <puts>
	printf("6) Enviar un msj largo (500 bytes) por TCP\r\n");
 8000384:	486d      	ldr	r0, [pc, #436]	; (800053c <main+0x370>)
 8000386:	f003 f91f 	bl	80035c8 <puts>
	printf("7) Cambiar destino de comunicacion TCP (IP y puerto) \r\n");
 800038a:	486d      	ldr	r0, [pc, #436]	; (8000540 <main+0x374>)
 800038c:	f003 f91c 	bl	80035c8 <puts>

	int opcion1;
	char opcion2;
	fflush(stdin);scanf("%d",&opcion1);
 8000390:	4b55      	ldr	r3, [pc, #340]	; (80004e8 <main+0x31c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	4618      	mov	r0, r3
 8000398:	f002 fe52 	bl	8003040 <fflush>
 800039c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80003a0:	4619      	mov	r1, r3
 80003a2:	485b      	ldr	r0, [pc, #364]	; (8000510 <main+0x344>)
 80003a4:	f003 f928 	bl	80035f8 <iscanf>



	switch(opcion1)
 80003a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80003ac:	f6a3 23a4 	subw	r3, r3, #2724	; 0xaa4
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	3b01      	subs	r3, #1
 80003b4:	2b06      	cmp	r3, #6
 80003b6:	d8d3      	bhi.n	8000360 <main+0x194>
 80003b8:	a201      	add	r2, pc, #4	; (adr r2, 80003c0 <main+0x1f4>)
 80003ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003be:	bf00      	nop
 80003c0:	080003dd 	.word	0x080003dd
 80003c4:	080003f1 	.word	0x080003f1
 80003c8:	08000497 	.word	0x08000497
 80003cc:	080004a9 	.word	0x080004a9
 80003d0:	080004bd 	.word	0x080004bd
 80003d4:	0800056d 	.word	0x0800056d
 80003d8:	0800059f 	.word	0x0800059f
	{
	case 1:
		printf("Modo de Serial Debug. Ingrese ctr+z para salir\r\n");
 80003dc:	484d      	ldr	r0, [pc, #308]	; (8000514 <main+0x348>)
 80003de:	f003 f8f3 	bl	80035c8 <puts>
		SerialDebug(&huart1,&huart2,26);
 80003e2:	221a      	movs	r2, #26
 80003e4:	4942      	ldr	r1, [pc, #264]	; (80004f0 <main+0x324>)
 80003e6:	4844      	ldr	r0, [pc, #272]	; (80004f8 <main+0x32c>)
 80003e8:	f000 faf0 	bl	80009cc <SerialDebug>
		break;
 80003ec:	e0ff      	b.n	80005ee <main+0x422>
	case 2:
 80003ee:	bf00      	nop
			do{
				printf("Esperando por SMS (Presione ctrl+z para abortar)...\r\n");
 80003f0:	4854      	ldr	r0, [pc, #336]	; (8000544 <main+0x378>)
 80003f2:	f003 f8e9 	bl	80035c8 <puts>
				char comando1 [LEN_CMD] = "\r\nLED_TOGGLE\r\n";
 80003f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80003fa:	f6a3 25d8 	subw	r5, r3, #2776	; 0xad8
 80003fe:	4b52      	ldr	r3, [pc, #328]	; (8000548 <main+0x37c>)
 8000400:	462c      	mov	r4, r5
 8000402:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000404:	c407      	stmia	r4!, {r0, r1, r2}
 8000406:	8023      	strh	r3, [r4, #0]
 8000408:	3402      	adds	r4, #2
 800040a:	0c1b      	lsrs	r3, r3, #16
 800040c:	7023      	strb	r3, [r4, #0]
 800040e:	f105 030f 	add.w	r3, r5, #15
 8000412:	2223      	movs	r2, #35	; 0x23
 8000414:	2100      	movs	r1, #0
 8000416:	4618      	mov	r0, r3
 8000418:	f002 ff6b 	bl	80032f2 <memset>

				if (ListenSMS(&sim800,&huart1) == 1)
 800041c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000420:	4935      	ldr	r1, [pc, #212]	; (80004f8 <main+0x32c>)
 8000422:	4618      	mov	r0, r3
 8000424:	f000 fd4a 	bl	8000ebc <ListenSMS>
 8000428:	4603      	mov	r3, r0
 800042a:	2b01      	cmp	r3, #1
 800042c:	d11c      	bne.n	8000468 <main+0x29c>
				{
					printf("Texto del mensaje: %s",sim800.txt_last_sms);
 800042e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000432:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 8000436:	4619      	mov	r1, r3
 8000438:	4844      	ldr	r0, [pc, #272]	; (800054c <main+0x380>)
 800043a:	f003 f83f 	bl	80034bc <iprintf>
					if(strncmp((sim800.txt_last_sms),comando1,strlen(comando1)) == 0)
 800043e:	463b      	mov	r3, r7
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff fe83 	bl	800014c <strlen>
 8000446:	4602      	mov	r2, r0
 8000448:	4639      	mov	r1, r7
 800044a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800044e:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 8000452:	4618      	mov	r0, r3
 8000454:	f003 fa11 	bl	800387a <strncmp>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d104      	bne.n	8000468 <main+0x29c>
					{
						HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800045e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000462:	483b      	ldr	r0, [pc, #236]	; (8000550 <main+0x384>)
 8000464:	f001 fb7a 	bl	8001b5c <HAL_GPIO_TogglePin>
					}
				}


				printf("Desea esperar por otro SMS? (s/n) \r\n");
 8000468:	483a      	ldr	r0, [pc, #232]	; (8000554 <main+0x388>)
 800046a:	f003 f8ad 	bl	80035c8 <puts>
				fflush(stdin);
 800046e:	4b1e      	ldr	r3, [pc, #120]	; (80004e8 <main+0x31c>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	685b      	ldr	r3, [r3, #4]
 8000474:	4618      	mov	r0, r3
 8000476:	f002 fde3 	bl	8003040 <fflush>
				scanf("%c",&opcion2);
 800047a:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800047e:	4619      	mov	r1, r3
 8000480:	4835      	ldr	r0, [pc, #212]	; (8000558 <main+0x38c>)
 8000482:	f003 f8b9 	bl	80035f8 <iscanf>
				}while( opcion2 == 's');
 8000486:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800048a:	f6a3 23a5 	subw	r3, r3, #2725	; 0xaa5
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	2b73      	cmp	r3, #115	; 0x73
 8000492:	d0ac      	beq.n	80003ee <main+0x222>

			break;
 8000494:	e0ab      	b.n	80005ee <main+0x422>

	case 3:
		EnviarSMS(&sim800,numero_cel,"Hola desde el SIM800 por SMS",1);
 8000496:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800049a:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 800049e:	2301      	movs	r3, #1
 80004a0:	4a2e      	ldr	r2, [pc, #184]	; (800055c <main+0x390>)
 80004a2:	f000 fcbb 	bl	8000e1c <EnviarSMS>
		break;
 80004a6:	e0a2      	b.n	80005ee <main+0x422>

	case 4:
		printf("Probando GPRS, recuperando algo de una pag web... \r\n");
 80004a8:	482d      	ldr	r0, [pc, #180]	; (8000560 <main+0x394>)
 80004aa:	f003 f88d 	bl	80035c8 <puts>
		TestGPRS(&sim800,1);
 80004ae:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80004b2:	2101      	movs	r1, #1
 80004b4:	4618      	mov	r0, r3
 80004b6:	f000 fbb3 	bl	8000c20 <TestGPRS>
		break;
 80004ba:	e098      	b.n	80005ee <main+0x422>

	case 5:
		printf("Enviando un msj al IP: %s\r\n",IP);
 80004bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80004c0:	4619      	mov	r1, r3
 80004c2:	4828      	ldr	r0, [pc, #160]	; (8000564 <main+0x398>)
 80004c4:	f002 fffa 	bl	80034bc <iprintf>
		SendTCPtoIP(&sim800, "Hola desde el SIM800L por protocolo TCP\r\n", IP, puerto,1);
 80004c8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80004cc:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80004d6:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 80004da:	2101      	movs	r1, #1
 80004dc:	9100      	str	r1, [sp, #0]
 80004de:	4922      	ldr	r1, [pc, #136]	; (8000568 <main+0x39c>)
 80004e0:	f000 fc48 	bl	8000d74 <SendTCPtoIP>
		break;
 80004e4:	e083      	b.n	80005ee <main+0x422>
 80004e6:	bf00      	nop
 80004e8:	2000000c 	.word	0x2000000c
 80004ec:	080050e0 	.word	0x080050e0
 80004f0:	200000d0 	.word	0x200000d0
 80004f4:	080050fc 	.word	0x080050fc
 80004f8:	2000008c 	.word	0x2000008c
 80004fc:	08005140 	.word	0x08005140
 8000500:	08005174 	.word	0x08005174
 8000504:	08005184 	.word	0x08005184
 8000508:	08005198 	.word	0x08005198
 800050c:	080051ac 	.word	0x080051ac
 8000510:	080051c8 	.word	0x080051c8
 8000514:	080051cc 	.word	0x080051cc
 8000518:	080051fc 	.word	0x080051fc
 800051c:	080054a4 	.word	0x080054a4
 8000520:	080054d8 	.word	0x080054d8
 8000524:	08005214 	.word	0x08005214
 8000528:	08005234 	.word	0x08005234
 800052c:	08005248 	.word	0x08005248
 8000530:	08005260 	.word	0x08005260
 8000534:	08005274 	.word	0x08005274
 8000538:	08005290 	.word	0x08005290
 800053c:	080052a8 	.word	0x080052a8
 8000540:	080052d4 	.word	0x080052d4
 8000544:	0800530c 	.word	0x0800530c
 8000548:	0800550c 	.word	0x0800550c
 800054c:	08005344 	.word	0x08005344
 8000550:	40011000 	.word	0x40011000
 8000554:	0800535c 	.word	0x0800535c
 8000558:	08005380 	.word	0x08005380
 800055c:	08005384 	.word	0x08005384
 8000560:	080053a4 	.word	0x080053a4
 8000564:	080053d8 	.word	0x080053d8
 8000568:	080053f4 	.word	0x080053f4

	case 6:
		printf("Enviando un msj largo al IP: %s\r\n",IP);
 800056c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000570:	4619      	mov	r1, r3
 8000572:	481f      	ldr	r0, [pc, #124]	; (80005f0 <main+0x424>)
 8000574:	f002 ffa2 	bl	80034bc <iprintf>
		SendTCPtoIP(&sim800, sim800.buffer_largo , IP, puerto,1);
 8000578:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800057c:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8000580:	681c      	ldr	r4, [r3, #0]
 8000582:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8000586:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800058a:	f603 0138 	addw	r1, r3, #2104	; 0x838
 800058e:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8000592:	2301      	movs	r3, #1
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	4623      	mov	r3, r4
 8000598:	f000 fbec 	bl	8000d74 <SendTCPtoIP>
		break;
 800059c:	e027      	b.n	80005ee <main+0x422>
	case 7:
		printf("Ingrese el IP deseado (IP actual: %s):\r\n",IP);
 800059e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80005a2:	4619      	mov	r1, r3
 80005a4:	4813      	ldr	r0, [pc, #76]	; (80005f4 <main+0x428>)
 80005a6:	f002 ff89 	bl	80034bc <iprintf>
		scanf("%s",IP);fflush(stdin);
 80005aa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80005ae:	4619      	mov	r1, r3
 80005b0:	4811      	ldr	r0, [pc, #68]	; (80005f8 <main+0x42c>)
 80005b2:	f003 f821 	bl	80035f8 <iscanf>
 80005b6:	4b11      	ldr	r3, [pc, #68]	; (80005fc <main+0x430>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 fd3f 	bl	8003040 <fflush>
		printf("Ingrese el puerto deseado(Puerto actual: %d):\r\n",puerto);
 80005c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80005c6:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4619      	mov	r1, r3
 80005ce:	480c      	ldr	r0, [pc, #48]	; (8000600 <main+0x434>)
 80005d0:	f002 ff74 	bl	80034bc <iprintf>
		scanf("%d",&puerto);fflush(stdin);
 80005d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005d8:	4619      	mov	r1, r3
 80005da:	480a      	ldr	r0, [pc, #40]	; (8000604 <main+0x438>)
 80005dc:	f003 f80c 	bl	80035f8 <iscanf>
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <main+0x430>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 fd2a 	bl	8003040 <fflush>
		break;
 80005ec:	bf00      	nop
  {
 80005ee:	e6b7      	b.n	8000360 <main+0x194>
 80005f0:	08005420 	.word	0x08005420
 80005f4:	08005444 	.word	0x08005444
 80005f8:	08005470 	.word	0x08005470
 80005fc:	2000000c 	.word	0x2000000c
 8000600:	08005474 	.word	0x08005474
 8000604:	080051c8 	.word	0x080051c8

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b090      	sub	sp, #64	; 0x40
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0318 	add.w	r3, r7, #24
 8000612:	2228      	movs	r2, #40	; 0x28
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f002 fe6b 	bl	80032f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062a:	2302      	movs	r3, #2
 800062c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062e:	2301      	movs	r3, #1
 8000630:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000632:	2310      	movs	r3, #16
 8000634:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000636:	2300      	movs	r3, #0
 8000638:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063a:	f107 0318 	add.w	r3, r7, #24
 800063e:	4618      	mov	r0, r3
 8000640:	f001 faa6 	bl	8001b90 <HAL_RCC_OscConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800064a:	f000 f8c1 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064e:	230f      	movs	r3, #15
 8000650:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f001 fd14 	bl	8002094 <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000672:	f000 f8ad 	bl	80007d0 <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3740      	adds	r7, #64	; 0x40
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_USART1_UART_Init+0x4c>)
 8000686:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <MX_USART1_UART_Init+0x50>)
 8000688:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_USART1_UART_Init+0x4c>)
 800068c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000690:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_USART1_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_USART1_UART_Init+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <MX_USART1_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_USART1_UART_Init+0x4c>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <MX_USART1_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_USART1_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_USART1_UART_Init+0x4c>)
 80006b8:	f001 fe84 	bl	80023c4 <HAL_UART_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006c2:	f000 f885 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	2000008c 	.word	0x2000008c
 80006d0:	40013800 	.word	0x40013800

080006d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_USART2_UART_Init+0x4c>)
 80006da:	4a12      	ldr	r2, [pc, #72]	; (8000724 <MX_USART2_UART_Init+0x50>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_USART2_UART_Init+0x4c>)
 80006e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_USART2_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_USART2_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_USART2_UART_Init+0x4c>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_USART2_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_USART2_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_USART2_UART_Init+0x4c>)
 800070c:	f001 fe5a 	bl	80023c4 <HAL_UART_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000716:	f000 f85b 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200000d0 	.word	0x200000d0
 8000724:	40004400 	.word	0x40004400

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 0308 	add.w	r3, r7, #8
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073c:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <MX_GPIO_Init+0x9c>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a20      	ldr	r2, [pc, #128]	; (80007c4 <MX_GPIO_Init+0x9c>)
 8000742:	f043 0310 	orr.w	r3, r3, #16
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <MX_GPIO_Init+0x9c>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f003 0310 	and.w	r3, r3, #16
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <MX_GPIO_Init+0x9c>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a1a      	ldr	r2, [pc, #104]	; (80007c4 <MX_GPIO_Init+0x9c>)
 800075a:	f043 0304 	orr.w	r3, r3, #4
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <MX_GPIO_Init+0x9c>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f003 0304 	and.w	r3, r3, #4
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000772:	4815      	ldr	r0, [pc, #84]	; (80007c8 <MX_GPIO_Init+0xa0>)
 8000774:	f001 f9da 	bl	8001b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_SIM_GPIO_Port, RST_SIM_Pin, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	2120      	movs	r1, #32
 800077c:	4813      	ldr	r0, [pc, #76]	; (80007cc <MX_GPIO_Init+0xa4>)
 800077e:	f001 f9d5 	bl	8001b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000782:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000786:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	2301      	movs	r3, #1
 800078a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800078c:	2302      	movs	r3, #2
 800078e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2302      	movs	r3, #2
 8000792:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000794:	f107 0308 	add.w	r3, r7, #8
 8000798:	4619      	mov	r1, r3
 800079a:	480b      	ldr	r0, [pc, #44]	; (80007c8 <MX_GPIO_Init+0xa0>)
 800079c:	f001 f842 	bl	8001824 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_SIM_Pin */
  GPIO_InitStruct.Pin = RST_SIM_Pin;
 80007a0:	2320      	movs	r3, #32
 80007a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2302      	movs	r3, #2
 80007ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RST_SIM_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 0308 	add.w	r3, r7, #8
 80007b4:	4619      	mov	r1, r3
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_GPIO_Init+0xa4>)
 80007b8:	f001 f834 	bl	8001824 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007bc:	bf00      	nop
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40011000 	.word	0x40011000
 80007cc:	40010800 	.word	0x40010800

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <Error_Handler+0x8>
	...

080007dc <InitSIM>:
/* ------------------------------------------------------------------------------*/
/* ------------------------ Funciones de Inicializacion ------------------------ */
/* ------------------------------------------------------------------------------*/

void InitSIM(SIM800* sim, UART_HandleTypeDef * huart,int print)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	607a      	str	r2, [r7, #4]

	sim-> huart = huart;
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	68ba      	ldr	r2, [r7, #8]
 80007ec:	601a      	str	r2, [r3, #0]
	memset(sim->response, 0, LENGTH);
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	3304      	adds	r3, #4
 80007f2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f002 fd7a 	bl	80032f2 <memset>
	memset(sim->txt_last_sms, 0, LEN_TXT);
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 8000804:	2264      	movs	r2, #100	; 0x64
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f002 fd72 	bl	80032f2 <memset>

	InitBufferLargo(sim);
 800080e:	68f8      	ldr	r0, [r7, #12]
 8000810:	f000 f840 	bl	8000894 <InitBufferLargo>

	EnviarComandoAT(sim,"AT+CMGF=1\r\n",print); // Activa modo texto
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	4909      	ldr	r1, [pc, #36]	; (800083c <InitSIM+0x60>)
 8000818:	68f8      	ldr	r0, [r7, #12]
 800081a:	f000 f851 	bl	80008c0 <EnviarComandoAT>
	EnviarComandoAT(sim,"AT+CNMI=2,1,0,0,0\r\n",print); // Configura recepcion de SMS
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	4907      	ldr	r1, [pc, #28]	; (8000840 <InitSIM+0x64>)
 8000822:	68f8      	ldr	r0, [r7, #12]
 8000824:	f000 f84c 	bl	80008c0 <EnviarComandoAT>
												  // Esto es importante : Primer num: el 2 es para que guarde los msj en un buffer si la conexion Uart esta ocupada
												 // Segundo num: el 1 es para que guarde internamente los msj, despues para leerlos hay que usar CMGR. Si esto lo pones en 2 forwardea el msj directamente y no guarda nada

	EnviarComandoAT(sim, "AT+CFUN=1\r\n",print); // Esto me parece que es innecesario... (activa todas las funcionalidades pero creo que esta en 1 por defecto)
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	4906      	ldr	r1, [pc, #24]	; (8000844 <InitSIM+0x68>)
 800082c:	68f8      	ldr	r0, [r7, #12]
 800082e:	f000 f847 	bl	80008c0 <EnviarComandoAT>
}
 8000832:	bf00      	nop
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	08005540 	.word	0x08005540
 8000840:	0800554c 	.word	0x0800554c
 8000844:	08005560 	.word	0x08005560

08000848 <InitGPRS>:

void InitGPRS(SIM800 *sim,int print)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
	if(isConnectedGPRS(sim,print) == 0)
 8000852:	6839      	ldr	r1, [r7, #0]
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f000 f9b3 	bl	8000bc0 <isConnectedGPRS>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d10e      	bne.n	800087e <InitGPRS+0x36>
	{
		//EnviarComandoAT(sim,"AT+CSTT=\"igprs.claro.com.ar\",\"ctigprs\",\"ctigprs999\"\r\n",print);
		EnviarComandoAT(sim,"AT+CSTT=\"igprs.claro.com.ar\",\"\",\"\"\r\n",print);
 8000860:	683a      	ldr	r2, [r7, #0]
 8000862:	4909      	ldr	r1, [pc, #36]	; (8000888 <InitGPRS+0x40>)
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f000 f82b 	bl	80008c0 <EnviarComandoAT>
			// Esto setea el APN contraseña y usuario de Claro. Sin esto se conecta igual a red celular pero no anda el GPRS

		EnviarComandoAT(sim,"AT+CIICR\r\n",print);	// Inicializa el GPRS
 800086a:	683a      	ldr	r2, [r7, #0]
 800086c:	4907      	ldr	r1, [pc, #28]	; (800088c <InitGPRS+0x44>)
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f000 f826 	bl	80008c0 <EnviarComandoAT>


		EnviarComandoAT(sim,"AT+CIFSR\r\n",print);	// Debería imprimir el IP
 8000874:	683a      	ldr	r2, [r7, #0]
 8000876:	4906      	ldr	r1, [pc, #24]	; (8000890 <InitGPRS+0x48>)
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f000 f821 	bl	80008c0 <EnviarComandoAT>
	}
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	0800556c 	.word	0x0800556c
 800088c:	08005594 	.word	0x08005594
 8000890:	080055a0 	.word	0x080055a0

08000894 <InitBufferLargo>:

void InitBufferLargo(SIM800 *sim)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	strcpy(sim->buffer_largo,"En Argentina naci. Tierra del Diego y Lionel. De los pibes de Malvinas. Que jamas olvidare. No te lo puedo explicar. Porque no vas a entender. Las finales que perdimos. Cuantos anos la llore. Pero eso se termino. Porque en el Maracana. La final con los brazucas. La volvio a ganar papa. Muchachos. Ahora nos volvimos a ilusionar. Quiero ganar la tercera. Quiero ser campeon mundial. Y al Diego. Desde el cielo lo podemos ver. Con Don Diego y La Tota. Alentandolo a Lionel. ");
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f603 0338 	addw	r3, r3, #2104	; 0x838
 80008a2:	4a06      	ldr	r2, [pc, #24]	; (80008bc <InitBufferLargo+0x28>)
 80008a4:	4618      	mov	r0, r3
 80008a6:	4611      	mov	r1, r2
 80008a8:	f44f 73ed 	mov.w	r3, #474	; 0x1da
 80008ac:	461a      	mov	r2, r3
 80008ae:	f002 fd12 	bl	80032d6 <memcpy>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	080055ac 	.word	0x080055ac

080008c0 <EnviarComandoAT>:
/* ---------------------------- Funciones generales ---------------------------- */
/* ------------------------------------------------------------------------------*/


void EnviarComandoAT(SIM800* sim, char* comando, int print)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
	Enviar(sim,comando);
 80008cc:	68b9      	ldr	r1, [r7, #8]
 80008ce:	68f8      	ldr	r0, [r7, #12]
 80008d0:	f000 f80b 	bl	80008ea <Enviar>
	WaitForAnswer(sim,print);
 80008d4:	6879      	ldr	r1, [r7, #4]
 80008d6:	68f8      	ldr	r0, [r7, #12]
 80008d8:	f000 f83e 	bl	8000958 <WaitForAnswer>
	HAL_Delay(100);
 80008dc:	2064      	movs	r0, #100	; 0x64
 80008de:	f000 fdbf 	bl	8001460 <HAL_Delay>
}
 80008e2:	bf00      	nop
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <Enviar>:

void Enviar(SIM800 *sim, char * cadena)
{
 80008ea:	b590      	push	{r4, r7, lr}
 80008ec:	b083      	sub	sp, #12
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
 80008f2:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit (sim->huart, (uint8_t*) cadena, strlen(cadena),TIMEOUT);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681c      	ldr	r4, [r3, #0]
 80008f8:	6838      	ldr	r0, [r7, #0]
 80008fa:	f7ff fc27 	bl	800014c <strlen>
 80008fe:	4603      	mov	r3, r0
 8000900:	b29a      	uxth	r2, r3
 8000902:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000906:	6839      	ldr	r1, [r7, #0]
 8000908:	4620      	mov	r0, r4
 800090a:	f001 fda8 	bl	800245e <HAL_UART_Transmit>
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	bd90      	pop	{r4, r7, pc}
	...

08000918 <Imprimir_respuesta>:

void Imprimir_respuesta(SIM800 *sim)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	printf("Respuesta: %s\r\n",sim->response);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3304      	adds	r3, #4
 8000924:	4619      	mov	r1, r3
 8000926:	4803      	ldr	r0, [pc, #12]	; (8000934 <Imprimir_respuesta+0x1c>)
 8000928:	f002 fdc8 	bl	80034bc <iprintf>
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	08005788 	.word	0x08005788

08000938 <Borrar_respuesta>:

void Borrar_respuesta(SIM800 *sim)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	memset(sim->response, 0, LENGTH);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3304      	adds	r3, #4
 8000944:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f002 fcd1 	bl	80032f2 <memset>
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <WaitForAnswer>:

int WaitForAnswer(SIM800* sim,int print)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
	int counter=0;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
	Borrar_respuesta(sim);
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff ffe6 	bl	8000938 <Borrar_respuesta>
	while((strlen(sim->response)==0) && (counter < WAIT_MAX / TIMEOUT) )
 800096c:	e00c      	b.n	8000988 <WaitForAnswer+0x30>
	{
		counter++;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	3301      	adds	r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
		HAL_UART_Receive (sim->huart, (uint8_t*) sim->response, LENGTH,TIMEOUT);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6818      	ldr	r0, [r3, #0]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	1d19      	adds	r1, r3, #4
 800097c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000980:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000984:	f001 fdfd 	bl	8002582 <HAL_UART_Receive>
	while((strlen(sim->response)==0) && (counter < WAIT_MAX / TIMEOUT) )
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3304      	adds	r3, #4
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d102      	bne.n	8000998 <WaitForAnswer+0x40>
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	2b13      	cmp	r3, #19
 8000996:	ddea      	ble.n	800096e <WaitForAnswer+0x16>
	}
	if(print == 1)
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d109      	bne.n	80009b2 <WaitForAnswer+0x5a>
	{
		if(counter ==  WAIT_MAX / TIMEOUT)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	2b14      	cmp	r3, #20
 80009a2:	d103      	bne.n	80009ac <WaitForAnswer+0x54>
		{
			printf("Tiempo de espera agotado\r\n");
 80009a4:	4808      	ldr	r0, [pc, #32]	; (80009c8 <WaitForAnswer+0x70>)
 80009a6:	f002 fe0f 	bl	80035c8 <puts>
 80009aa:	e002      	b.n	80009b2 <WaitForAnswer+0x5a>
		}
		else
		{
			Imprimir_respuesta(sim);
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff ffb3 	bl	8000918 <Imprimir_respuesta>
		}

	}
	return (counter ==  WAIT_MAX / TIMEOUT)? 0:1;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	2b14      	cmp	r3, #20
 80009b6:	bf14      	ite	ne
 80009b8:	2301      	movne	r3, #1
 80009ba:	2300      	moveq	r3, #0
 80009bc:	b2db      	uxtb	r3, r3
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	08005798 	.word	0x08005798

080009cc <SerialDebug>:

void SerialDebug( UART_HandleTypeDef * huart1 , UART_HandleTypeDef * huart2 , char caracter_finalizacion )
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	4613      	mov	r3, r2
 80009d8:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_byte = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	75fb      	strb	r3, [r7, #23]

	while(rx_byte != caracter_finalizacion)
 80009de:	e024      	b.n	8000a2a <SerialDebug+0x5e>
	{
		while (HAL_UART_Receive(huart2, &rx_byte, 1, 0) == HAL_OK)
		{
		    HAL_UART_Transmit(huart1, &rx_byte, 1, 0xFFFF); // Forward received byte to UART1
 80009e0:	f107 0117 	add.w	r1, r7, #23
 80009e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009e8:	2201      	movs	r2, #1
 80009ea:	68f8      	ldr	r0, [r7, #12]
 80009ec:	f001 fd37 	bl	800245e <HAL_UART_Transmit>
		while (HAL_UART_Receive(huart2, &rx_byte, 1, 0) == HAL_OK)
 80009f0:	f107 0117 	add.w	r1, r7, #23
 80009f4:	2300      	movs	r3, #0
 80009f6:	2201      	movs	r2, #1
 80009f8:	68b8      	ldr	r0, [r7, #8]
 80009fa:	f001 fdc2 	bl	8002582 <HAL_UART_Receive>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d0ed      	beq.n	80009e0 <SerialDebug+0x14>
		}
		while (HAL_UART_Receive(huart1, &rx_byte, 1, 0) == HAL_OK)
 8000a04:	e007      	b.n	8000a16 <SerialDebug+0x4a>
		{
		    HAL_UART_Transmit(huart2, &rx_byte, 1, 0xFFFF); // Forward received byte to UART2
 8000a06:	f107 0117 	add.w	r1, r7, #23
 8000a0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a0e:	2201      	movs	r2, #1
 8000a10:	68b8      	ldr	r0, [r7, #8]
 8000a12:	f001 fd24 	bl	800245e <HAL_UART_Transmit>
		while (HAL_UART_Receive(huart1, &rx_byte, 1, 0) == HAL_OK)
 8000a16:	f107 0117 	add.w	r1, r7, #23
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	68f8      	ldr	r0, [r7, #12]
 8000a20:	f001 fdaf 	bl	8002582 <HAL_UART_Receive>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d0ed      	beq.n	8000a06 <SerialDebug+0x3a>
	while(rx_byte != caracter_finalizacion)
 8000a2a:	7dfb      	ldrb	r3, [r7, #23]
 8000a2c:	79fa      	ldrb	r2, [r7, #7]
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d1de      	bne.n	80009f0 <SerialDebug+0x24>
		}


	}
}
 8000a32:	bf00      	nop
 8000a34:	bf00      	nop
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <EnviarAT>:
/* ------------------------------------------------------------------------------*/
/* ---------------------------- Funciones de status ---------------------------- */
/* ------------------------------------------------------------------------------*/

void EnviarAT(SIM800* sim)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	EnviarComandoAT(sim,"AT\r\n",1);
 8000a44:	2201      	movs	r2, #1
 8000a46:	4904      	ldr	r1, [pc, #16]	; (8000a58 <EnviarAT+0x1c>)
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f7ff ff39 	bl	80008c0 <EnviarComandoAT>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	080057b4 	.word	0x080057b4

08000a5c <ConsultarSignal>:

void ConsultarSignal(SIM800* sim)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	EnviarComandoAT(sim,"AT+CSQ\r\n",1);
 8000a64:	2201      	movs	r2, #1
 8000a66:	4904      	ldr	r1, [pc, #16]	; (8000a78 <ConsultarSignal+0x1c>)
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff ff29 	bl	80008c0 <EnviarComandoAT>
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	080057bc 	.word	0x080057bc

08000a7c <ConsultarEstadoSIM>:

void ConsultarEstadoSIM(SIM800* sim)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	EnviarComandoAT(sim,"AT+CPIN?\r\n",1);
 8000a84:	2201      	movs	r2, #1
 8000a86:	4904      	ldr	r1, [pc, #16]	; (8000a98 <ConsultarEstadoSIM+0x1c>)
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff ff19 	bl	80008c0 <EnviarComandoAT>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	080057c8 	.word	0x080057c8

08000a9c <ConsultarBateria>:

void ConsultarBateria(SIM800 *sim)
{
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b087      	sub	sp, #28
 8000aa0:	af02      	add	r7, sp, #8
 8000aa2:	6078      	str	r0, [r7, #4]
	// Formato de la respuesta: CARGANDO?,PORCENTAJE,TENSION

	EnviarComandoAT(sim,"AT+CBC\r\n",0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	4922      	ldr	r1, [pc, #136]	; (8000b30 <ConsultarBateria+0x94>)
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ff09 	bl	80008c0 <EnviarComandoAT>
	int cuenta_comas=0,i=0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]
	while((*(sim->response+i)!='\0')&&(cuenta_comas<2)){
 8000ab6:	e00c      	b.n	8000ad2 <ConsultarBateria+0x36>
		if (*(sim->response+i)==','){cuenta_comas++;}
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	1d1a      	adds	r2, r3, #4
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	4413      	add	r3, r2
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b2c      	cmp	r3, #44	; 0x2c
 8000ac4:	d102      	bne.n	8000acc <ConsultarBateria+0x30>
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
		i++;
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	60bb      	str	r3, [r7, #8]
	while((*(sim->response+i)!='\0')&&(cuenta_comas<2)){
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	1d1a      	adds	r2, r3, #4
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	4413      	add	r3, r2
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d002      	beq.n	8000ae6 <ConsultarBateria+0x4a>
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	dde8      	ble.n	8000ab8 <ConsultarBateria+0x1c>
	}
	printf("Nivel de bateria: %c,%c%c%c V\r\n",*(sim->response+i),*(sim->response+i+1),*(sim->response+i+2),*(sim->response+i+3));
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	1d1a      	adds	r2, r3, #4
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	4413      	add	r3, r2
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4619      	mov	r1, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	1d1a      	adds	r2, r3, #4
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	3301      	adds	r3, #1
 8000afa:	4413      	add	r3, r2
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	4618      	mov	r0, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	1d1a      	adds	r2, r3, #4
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	3302      	adds	r3, #2
 8000b08:	4413      	add	r3, r2
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	461c      	mov	r4, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	1d1a      	adds	r2, r3, #4
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	3303      	adds	r3, #3
 8000b16:	4413      	add	r3, r2
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	4623      	mov	r3, r4
 8000b1e:	4602      	mov	r2, r0
 8000b20:	4804      	ldr	r0, [pc, #16]	; (8000b34 <ConsultarBateria+0x98>)
 8000b22:	f002 fccb 	bl	80034bc <iprintf>

}
 8000b26:	bf00      	nop
 8000b28:	3714      	adds	r7, #20
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd90      	pop	{r4, r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	080057d4 	.word	0x080057d4
 8000b34:	080057e0 	.word	0x080057e0

08000b38 <ListarRedesDisponibles>:

void ListarRedesDisponibles(SIM800* sim)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	EnviarComandoAT(sim,"AT+COPS=?\r\n",1);
 8000b40:	2201      	movs	r2, #1
 8000b42:	4906      	ldr	r1, [pc, #24]	; (8000b5c <ListarRedesDisponibles+0x24>)
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff febb 	bl	80008c0 <EnviarComandoAT>
	WaitForAnswer(sim,1);
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff ff03 	bl	8000958 <WaitForAnswer>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	08005800 	.word	0x08005800

08000b60 <isConnected>:


int isConnected(SIM800 *sim,int print)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
	// Si esta conectado creg me devuelve 0,1. Espero a la coma y me fijo el siguiente caracter
	EnviarComandoAT(sim,"AT+CREG?\r\n",print);
 8000b6a:	683a      	ldr	r2, [r7, #0]
 8000b6c:	4913      	ldr	r1, [pc, #76]	; (8000bbc <isConnected+0x5c>)
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f7ff fea6 	bl	80008c0 <EnviarComandoAT>

	int index = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
	while( (*(sim->response +index) != ',') && (*(sim->response+index) != '\0') )
 8000b78:	e002      	b.n	8000b80 <isConnected+0x20>
	{
		index++;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
	while( (*(sim->response +index) != ',') && (*(sim->response+index) != '\0') )
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	1d1a      	adds	r2, r3, #4
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	4413      	add	r3, r2
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b2c      	cmp	r3, #44	; 0x2c
 8000b8c:	d006      	beq.n	8000b9c <isConnected+0x3c>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	1d1a      	adds	r2, r3, #4
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	4413      	add	r3, r2
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d1ee      	bne.n	8000b7a <isConnected+0x1a>
	}

	return (*(sim->response+index+1) == '1' )?1:0;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	1d1a      	adds	r2, r3, #4
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	4413      	add	r3, r2
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b31      	cmp	r3, #49	; 0x31
 8000baa:	bf0c      	ite	eq
 8000bac:	2301      	moveq	r3, #1
 8000bae:	2300      	movne	r3, #0
 8000bb0:	b2db      	uxtb	r3, r3
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	0800580c 	.word	0x0800580c

08000bc0 <isConnectedGPRS>:

int isConnectedGPRS(SIM800 *sim,int print)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
	// Si esta conectado CIFSR me devuelve el IP, sino da error

	EnviarComandoAT(sim,"AT+CIFSR\r\n",print);	// Debería imprimir el IP
 8000bca:	683a      	ldr	r2, [r7, #0]
 8000bcc:	4908      	ldr	r1, [pc, #32]	; (8000bf0 <isConnectedGPRS+0x30>)
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff fe76 	bl	80008c0 <EnviarComandoAT>

	return (check_if_error(sim)==1 )? 0:1;
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f000 f80d 	bl	8000bf4 <check_if_error>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	bf14      	ite	ne
 8000be0:	2301      	movne	r3, #1
 8000be2:	2300      	moveq	r3, #0
 8000be4:	b2db      	uxtb	r3, r3

}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	080055a0 	.word	0x080055a0

08000bf4 <check_if_error>:

int check_if_error(SIM800 *sim)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	return (strstr(sim->response,"ERROR") != NULL )? 1 : 0;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3304      	adds	r3, #4
 8000c00:	4906      	ldr	r1, [pc, #24]	; (8000c1c <check_if_error+0x28>)
 8000c02:	4618      	mov	r0, r3
 8000c04:	f002 fe4d 	bl	80038a2 <strstr>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	bf14      	ite	ne
 8000c0e:	2301      	movne	r3, #1
 8000c10:	2300      	moveq	r3, #0
 8000c12:	b2db      	uxtb	r3, r3
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	08005818 	.word	0x08005818

08000c20 <TestGPRS>:
/* ------------------------------------------------------------------------------*/
/* ------------------------------ Funciones de gprs ----------------------------- */
/* ------------------------------------------------------------------------------*/

void TestGPRS(SIM800* sim,int print)
{
 8000c20:	b5b0      	push	{r4, r5, r7, lr}
 8000c22:	b0ce      	sub	sp, #312	; 0x138
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000c2a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000c2e:	6018      	str	r0, [r3, #0]
 8000c30:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000c34:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000c38:	6019      	str	r1, [r3, #0]
	InitGPRS(sim, 0);
 8000c3a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000c3e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000c42:	2100      	movs	r1, #0
 8000c44:	6818      	ldr	r0, [r3, #0]
 8000c46:	f7ff fdff 	bl	8000848 <InitGPRS>

	char cmd [LEN_TXT] = "AT+CIPSTART=\"TCP\",\"httpbin.org\",80\r\n";
 8000c4a:	4b46      	ldr	r3, [pc, #280]	; (8000d64 <TestGPRS+0x144>)
 8000c4c:	f107 04d4 	add.w	r4, r7, #212	; 0xd4
 8000c50:	461d      	mov	r5, r3
 8000c52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c5a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c5e:	6020      	str	r0, [r4, #0]
 8000c60:	3404      	adds	r4, #4
 8000c62:	7021      	strb	r1, [r4, #0]
 8000c64:	f107 03f9 	add.w	r3, r7, #249	; 0xf9
 8000c68:	223f      	movs	r2, #63	; 0x3f
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f002 fb40 	bl	80032f2 <memset>
	EnviarComandoAT(sim,cmd,print);
 8000c72:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000c76:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 8000c7a:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8000c7e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000c82:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000c86:	6812      	ldr	r2, [r2, #0]
 8000c88:	6818      	ldr	r0, [r3, #0]
 8000c8a:	f7ff fe19 	bl	80008c0 <EnviarComandoAT>
	WaitForAnswer(sim, 1); // Aca espero dos veces porque primero va el OK y despues el connect OK
 8000c8e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000c92:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000c96:	2101      	movs	r1, #1
 8000c98:	6818      	ldr	r0, [r3, #0]
 8000c9a:	f7ff fe5d 	bl	8000958 <WaitForAnswer>

	// HTTP Request:
	char cmd2 [LEN_TXT] = "GET /get HTTP/1.1\r\nHost: httpbin.org\r\nAccept: */* \r\n\r\n";
 8000c9e:	4b32      	ldr	r3, [pc, #200]	; (8000d68 <TestGPRS+0x148>)
 8000ca0:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000ca4:	461d      	mov	r5, r3
 8000ca6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ca8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000caa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cb2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cb6:	6020      	str	r0, [r4, #0]
 8000cb8:	3404      	adds	r4, #4
 8000cba:	8021      	strh	r1, [r4, #0]
 8000cbc:	3402      	adds	r4, #2
 8000cbe:	0c0b      	lsrs	r3, r1, #16
 8000cc0:	7023      	strb	r3, [r4, #0]
 8000cc2:	f107 03a7 	add.w	r3, r7, #167	; 0xa7
 8000cc6:	222d      	movs	r2, #45	; 0x2d
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f002 fb11 	bl	80032f2 <memset>
	char cmd3 [LEN_TXT];
	sprintf(cmd3,"AT+CIPSEND=%d\r\n",strlen(cmd2));
 8000cd0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fa39 	bl	800014c <strlen>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	4922      	ldr	r1, [pc, #136]	; (8000d6c <TestGPRS+0x14c>)
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f002 fd66 	bl	80037b4 <siprintf>
	EnviarComandoAT(sim,cmd3,print);
 8000ce8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000cec:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 8000cf0:	f107 010c 	add.w	r1, r7, #12
 8000cf4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000cf8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000cfc:	6812      	ldr	r2, [r2, #0]
 8000cfe:	6818      	ldr	r0, [r3, #0]
 8000d00:	f7ff fdde 	bl	80008c0 <EnviarComandoAT>

	EnviarComandoAT(sim,cmd2,print);
 8000d04:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000d08:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 8000d0c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000d10:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000d14:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000d18:	6812      	ldr	r2, [r2, #0]
 8000d1a:	6818      	ldr	r0, [r3, #0]
 8000d1c:	f7ff fdd0 	bl	80008c0 <EnviarComandoAT>

	// Esperamos la respuesta y despues cerramos
	WaitForAnswer(sim,1);
 8000d20:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000d24:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000d28:	2101      	movs	r1, #1
 8000d2a:	6818      	ldr	r0, [r3, #0]
 8000d2c:	f7ff fe14 	bl	8000958 <WaitForAnswer>
	WaitForAnswer(sim,1);
 8000d30:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000d34:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000d38:	2101      	movs	r1, #1
 8000d3a:	6818      	ldr	r0, [r3, #0]
 8000d3c:	f7ff fe0c 	bl	8000958 <WaitForAnswer>

	EnviarComandoAT(sim,"AT+CIPCLOSE\r\n",print);
 8000d40:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000d44:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 8000d48:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000d4c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000d50:	6812      	ldr	r2, [r2, #0]
 8000d52:	4907      	ldr	r1, [pc, #28]	; (8000d70 <TestGPRS+0x150>)
 8000d54:	6818      	ldr	r0, [r3, #0]
 8000d56:	f7ff fdb3 	bl	80008c0 <EnviarComandoAT>

}
 8000d5a:	bf00      	nop
 8000d5c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bdb0      	pop	{r4, r5, r7, pc}
 8000d64:	08005840 	.word	0x08005840
 8000d68:	080058a4 	.word	0x080058a4
 8000d6c:	08005820 	.word	0x08005820
 8000d70:	08005830 	.word	0x08005830

08000d74 <SendTCPtoIP>:

// IMPORTANTE -> Esto anda hasta unos 500 bytes x msj!
void SendTCPtoIP(SIM800* sim, char * msj, char* IP, int port,int print)
{
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b0b7      	sub	sp, #220	; 0xdc
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
 8000d80:	603b      	str	r3, [r7, #0]
	InitGPRS(sim, print);
 8000d82:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8000d86:	68f8      	ldr	r0, [r7, #12]
 8000d88:	f7ff fd5e 	bl	8000848 <InitGPRS>

	char cmd [LEN_TXT];
	sprintf(cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",IP,port);
 8000d8c:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	491d      	ldr	r1, [pc, #116]	; (8000e0c <SendTCPtoIP+0x98>)
 8000d96:	f002 fd0d 	bl	80037b4 <siprintf>
	EnviarComandoAT(sim,cmd,print);
 8000d9a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000d9e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000da2:	4619      	mov	r1, r3
 8000da4:	68f8      	ldr	r0, [r7, #12]
 8000da6:	f7ff fd8b 	bl	80008c0 <EnviarComandoAT>
	WaitForAnswer(sim, print); // Aca espero dos veces porque primero va el OK y despues el connect OK
 8000daa:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8000dae:	68f8      	ldr	r0, [r7, #12]
 8000db0:	f7ff fdd2 	bl	8000958 <WaitForAnswer>

	char cmd2 [LEN_TXT] = "AT+CIPSEND\r\n";
 8000db4:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <SendTCPtoIP+0x9c>)
 8000db6:	f107 0410 	add.w	r4, r7, #16
 8000dba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dbc:	c407      	stmia	r4!, {r0, r1, r2}
 8000dbe:	7023      	strb	r3, [r4, #0]
 8000dc0:	f107 031d 	add.w	r3, r7, #29
 8000dc4:	2257      	movs	r2, #87	; 0x57
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f002 fa92 	bl	80032f2 <memset>
	EnviarComandoAT(sim,cmd2,print);
 8000dce:	f107 0310 	add.w	r3, r7, #16
 8000dd2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	68f8      	ldr	r0, [r7, #12]
 8000dda:	f7ff fd71 	bl	80008c0 <EnviarComandoAT>

	Enviar(sim,msj);
 8000dde:	68b9      	ldr	r1, [r7, #8]
 8000de0:	68f8      	ldr	r0, [r7, #12]
 8000de2:	f7ff fd82 	bl	80008ea <Enviar>
	Enviar(sim,"\r\n\032");
 8000de6:	490b      	ldr	r1, [pc, #44]	; (8000e14 <SendTCPtoIP+0xa0>)
 8000de8:	68f8      	ldr	r0, [r7, #12]
 8000dea:	f7ff fd7e 	bl	80008ea <Enviar>
	WaitForAnswer(sim, print);
 8000dee:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8000df2:	68f8      	ldr	r0, [r7, #12]
 8000df4:	f7ff fdb0 	bl	8000958 <WaitForAnswer>

	EnviarComandoAT(sim,"AT+CIPCLOSE\r\n",print);
 8000df8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000dfc:	4906      	ldr	r1, [pc, #24]	; (8000e18 <SendTCPtoIP+0xa4>)
 8000dfe:	68f8      	ldr	r0, [r7, #12]
 8000e00:	f7ff fd5e 	bl	80008c0 <EnviarComandoAT>

}
 8000e04:	bf00      	nop
 8000e06:	37dc      	adds	r7, #220	; 0xdc
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd90      	pop	{r4, r7, pc}
 8000e0c:	08005908 	.word	0x08005908
 8000e10:	08005928 	.word	0x08005928
 8000e14:	08005924 	.word	0x08005924
 8000e18:	08005830 	.word	0x08005830

08000e1c <EnviarSMS>:
/* ------------------------------------------------------------------------------*/
/* ------------------------------ Funciones de sms ----------------------------- */
/* ------------------------------------------------------------------------------*/

void EnviarSMS(SIM800 * sim, char * numero, char* mensaje, int print )
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b092      	sub	sp, #72	; 0x48
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
 8000e28:	603b      	str	r3, [r7, #0]
	char cmd [LEN_CMD];

	sprintf(cmd,"AT+CMGS=\"%s\"\r\n",numero);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	490b      	ldr	r1, [pc, #44]	; (8000e60 <EnviarSMS+0x44>)
 8000e32:	4618      	mov	r0, r3
 8000e34:	f002 fcbe 	bl	80037b4 <siprintf>

	EnviarComandoAT(sim,cmd,print);
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	683a      	ldr	r2, [r7, #0]
 8000e3e:	4619      	mov	r1, r3
 8000e40:	68f8      	ldr	r0, [r7, #12]
 8000e42:	f7ff fd3d 	bl	80008c0 <EnviarComandoAT>

	Enviar(sim,mensaje);
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	68f8      	ldr	r0, [r7, #12]
 8000e4a:	f7ff fd4e 	bl	80008ea <Enviar>
	Enviar(sim,"\r\n\032");
 8000e4e:	4905      	ldr	r1, [pc, #20]	; (8000e64 <EnviarSMS+0x48>)
 8000e50:	68f8      	ldr	r0, [r7, #12]
 8000e52:	f7ff fd4a 	bl	80008ea <Enviar>

}
 8000e56:	bf00      	nop
 8000e58:	3748      	adds	r7, #72	; 0x48
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	0800598c 	.word	0x0800598c
 8000e64:	08005924 	.word	0x08005924

08000e68 <BorrarAllSMS>:

	EnviarComandoAT(sim,"AT+CMGL=\"ALL\"\r\n",1);
}

void BorrarAllSMS(SIM800 *sim, int print)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
	EnviarComandoAT(sim,"AT+CMGDA=\"DEL ALL\"\r\n",print);
 8000e72:	683a      	ldr	r2, [r7, #0]
 8000e74:	4903      	ldr	r1, [pc, #12]	; (8000e84 <BorrarAllSMS+0x1c>)
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff fd22 	bl	80008c0 <EnviarComandoAT>
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	080059ac 	.word	0x080059ac

08000e88 <LeerSMS_i>:

void LeerSMS_i(SIM800 *sim, int i, int print)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b092      	sub	sp, #72	; 0x48
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
	char msj [LEN_CMD];
	sprintf(msj,"AT+CMGR=%d\r\n",i);
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	68ba      	ldr	r2, [r7, #8]
 8000e9a:	4907      	ldr	r1, [pc, #28]	; (8000eb8 <LeerSMS_i+0x30>)
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f002 fc89 	bl	80037b4 <siprintf>
	EnviarComandoAT(sim,msj,print);
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	f7ff fd08 	bl	80008c0 <EnviarComandoAT>
}
 8000eb0:	bf00      	nop
 8000eb2:	3748      	adds	r7, #72	; 0x48
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	080059c4 	.word	0x080059c4

08000ebc <ListenSMS>:


int ListenSMS(SIM800 * sim, UART_HandleTypeDef * huart1 )
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
	Borrar_respuesta(sim);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff fd36 	bl	8000938 <Borrar_respuesta>
	uint8_t rx_byte = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	72fb      	strb	r3, [r7, #11]

	while ( ( strlen(sim->response) == 0 ) )
 8000ed0:	e01d      	b.n	8000f0e <ListenSMS+0x52>
	{
		HAL_UART_Receive (sim->huart, (uint8_t*) sim->response, LENGTH,TIMEOUT);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6818      	ldr	r0, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	1d19      	adds	r1, r3, #4
 8000eda:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ede:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000ee2:	f001 fb4e 	bl	8002582 <HAL_UART_Receive>

		if (__HAL_UART_GET_FLAG(huart1, UART_FLAG_RXNE) == SET)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 0320 	and.w	r3, r3, #32
 8000ef0:	2b20      	cmp	r3, #32
 8000ef2:	d10c      	bne.n	8000f0e <ListenSMS+0x52>
		{
		    HAL_UART_Receive (huart1, &rx_byte, 1,TIMEOUT); // Leer el dato recibido en UART1
 8000ef4:	f107 010b 	add.w	r1, r7, #11
 8000ef8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000efc:	2201      	movs	r2, #1
 8000efe:	6838      	ldr	r0, [r7, #0]
 8000f00:	f001 fb3f 	bl	8002582 <HAL_UART_Receive>
		    if(rx_byte==26)
 8000f04:	7afb      	ldrb	r3, [r7, #11]
 8000f06:	2b1a      	cmp	r3, #26
 8000f08:	d101      	bne.n	8000f0e <ListenSMS+0x52>
		    {
		    	return 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e013      	b.n	8000f36 <ListenSMS+0x7a>
	while ( ( strlen(sim->response) == 0 ) )
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3304      	adds	r3, #4
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0dc      	beq.n	8000ed2 <ListenSMS+0x16>
		    }
		}
	}

	int indice = ExtraerIndiceCMTI(sim->response);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3304      	adds	r3, #4
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f000 f80e 	bl	8000f3e <ExtraerIndiceCMTI>
 8000f22:	60f8      	str	r0, [r7, #12]
	ExtraerTextoDeSMS(sim,indice,sim->txt_last_sms);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	68f9      	ldr	r1, [r7, #12]
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f000 f820 	bl	8000f74 <ExtraerTextoDeSMS>
	return 1;
 8000f34:	2301      	movs	r3, #1

}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <ExtraerIndiceCMTI>:


int ExtraerIndiceCMTI(char * codigo)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b085      	sub	sp, #20
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
	// Forma del codigo -> +CMTI: "SM",5

	int i = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
	while(*(codigo+i) !=',' ){i++;}
 8000f4a:	e002      	b.n	8000f52 <ExtraerIndiceCMTI+0x14>
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	4413      	add	r3, r2
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b2c      	cmp	r3, #44	; 0x2c
 8000f5c:	d1f6      	bne.n	8000f4c <ExtraerIndiceCMTI+0xe>

	return *(codigo+i+1)-48;	// Para pasarlo a entero
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	3301      	adds	r3, #1
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	3b30      	subs	r3, #48	; 0x30
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr

08000f74 <ExtraerTextoDeSMS>:

void ExtraerTextoDeSMS(SIM800 *sim, int indice, char * texto)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
	LeerSMS_i(sim,indice,0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	68b9      	ldr	r1, [r7, #8]
 8000f84:	68f8      	ldr	r0, [r7, #12]
 8000f86:	f7ff ff7f 	bl	8000e88 <LeerSMS_i>
	// Extrae el texto del SMS guardado en la posicion i
	// Formato del codigo -> 3,"READ/UNREAD","NUM","","FECHA" MSJ
	// Voy a contar comillas, serían 8

	int comillas = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
	int tam_header = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61bb      	str	r3, [r7, #24]
	while(comillas < 8)
 8000f92:	e00c      	b.n	8000fae <ExtraerTextoDeSMS+0x3a>
	{
		if(*(sim->response + tam_header) == '"') { comillas++; }
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	1d1a      	adds	r2, r3, #4
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b22      	cmp	r3, #34	; 0x22
 8000fa0:	d102      	bne.n	8000fa8 <ExtraerTextoDeSMS+0x34>
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	61fb      	str	r3, [r7, #28]
		tam_header++;
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	3301      	adds	r3, #1
 8000fac:	61bb      	str	r3, [r7, #24]
	while(comillas < 8)
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	2b07      	cmp	r3, #7
 8000fb2:	ddef      	ble.n	8000f94 <ExtraerTextoDeSMS+0x20>
	}

	int j;

	for (j = 0; j<strlen(sim->response)-tam_header;j++)
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	e00d      	b.n	8000fd6 <ExtraerTextoDeSMS+0x62>
	{
		*(texto+j) = *(sim->response + tam_header + j);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	1d1a      	adds	r2, r3, #4
 8000fbe:	69b9      	ldr	r1, [r7, #24]
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	440b      	add	r3, r1
 8000fc4:	441a      	add	r2, r3
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	440b      	add	r3, r1
 8000fcc:	7812      	ldrb	r2, [r2, #0]
 8000fce:	701a      	strb	r2, [r3, #0]
	for (j = 0; j<strlen(sim->response)-tam_header;j++)
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff f8b6 	bl	800014c <strlen>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	1ad2      	subs	r2, r2, r3
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d8e6      	bhi.n	8000fba <ExtraerTextoDeSMS+0x46>
	}
	*(texto+j+1)='\0';
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	3720      	adds	r7, #32
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001006:	4b15      	ldr	r3, [pc, #84]	; (800105c <HAL_MspInit+0x5c>)
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	4a14      	ldr	r2, [pc, #80]	; (800105c <HAL_MspInit+0x5c>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6193      	str	r3, [r2, #24]
 8001012:	4b12      	ldr	r3, [pc, #72]	; (800105c <HAL_MspInit+0x5c>)
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800101e:	4b0f      	ldr	r3, [pc, #60]	; (800105c <HAL_MspInit+0x5c>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	4a0e      	ldr	r2, [pc, #56]	; (800105c <HAL_MspInit+0x5c>)
 8001024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001028:	61d3      	str	r3, [r2, #28]
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <HAL_MspInit+0x5c>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <HAL_MspInit+0x60>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_MspInit+0x60>)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001052:	bf00      	nop
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	40021000 	.word	0x40021000
 8001060:	40010000 	.word	0x40010000

08001064 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0318 	add.w	r3, r7, #24
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a3f      	ldr	r2, [pc, #252]	; (800117c <HAL_UART_MspInit+0x118>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d13a      	bne.n	80010fa <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001084:	4b3e      	ldr	r3, [pc, #248]	; (8001180 <HAL_UART_MspInit+0x11c>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a3d      	ldr	r2, [pc, #244]	; (8001180 <HAL_UART_MspInit+0x11c>)
 800108a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108e:	6193      	str	r3, [r2, #24]
 8001090:	4b3b      	ldr	r3, [pc, #236]	; (8001180 <HAL_UART_MspInit+0x11c>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109c:	4b38      	ldr	r3, [pc, #224]	; (8001180 <HAL_UART_MspInit+0x11c>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4a37      	ldr	r2, [pc, #220]	; (8001180 <HAL_UART_MspInit+0x11c>)
 80010a2:	f043 0304 	orr.w	r3, r3, #4
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b35      	ldr	r3, [pc, #212]	; (8001180 <HAL_UART_MspInit+0x11c>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 0318 	add.w	r3, r7, #24
 80010c6:	4619      	mov	r1, r3
 80010c8:	482e      	ldr	r0, [pc, #184]	; (8001184 <HAL_UART_MspInit+0x120>)
 80010ca:	f000 fbab 	bl	8001824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010dc:	f107 0318 	add.w	r3, r7, #24
 80010e0:	4619      	mov	r1, r3
 80010e2:	4828      	ldr	r0, [pc, #160]	; (8001184 <HAL_UART_MspInit+0x120>)
 80010e4:	f000 fb9e 	bl	8001824 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2100      	movs	r1, #0
 80010ec:	2025      	movs	r0, #37	; 0x25
 80010ee:	f000 fab2 	bl	8001656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010f2:	2025      	movs	r0, #37	; 0x25
 80010f4:	f000 facb 	bl	800168e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010f8:	e03c      	b.n	8001174 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a22      	ldr	r2, [pc, #136]	; (8001188 <HAL_UART_MspInit+0x124>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d137      	bne.n	8001174 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001104:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <HAL_UART_MspInit+0x11c>)
 8001106:	69db      	ldr	r3, [r3, #28]
 8001108:	4a1d      	ldr	r2, [pc, #116]	; (8001180 <HAL_UART_MspInit+0x11c>)
 800110a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800110e:	61d3      	str	r3, [r2, #28]
 8001110:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <HAL_UART_MspInit+0x11c>)
 8001112:	69db      	ldr	r3, [r3, #28]
 8001114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <HAL_UART_MspInit+0x11c>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	4a17      	ldr	r2, [pc, #92]	; (8001180 <HAL_UART_MspInit+0x11c>)
 8001122:	f043 0304 	orr.w	r3, r3, #4
 8001126:	6193      	str	r3, [r2, #24]
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <HAL_UART_MspInit+0x11c>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001134:	2304      	movs	r3, #4
 8001136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800113c:	2303      	movs	r3, #3
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001140:	f107 0318 	add.w	r3, r7, #24
 8001144:	4619      	mov	r1, r3
 8001146:	480f      	ldr	r0, [pc, #60]	; (8001184 <HAL_UART_MspInit+0x120>)
 8001148:	f000 fb6c 	bl	8001824 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800114c:	2308      	movs	r3, #8
 800114e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001158:	f107 0318 	add.w	r3, r7, #24
 800115c:	4619      	mov	r1, r3
 800115e:	4809      	ldr	r0, [pc, #36]	; (8001184 <HAL_UART_MspInit+0x120>)
 8001160:	f000 fb60 	bl	8001824 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	2100      	movs	r1, #0
 8001168:	2026      	movs	r0, #38	; 0x26
 800116a:	f000 fa74 	bl	8001656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800116e:	2026      	movs	r0, #38	; 0x26
 8001170:	f000 fa8d 	bl	800168e <HAL_NVIC_EnableIRQ>
}
 8001174:	bf00      	nop
 8001176:	3728      	adds	r7, #40	; 0x28
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40013800 	.word	0x40013800
 8001180:	40021000 	.word	0x40021000
 8001184:	40010800 	.word	0x40010800
 8001188:	40004400 	.word	0x40004400

0800118c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <NMI_Handler+0x4>

08001192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001196:	e7fe      	b.n	8001196 <HardFault_Handler+0x4>

08001198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800119c:	e7fe      	b.n	800119c <MemManage_Handler+0x4>

0800119e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <BusFault_Handler+0x4>

080011a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <UsageFault_Handler+0x4>

080011aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr

080011b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr

080011c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr

080011ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d2:	f000 f929 	bl	8001428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <USART1_IRQHandler+0x10>)
 80011e2:	f001 fa71 	bl	80026c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	2000008c 	.word	0x2000008c

080011f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011f4:	4802      	ldr	r0, [pc, #8]	; (8001200 <USART2_IRQHandler+0x10>)
 80011f6:	f001 fa67 	bl	80026c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200000d0 	.word	0x200000d0

08001204 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	e00a      	b.n	800122c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001216:	f7fe ffb3 	bl	8000180 <__io_getchar>
 800121a:	4601      	mov	r1, r0
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	60ba      	str	r2, [r7, #8]
 8001222:	b2ca      	uxtb	r2, r1
 8001224:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	3301      	adds	r3, #1
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	429a      	cmp	r2, r3
 8001232:	dbf0      	blt.n	8001216 <_read+0x12>
  }

  return len;
 8001234:	687b      	ldr	r3, [r7, #4]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b086      	sub	sp, #24
 8001242:	af00      	add	r7, sp, #0
 8001244:	60f8      	str	r0, [r7, #12]
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
 800124e:	e009      	b.n	8001264 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	1c5a      	adds	r2, r3, #1
 8001254:	60ba      	str	r2, [r7, #8]
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7fe ff7f 	bl	800015c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	3301      	adds	r3, #1
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	429a      	cmp	r2, r3
 800126a:	dbf1      	blt.n	8001250 <_write+0x12>
  }
  return len;
 800126c:	687b      	ldr	r3, [r7, #4]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <_close>:

int _close(int file)
{
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800127e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001282:	4618      	mov	r0, r3
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr

0800128c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800129c:	605a      	str	r2, [r3, #4]
  return 0;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr

080012aa <_isatty>:

int _isatty(int file)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012b2:	2301      	movs	r3, #1
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr

080012be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012be:	b480      	push	{r7}
 80012c0:	b085      	sub	sp, #20
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	60f8      	str	r0, [r7, #12]
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
	...

080012d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e0:	4a14      	ldr	r2, [pc, #80]	; (8001334 <_sbrk+0x5c>)
 80012e2:	4b15      	ldr	r3, [pc, #84]	; (8001338 <_sbrk+0x60>)
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012ec:	4b13      	ldr	r3, [pc, #76]	; (800133c <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d102      	bne.n	80012fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <_sbrk+0x64>)
 80012f6:	4a12      	ldr	r2, [pc, #72]	; (8001340 <_sbrk+0x68>)
 80012f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <_sbrk+0x64>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	429a      	cmp	r2, r3
 8001306:	d207      	bcs.n	8001318 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001308:	f001 fdd6 	bl	8002eb8 <__errno>
 800130c:	4603      	mov	r3, r0
 800130e:	220c      	movs	r2, #12
 8001310:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001312:	f04f 33ff 	mov.w	r3, #4294967295
 8001316:	e009      	b.n	800132c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <_sbrk+0x64>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800131e:	4b07      	ldr	r3, [pc, #28]	; (800133c <_sbrk+0x64>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	4a05      	ldr	r2, [pc, #20]	; (800133c <_sbrk+0x64>)
 8001328:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800132a:	68fb      	ldr	r3, [r7, #12]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20005000 	.word	0x20005000
 8001338:	00000400 	.word	0x00000400
 800133c:	20000114 	.word	0x20000114
 8001340:	20000130 	.word	0x20000130

08001344 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001350:	480c      	ldr	r0, [pc, #48]	; (8001384 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001352:	490d      	ldr	r1, [pc, #52]	; (8001388 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001354:	4a0d      	ldr	r2, [pc, #52]	; (800138c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001358:	e002      	b.n	8001360 <LoopCopyDataInit>

0800135a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800135c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135e:	3304      	adds	r3, #4

08001360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001364:	d3f9      	bcc.n	800135a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001366:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001368:	4c0a      	ldr	r4, [pc, #40]	; (8001394 <LoopFillZerobss+0x22>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800136c:	e001      	b.n	8001372 <LoopFillZerobss>

0800136e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001370:	3204      	adds	r2, #4

08001372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001374:	d3fb      	bcc.n	800136e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001376:	f7ff ffe5 	bl	8001344 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800137a:	f001 ff85 	bl	8003288 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800137e:	f7fe ff25 	bl	80001cc <main>
  bx lr
 8001382:	4770      	bx	lr
  ldr r0, =_sdata
 8001384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001388:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800138c:	08005bc4 	.word	0x08005bc4
  ldr r2, =_sbss
 8001390:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001394:	2000012c 	.word	0x2000012c

08001398 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001398:	e7fe      	b.n	8001398 <ADC1_2_IRQHandler>
	...

0800139c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <HAL_Init+0x28>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <HAL_Init+0x28>)
 80013a6:	f043 0310 	orr.w	r3, r3, #16
 80013aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ac:	2003      	movs	r0, #3
 80013ae:	f000 f947 	bl	8001640 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b2:	200f      	movs	r0, #15
 80013b4:	f000 f808 	bl	80013c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b8:	f7ff fe22 	bl	8001000 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40022000 	.word	0x40022000

080013c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_InitTick+0x54>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_InitTick+0x58>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013de:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 f95f 	bl	80016aa <HAL_SYSTICK_Config>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00e      	b.n	8001414 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	d80a      	bhi.n	8001412 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013fc:	2200      	movs	r2, #0
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	f000 f927 	bl	8001656 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001408:	4a06      	ldr	r2, [pc, #24]	; (8001424 <HAL_InitTick+0x5c>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e000      	b.n	8001414 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000000 	.word	0x20000000
 8001420:	20000008 	.word	0x20000008
 8001424:	20000004 	.word	0x20000004

08001428 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_IncTick+0x1c>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b05      	ldr	r3, [pc, #20]	; (8001448 <HAL_IncTick+0x20>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4413      	add	r3, r2
 8001438:	4a03      	ldr	r2, [pc, #12]	; (8001448 <HAL_IncTick+0x20>)
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	20000008 	.word	0x20000008
 8001448:	20000118 	.word	0x20000118

0800144c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return uwTick;
 8001450:	4b02      	ldr	r3, [pc, #8]	; (800145c <HAL_GetTick+0x10>)
 8001452:	681b      	ldr	r3, [r3, #0]
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	20000118 	.word	0x20000118

08001460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001468:	f7ff fff0 	bl	800144c <HAL_GetTick>
 800146c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001478:	d005      	beq.n	8001486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_Delay+0x44>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4413      	add	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001486:	bf00      	nop
 8001488:	f7ff ffe0 	bl	800144c <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	429a      	cmp	r2, r3
 8001496:	d8f7      	bhi.n	8001488 <HAL_Delay+0x28>
  {
  }
}
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000008 	.word	0x20000008

080014a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c4:	4013      	ands	r3, r2
 80014c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014da:	4a04      	ldr	r2, [pc, #16]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	60d3      	str	r3, [r2, #12]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <__NVIC_GetPriorityGrouping+0x18>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	0a1b      	lsrs	r3, r3, #8
 80014fa:	f003 0307 	and.w	r3, r3, #7
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	db0b      	blt.n	8001536 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	f003 021f 	and.w	r2, r3, #31
 8001524:	4906      	ldr	r1, [pc, #24]	; (8001540 <__NVIC_EnableIRQ+0x34>)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	095b      	lsrs	r3, r3, #5
 800152c:	2001      	movs	r0, #1
 800152e:	fa00 f202 	lsl.w	r2, r0, r2
 8001532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	e000e100 	.word	0xe000e100

08001544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001554:	2b00      	cmp	r3, #0
 8001556:	db0a      	blt.n	800156e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	490c      	ldr	r1, [pc, #48]	; (8001590 <__NVIC_SetPriority+0x4c>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	0112      	lsls	r2, r2, #4
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	440b      	add	r3, r1
 8001568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800156c:	e00a      	b.n	8001584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4908      	ldr	r1, [pc, #32]	; (8001594 <__NVIC_SetPriority+0x50>)
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	3b04      	subs	r3, #4
 800157c:	0112      	lsls	r2, r2, #4
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	440b      	add	r3, r1
 8001582:	761a      	strb	r2, [r3, #24]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000e100 	.word	0xe000e100
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	; 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f1c3 0307 	rsb	r3, r3, #7
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	bf28      	it	cs
 80015b6:	2304      	movcs	r3, #4
 80015b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3304      	adds	r3, #4
 80015be:	2b06      	cmp	r3, #6
 80015c0:	d902      	bls.n	80015c8 <NVIC_EncodePriority+0x30>
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3b03      	subs	r3, #3
 80015c6:	e000      	b.n	80015ca <NVIC_EncodePriority+0x32>
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	f04f 32ff 	mov.w	r2, #4294967295
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43da      	mvns	r2, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	401a      	ands	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ea:	43d9      	mvns	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	4313      	orrs	r3, r2
         );
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3724      	adds	r7, #36	; 0x24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3b01      	subs	r3, #1
 8001608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800160c:	d301      	bcc.n	8001612 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800160e:	2301      	movs	r3, #1
 8001610:	e00f      	b.n	8001632 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <SysTick_Config+0x40>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3b01      	subs	r3, #1
 8001618:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800161a:	210f      	movs	r1, #15
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f7ff ff90 	bl	8001544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <SysTick_Config+0x40>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800162a:	4b04      	ldr	r3, [pc, #16]	; (800163c <SysTick_Config+0x40>)
 800162c:	2207      	movs	r2, #7
 800162e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	e000e010 	.word	0xe000e010

08001640 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ff2d 	bl	80014a8 <__NVIC_SetPriorityGrouping>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001656:	b580      	push	{r7, lr}
 8001658:	b086      	sub	sp, #24
 800165a:	af00      	add	r7, sp, #0
 800165c:	4603      	mov	r3, r0
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
 8001662:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001668:	f7ff ff42 	bl	80014f0 <__NVIC_GetPriorityGrouping>
 800166c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	6978      	ldr	r0, [r7, #20]
 8001674:	f7ff ff90 	bl	8001598 <NVIC_EncodePriority>
 8001678:	4602      	mov	r2, r0
 800167a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff5f 	bl	8001544 <__NVIC_SetPriority>
}
 8001686:	bf00      	nop
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff35 	bl	800150c <__NVIC_EnableIRQ>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff ffa2 	bl	80015fc <SysTick_Config>
 80016b8:	4603      	mov	r3, r0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b085      	sub	sp, #20
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d008      	beq.n	80016ea <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2204      	movs	r2, #4
 80016dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e020      	b.n	800172c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 020e 	bic.w	r2, r2, #14
 80016f8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 0201 	bic.w	r2, r2, #1
 8001708:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001712:	2101      	movs	r1, #1
 8001714:	fa01 f202 	lsl.w	r2, r1, r2
 8001718:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800172a:	7bfb      	ldrb	r3, [r7, #15]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr
	...

08001738 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800174a:	2b02      	cmp	r3, #2
 800174c:	d005      	beq.n	800175a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2204      	movs	r2, #4
 8001752:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	73fb      	strb	r3, [r7, #15]
 8001758:	e051      	b.n	80017fe <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 020e 	bic.w	r2, r2, #14
 8001768:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0201 	bic.w	r2, r2, #1
 8001778:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a22      	ldr	r2, [pc, #136]	; (8001808 <HAL_DMA_Abort_IT+0xd0>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d029      	beq.n	80017d8 <HAL_DMA_Abort_IT+0xa0>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a20      	ldr	r2, [pc, #128]	; (800180c <HAL_DMA_Abort_IT+0xd4>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d022      	beq.n	80017d4 <HAL_DMA_Abort_IT+0x9c>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a1f      	ldr	r2, [pc, #124]	; (8001810 <HAL_DMA_Abort_IT+0xd8>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d01a      	beq.n	80017ce <HAL_DMA_Abort_IT+0x96>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a1d      	ldr	r2, [pc, #116]	; (8001814 <HAL_DMA_Abort_IT+0xdc>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d012      	beq.n	80017c8 <HAL_DMA_Abort_IT+0x90>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a1c      	ldr	r2, [pc, #112]	; (8001818 <HAL_DMA_Abort_IT+0xe0>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d00a      	beq.n	80017c2 <HAL_DMA_Abort_IT+0x8a>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a1a      	ldr	r2, [pc, #104]	; (800181c <HAL_DMA_Abort_IT+0xe4>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d102      	bne.n	80017bc <HAL_DMA_Abort_IT+0x84>
 80017b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80017ba:	e00e      	b.n	80017da <HAL_DMA_Abort_IT+0xa2>
 80017bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017c0:	e00b      	b.n	80017da <HAL_DMA_Abort_IT+0xa2>
 80017c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017c6:	e008      	b.n	80017da <HAL_DMA_Abort_IT+0xa2>
 80017c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017cc:	e005      	b.n	80017da <HAL_DMA_Abort_IT+0xa2>
 80017ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017d2:	e002      	b.n	80017da <HAL_DMA_Abort_IT+0xa2>
 80017d4:	2310      	movs	r3, #16
 80017d6:	e000      	b.n	80017da <HAL_DMA_Abort_IT+0xa2>
 80017d8:	2301      	movs	r3, #1
 80017da:	4a11      	ldr	r2, [pc, #68]	; (8001820 <HAL_DMA_Abort_IT+0xe8>)
 80017dc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	4798      	blx	r3
    } 
  }
  return status;
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40020008 	.word	0x40020008
 800180c:	4002001c 	.word	0x4002001c
 8001810:	40020030 	.word	0x40020030
 8001814:	40020044 	.word	0x40020044
 8001818:	40020058 	.word	0x40020058
 800181c:	4002006c 	.word	0x4002006c
 8001820:	40020000 	.word	0x40020000

08001824 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001824:	b480      	push	{r7}
 8001826:	b08b      	sub	sp, #44	; 0x2c
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800182e:	2300      	movs	r3, #0
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001832:	2300      	movs	r3, #0
 8001834:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001836:	e169      	b.n	8001b0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001838:	2201      	movs	r2, #1
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	69fa      	ldr	r2, [r7, #28]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	429a      	cmp	r2, r3
 8001852:	f040 8158 	bne.w	8001b06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	4a9a      	ldr	r2, [pc, #616]	; (8001ac4 <HAL_GPIO_Init+0x2a0>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d05e      	beq.n	800191e <HAL_GPIO_Init+0xfa>
 8001860:	4a98      	ldr	r2, [pc, #608]	; (8001ac4 <HAL_GPIO_Init+0x2a0>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d875      	bhi.n	8001952 <HAL_GPIO_Init+0x12e>
 8001866:	4a98      	ldr	r2, [pc, #608]	; (8001ac8 <HAL_GPIO_Init+0x2a4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d058      	beq.n	800191e <HAL_GPIO_Init+0xfa>
 800186c:	4a96      	ldr	r2, [pc, #600]	; (8001ac8 <HAL_GPIO_Init+0x2a4>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d86f      	bhi.n	8001952 <HAL_GPIO_Init+0x12e>
 8001872:	4a96      	ldr	r2, [pc, #600]	; (8001acc <HAL_GPIO_Init+0x2a8>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d052      	beq.n	800191e <HAL_GPIO_Init+0xfa>
 8001878:	4a94      	ldr	r2, [pc, #592]	; (8001acc <HAL_GPIO_Init+0x2a8>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d869      	bhi.n	8001952 <HAL_GPIO_Init+0x12e>
 800187e:	4a94      	ldr	r2, [pc, #592]	; (8001ad0 <HAL_GPIO_Init+0x2ac>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d04c      	beq.n	800191e <HAL_GPIO_Init+0xfa>
 8001884:	4a92      	ldr	r2, [pc, #584]	; (8001ad0 <HAL_GPIO_Init+0x2ac>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d863      	bhi.n	8001952 <HAL_GPIO_Init+0x12e>
 800188a:	4a92      	ldr	r2, [pc, #584]	; (8001ad4 <HAL_GPIO_Init+0x2b0>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d046      	beq.n	800191e <HAL_GPIO_Init+0xfa>
 8001890:	4a90      	ldr	r2, [pc, #576]	; (8001ad4 <HAL_GPIO_Init+0x2b0>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d85d      	bhi.n	8001952 <HAL_GPIO_Init+0x12e>
 8001896:	2b12      	cmp	r3, #18
 8001898:	d82a      	bhi.n	80018f0 <HAL_GPIO_Init+0xcc>
 800189a:	2b12      	cmp	r3, #18
 800189c:	d859      	bhi.n	8001952 <HAL_GPIO_Init+0x12e>
 800189e:	a201      	add	r2, pc, #4	; (adr r2, 80018a4 <HAL_GPIO_Init+0x80>)
 80018a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a4:	0800191f 	.word	0x0800191f
 80018a8:	080018f9 	.word	0x080018f9
 80018ac:	0800190b 	.word	0x0800190b
 80018b0:	0800194d 	.word	0x0800194d
 80018b4:	08001953 	.word	0x08001953
 80018b8:	08001953 	.word	0x08001953
 80018bc:	08001953 	.word	0x08001953
 80018c0:	08001953 	.word	0x08001953
 80018c4:	08001953 	.word	0x08001953
 80018c8:	08001953 	.word	0x08001953
 80018cc:	08001953 	.word	0x08001953
 80018d0:	08001953 	.word	0x08001953
 80018d4:	08001953 	.word	0x08001953
 80018d8:	08001953 	.word	0x08001953
 80018dc:	08001953 	.word	0x08001953
 80018e0:	08001953 	.word	0x08001953
 80018e4:	08001953 	.word	0x08001953
 80018e8:	08001901 	.word	0x08001901
 80018ec:	08001915 	.word	0x08001915
 80018f0:	4a79      	ldr	r2, [pc, #484]	; (8001ad8 <HAL_GPIO_Init+0x2b4>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d013      	beq.n	800191e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018f6:	e02c      	b.n	8001952 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	623b      	str	r3, [r7, #32]
          break;
 80018fe:	e029      	b.n	8001954 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	3304      	adds	r3, #4
 8001906:	623b      	str	r3, [r7, #32]
          break;
 8001908:	e024      	b.n	8001954 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	3308      	adds	r3, #8
 8001910:	623b      	str	r3, [r7, #32]
          break;
 8001912:	e01f      	b.n	8001954 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	330c      	adds	r3, #12
 800191a:	623b      	str	r3, [r7, #32]
          break;
 800191c:	e01a      	b.n	8001954 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d102      	bne.n	800192c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001926:	2304      	movs	r3, #4
 8001928:	623b      	str	r3, [r7, #32]
          break;
 800192a:	e013      	b.n	8001954 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d105      	bne.n	8001940 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001934:	2308      	movs	r3, #8
 8001936:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69fa      	ldr	r2, [r7, #28]
 800193c:	611a      	str	r2, [r3, #16]
          break;
 800193e:	e009      	b.n	8001954 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001940:	2308      	movs	r3, #8
 8001942:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69fa      	ldr	r2, [r7, #28]
 8001948:	615a      	str	r2, [r3, #20]
          break;
 800194a:	e003      	b.n	8001954 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800194c:	2300      	movs	r3, #0
 800194e:	623b      	str	r3, [r7, #32]
          break;
 8001950:	e000      	b.n	8001954 <HAL_GPIO_Init+0x130>
          break;
 8001952:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	2bff      	cmp	r3, #255	; 0xff
 8001958:	d801      	bhi.n	800195e <HAL_GPIO_Init+0x13a>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	e001      	b.n	8001962 <HAL_GPIO_Init+0x13e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3304      	adds	r3, #4
 8001962:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	2bff      	cmp	r3, #255	; 0xff
 8001968:	d802      	bhi.n	8001970 <HAL_GPIO_Init+0x14c>
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	e002      	b.n	8001976 <HAL_GPIO_Init+0x152>
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	3b08      	subs	r3, #8
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	210f      	movs	r1, #15
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	fa01 f303 	lsl.w	r3, r1, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	401a      	ands	r2, r3
 8001988:	6a39      	ldr	r1, [r7, #32]
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	fa01 f303 	lsl.w	r3, r1, r3
 8001990:	431a      	orrs	r2, r3
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 80b1 	beq.w	8001b06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019a4:	4b4d      	ldr	r3, [pc, #308]	; (8001adc <HAL_GPIO_Init+0x2b8>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	4a4c      	ldr	r2, [pc, #304]	; (8001adc <HAL_GPIO_Init+0x2b8>)
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	6193      	str	r3, [r2, #24]
 80019b0:	4b4a      	ldr	r3, [pc, #296]	; (8001adc <HAL_GPIO_Init+0x2b8>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019bc:	4a48      	ldr	r2, [pc, #288]	; (8001ae0 <HAL_GPIO_Init+0x2bc>)
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	089b      	lsrs	r3, r3, #2
 80019c2:	3302      	adds	r3, #2
 80019c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	220f      	movs	r2, #15
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	4013      	ands	r3, r2
 80019de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a40      	ldr	r2, [pc, #256]	; (8001ae4 <HAL_GPIO_Init+0x2c0>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d013      	beq.n	8001a10 <HAL_GPIO_Init+0x1ec>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a3f      	ldr	r2, [pc, #252]	; (8001ae8 <HAL_GPIO_Init+0x2c4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d00d      	beq.n	8001a0c <HAL_GPIO_Init+0x1e8>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a3e      	ldr	r2, [pc, #248]	; (8001aec <HAL_GPIO_Init+0x2c8>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d007      	beq.n	8001a08 <HAL_GPIO_Init+0x1e4>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a3d      	ldr	r2, [pc, #244]	; (8001af0 <HAL_GPIO_Init+0x2cc>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d101      	bne.n	8001a04 <HAL_GPIO_Init+0x1e0>
 8001a00:	2303      	movs	r3, #3
 8001a02:	e006      	b.n	8001a12 <HAL_GPIO_Init+0x1ee>
 8001a04:	2304      	movs	r3, #4
 8001a06:	e004      	b.n	8001a12 <HAL_GPIO_Init+0x1ee>
 8001a08:	2302      	movs	r3, #2
 8001a0a:	e002      	b.n	8001a12 <HAL_GPIO_Init+0x1ee>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <HAL_GPIO_Init+0x1ee>
 8001a10:	2300      	movs	r3, #0
 8001a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a14:	f002 0203 	and.w	r2, r2, #3
 8001a18:	0092      	lsls	r2, r2, #2
 8001a1a:	4093      	lsls	r3, r2
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a22:	492f      	ldr	r1, [pc, #188]	; (8001ae0 <HAL_GPIO_Init+0x2bc>)
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	089b      	lsrs	r3, r3, #2
 8001a28:	3302      	adds	r3, #2
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d006      	beq.n	8001a4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a3c:	4b2d      	ldr	r3, [pc, #180]	; (8001af4 <HAL_GPIO_Init+0x2d0>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	492c      	ldr	r1, [pc, #176]	; (8001af4 <HAL_GPIO_Init+0x2d0>)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	600b      	str	r3, [r1, #0]
 8001a48:	e006      	b.n	8001a58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a4a:	4b2a      	ldr	r3, [pc, #168]	; (8001af4 <HAL_GPIO_Init+0x2d0>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	4928      	ldr	r1, [pc, #160]	; (8001af4 <HAL_GPIO_Init+0x2d0>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d006      	beq.n	8001a72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a64:	4b23      	ldr	r3, [pc, #140]	; (8001af4 <HAL_GPIO_Init+0x2d0>)
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	4922      	ldr	r1, [pc, #136]	; (8001af4 <HAL_GPIO_Init+0x2d0>)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]
 8001a70:	e006      	b.n	8001a80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a72:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <HAL_GPIO_Init+0x2d0>)
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	491e      	ldr	r1, [pc, #120]	; (8001af4 <HAL_GPIO_Init+0x2d0>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d006      	beq.n	8001a9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a8c:	4b19      	ldr	r3, [pc, #100]	; (8001af4 <HAL_GPIO_Init+0x2d0>)
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	4918      	ldr	r1, [pc, #96]	; (8001af4 <HAL_GPIO_Init+0x2d0>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	608b      	str	r3, [r1, #8]
 8001a98:	e006      	b.n	8001aa8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a9a:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <HAL_GPIO_Init+0x2d0>)
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	4914      	ldr	r1, [pc, #80]	; (8001af4 <HAL_GPIO_Init+0x2d0>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d021      	beq.n	8001af8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <HAL_GPIO_Init+0x2d0>)
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	490e      	ldr	r1, [pc, #56]	; (8001af4 <HAL_GPIO_Init+0x2d0>)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	60cb      	str	r3, [r1, #12]
 8001ac0:	e021      	b.n	8001b06 <HAL_GPIO_Init+0x2e2>
 8001ac2:	bf00      	nop
 8001ac4:	10320000 	.word	0x10320000
 8001ac8:	10310000 	.word	0x10310000
 8001acc:	10220000 	.word	0x10220000
 8001ad0:	10210000 	.word	0x10210000
 8001ad4:	10120000 	.word	0x10120000
 8001ad8:	10110000 	.word	0x10110000
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40010000 	.word	0x40010000
 8001ae4:	40010800 	.word	0x40010800
 8001ae8:	40010c00 	.word	0x40010c00
 8001aec:	40011000 	.word	0x40011000
 8001af0:	40011400 	.word	0x40011400
 8001af4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <HAL_GPIO_Init+0x304>)
 8001afa:	68da      	ldr	r2, [r3, #12]
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	4909      	ldr	r1, [pc, #36]	; (8001b28 <HAL_GPIO_Init+0x304>)
 8001b02:	4013      	ands	r3, r2
 8001b04:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	3301      	adds	r3, #1
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	fa22 f303 	lsr.w	r3, r2, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f47f ae8e 	bne.w	8001838 <HAL_GPIO_Init+0x14>
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	372c      	adds	r7, #44	; 0x2c
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr
 8001b28:	40010400 	.word	0x40010400

08001b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	807b      	strh	r3, [r7, #2]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b3c:	787b      	ldrb	r3, [r7, #1]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b42:	887a      	ldrh	r2, [r7, #2]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b48:	e003      	b.n	8001b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b4a:	887b      	ldrh	r3, [r7, #2]
 8001b4c:	041a      	lsls	r2, r3, #16
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	611a      	str	r2, [r3, #16]
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b6e:	887a      	ldrh	r2, [r7, #2]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4013      	ands	r3, r2
 8001b74:	041a      	lsls	r2, r3, #16
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	43d9      	mvns	r1, r3
 8001b7a:	887b      	ldrh	r3, [r7, #2]
 8001b7c:	400b      	ands	r3, r1
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	611a      	str	r2, [r3, #16]
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr
	...

08001b90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e272      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 8087 	beq.w	8001cbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bb0:	4b92      	ldr	r3, [pc, #584]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 030c 	and.w	r3, r3, #12
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d00c      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bbc:	4b8f      	ldr	r3, [pc, #572]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 030c 	and.w	r3, r3, #12
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d112      	bne.n	8001bee <HAL_RCC_OscConfig+0x5e>
 8001bc8:	4b8c      	ldr	r3, [pc, #560]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd4:	d10b      	bne.n	8001bee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd6:	4b89      	ldr	r3, [pc, #548]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d06c      	beq.n	8001cbc <HAL_RCC_OscConfig+0x12c>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d168      	bne.n	8001cbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e24c      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf6:	d106      	bne.n	8001c06 <HAL_RCC_OscConfig+0x76>
 8001bf8:	4b80      	ldr	r3, [pc, #512]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a7f      	ldr	r2, [pc, #508]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	e02e      	b.n	8001c64 <HAL_RCC_OscConfig+0xd4>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10c      	bne.n	8001c28 <HAL_RCC_OscConfig+0x98>
 8001c0e:	4b7b      	ldr	r3, [pc, #492]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a7a      	ldr	r2, [pc, #488]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	4b78      	ldr	r3, [pc, #480]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a77      	ldr	r2, [pc, #476]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	e01d      	b.n	8001c64 <HAL_RCC_OscConfig+0xd4>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c30:	d10c      	bne.n	8001c4c <HAL_RCC_OscConfig+0xbc>
 8001c32:	4b72      	ldr	r3, [pc, #456]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a71      	ldr	r2, [pc, #452]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	4b6f      	ldr	r3, [pc, #444]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a6e      	ldr	r2, [pc, #440]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	e00b      	b.n	8001c64 <HAL_RCC_OscConfig+0xd4>
 8001c4c:	4b6b      	ldr	r3, [pc, #428]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a6a      	ldr	r2, [pc, #424]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	4b68      	ldr	r3, [pc, #416]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a67      	ldr	r2, [pc, #412]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d013      	beq.n	8001c94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6c:	f7ff fbee 	bl	800144c <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c74:	f7ff fbea 	bl	800144c <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b64      	cmp	r3, #100	; 0x64
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e200      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c86:	4b5d      	ldr	r3, [pc, #372]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f0      	beq.n	8001c74 <HAL_RCC_OscConfig+0xe4>
 8001c92:	e014      	b.n	8001cbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7ff fbda 	bl	800144c <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c9c:	f7ff fbd6 	bl	800144c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b64      	cmp	r3, #100	; 0x64
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e1ec      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cae:	4b53      	ldr	r3, [pc, #332]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x10c>
 8001cba:	e000      	b.n	8001cbe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d063      	beq.n	8001d92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cca:	4b4c      	ldr	r3, [pc, #304]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 030c 	and.w	r3, r3, #12
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00b      	beq.n	8001cee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cd6:	4b49      	ldr	r3, [pc, #292]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	2b08      	cmp	r3, #8
 8001ce0:	d11c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x18c>
 8001ce2:	4b46      	ldr	r3, [pc, #280]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d116      	bne.n	8001d1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cee:	4b43      	ldr	r3, [pc, #268]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d005      	beq.n	8001d06 <HAL_RCC_OscConfig+0x176>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d001      	beq.n	8001d06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e1c0      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d06:	4b3d      	ldr	r3, [pc, #244]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	4939      	ldr	r1, [pc, #228]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1a:	e03a      	b.n	8001d92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d020      	beq.n	8001d66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d24:	4b36      	ldr	r3, [pc, #216]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2a:	f7ff fb8f 	bl	800144c <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d32:	f7ff fb8b 	bl	800144c <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e1a1      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d44:	4b2d      	ldr	r3, [pc, #180]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0f0      	beq.n	8001d32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d50:	4b2a      	ldr	r3, [pc, #168]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4927      	ldr	r1, [pc, #156]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	600b      	str	r3, [r1, #0]
 8001d64:	e015      	b.n	8001d92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d66:	4b26      	ldr	r3, [pc, #152]	; (8001e00 <HAL_RCC_OscConfig+0x270>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7ff fb6e 	bl	800144c <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d74:	f7ff fb6a 	bl	800144c <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e180      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d86:	4b1d      	ldr	r3, [pc, #116]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d03a      	beq.n	8001e14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d019      	beq.n	8001dda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001da6:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dac:	f7ff fb4e 	bl	800144c <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db4:	f7ff fb4a 	bl	800144c <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e160      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc6:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f0      	beq.n	8001db4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dd2:	2001      	movs	r0, #1
 8001dd4:	f000 fad8 	bl	8002388 <RCC_Delay>
 8001dd8:	e01c      	b.n	8001e14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dda:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de0:	f7ff fb34 	bl	800144c <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de6:	e00f      	b.n	8001e08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de8:	f7ff fb30 	bl	800144c <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d908      	bls.n	8001e08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e146      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	42420000 	.word	0x42420000
 8001e04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e08:	4b92      	ldr	r3, [pc, #584]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1e9      	bne.n	8001de8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 80a6 	beq.w	8001f6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e22:	2300      	movs	r3, #0
 8001e24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e26:	4b8b      	ldr	r3, [pc, #556]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10d      	bne.n	8001e4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e32:	4b88      	ldr	r3, [pc, #544]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	4a87      	ldr	r2, [pc, #540]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	61d3      	str	r3, [r2, #28]
 8001e3e:	4b85      	ldr	r3, [pc, #532]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4e:	4b82      	ldr	r3, [pc, #520]	; (8002058 <HAL_RCC_OscConfig+0x4c8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d118      	bne.n	8001e8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e5a:	4b7f      	ldr	r3, [pc, #508]	; (8002058 <HAL_RCC_OscConfig+0x4c8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a7e      	ldr	r2, [pc, #504]	; (8002058 <HAL_RCC_OscConfig+0x4c8>)
 8001e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e66:	f7ff faf1 	bl	800144c <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e6e:	f7ff faed 	bl	800144c <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b64      	cmp	r3, #100	; 0x64
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e103      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e80:	4b75      	ldr	r3, [pc, #468]	; (8002058 <HAL_RCC_OscConfig+0x4c8>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f0      	beq.n	8001e6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d106      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x312>
 8001e94:	4b6f      	ldr	r3, [pc, #444]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	4a6e      	ldr	r2, [pc, #440]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	6213      	str	r3, [r2, #32]
 8001ea0:	e02d      	b.n	8001efe <HAL_RCC_OscConfig+0x36e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x334>
 8001eaa:	4b6a      	ldr	r3, [pc, #424]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	4a69      	ldr	r2, [pc, #420]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001eb0:	f023 0301 	bic.w	r3, r3, #1
 8001eb4:	6213      	str	r3, [r2, #32]
 8001eb6:	4b67      	ldr	r3, [pc, #412]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	4a66      	ldr	r2, [pc, #408]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	f023 0304 	bic.w	r3, r3, #4
 8001ec0:	6213      	str	r3, [r2, #32]
 8001ec2:	e01c      	b.n	8001efe <HAL_RCC_OscConfig+0x36e>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	2b05      	cmp	r3, #5
 8001eca:	d10c      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x356>
 8001ecc:	4b61      	ldr	r3, [pc, #388]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	4a60      	ldr	r2, [pc, #384]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001ed2:	f043 0304 	orr.w	r3, r3, #4
 8001ed6:	6213      	str	r3, [r2, #32]
 8001ed8:	4b5e      	ldr	r3, [pc, #376]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	4a5d      	ldr	r2, [pc, #372]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	6213      	str	r3, [r2, #32]
 8001ee4:	e00b      	b.n	8001efe <HAL_RCC_OscConfig+0x36e>
 8001ee6:	4b5b      	ldr	r3, [pc, #364]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	4a5a      	ldr	r2, [pc, #360]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001eec:	f023 0301 	bic.w	r3, r3, #1
 8001ef0:	6213      	str	r3, [r2, #32]
 8001ef2:	4b58      	ldr	r3, [pc, #352]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	4a57      	ldr	r2, [pc, #348]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	f023 0304 	bic.w	r3, r3, #4
 8001efc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d015      	beq.n	8001f32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f06:	f7ff faa1 	bl	800144c <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f0c:	e00a      	b.n	8001f24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0e:	f7ff fa9d 	bl	800144c <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e0b1      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f24:	4b4b      	ldr	r3, [pc, #300]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0ee      	beq.n	8001f0e <HAL_RCC_OscConfig+0x37e>
 8001f30:	e014      	b.n	8001f5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f32:	f7ff fa8b 	bl	800144c <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f38:	e00a      	b.n	8001f50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3a:	f7ff fa87 	bl	800144c <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e09b      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f50:	4b40      	ldr	r3, [pc, #256]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1ee      	bne.n	8001f3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f5c:	7dfb      	ldrb	r3, [r7, #23]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d105      	bne.n	8001f6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f62:	4b3c      	ldr	r3, [pc, #240]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	4a3b      	ldr	r2, [pc, #236]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 8087 	beq.w	8002086 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f78:	4b36      	ldr	r3, [pc, #216]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 030c 	and.w	r3, r3, #12
 8001f80:	2b08      	cmp	r3, #8
 8001f82:	d061      	beq.n	8002048 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d146      	bne.n	800201a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8c:	4b33      	ldr	r3, [pc, #204]	; (800205c <HAL_RCC_OscConfig+0x4cc>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f92:	f7ff fa5b 	bl	800144c <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9a:	f7ff fa57 	bl	800144c <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e06d      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fac:	4b29      	ldr	r3, [pc, #164]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1f0      	bne.n	8001f9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc0:	d108      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	4921      	ldr	r1, [pc, #132]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fd4:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a19      	ldr	r1, [r3, #32]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	491b      	ldr	r1, [pc, #108]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fec:	4b1b      	ldr	r3, [pc, #108]	; (800205c <HAL_RCC_OscConfig+0x4cc>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff2:	f7ff fa2b 	bl	800144c <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffa:	f7ff fa27 	bl	800144c <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e03d      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800200c:	4b11      	ldr	r3, [pc, #68]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x46a>
 8002018:	e035      	b.n	8002086 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <HAL_RCC_OscConfig+0x4cc>)
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002020:	f7ff fa14 	bl	800144c <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002028:	f7ff fa10 	bl	800144c <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e026      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f0      	bne.n	8002028 <HAL_RCC_OscConfig+0x498>
 8002046:	e01e      	b.n	8002086 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d107      	bne.n	8002060 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e019      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
 8002054:	40021000 	.word	0x40021000
 8002058:	40007000 	.word	0x40007000
 800205c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_RCC_OscConfig+0x500>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	429a      	cmp	r2, r3
 8002072:	d106      	bne.n	8002082 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800207e:	429a      	cmp	r2, r3
 8002080:	d001      	beq.n	8002086 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40021000 	.word	0x40021000

08002094 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e0d0      	b.n	800224a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020a8:	4b6a      	ldr	r3, [pc, #424]	; (8002254 <HAL_RCC_ClockConfig+0x1c0>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d910      	bls.n	80020d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b6:	4b67      	ldr	r3, [pc, #412]	; (8002254 <HAL_RCC_ClockConfig+0x1c0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 0207 	bic.w	r2, r3, #7
 80020be:	4965      	ldr	r1, [pc, #404]	; (8002254 <HAL_RCC_ClockConfig+0x1c0>)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c6:	4b63      	ldr	r3, [pc, #396]	; (8002254 <HAL_RCC_ClockConfig+0x1c0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0b8      	b.n	800224a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d020      	beq.n	8002126 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020f0:	4b59      	ldr	r3, [pc, #356]	; (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	4a58      	ldr	r2, [pc, #352]	; (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002108:	4b53      	ldr	r3, [pc, #332]	; (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	4a52      	ldr	r2, [pc, #328]	; (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 800210e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002112:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002114:	4b50      	ldr	r3, [pc, #320]	; (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	494d      	ldr	r1, [pc, #308]	; (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	4313      	orrs	r3, r2
 8002124:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d040      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d107      	bne.n	800214a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213a:	4b47      	ldr	r3, [pc, #284]	; (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d115      	bne.n	8002172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e07f      	b.n	800224a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d107      	bne.n	8002162 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002152:	4b41      	ldr	r3, [pc, #260]	; (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d109      	bne.n	8002172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e073      	b.n	800224a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002162:	4b3d      	ldr	r3, [pc, #244]	; (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e06b      	b.n	800224a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002172:	4b39      	ldr	r3, [pc, #228]	; (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f023 0203 	bic.w	r2, r3, #3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	4936      	ldr	r1, [pc, #216]	; (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	4313      	orrs	r3, r2
 8002182:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002184:	f7ff f962 	bl	800144c <HAL_GetTick>
 8002188:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218a:	e00a      	b.n	80021a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800218c:	f7ff f95e 	bl	800144c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	f241 3288 	movw	r2, #5000	; 0x1388
 800219a:	4293      	cmp	r3, r2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e053      	b.n	800224a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a2:	4b2d      	ldr	r3, [pc, #180]	; (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 020c 	and.w	r2, r3, #12
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d1eb      	bne.n	800218c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021b4:	4b27      	ldr	r3, [pc, #156]	; (8002254 <HAL_RCC_ClockConfig+0x1c0>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d210      	bcs.n	80021e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c2:	4b24      	ldr	r3, [pc, #144]	; (8002254 <HAL_RCC_ClockConfig+0x1c0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 0207 	bic.w	r2, r3, #7
 80021ca:	4922      	ldr	r1, [pc, #136]	; (8002254 <HAL_RCC_ClockConfig+0x1c0>)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d2:	4b20      	ldr	r3, [pc, #128]	; (8002254 <HAL_RCC_ClockConfig+0x1c0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d001      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e032      	b.n	800224a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d008      	beq.n	8002202 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021f0:	4b19      	ldr	r3, [pc, #100]	; (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	4916      	ldr	r1, [pc, #88]	; (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0308 	and.w	r3, r3, #8
 800220a:	2b00      	cmp	r3, #0
 800220c:	d009      	beq.n	8002222 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800220e:	4b12      	ldr	r3, [pc, #72]	; (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	490e      	ldr	r1, [pc, #56]	; (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 800221e:	4313      	orrs	r3, r2
 8002220:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002222:	f000 f821 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 8002226:	4602      	mov	r2, r0
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	490a      	ldr	r1, [pc, #40]	; (800225c <HAL_RCC_ClockConfig+0x1c8>)
 8002234:	5ccb      	ldrb	r3, [r1, r3]
 8002236:	fa22 f303 	lsr.w	r3, r2, r3
 800223a:	4a09      	ldr	r2, [pc, #36]	; (8002260 <HAL_RCC_ClockConfig+0x1cc>)
 800223c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800223e:	4b09      	ldr	r3, [pc, #36]	; (8002264 <HAL_RCC_ClockConfig+0x1d0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff f8c0 	bl	80013c8 <HAL_InitTick>

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40022000 	.word	0x40022000
 8002258:	40021000 	.word	0x40021000
 800225c:	080059f0 	.word	0x080059f0
 8002260:	20000000 	.word	0x20000000
 8002264:	20000004 	.word	0x20000004

08002268 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002268:	b490      	push	{r4, r7}
 800226a:	b08a      	sub	sp, #40	; 0x28
 800226c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800226e:	4b29      	ldr	r3, [pc, #164]	; (8002314 <HAL_RCC_GetSysClockFreq+0xac>)
 8002270:	1d3c      	adds	r4, r7, #4
 8002272:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002274:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002278:	f240 2301 	movw	r3, #513	; 0x201
 800227c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]
 8002282:	2300      	movs	r3, #0
 8002284:	61bb      	str	r3, [r7, #24]
 8002286:	2300      	movs	r3, #0
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800228e:	2300      	movs	r3, #0
 8002290:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002292:	4b21      	ldr	r3, [pc, #132]	; (8002318 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	f003 030c 	and.w	r3, r3, #12
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d002      	beq.n	80022a8 <HAL_RCC_GetSysClockFreq+0x40>
 80022a2:	2b08      	cmp	r3, #8
 80022a4:	d003      	beq.n	80022ae <HAL_RCC_GetSysClockFreq+0x46>
 80022a6:	e02b      	b.n	8002300 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022a8:	4b1c      	ldr	r3, [pc, #112]	; (800231c <HAL_RCC_GetSysClockFreq+0xb4>)
 80022aa:	623b      	str	r3, [r7, #32]
      break;
 80022ac:	e02b      	b.n	8002306 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	0c9b      	lsrs	r3, r3, #18
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	3328      	adds	r3, #40	; 0x28
 80022b8:	443b      	add	r3, r7
 80022ba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022be:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d012      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022ca:	4b13      	ldr	r3, [pc, #76]	; (8002318 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	0c5b      	lsrs	r3, r3, #17
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	3328      	adds	r3, #40	; 0x28
 80022d6:	443b      	add	r3, r7
 80022d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	4a0e      	ldr	r2, [pc, #56]	; (800231c <HAL_RCC_GetSysClockFreq+0xb4>)
 80022e2:	fb03 f202 	mul.w	r2, r3, r2
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
 80022ee:	e004      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	4a0b      	ldr	r2, [pc, #44]	; (8002320 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022f4:	fb02 f303 	mul.w	r3, r2, r3
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	623b      	str	r3, [r7, #32]
      break;
 80022fe:	e002      	b.n	8002306 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002300:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002302:	623b      	str	r3, [r7, #32]
      break;
 8002304:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002306:	6a3b      	ldr	r3, [r7, #32]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3728      	adds	r7, #40	; 0x28
 800230c:	46bd      	mov	sp, r7
 800230e:	bc90      	pop	{r4, r7}
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	080059d4 	.word	0x080059d4
 8002318:	40021000 	.word	0x40021000
 800231c:	007a1200 	.word	0x007a1200
 8002320:	003d0900 	.word	0x003d0900

08002324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002328:	4b02      	ldr	r3, [pc, #8]	; (8002334 <HAL_RCC_GetHCLKFreq+0x10>)
 800232a:	681b      	ldr	r3, [r3, #0]
}
 800232c:	4618      	mov	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	20000000 	.word	0x20000000

08002338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800233c:	f7ff fff2 	bl	8002324 <HAL_RCC_GetHCLKFreq>
 8002340:	4602      	mov	r2, r0
 8002342:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	0a1b      	lsrs	r3, r3, #8
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	4903      	ldr	r1, [pc, #12]	; (800235c <HAL_RCC_GetPCLK1Freq+0x24>)
 800234e:	5ccb      	ldrb	r3, [r1, r3]
 8002350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002354:	4618      	mov	r0, r3
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40021000 	.word	0x40021000
 800235c:	08005a00 	.word	0x08005a00

08002360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002364:	f7ff ffde 	bl	8002324 <HAL_RCC_GetHCLKFreq>
 8002368:	4602      	mov	r2, r0
 800236a:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_RCC_GetPCLK2Freq+0x20>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	0adb      	lsrs	r3, r3, #11
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	4903      	ldr	r1, [pc, #12]	; (8002384 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002376:	5ccb      	ldrb	r3, [r1, r3]
 8002378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800237c:	4618      	mov	r0, r3
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40021000 	.word	0x40021000
 8002384:	08005a00 	.word	0x08005a00

08002388 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002390:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <RCC_Delay+0x34>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a0a      	ldr	r2, [pc, #40]	; (80023c0 <RCC_Delay+0x38>)
 8002396:	fba2 2303 	umull	r2, r3, r2, r3
 800239a:	0a5b      	lsrs	r3, r3, #9
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	fb02 f303 	mul.w	r3, r2, r3
 80023a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023a4:	bf00      	nop
  }
  while (Delay --);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1e5a      	subs	r2, r3, #1
 80023aa:	60fa      	str	r2, [r7, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1f9      	bne.n	80023a4 <RCC_Delay+0x1c>
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	20000000 	.word	0x20000000
 80023c0:	10624dd3 	.word	0x10624dd3

080023c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e03f      	b.n	8002456 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d106      	bne.n	80023f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7fe fe3a 	bl	8001064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2224      	movs	r2, #36	; 0x24
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002406:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 fcc7 	bl	8002d9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	691a      	ldr	r2, [r3, #16]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800241c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800242c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800243c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2220      	movs	r2, #32
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b08a      	sub	sp, #40	; 0x28
 8002462:	af02      	add	r7, sp, #8
 8002464:	60f8      	str	r0, [r7, #12]
 8002466:	60b9      	str	r1, [r7, #8]
 8002468:	603b      	str	r3, [r7, #0]
 800246a:	4613      	mov	r3, r2
 800246c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b20      	cmp	r3, #32
 800247c:	d17c      	bne.n	8002578 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <HAL_UART_Transmit+0x2c>
 8002484:	88fb      	ldrh	r3, [r7, #6]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e075      	b.n	800257a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <HAL_UART_Transmit+0x3e>
 8002498:	2302      	movs	r3, #2
 800249a:	e06e      	b.n	800257a <HAL_UART_Transmit+0x11c>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2221      	movs	r2, #33	; 0x21
 80024ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024b2:	f7fe ffcb 	bl	800144c <HAL_GetTick>
 80024b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	88fa      	ldrh	r2, [r7, #6]
 80024bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	88fa      	ldrh	r2, [r7, #6]
 80024c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024cc:	d108      	bne.n	80024e0 <HAL_UART_Transmit+0x82>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d104      	bne.n	80024e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	61bb      	str	r3, [r7, #24]
 80024de:	e003      	b.n	80024e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80024f0:	e02a      	b.n	8002548 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2200      	movs	r2, #0
 80024fa:	2180      	movs	r1, #128	; 0x80
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 fab3 	bl	8002a68 <UART_WaitOnFlagUntilTimeout>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e036      	b.n	800257a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10b      	bne.n	800252a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002520:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	3302      	adds	r3, #2
 8002526:	61bb      	str	r3, [r7, #24]
 8002528:	e007      	b.n	800253a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	781a      	ldrb	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	3301      	adds	r3, #1
 8002538:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800253e:	b29b      	uxth	r3, r3
 8002540:	3b01      	subs	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800254c:	b29b      	uxth	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1cf      	bne.n	80024f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	2200      	movs	r2, #0
 800255a:	2140      	movs	r1, #64	; 0x40
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 fa83 	bl	8002a68 <UART_WaitOnFlagUntilTimeout>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e006      	b.n	800257a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002574:	2300      	movs	r3, #0
 8002576:	e000      	b.n	800257a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002578:	2302      	movs	r3, #2
  }
}
 800257a:	4618      	mov	r0, r3
 800257c:	3720      	adds	r7, #32
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b08a      	sub	sp, #40	; 0x28
 8002586:	af02      	add	r7, sp, #8
 8002588:	60f8      	str	r0, [r7, #12]
 800258a:	60b9      	str	r1, [r7, #8]
 800258c:	603b      	str	r3, [r7, #0]
 800258e:	4613      	mov	r3, r2
 8002590:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b20      	cmp	r3, #32
 80025a0:	f040 808c 	bne.w	80026bc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <HAL_UART_Receive+0x2e>
 80025aa:	88fb      	ldrh	r3, [r7, #6]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e084      	b.n	80026be <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d101      	bne.n	80025c2 <HAL_UART_Receive+0x40>
 80025be:	2302      	movs	r3, #2
 80025c0:	e07d      	b.n	80026be <HAL_UART_Receive+0x13c>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2222      	movs	r2, #34	; 0x22
 80025d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025de:	f7fe ff35 	bl	800144c <HAL_GetTick>
 80025e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	88fa      	ldrh	r2, [r7, #6]
 80025e8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	88fa      	ldrh	r2, [r7, #6]
 80025ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025f8:	d108      	bne.n	800260c <HAL_UART_Receive+0x8a>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d104      	bne.n	800260c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002602:	2300      	movs	r3, #0
 8002604:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	61bb      	str	r3, [r7, #24]
 800260a:	e003      	b.n	8002614 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002610:	2300      	movs	r3, #0
 8002612:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800261c:	e043      	b.n	80026a6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	2200      	movs	r2, #0
 8002626:	2120      	movs	r1, #32
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 fa1d 	bl	8002a68 <UART_WaitOnFlagUntilTimeout>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e042      	b.n	80026be <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10c      	bne.n	8002658 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	b29b      	uxth	r3, r3
 8002646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800264a:	b29a      	uxth	r2, r3
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	3302      	adds	r3, #2
 8002654:	61bb      	str	r3, [r7, #24]
 8002656:	e01f      	b.n	8002698 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002660:	d007      	beq.n	8002672 <HAL_UART_Receive+0xf0>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10a      	bne.n	8002680 <HAL_UART_Receive+0xfe>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d106      	bne.n	8002680 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	b2da      	uxtb	r2, r3
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	701a      	strb	r2, [r3, #0]
 800267e:	e008      	b.n	8002692 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800268c:	b2da      	uxtb	r2, r3
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3301      	adds	r3, #1
 8002696:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800269c:	b29b      	uxth	r3, r3
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1b6      	bne.n	800261e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	e000      	b.n	80026be <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80026bc:	2302      	movs	r3, #2
  }
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3720      	adds	r7, #32
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08a      	sub	sp, #40	; 0x28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10d      	bne.n	800271a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_UART_IRQHandler+0x52>
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	f003 0320 	and.w	r3, r3, #32
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 fa99 	bl	8002c4a <UART_Receive_IT>
      return;
 8002718:	e17b      	b.n	8002a12 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 80b1 	beq.w	8002884 <HAL_UART_IRQHandler+0x1bc>
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d105      	bne.n	8002738 <HAL_UART_IRQHandler+0x70>
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 80a6 	beq.w	8002884 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00a      	beq.n	8002758 <HAL_UART_IRQHandler+0x90>
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	f043 0201 	orr.w	r2, r3, #1
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <HAL_UART_IRQHandler+0xb0>
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	f043 0202 	orr.w	r2, r3, #2
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <HAL_UART_IRQHandler+0xd0>
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	f043 0204 	orr.w	r2, r3, #4
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00f      	beq.n	80027c2 <HAL_UART_IRQHandler+0xfa>
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	f003 0320 	and.w	r3, r3, #32
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d104      	bne.n	80027b6 <HAL_UART_IRQHandler+0xee>
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d005      	beq.n	80027c2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f043 0208 	orr.w	r2, r3, #8
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 811e 	beq.w	8002a08 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	f003 0320 	and.w	r3, r3, #32
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d007      	beq.n	80027e6 <HAL_UART_IRQHandler+0x11e>
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	f003 0320 	and.w	r3, r3, #32
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 fa32 	bl	8002c4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	bf14      	ite	ne
 80027f4:	2301      	movne	r3, #1
 80027f6:	2300      	moveq	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	2b00      	cmp	r3, #0
 8002806:	d102      	bne.n	800280e <HAL_UART_IRQHandler+0x146>
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d031      	beq.n	8002872 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f974 	bl	8002afc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	d023      	beq.n	800286a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	695a      	ldr	r2, [r3, #20]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002830:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002836:	2b00      	cmp	r3, #0
 8002838:	d013      	beq.n	8002862 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283e:	4a76      	ldr	r2, [pc, #472]	; (8002a18 <HAL_UART_IRQHandler+0x350>)
 8002840:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002846:	4618      	mov	r0, r3
 8002848:	f7fe ff76 	bl	8001738 <HAL_DMA_Abort_IT>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d016      	beq.n	8002880 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800285c:	4610      	mov	r0, r2
 800285e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002860:	e00e      	b.n	8002880 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f8ec 	bl	8002a40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002868:	e00a      	b.n	8002880 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f8e8 	bl	8002a40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002870:	e006      	b.n	8002880 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f8e4 	bl	8002a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800287e:	e0c3      	b.n	8002a08 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002880:	bf00      	nop
    return;
 8002882:	e0c1      	b.n	8002a08 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	2b01      	cmp	r3, #1
 800288a:	f040 80a1 	bne.w	80029d0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 809b 	beq.w	80029d0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	f003 0310 	and.w	r3, r3, #16
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 8095 	beq.w	80029d0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d04e      	beq.n	8002968 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80028d4:	8a3b      	ldrh	r3, [r7, #16]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 8098 	beq.w	8002a0c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80028e0:	8a3a      	ldrh	r2, [r7, #16]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	f080 8092 	bcs.w	8002a0c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	8a3a      	ldrh	r2, [r7, #16]
 80028ec:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	d02b      	beq.n	8002950 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002906:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	695a      	ldr	r2, [r3, #20]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0201 	bic.w	r2, r2, #1
 8002916:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695a      	ldr	r2, [r3, #20]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002926:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2220      	movs	r2, #32
 800292c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0210 	bic.w	r2, r2, #16
 8002944:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294a:	4618      	mov	r0, r3
 800294c:	f7fe feb9 	bl	80016c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002958:	b29b      	uxth	r3, r3
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	b29b      	uxth	r3, r3
 800295e:	4619      	mov	r1, r3
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f876 	bl	8002a52 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002966:	e051      	b.n	8002a0c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002970:	b29b      	uxth	r3, r3
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800297a:	b29b      	uxth	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	d047      	beq.n	8002a10 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002980:	8a7b      	ldrh	r3, [r7, #18]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d044      	beq.n	8002a10 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002994:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695a      	ldr	r2, [r3, #20]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0201 	bic.w	r2, r2, #1
 80029a4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2220      	movs	r2, #32
 80029aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0210 	bic.w	r2, r2, #16
 80029c2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029c4:	8a7b      	ldrh	r3, [r7, #18]
 80029c6:	4619      	mov	r1, r3
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f842 	bl	8002a52 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80029ce:	e01f      	b.n	8002a10 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d008      	beq.n	80029ec <HAL_UART_IRQHandler+0x324>
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f8c9 	bl	8002b7c <UART_Transmit_IT>
    return;
 80029ea:	e012      	b.n	8002a12 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00d      	beq.n	8002a12 <HAL_UART_IRQHandler+0x34a>
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d008      	beq.n	8002a12 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f90a 	bl	8002c1a <UART_EndTransmit_IT>
    return;
 8002a06:	e004      	b.n	8002a12 <HAL_UART_IRQHandler+0x34a>
    return;
 8002a08:	bf00      	nop
 8002a0a:	e002      	b.n	8002a12 <HAL_UART_IRQHandler+0x34a>
      return;
 8002a0c:	bf00      	nop
 8002a0e:	e000      	b.n	8002a12 <HAL_UART_IRQHandler+0x34a>
      return;
 8002a10:	bf00      	nop
  }
}
 8002a12:	3728      	adds	r7, #40	; 0x28
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	08002b55 	.word	0x08002b55

08002a1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr

08002a2e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr

08002a52 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr

08002a68 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	4613      	mov	r3, r2
 8002a76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a78:	e02c      	b.n	8002ad4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a80:	d028      	beq.n	8002ad4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d007      	beq.n	8002a98 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a88:	f7fe fce0 	bl	800144c <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d21d      	bcs.n	8002ad4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002aa6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	695a      	ldr	r2, [r3, #20]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0201 	bic.w	r2, r2, #1
 8002ab6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2220      	movs	r2, #32
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e00f      	b.n	8002af4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	4013      	ands	r3, r2
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	bf0c      	ite	eq
 8002ae4:	2301      	moveq	r3, #1
 8002ae6:	2300      	movne	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	461a      	mov	r2, r3
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d0c3      	beq.n	8002a7a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002b12:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0201 	bic.w	r2, r2, #1
 8002b22:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d107      	bne.n	8002b3c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0210 	bic.w	r2, r2, #16
 8002b3a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr

08002b54 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f7ff ff66 	bl	8002a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b74:	bf00      	nop
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b21      	cmp	r3, #33	; 0x21
 8002b8e:	d13e      	bne.n	8002c0e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b98:	d114      	bne.n	8002bc4 <UART_Transmit_IT+0x48>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d110      	bne.n	8002bc4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	461a      	mov	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bb6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	1c9a      	adds	r2, r3, #2
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	621a      	str	r2, [r3, #32]
 8002bc2:	e008      	b.n	8002bd6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	1c59      	adds	r1, r3, #1
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6211      	str	r1, [r2, #32]
 8002bce:	781a      	ldrb	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	4619      	mov	r1, r3
 8002be4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10f      	bne.n	8002c0a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bf8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c08:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e000      	b.n	8002c10 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c0e:	2302      	movs	r3, #2
  }
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2220      	movs	r2, #32
 8002c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7ff feee 	bl	8002a1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b086      	sub	sp, #24
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b22      	cmp	r3, #34	; 0x22
 8002c5c:	f040 8099 	bne.w	8002d92 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c68:	d117      	bne.n	8002c9a <UART_Receive_IT+0x50>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d113      	bne.n	8002c9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c92:	1c9a      	adds	r2, r3, #2
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	629a      	str	r2, [r3, #40]	; 0x28
 8002c98:	e026      	b.n	8002ce8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cac:	d007      	beq.n	8002cbe <UART_Receive_IT+0x74>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10a      	bne.n	8002ccc <UART_Receive_IT+0x82>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d106      	bne.n	8002ccc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	701a      	strb	r2, [r3, #0]
 8002cca:	e008      	b.n	8002cde <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d148      	bne.n	8002d8e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0220 	bic.w	r2, r2, #32
 8002d0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695a      	ldr	r2, [r3, #20]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0201 	bic.w	r2, r2, #1
 8002d2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d123      	bne.n	8002d84 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0210 	bic.w	r2, r2, #16
 8002d50:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0310 	and.w	r3, r3, #16
 8002d5c:	2b10      	cmp	r3, #16
 8002d5e:	d10a      	bne.n	8002d76 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d60:	2300      	movs	r3, #0
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7ff fe68 	bl	8002a52 <HAL_UARTEx_RxEventCallback>
 8002d82:	e002      	b.n	8002d8a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff fe52 	bl	8002a2e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	e002      	b.n	8002d94 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	e000      	b.n	8002d94 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002d92:	2302      	movs	r3, #2
  }
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002dd6:	f023 030c 	bic.w	r3, r3, #12
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6812      	ldr	r2, [r2, #0]
 8002dde:	68b9      	ldr	r1, [r7, #8]
 8002de0:	430b      	orrs	r3, r1
 8002de2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699a      	ldr	r2, [r3, #24]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a2c      	ldr	r2, [pc, #176]	; (8002eb0 <UART_SetConfig+0x114>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d103      	bne.n	8002e0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e04:	f7ff faac 	bl	8002360 <HAL_RCC_GetPCLK2Freq>
 8002e08:	60f8      	str	r0, [r7, #12]
 8002e0a:	e002      	b.n	8002e12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e0c:	f7ff fa94 	bl	8002338 <HAL_RCC_GetPCLK1Freq>
 8002e10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	4613      	mov	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	009a      	lsls	r2, r3, #2
 8002e1c:	441a      	add	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e28:	4a22      	ldr	r2, [pc, #136]	; (8002eb4 <UART_SetConfig+0x118>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	0119      	lsls	r1, r3, #4
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	4613      	mov	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	009a      	lsls	r2, r3, #2
 8002e3c:	441a      	add	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e48:	4b1a      	ldr	r3, [pc, #104]	; (8002eb4 <UART_SetConfig+0x118>)
 8002e4a:	fba3 0302 	umull	r0, r3, r3, r2
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	2064      	movs	r0, #100	; 0x64
 8002e52:	fb00 f303 	mul.w	r3, r0, r3
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	3332      	adds	r3, #50	; 0x32
 8002e5c:	4a15      	ldr	r2, [pc, #84]	; (8002eb4 <UART_SetConfig+0x118>)
 8002e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e62:	095b      	lsrs	r3, r3, #5
 8002e64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e68:	4419      	add	r1, r3
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	009a      	lsls	r2, r3, #2
 8002e74:	441a      	add	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e80:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <UART_SetConfig+0x118>)
 8002e82:	fba3 0302 	umull	r0, r3, r3, r2
 8002e86:	095b      	lsrs	r3, r3, #5
 8002e88:	2064      	movs	r0, #100	; 0x64
 8002e8a:	fb00 f303 	mul.w	r3, r0, r3
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	3332      	adds	r3, #50	; 0x32
 8002e94:	4a07      	ldr	r2, [pc, #28]	; (8002eb4 <UART_SetConfig+0x118>)
 8002e96:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9a:	095b      	lsrs	r3, r3, #5
 8002e9c:	f003 020f 	and.w	r2, r3, #15
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	440a      	add	r2, r1
 8002ea6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ea8:	bf00      	nop
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40013800 	.word	0x40013800
 8002eb4:	51eb851f 	.word	0x51eb851f

08002eb8 <__errno>:
 8002eb8:	4b01      	ldr	r3, [pc, #4]	; (8002ec0 <__errno+0x8>)
 8002eba:	6818      	ldr	r0, [r3, #0]
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	2000000c 	.word	0x2000000c

08002ec4 <__sflush_r>:
 8002ec4:	898a      	ldrh	r2, [r1, #12]
 8002ec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec8:	4605      	mov	r5, r0
 8002eca:	0710      	lsls	r0, r2, #28
 8002ecc:	460c      	mov	r4, r1
 8002ece:	d457      	bmi.n	8002f80 <__sflush_r+0xbc>
 8002ed0:	684b      	ldr	r3, [r1, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	dc04      	bgt.n	8002ee0 <__sflush_r+0x1c>
 8002ed6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	dc01      	bgt.n	8002ee0 <__sflush_r+0x1c>
 8002edc:	2000      	movs	r0, #0
 8002ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ee0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ee2:	2e00      	cmp	r6, #0
 8002ee4:	d0fa      	beq.n	8002edc <__sflush_r+0x18>
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002eec:	682f      	ldr	r7, [r5, #0]
 8002eee:	602b      	str	r3, [r5, #0]
 8002ef0:	d032      	beq.n	8002f58 <__sflush_r+0x94>
 8002ef2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ef4:	89a3      	ldrh	r3, [r4, #12]
 8002ef6:	075a      	lsls	r2, r3, #29
 8002ef8:	d505      	bpl.n	8002f06 <__sflush_r+0x42>
 8002efa:	6863      	ldr	r3, [r4, #4]
 8002efc:	1ac0      	subs	r0, r0, r3
 8002efe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f00:	b10b      	cbz	r3, 8002f06 <__sflush_r+0x42>
 8002f02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f04:	1ac0      	subs	r0, r0, r3
 8002f06:	2300      	movs	r3, #0
 8002f08:	4602      	mov	r2, r0
 8002f0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f0c:	4628      	mov	r0, r5
 8002f0e:	6a21      	ldr	r1, [r4, #32]
 8002f10:	47b0      	blx	r6
 8002f12:	1c43      	adds	r3, r0, #1
 8002f14:	89a3      	ldrh	r3, [r4, #12]
 8002f16:	d106      	bne.n	8002f26 <__sflush_r+0x62>
 8002f18:	6829      	ldr	r1, [r5, #0]
 8002f1a:	291d      	cmp	r1, #29
 8002f1c:	d82c      	bhi.n	8002f78 <__sflush_r+0xb4>
 8002f1e:	4a29      	ldr	r2, [pc, #164]	; (8002fc4 <__sflush_r+0x100>)
 8002f20:	40ca      	lsrs	r2, r1
 8002f22:	07d6      	lsls	r6, r2, #31
 8002f24:	d528      	bpl.n	8002f78 <__sflush_r+0xb4>
 8002f26:	2200      	movs	r2, #0
 8002f28:	6062      	str	r2, [r4, #4]
 8002f2a:	6922      	ldr	r2, [r4, #16]
 8002f2c:	04d9      	lsls	r1, r3, #19
 8002f2e:	6022      	str	r2, [r4, #0]
 8002f30:	d504      	bpl.n	8002f3c <__sflush_r+0x78>
 8002f32:	1c42      	adds	r2, r0, #1
 8002f34:	d101      	bne.n	8002f3a <__sflush_r+0x76>
 8002f36:	682b      	ldr	r3, [r5, #0]
 8002f38:	b903      	cbnz	r3, 8002f3c <__sflush_r+0x78>
 8002f3a:	6560      	str	r0, [r4, #84]	; 0x54
 8002f3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f3e:	602f      	str	r7, [r5, #0]
 8002f40:	2900      	cmp	r1, #0
 8002f42:	d0cb      	beq.n	8002edc <__sflush_r+0x18>
 8002f44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f48:	4299      	cmp	r1, r3
 8002f4a:	d002      	beq.n	8002f52 <__sflush_r+0x8e>
 8002f4c:	4628      	mov	r0, r5
 8002f4e:	f000 f9d9 	bl	8003304 <_free_r>
 8002f52:	2000      	movs	r0, #0
 8002f54:	6360      	str	r0, [r4, #52]	; 0x34
 8002f56:	e7c2      	b.n	8002ede <__sflush_r+0x1a>
 8002f58:	6a21      	ldr	r1, [r4, #32]
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	47b0      	blx	r6
 8002f60:	1c41      	adds	r1, r0, #1
 8002f62:	d1c7      	bne.n	8002ef4 <__sflush_r+0x30>
 8002f64:	682b      	ldr	r3, [r5, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0c4      	beq.n	8002ef4 <__sflush_r+0x30>
 8002f6a:	2b1d      	cmp	r3, #29
 8002f6c:	d001      	beq.n	8002f72 <__sflush_r+0xae>
 8002f6e:	2b16      	cmp	r3, #22
 8002f70:	d101      	bne.n	8002f76 <__sflush_r+0xb2>
 8002f72:	602f      	str	r7, [r5, #0]
 8002f74:	e7b2      	b.n	8002edc <__sflush_r+0x18>
 8002f76:	89a3      	ldrh	r3, [r4, #12]
 8002f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f7c:	81a3      	strh	r3, [r4, #12]
 8002f7e:	e7ae      	b.n	8002ede <__sflush_r+0x1a>
 8002f80:	690f      	ldr	r7, [r1, #16]
 8002f82:	2f00      	cmp	r7, #0
 8002f84:	d0aa      	beq.n	8002edc <__sflush_r+0x18>
 8002f86:	0793      	lsls	r3, r2, #30
 8002f88:	bf18      	it	ne
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	680e      	ldr	r6, [r1, #0]
 8002f8e:	bf08      	it	eq
 8002f90:	694b      	ldreq	r3, [r1, #20]
 8002f92:	1bf6      	subs	r6, r6, r7
 8002f94:	600f      	str	r7, [r1, #0]
 8002f96:	608b      	str	r3, [r1, #8]
 8002f98:	2e00      	cmp	r6, #0
 8002f9a:	dd9f      	ble.n	8002edc <__sflush_r+0x18>
 8002f9c:	4633      	mov	r3, r6
 8002f9e:	463a      	mov	r2, r7
 8002fa0:	4628      	mov	r0, r5
 8002fa2:	6a21      	ldr	r1, [r4, #32]
 8002fa4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002fa8:	47e0      	blx	ip
 8002faa:	2800      	cmp	r0, #0
 8002fac:	dc06      	bgt.n	8002fbc <__sflush_r+0xf8>
 8002fae:	89a3      	ldrh	r3, [r4, #12]
 8002fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fb8:	81a3      	strh	r3, [r4, #12]
 8002fba:	e790      	b.n	8002ede <__sflush_r+0x1a>
 8002fbc:	4407      	add	r7, r0
 8002fbe:	1a36      	subs	r6, r6, r0
 8002fc0:	e7ea      	b.n	8002f98 <__sflush_r+0xd4>
 8002fc2:	bf00      	nop
 8002fc4:	20400001 	.word	0x20400001

08002fc8 <_fflush_r>:
 8002fc8:	b538      	push	{r3, r4, r5, lr}
 8002fca:	690b      	ldr	r3, [r1, #16]
 8002fcc:	4605      	mov	r5, r0
 8002fce:	460c      	mov	r4, r1
 8002fd0:	b913      	cbnz	r3, 8002fd8 <_fflush_r+0x10>
 8002fd2:	2500      	movs	r5, #0
 8002fd4:	4628      	mov	r0, r5
 8002fd6:	bd38      	pop	{r3, r4, r5, pc}
 8002fd8:	b118      	cbz	r0, 8002fe2 <_fflush_r+0x1a>
 8002fda:	6983      	ldr	r3, [r0, #24]
 8002fdc:	b90b      	cbnz	r3, 8002fe2 <_fflush_r+0x1a>
 8002fde:	f000 f899 	bl	8003114 <__sinit>
 8002fe2:	4b14      	ldr	r3, [pc, #80]	; (8003034 <_fflush_r+0x6c>)
 8002fe4:	429c      	cmp	r4, r3
 8002fe6:	d11b      	bne.n	8003020 <_fflush_r+0x58>
 8002fe8:	686c      	ldr	r4, [r5, #4]
 8002fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0ef      	beq.n	8002fd2 <_fflush_r+0xa>
 8002ff2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002ff4:	07d0      	lsls	r0, r2, #31
 8002ff6:	d404      	bmi.n	8003002 <_fflush_r+0x3a>
 8002ff8:	0599      	lsls	r1, r3, #22
 8002ffa:	d402      	bmi.n	8003002 <_fflush_r+0x3a>
 8002ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ffe:	f000 f968 	bl	80032d2 <__retarget_lock_acquire_recursive>
 8003002:	4628      	mov	r0, r5
 8003004:	4621      	mov	r1, r4
 8003006:	f7ff ff5d 	bl	8002ec4 <__sflush_r>
 800300a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800300c:	4605      	mov	r5, r0
 800300e:	07da      	lsls	r2, r3, #31
 8003010:	d4e0      	bmi.n	8002fd4 <_fflush_r+0xc>
 8003012:	89a3      	ldrh	r3, [r4, #12]
 8003014:	059b      	lsls	r3, r3, #22
 8003016:	d4dd      	bmi.n	8002fd4 <_fflush_r+0xc>
 8003018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800301a:	f000 f95b 	bl	80032d4 <__retarget_lock_release_recursive>
 800301e:	e7d9      	b.n	8002fd4 <_fflush_r+0xc>
 8003020:	4b05      	ldr	r3, [pc, #20]	; (8003038 <_fflush_r+0x70>)
 8003022:	429c      	cmp	r4, r3
 8003024:	d101      	bne.n	800302a <_fflush_r+0x62>
 8003026:	68ac      	ldr	r4, [r5, #8]
 8003028:	e7df      	b.n	8002fea <_fflush_r+0x22>
 800302a:	4b04      	ldr	r3, [pc, #16]	; (800303c <_fflush_r+0x74>)
 800302c:	429c      	cmp	r4, r3
 800302e:	bf08      	it	eq
 8003030:	68ec      	ldreq	r4, [r5, #12]
 8003032:	e7da      	b.n	8002fea <_fflush_r+0x22>
 8003034:	08005a28 	.word	0x08005a28
 8003038:	08005a48 	.word	0x08005a48
 800303c:	08005a08 	.word	0x08005a08

08003040 <fflush>:
 8003040:	4601      	mov	r1, r0
 8003042:	b920      	cbnz	r0, 800304e <fflush+0xe>
 8003044:	4b04      	ldr	r3, [pc, #16]	; (8003058 <fflush+0x18>)
 8003046:	4905      	ldr	r1, [pc, #20]	; (800305c <fflush+0x1c>)
 8003048:	6818      	ldr	r0, [r3, #0]
 800304a:	f000 b8fe 	b.w	800324a <_fwalk_reent>
 800304e:	4b04      	ldr	r3, [pc, #16]	; (8003060 <fflush+0x20>)
 8003050:	6818      	ldr	r0, [r3, #0]
 8003052:	f7ff bfb9 	b.w	8002fc8 <_fflush_r>
 8003056:	bf00      	nop
 8003058:	08005a68 	.word	0x08005a68
 800305c:	08002fc9 	.word	0x08002fc9
 8003060:	2000000c 	.word	0x2000000c

08003064 <std>:
 8003064:	2300      	movs	r3, #0
 8003066:	b510      	push	{r4, lr}
 8003068:	4604      	mov	r4, r0
 800306a:	e9c0 3300 	strd	r3, r3, [r0]
 800306e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003072:	6083      	str	r3, [r0, #8]
 8003074:	8181      	strh	r1, [r0, #12]
 8003076:	6643      	str	r3, [r0, #100]	; 0x64
 8003078:	81c2      	strh	r2, [r0, #14]
 800307a:	6183      	str	r3, [r0, #24]
 800307c:	4619      	mov	r1, r3
 800307e:	2208      	movs	r2, #8
 8003080:	305c      	adds	r0, #92	; 0x5c
 8003082:	f000 f936 	bl	80032f2 <memset>
 8003086:	4b05      	ldr	r3, [pc, #20]	; (800309c <std+0x38>)
 8003088:	6224      	str	r4, [r4, #32]
 800308a:	6263      	str	r3, [r4, #36]	; 0x24
 800308c:	4b04      	ldr	r3, [pc, #16]	; (80030a0 <std+0x3c>)
 800308e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003090:	4b04      	ldr	r3, [pc, #16]	; (80030a4 <std+0x40>)
 8003092:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003094:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <std+0x44>)
 8003096:	6323      	str	r3, [r4, #48]	; 0x30
 8003098:	bd10      	pop	{r4, pc}
 800309a:	bf00      	nop
 800309c:	080037f5 	.word	0x080037f5
 80030a0:	08003817 	.word	0x08003817
 80030a4:	0800384f 	.word	0x0800384f
 80030a8:	08003873 	.word	0x08003873

080030ac <_cleanup_r>:
 80030ac:	4901      	ldr	r1, [pc, #4]	; (80030b4 <_cleanup_r+0x8>)
 80030ae:	f000 b8cc 	b.w	800324a <_fwalk_reent>
 80030b2:	bf00      	nop
 80030b4:	08002fc9 	.word	0x08002fc9

080030b8 <__sfmoreglue>:
 80030b8:	2268      	movs	r2, #104	; 0x68
 80030ba:	b570      	push	{r4, r5, r6, lr}
 80030bc:	1e4d      	subs	r5, r1, #1
 80030be:	4355      	muls	r5, r2
 80030c0:	460e      	mov	r6, r1
 80030c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80030c6:	f000 f985 	bl	80033d4 <_malloc_r>
 80030ca:	4604      	mov	r4, r0
 80030cc:	b140      	cbz	r0, 80030e0 <__sfmoreglue+0x28>
 80030ce:	2100      	movs	r1, #0
 80030d0:	e9c0 1600 	strd	r1, r6, [r0]
 80030d4:	300c      	adds	r0, #12
 80030d6:	60a0      	str	r0, [r4, #8]
 80030d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80030dc:	f000 f909 	bl	80032f2 <memset>
 80030e0:	4620      	mov	r0, r4
 80030e2:	bd70      	pop	{r4, r5, r6, pc}

080030e4 <__sfp_lock_acquire>:
 80030e4:	4801      	ldr	r0, [pc, #4]	; (80030ec <__sfp_lock_acquire+0x8>)
 80030e6:	f000 b8f4 	b.w	80032d2 <__retarget_lock_acquire_recursive>
 80030ea:	bf00      	nop
 80030ec:	2000011d 	.word	0x2000011d

080030f0 <__sfp_lock_release>:
 80030f0:	4801      	ldr	r0, [pc, #4]	; (80030f8 <__sfp_lock_release+0x8>)
 80030f2:	f000 b8ef 	b.w	80032d4 <__retarget_lock_release_recursive>
 80030f6:	bf00      	nop
 80030f8:	2000011d 	.word	0x2000011d

080030fc <__sinit_lock_acquire>:
 80030fc:	4801      	ldr	r0, [pc, #4]	; (8003104 <__sinit_lock_acquire+0x8>)
 80030fe:	f000 b8e8 	b.w	80032d2 <__retarget_lock_acquire_recursive>
 8003102:	bf00      	nop
 8003104:	2000011e 	.word	0x2000011e

08003108 <__sinit_lock_release>:
 8003108:	4801      	ldr	r0, [pc, #4]	; (8003110 <__sinit_lock_release+0x8>)
 800310a:	f000 b8e3 	b.w	80032d4 <__retarget_lock_release_recursive>
 800310e:	bf00      	nop
 8003110:	2000011e 	.word	0x2000011e

08003114 <__sinit>:
 8003114:	b510      	push	{r4, lr}
 8003116:	4604      	mov	r4, r0
 8003118:	f7ff fff0 	bl	80030fc <__sinit_lock_acquire>
 800311c:	69a3      	ldr	r3, [r4, #24]
 800311e:	b11b      	cbz	r3, 8003128 <__sinit+0x14>
 8003120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003124:	f7ff bff0 	b.w	8003108 <__sinit_lock_release>
 8003128:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800312c:	6523      	str	r3, [r4, #80]	; 0x50
 800312e:	4b13      	ldr	r3, [pc, #76]	; (800317c <__sinit+0x68>)
 8003130:	4a13      	ldr	r2, [pc, #76]	; (8003180 <__sinit+0x6c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	62a2      	str	r2, [r4, #40]	; 0x28
 8003136:	42a3      	cmp	r3, r4
 8003138:	bf08      	it	eq
 800313a:	2301      	moveq	r3, #1
 800313c:	4620      	mov	r0, r4
 800313e:	bf08      	it	eq
 8003140:	61a3      	streq	r3, [r4, #24]
 8003142:	f000 f81f 	bl	8003184 <__sfp>
 8003146:	6060      	str	r0, [r4, #4]
 8003148:	4620      	mov	r0, r4
 800314a:	f000 f81b 	bl	8003184 <__sfp>
 800314e:	60a0      	str	r0, [r4, #8]
 8003150:	4620      	mov	r0, r4
 8003152:	f000 f817 	bl	8003184 <__sfp>
 8003156:	2200      	movs	r2, #0
 8003158:	2104      	movs	r1, #4
 800315a:	60e0      	str	r0, [r4, #12]
 800315c:	6860      	ldr	r0, [r4, #4]
 800315e:	f7ff ff81 	bl	8003064 <std>
 8003162:	2201      	movs	r2, #1
 8003164:	2109      	movs	r1, #9
 8003166:	68a0      	ldr	r0, [r4, #8]
 8003168:	f7ff ff7c 	bl	8003064 <std>
 800316c:	2202      	movs	r2, #2
 800316e:	2112      	movs	r1, #18
 8003170:	68e0      	ldr	r0, [r4, #12]
 8003172:	f7ff ff77 	bl	8003064 <std>
 8003176:	2301      	movs	r3, #1
 8003178:	61a3      	str	r3, [r4, #24]
 800317a:	e7d1      	b.n	8003120 <__sinit+0xc>
 800317c:	08005a68 	.word	0x08005a68
 8003180:	080030ad 	.word	0x080030ad

08003184 <__sfp>:
 8003184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003186:	4607      	mov	r7, r0
 8003188:	f7ff ffac 	bl	80030e4 <__sfp_lock_acquire>
 800318c:	4b1e      	ldr	r3, [pc, #120]	; (8003208 <__sfp+0x84>)
 800318e:	681e      	ldr	r6, [r3, #0]
 8003190:	69b3      	ldr	r3, [r6, #24]
 8003192:	b913      	cbnz	r3, 800319a <__sfp+0x16>
 8003194:	4630      	mov	r0, r6
 8003196:	f7ff ffbd 	bl	8003114 <__sinit>
 800319a:	3648      	adds	r6, #72	; 0x48
 800319c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80031a0:	3b01      	subs	r3, #1
 80031a2:	d503      	bpl.n	80031ac <__sfp+0x28>
 80031a4:	6833      	ldr	r3, [r6, #0]
 80031a6:	b30b      	cbz	r3, 80031ec <__sfp+0x68>
 80031a8:	6836      	ldr	r6, [r6, #0]
 80031aa:	e7f7      	b.n	800319c <__sfp+0x18>
 80031ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80031b0:	b9d5      	cbnz	r5, 80031e8 <__sfp+0x64>
 80031b2:	4b16      	ldr	r3, [pc, #88]	; (800320c <__sfp+0x88>)
 80031b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80031b8:	60e3      	str	r3, [r4, #12]
 80031ba:	6665      	str	r5, [r4, #100]	; 0x64
 80031bc:	f000 f888 	bl	80032d0 <__retarget_lock_init_recursive>
 80031c0:	f7ff ff96 	bl	80030f0 <__sfp_lock_release>
 80031c4:	2208      	movs	r2, #8
 80031c6:	4629      	mov	r1, r5
 80031c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80031cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80031d0:	6025      	str	r5, [r4, #0]
 80031d2:	61a5      	str	r5, [r4, #24]
 80031d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80031d8:	f000 f88b 	bl	80032f2 <memset>
 80031dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80031e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80031e4:	4620      	mov	r0, r4
 80031e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031e8:	3468      	adds	r4, #104	; 0x68
 80031ea:	e7d9      	b.n	80031a0 <__sfp+0x1c>
 80031ec:	2104      	movs	r1, #4
 80031ee:	4638      	mov	r0, r7
 80031f0:	f7ff ff62 	bl	80030b8 <__sfmoreglue>
 80031f4:	4604      	mov	r4, r0
 80031f6:	6030      	str	r0, [r6, #0]
 80031f8:	2800      	cmp	r0, #0
 80031fa:	d1d5      	bne.n	80031a8 <__sfp+0x24>
 80031fc:	f7ff ff78 	bl	80030f0 <__sfp_lock_release>
 8003200:	230c      	movs	r3, #12
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	e7ee      	b.n	80031e4 <__sfp+0x60>
 8003206:	bf00      	nop
 8003208:	08005a68 	.word	0x08005a68
 800320c:	ffff0001 	.word	0xffff0001

08003210 <_fwalk>:
 8003210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003214:	460f      	mov	r7, r1
 8003216:	2600      	movs	r6, #0
 8003218:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800321c:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8003220:	f1b8 0801 	subs.w	r8, r8, #1
 8003224:	d505      	bpl.n	8003232 <_fwalk+0x22>
 8003226:	6824      	ldr	r4, [r4, #0]
 8003228:	2c00      	cmp	r4, #0
 800322a:	d1f7      	bne.n	800321c <_fwalk+0xc>
 800322c:	4630      	mov	r0, r6
 800322e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003232:	89ab      	ldrh	r3, [r5, #12]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d906      	bls.n	8003246 <_fwalk+0x36>
 8003238:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800323c:	3301      	adds	r3, #1
 800323e:	d002      	beq.n	8003246 <_fwalk+0x36>
 8003240:	4628      	mov	r0, r5
 8003242:	47b8      	blx	r7
 8003244:	4306      	orrs	r6, r0
 8003246:	3568      	adds	r5, #104	; 0x68
 8003248:	e7ea      	b.n	8003220 <_fwalk+0x10>

0800324a <_fwalk_reent>:
 800324a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800324e:	4606      	mov	r6, r0
 8003250:	4688      	mov	r8, r1
 8003252:	2700      	movs	r7, #0
 8003254:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003258:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800325c:	f1b9 0901 	subs.w	r9, r9, #1
 8003260:	d505      	bpl.n	800326e <_fwalk_reent+0x24>
 8003262:	6824      	ldr	r4, [r4, #0]
 8003264:	2c00      	cmp	r4, #0
 8003266:	d1f7      	bne.n	8003258 <_fwalk_reent+0xe>
 8003268:	4638      	mov	r0, r7
 800326a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800326e:	89ab      	ldrh	r3, [r5, #12]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d907      	bls.n	8003284 <_fwalk_reent+0x3a>
 8003274:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003278:	3301      	adds	r3, #1
 800327a:	d003      	beq.n	8003284 <_fwalk_reent+0x3a>
 800327c:	4629      	mov	r1, r5
 800327e:	4630      	mov	r0, r6
 8003280:	47c0      	blx	r8
 8003282:	4307      	orrs	r7, r0
 8003284:	3568      	adds	r5, #104	; 0x68
 8003286:	e7e9      	b.n	800325c <_fwalk_reent+0x12>

08003288 <__libc_init_array>:
 8003288:	b570      	push	{r4, r5, r6, lr}
 800328a:	2600      	movs	r6, #0
 800328c:	4d0c      	ldr	r5, [pc, #48]	; (80032c0 <__libc_init_array+0x38>)
 800328e:	4c0d      	ldr	r4, [pc, #52]	; (80032c4 <__libc_init_array+0x3c>)
 8003290:	1b64      	subs	r4, r4, r5
 8003292:	10a4      	asrs	r4, r4, #2
 8003294:	42a6      	cmp	r6, r4
 8003296:	d109      	bne.n	80032ac <__libc_init_array+0x24>
 8003298:	f001 ff16 	bl	80050c8 <_init>
 800329c:	2600      	movs	r6, #0
 800329e:	4d0a      	ldr	r5, [pc, #40]	; (80032c8 <__libc_init_array+0x40>)
 80032a0:	4c0a      	ldr	r4, [pc, #40]	; (80032cc <__libc_init_array+0x44>)
 80032a2:	1b64      	subs	r4, r4, r5
 80032a4:	10a4      	asrs	r4, r4, #2
 80032a6:	42a6      	cmp	r6, r4
 80032a8:	d105      	bne.n	80032b6 <__libc_init_array+0x2e>
 80032aa:	bd70      	pop	{r4, r5, r6, pc}
 80032ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b0:	4798      	blx	r3
 80032b2:	3601      	adds	r6, #1
 80032b4:	e7ee      	b.n	8003294 <__libc_init_array+0xc>
 80032b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ba:	4798      	blx	r3
 80032bc:	3601      	adds	r6, #1
 80032be:	e7f2      	b.n	80032a6 <__libc_init_array+0x1e>
 80032c0:	08005bbc 	.word	0x08005bbc
 80032c4:	08005bbc 	.word	0x08005bbc
 80032c8:	08005bbc 	.word	0x08005bbc
 80032cc:	08005bc0 	.word	0x08005bc0

080032d0 <__retarget_lock_init_recursive>:
 80032d0:	4770      	bx	lr

080032d2 <__retarget_lock_acquire_recursive>:
 80032d2:	4770      	bx	lr

080032d4 <__retarget_lock_release_recursive>:
 80032d4:	4770      	bx	lr

080032d6 <memcpy>:
 80032d6:	440a      	add	r2, r1
 80032d8:	4291      	cmp	r1, r2
 80032da:	f100 33ff 	add.w	r3, r0, #4294967295
 80032de:	d100      	bne.n	80032e2 <memcpy+0xc>
 80032e0:	4770      	bx	lr
 80032e2:	b510      	push	{r4, lr}
 80032e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032e8:	4291      	cmp	r1, r2
 80032ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032ee:	d1f9      	bne.n	80032e4 <memcpy+0xe>
 80032f0:	bd10      	pop	{r4, pc}

080032f2 <memset>:
 80032f2:	4603      	mov	r3, r0
 80032f4:	4402      	add	r2, r0
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d100      	bne.n	80032fc <memset+0xa>
 80032fa:	4770      	bx	lr
 80032fc:	f803 1b01 	strb.w	r1, [r3], #1
 8003300:	e7f9      	b.n	80032f6 <memset+0x4>
	...

08003304 <_free_r>:
 8003304:	b538      	push	{r3, r4, r5, lr}
 8003306:	4605      	mov	r5, r0
 8003308:	2900      	cmp	r1, #0
 800330a:	d040      	beq.n	800338e <_free_r+0x8a>
 800330c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003310:	1f0c      	subs	r4, r1, #4
 8003312:	2b00      	cmp	r3, #0
 8003314:	bfb8      	it	lt
 8003316:	18e4      	addlt	r4, r4, r3
 8003318:	f000 fc3c 	bl	8003b94 <__malloc_lock>
 800331c:	4a1c      	ldr	r2, [pc, #112]	; (8003390 <_free_r+0x8c>)
 800331e:	6813      	ldr	r3, [r2, #0]
 8003320:	b933      	cbnz	r3, 8003330 <_free_r+0x2c>
 8003322:	6063      	str	r3, [r4, #4]
 8003324:	6014      	str	r4, [r2, #0]
 8003326:	4628      	mov	r0, r5
 8003328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800332c:	f000 bc38 	b.w	8003ba0 <__malloc_unlock>
 8003330:	42a3      	cmp	r3, r4
 8003332:	d908      	bls.n	8003346 <_free_r+0x42>
 8003334:	6820      	ldr	r0, [r4, #0]
 8003336:	1821      	adds	r1, r4, r0
 8003338:	428b      	cmp	r3, r1
 800333a:	bf01      	itttt	eq
 800333c:	6819      	ldreq	r1, [r3, #0]
 800333e:	685b      	ldreq	r3, [r3, #4]
 8003340:	1809      	addeq	r1, r1, r0
 8003342:	6021      	streq	r1, [r4, #0]
 8003344:	e7ed      	b.n	8003322 <_free_r+0x1e>
 8003346:	461a      	mov	r2, r3
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	b10b      	cbz	r3, 8003350 <_free_r+0x4c>
 800334c:	42a3      	cmp	r3, r4
 800334e:	d9fa      	bls.n	8003346 <_free_r+0x42>
 8003350:	6811      	ldr	r1, [r2, #0]
 8003352:	1850      	adds	r0, r2, r1
 8003354:	42a0      	cmp	r0, r4
 8003356:	d10b      	bne.n	8003370 <_free_r+0x6c>
 8003358:	6820      	ldr	r0, [r4, #0]
 800335a:	4401      	add	r1, r0
 800335c:	1850      	adds	r0, r2, r1
 800335e:	4283      	cmp	r3, r0
 8003360:	6011      	str	r1, [r2, #0]
 8003362:	d1e0      	bne.n	8003326 <_free_r+0x22>
 8003364:	6818      	ldr	r0, [r3, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	4401      	add	r1, r0
 800336a:	6011      	str	r1, [r2, #0]
 800336c:	6053      	str	r3, [r2, #4]
 800336e:	e7da      	b.n	8003326 <_free_r+0x22>
 8003370:	d902      	bls.n	8003378 <_free_r+0x74>
 8003372:	230c      	movs	r3, #12
 8003374:	602b      	str	r3, [r5, #0]
 8003376:	e7d6      	b.n	8003326 <_free_r+0x22>
 8003378:	6820      	ldr	r0, [r4, #0]
 800337a:	1821      	adds	r1, r4, r0
 800337c:	428b      	cmp	r3, r1
 800337e:	bf01      	itttt	eq
 8003380:	6819      	ldreq	r1, [r3, #0]
 8003382:	685b      	ldreq	r3, [r3, #4]
 8003384:	1809      	addeq	r1, r1, r0
 8003386:	6021      	streq	r1, [r4, #0]
 8003388:	6063      	str	r3, [r4, #4]
 800338a:	6054      	str	r4, [r2, #4]
 800338c:	e7cb      	b.n	8003326 <_free_r+0x22>
 800338e:	bd38      	pop	{r3, r4, r5, pc}
 8003390:	20000120 	.word	0x20000120

08003394 <sbrk_aligned>:
 8003394:	b570      	push	{r4, r5, r6, lr}
 8003396:	4e0e      	ldr	r6, [pc, #56]	; (80033d0 <sbrk_aligned+0x3c>)
 8003398:	460c      	mov	r4, r1
 800339a:	6831      	ldr	r1, [r6, #0]
 800339c:	4605      	mov	r5, r0
 800339e:	b911      	cbnz	r1, 80033a6 <sbrk_aligned+0x12>
 80033a0:	f000 f91a 	bl	80035d8 <_sbrk_r>
 80033a4:	6030      	str	r0, [r6, #0]
 80033a6:	4621      	mov	r1, r4
 80033a8:	4628      	mov	r0, r5
 80033aa:	f000 f915 	bl	80035d8 <_sbrk_r>
 80033ae:	1c43      	adds	r3, r0, #1
 80033b0:	d00a      	beq.n	80033c8 <sbrk_aligned+0x34>
 80033b2:	1cc4      	adds	r4, r0, #3
 80033b4:	f024 0403 	bic.w	r4, r4, #3
 80033b8:	42a0      	cmp	r0, r4
 80033ba:	d007      	beq.n	80033cc <sbrk_aligned+0x38>
 80033bc:	1a21      	subs	r1, r4, r0
 80033be:	4628      	mov	r0, r5
 80033c0:	f000 f90a 	bl	80035d8 <_sbrk_r>
 80033c4:	3001      	adds	r0, #1
 80033c6:	d101      	bne.n	80033cc <sbrk_aligned+0x38>
 80033c8:	f04f 34ff 	mov.w	r4, #4294967295
 80033cc:	4620      	mov	r0, r4
 80033ce:	bd70      	pop	{r4, r5, r6, pc}
 80033d0:	20000124 	.word	0x20000124

080033d4 <_malloc_r>:
 80033d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033d8:	1ccd      	adds	r5, r1, #3
 80033da:	f025 0503 	bic.w	r5, r5, #3
 80033de:	3508      	adds	r5, #8
 80033e0:	2d0c      	cmp	r5, #12
 80033e2:	bf38      	it	cc
 80033e4:	250c      	movcc	r5, #12
 80033e6:	2d00      	cmp	r5, #0
 80033e8:	4607      	mov	r7, r0
 80033ea:	db01      	blt.n	80033f0 <_malloc_r+0x1c>
 80033ec:	42a9      	cmp	r1, r5
 80033ee:	d905      	bls.n	80033fc <_malloc_r+0x28>
 80033f0:	230c      	movs	r3, #12
 80033f2:	2600      	movs	r6, #0
 80033f4:	603b      	str	r3, [r7, #0]
 80033f6:	4630      	mov	r0, r6
 80033f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033fc:	4e2e      	ldr	r6, [pc, #184]	; (80034b8 <_malloc_r+0xe4>)
 80033fe:	f000 fbc9 	bl	8003b94 <__malloc_lock>
 8003402:	6833      	ldr	r3, [r6, #0]
 8003404:	461c      	mov	r4, r3
 8003406:	bb34      	cbnz	r4, 8003456 <_malloc_r+0x82>
 8003408:	4629      	mov	r1, r5
 800340a:	4638      	mov	r0, r7
 800340c:	f7ff ffc2 	bl	8003394 <sbrk_aligned>
 8003410:	1c43      	adds	r3, r0, #1
 8003412:	4604      	mov	r4, r0
 8003414:	d14d      	bne.n	80034b2 <_malloc_r+0xde>
 8003416:	6834      	ldr	r4, [r6, #0]
 8003418:	4626      	mov	r6, r4
 800341a:	2e00      	cmp	r6, #0
 800341c:	d140      	bne.n	80034a0 <_malloc_r+0xcc>
 800341e:	6823      	ldr	r3, [r4, #0]
 8003420:	4631      	mov	r1, r6
 8003422:	4638      	mov	r0, r7
 8003424:	eb04 0803 	add.w	r8, r4, r3
 8003428:	f000 f8d6 	bl	80035d8 <_sbrk_r>
 800342c:	4580      	cmp	r8, r0
 800342e:	d13a      	bne.n	80034a6 <_malloc_r+0xd2>
 8003430:	6821      	ldr	r1, [r4, #0]
 8003432:	3503      	adds	r5, #3
 8003434:	1a6d      	subs	r5, r5, r1
 8003436:	f025 0503 	bic.w	r5, r5, #3
 800343a:	3508      	adds	r5, #8
 800343c:	2d0c      	cmp	r5, #12
 800343e:	bf38      	it	cc
 8003440:	250c      	movcc	r5, #12
 8003442:	4638      	mov	r0, r7
 8003444:	4629      	mov	r1, r5
 8003446:	f7ff ffa5 	bl	8003394 <sbrk_aligned>
 800344a:	3001      	adds	r0, #1
 800344c:	d02b      	beq.n	80034a6 <_malloc_r+0xd2>
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	442b      	add	r3, r5
 8003452:	6023      	str	r3, [r4, #0]
 8003454:	e00e      	b.n	8003474 <_malloc_r+0xa0>
 8003456:	6822      	ldr	r2, [r4, #0]
 8003458:	1b52      	subs	r2, r2, r5
 800345a:	d41e      	bmi.n	800349a <_malloc_r+0xc6>
 800345c:	2a0b      	cmp	r2, #11
 800345e:	d916      	bls.n	800348e <_malloc_r+0xba>
 8003460:	1961      	adds	r1, r4, r5
 8003462:	42a3      	cmp	r3, r4
 8003464:	6025      	str	r5, [r4, #0]
 8003466:	bf18      	it	ne
 8003468:	6059      	strne	r1, [r3, #4]
 800346a:	6863      	ldr	r3, [r4, #4]
 800346c:	bf08      	it	eq
 800346e:	6031      	streq	r1, [r6, #0]
 8003470:	5162      	str	r2, [r4, r5]
 8003472:	604b      	str	r3, [r1, #4]
 8003474:	4638      	mov	r0, r7
 8003476:	f104 060b 	add.w	r6, r4, #11
 800347a:	f000 fb91 	bl	8003ba0 <__malloc_unlock>
 800347e:	f026 0607 	bic.w	r6, r6, #7
 8003482:	1d23      	adds	r3, r4, #4
 8003484:	1af2      	subs	r2, r6, r3
 8003486:	d0b6      	beq.n	80033f6 <_malloc_r+0x22>
 8003488:	1b9b      	subs	r3, r3, r6
 800348a:	50a3      	str	r3, [r4, r2]
 800348c:	e7b3      	b.n	80033f6 <_malloc_r+0x22>
 800348e:	6862      	ldr	r2, [r4, #4]
 8003490:	42a3      	cmp	r3, r4
 8003492:	bf0c      	ite	eq
 8003494:	6032      	streq	r2, [r6, #0]
 8003496:	605a      	strne	r2, [r3, #4]
 8003498:	e7ec      	b.n	8003474 <_malloc_r+0xa0>
 800349a:	4623      	mov	r3, r4
 800349c:	6864      	ldr	r4, [r4, #4]
 800349e:	e7b2      	b.n	8003406 <_malloc_r+0x32>
 80034a0:	4634      	mov	r4, r6
 80034a2:	6876      	ldr	r6, [r6, #4]
 80034a4:	e7b9      	b.n	800341a <_malloc_r+0x46>
 80034a6:	230c      	movs	r3, #12
 80034a8:	4638      	mov	r0, r7
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	f000 fb78 	bl	8003ba0 <__malloc_unlock>
 80034b0:	e7a1      	b.n	80033f6 <_malloc_r+0x22>
 80034b2:	6025      	str	r5, [r4, #0]
 80034b4:	e7de      	b.n	8003474 <_malloc_r+0xa0>
 80034b6:	bf00      	nop
 80034b8:	20000120 	.word	0x20000120

080034bc <iprintf>:
 80034bc:	b40f      	push	{r0, r1, r2, r3}
 80034be:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <iprintf+0x2c>)
 80034c0:	b513      	push	{r0, r1, r4, lr}
 80034c2:	681c      	ldr	r4, [r3, #0]
 80034c4:	b124      	cbz	r4, 80034d0 <iprintf+0x14>
 80034c6:	69a3      	ldr	r3, [r4, #24]
 80034c8:	b913      	cbnz	r3, 80034d0 <iprintf+0x14>
 80034ca:	4620      	mov	r0, r4
 80034cc:	f7ff fe22 	bl	8003114 <__sinit>
 80034d0:	ab05      	add	r3, sp, #20
 80034d2:	4620      	mov	r0, r4
 80034d4:	9a04      	ldr	r2, [sp, #16]
 80034d6:	68a1      	ldr	r1, [r4, #8]
 80034d8:	9301      	str	r3, [sp, #4]
 80034da:	f000 fceb 	bl	8003eb4 <_vfiprintf_r>
 80034de:	b002      	add	sp, #8
 80034e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034e4:	b004      	add	sp, #16
 80034e6:	4770      	bx	lr
 80034e8:	2000000c 	.word	0x2000000c

080034ec <_puts_r>:
 80034ec:	b570      	push	{r4, r5, r6, lr}
 80034ee:	460e      	mov	r6, r1
 80034f0:	4605      	mov	r5, r0
 80034f2:	b118      	cbz	r0, 80034fc <_puts_r+0x10>
 80034f4:	6983      	ldr	r3, [r0, #24]
 80034f6:	b90b      	cbnz	r3, 80034fc <_puts_r+0x10>
 80034f8:	f7ff fe0c 	bl	8003114 <__sinit>
 80034fc:	69ab      	ldr	r3, [r5, #24]
 80034fe:	68ac      	ldr	r4, [r5, #8]
 8003500:	b913      	cbnz	r3, 8003508 <_puts_r+0x1c>
 8003502:	4628      	mov	r0, r5
 8003504:	f7ff fe06 	bl	8003114 <__sinit>
 8003508:	4b2c      	ldr	r3, [pc, #176]	; (80035bc <_puts_r+0xd0>)
 800350a:	429c      	cmp	r4, r3
 800350c:	d120      	bne.n	8003550 <_puts_r+0x64>
 800350e:	686c      	ldr	r4, [r5, #4]
 8003510:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003512:	07db      	lsls	r3, r3, #31
 8003514:	d405      	bmi.n	8003522 <_puts_r+0x36>
 8003516:	89a3      	ldrh	r3, [r4, #12]
 8003518:	0598      	lsls	r0, r3, #22
 800351a:	d402      	bmi.n	8003522 <_puts_r+0x36>
 800351c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800351e:	f7ff fed8 	bl	80032d2 <__retarget_lock_acquire_recursive>
 8003522:	89a3      	ldrh	r3, [r4, #12]
 8003524:	0719      	lsls	r1, r3, #28
 8003526:	d51d      	bpl.n	8003564 <_puts_r+0x78>
 8003528:	6923      	ldr	r3, [r4, #16]
 800352a:	b1db      	cbz	r3, 8003564 <_puts_r+0x78>
 800352c:	3e01      	subs	r6, #1
 800352e:	68a3      	ldr	r3, [r4, #8]
 8003530:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003534:	3b01      	subs	r3, #1
 8003536:	60a3      	str	r3, [r4, #8]
 8003538:	bb39      	cbnz	r1, 800358a <_puts_r+0x9e>
 800353a:	2b00      	cmp	r3, #0
 800353c:	da38      	bge.n	80035b0 <_puts_r+0xc4>
 800353e:	4622      	mov	r2, r4
 8003540:	210a      	movs	r1, #10
 8003542:	4628      	mov	r0, r5
 8003544:	f000 f9c4 	bl	80038d0 <__swbuf_r>
 8003548:	3001      	adds	r0, #1
 800354a:	d011      	beq.n	8003570 <_puts_r+0x84>
 800354c:	250a      	movs	r5, #10
 800354e:	e011      	b.n	8003574 <_puts_r+0x88>
 8003550:	4b1b      	ldr	r3, [pc, #108]	; (80035c0 <_puts_r+0xd4>)
 8003552:	429c      	cmp	r4, r3
 8003554:	d101      	bne.n	800355a <_puts_r+0x6e>
 8003556:	68ac      	ldr	r4, [r5, #8]
 8003558:	e7da      	b.n	8003510 <_puts_r+0x24>
 800355a:	4b1a      	ldr	r3, [pc, #104]	; (80035c4 <_puts_r+0xd8>)
 800355c:	429c      	cmp	r4, r3
 800355e:	bf08      	it	eq
 8003560:	68ec      	ldreq	r4, [r5, #12]
 8003562:	e7d5      	b.n	8003510 <_puts_r+0x24>
 8003564:	4621      	mov	r1, r4
 8003566:	4628      	mov	r0, r5
 8003568:	f000 fa16 	bl	8003998 <__swsetup_r>
 800356c:	2800      	cmp	r0, #0
 800356e:	d0dd      	beq.n	800352c <_puts_r+0x40>
 8003570:	f04f 35ff 	mov.w	r5, #4294967295
 8003574:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003576:	07da      	lsls	r2, r3, #31
 8003578:	d405      	bmi.n	8003586 <_puts_r+0x9a>
 800357a:	89a3      	ldrh	r3, [r4, #12]
 800357c:	059b      	lsls	r3, r3, #22
 800357e:	d402      	bmi.n	8003586 <_puts_r+0x9a>
 8003580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003582:	f7ff fea7 	bl	80032d4 <__retarget_lock_release_recursive>
 8003586:	4628      	mov	r0, r5
 8003588:	bd70      	pop	{r4, r5, r6, pc}
 800358a:	2b00      	cmp	r3, #0
 800358c:	da04      	bge.n	8003598 <_puts_r+0xac>
 800358e:	69a2      	ldr	r2, [r4, #24]
 8003590:	429a      	cmp	r2, r3
 8003592:	dc06      	bgt.n	80035a2 <_puts_r+0xb6>
 8003594:	290a      	cmp	r1, #10
 8003596:	d004      	beq.n	80035a2 <_puts_r+0xb6>
 8003598:	6823      	ldr	r3, [r4, #0]
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	6022      	str	r2, [r4, #0]
 800359e:	7019      	strb	r1, [r3, #0]
 80035a0:	e7c5      	b.n	800352e <_puts_r+0x42>
 80035a2:	4622      	mov	r2, r4
 80035a4:	4628      	mov	r0, r5
 80035a6:	f000 f993 	bl	80038d0 <__swbuf_r>
 80035aa:	3001      	adds	r0, #1
 80035ac:	d1bf      	bne.n	800352e <_puts_r+0x42>
 80035ae:	e7df      	b.n	8003570 <_puts_r+0x84>
 80035b0:	250a      	movs	r5, #10
 80035b2:	6823      	ldr	r3, [r4, #0]
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	6022      	str	r2, [r4, #0]
 80035b8:	701d      	strb	r5, [r3, #0]
 80035ba:	e7db      	b.n	8003574 <_puts_r+0x88>
 80035bc:	08005a28 	.word	0x08005a28
 80035c0:	08005a48 	.word	0x08005a48
 80035c4:	08005a08 	.word	0x08005a08

080035c8 <puts>:
 80035c8:	4b02      	ldr	r3, [pc, #8]	; (80035d4 <puts+0xc>)
 80035ca:	4601      	mov	r1, r0
 80035cc:	6818      	ldr	r0, [r3, #0]
 80035ce:	f7ff bf8d 	b.w	80034ec <_puts_r>
 80035d2:	bf00      	nop
 80035d4:	2000000c 	.word	0x2000000c

080035d8 <_sbrk_r>:
 80035d8:	b538      	push	{r3, r4, r5, lr}
 80035da:	2300      	movs	r3, #0
 80035dc:	4d05      	ldr	r5, [pc, #20]	; (80035f4 <_sbrk_r+0x1c>)
 80035de:	4604      	mov	r4, r0
 80035e0:	4608      	mov	r0, r1
 80035e2:	602b      	str	r3, [r5, #0]
 80035e4:	f7fd fe78 	bl	80012d8 <_sbrk>
 80035e8:	1c43      	adds	r3, r0, #1
 80035ea:	d102      	bne.n	80035f2 <_sbrk_r+0x1a>
 80035ec:	682b      	ldr	r3, [r5, #0]
 80035ee:	b103      	cbz	r3, 80035f2 <_sbrk_r+0x1a>
 80035f0:	6023      	str	r3, [r4, #0]
 80035f2:	bd38      	pop	{r3, r4, r5, pc}
 80035f4:	20000128 	.word	0x20000128

080035f8 <iscanf>:
 80035f8:	b40f      	push	{r0, r1, r2, r3}
 80035fa:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <iscanf+0x2c>)
 80035fc:	b513      	push	{r0, r1, r4, lr}
 80035fe:	681c      	ldr	r4, [r3, #0]
 8003600:	b124      	cbz	r4, 800360c <iscanf+0x14>
 8003602:	69a3      	ldr	r3, [r4, #24]
 8003604:	b913      	cbnz	r3, 800360c <iscanf+0x14>
 8003606:	4620      	mov	r0, r4
 8003608:	f7ff fd84 	bl	8003114 <__sinit>
 800360c:	ab05      	add	r3, sp, #20
 800360e:	4620      	mov	r0, r4
 8003610:	9a04      	ldr	r2, [sp, #16]
 8003612:	6861      	ldr	r1, [r4, #4]
 8003614:	9301      	str	r3, [sp, #4]
 8003616:	f001 f8b9 	bl	800478c <_vfiscanf_r>
 800361a:	b002      	add	sp, #8
 800361c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003620:	b004      	add	sp, #16
 8003622:	4770      	bx	lr
 8003624:	2000000c 	.word	0x2000000c

08003628 <setvbuf>:
 8003628:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800362c:	461d      	mov	r5, r3
 800362e:	4b5d      	ldr	r3, [pc, #372]	; (80037a4 <setvbuf+0x17c>)
 8003630:	4604      	mov	r4, r0
 8003632:	681f      	ldr	r7, [r3, #0]
 8003634:	460e      	mov	r6, r1
 8003636:	4690      	mov	r8, r2
 8003638:	b127      	cbz	r7, 8003644 <setvbuf+0x1c>
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	b913      	cbnz	r3, 8003644 <setvbuf+0x1c>
 800363e:	4638      	mov	r0, r7
 8003640:	f7ff fd68 	bl	8003114 <__sinit>
 8003644:	4b58      	ldr	r3, [pc, #352]	; (80037a8 <setvbuf+0x180>)
 8003646:	429c      	cmp	r4, r3
 8003648:	d167      	bne.n	800371a <setvbuf+0xf2>
 800364a:	687c      	ldr	r4, [r7, #4]
 800364c:	f1b8 0f02 	cmp.w	r8, #2
 8003650:	d006      	beq.n	8003660 <setvbuf+0x38>
 8003652:	f1b8 0f01 	cmp.w	r8, #1
 8003656:	f200 809f 	bhi.w	8003798 <setvbuf+0x170>
 800365a:	2d00      	cmp	r5, #0
 800365c:	f2c0 809c 	blt.w	8003798 <setvbuf+0x170>
 8003660:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003662:	07db      	lsls	r3, r3, #31
 8003664:	d405      	bmi.n	8003672 <setvbuf+0x4a>
 8003666:	89a3      	ldrh	r3, [r4, #12]
 8003668:	0598      	lsls	r0, r3, #22
 800366a:	d402      	bmi.n	8003672 <setvbuf+0x4a>
 800366c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800366e:	f7ff fe30 	bl	80032d2 <__retarget_lock_acquire_recursive>
 8003672:	4621      	mov	r1, r4
 8003674:	4638      	mov	r0, r7
 8003676:	f7ff fca7 	bl	8002fc8 <_fflush_r>
 800367a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800367c:	b141      	cbz	r1, 8003690 <setvbuf+0x68>
 800367e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003682:	4299      	cmp	r1, r3
 8003684:	d002      	beq.n	800368c <setvbuf+0x64>
 8003686:	4638      	mov	r0, r7
 8003688:	f7ff fe3c 	bl	8003304 <_free_r>
 800368c:	2300      	movs	r3, #0
 800368e:	6363      	str	r3, [r4, #52]	; 0x34
 8003690:	2300      	movs	r3, #0
 8003692:	61a3      	str	r3, [r4, #24]
 8003694:	6063      	str	r3, [r4, #4]
 8003696:	89a3      	ldrh	r3, [r4, #12]
 8003698:	0619      	lsls	r1, r3, #24
 800369a:	d503      	bpl.n	80036a4 <setvbuf+0x7c>
 800369c:	4638      	mov	r0, r7
 800369e:	6921      	ldr	r1, [r4, #16]
 80036a0:	f7ff fe30 	bl	8003304 <_free_r>
 80036a4:	89a3      	ldrh	r3, [r4, #12]
 80036a6:	f1b8 0f02 	cmp.w	r8, #2
 80036aa:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80036ae:	f023 0303 	bic.w	r3, r3, #3
 80036b2:	81a3      	strh	r3, [r4, #12]
 80036b4:	d06c      	beq.n	8003790 <setvbuf+0x168>
 80036b6:	ab01      	add	r3, sp, #4
 80036b8:	466a      	mov	r2, sp
 80036ba:	4621      	mov	r1, r4
 80036bc:	4638      	mov	r0, r7
 80036be:	f000 f9fb 	bl	8003ab8 <__swhatbuf_r>
 80036c2:	89a3      	ldrh	r3, [r4, #12]
 80036c4:	4318      	orrs	r0, r3
 80036c6:	81a0      	strh	r0, [r4, #12]
 80036c8:	2d00      	cmp	r5, #0
 80036ca:	d130      	bne.n	800372e <setvbuf+0x106>
 80036cc:	9d00      	ldr	r5, [sp, #0]
 80036ce:	4628      	mov	r0, r5
 80036d0:	f000 fa58 	bl	8003b84 <malloc>
 80036d4:	4606      	mov	r6, r0
 80036d6:	2800      	cmp	r0, #0
 80036d8:	d155      	bne.n	8003786 <setvbuf+0x15e>
 80036da:	f8dd 9000 	ldr.w	r9, [sp]
 80036de:	45a9      	cmp	r9, r5
 80036e0:	d14a      	bne.n	8003778 <setvbuf+0x150>
 80036e2:	f04f 35ff 	mov.w	r5, #4294967295
 80036e6:	2200      	movs	r2, #0
 80036e8:	60a2      	str	r2, [r4, #8]
 80036ea:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80036ee:	6022      	str	r2, [r4, #0]
 80036f0:	6122      	str	r2, [r4, #16]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036f8:	6162      	str	r2, [r4, #20]
 80036fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80036fc:	f043 0302 	orr.w	r3, r3, #2
 8003700:	07d2      	lsls	r2, r2, #31
 8003702:	81a3      	strh	r3, [r4, #12]
 8003704:	d405      	bmi.n	8003712 <setvbuf+0xea>
 8003706:	f413 7f00 	tst.w	r3, #512	; 0x200
 800370a:	d102      	bne.n	8003712 <setvbuf+0xea>
 800370c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800370e:	f7ff fde1 	bl	80032d4 <__retarget_lock_release_recursive>
 8003712:	4628      	mov	r0, r5
 8003714:	b003      	add	sp, #12
 8003716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800371a:	4b24      	ldr	r3, [pc, #144]	; (80037ac <setvbuf+0x184>)
 800371c:	429c      	cmp	r4, r3
 800371e:	d101      	bne.n	8003724 <setvbuf+0xfc>
 8003720:	68bc      	ldr	r4, [r7, #8]
 8003722:	e793      	b.n	800364c <setvbuf+0x24>
 8003724:	4b22      	ldr	r3, [pc, #136]	; (80037b0 <setvbuf+0x188>)
 8003726:	429c      	cmp	r4, r3
 8003728:	bf08      	it	eq
 800372a:	68fc      	ldreq	r4, [r7, #12]
 800372c:	e78e      	b.n	800364c <setvbuf+0x24>
 800372e:	2e00      	cmp	r6, #0
 8003730:	d0cd      	beq.n	80036ce <setvbuf+0xa6>
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	b913      	cbnz	r3, 800373c <setvbuf+0x114>
 8003736:	4638      	mov	r0, r7
 8003738:	f7ff fcec 	bl	8003114 <__sinit>
 800373c:	f1b8 0f01 	cmp.w	r8, #1
 8003740:	bf08      	it	eq
 8003742:	89a3      	ldrheq	r3, [r4, #12]
 8003744:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003748:	bf04      	itt	eq
 800374a:	f043 0301 	orreq.w	r3, r3, #1
 800374e:	81a3      	strheq	r3, [r4, #12]
 8003750:	89a2      	ldrh	r2, [r4, #12]
 8003752:	6026      	str	r6, [r4, #0]
 8003754:	f012 0308 	ands.w	r3, r2, #8
 8003758:	d01c      	beq.n	8003794 <setvbuf+0x16c>
 800375a:	07d3      	lsls	r3, r2, #31
 800375c:	bf41      	itttt	mi
 800375e:	2300      	movmi	r3, #0
 8003760:	426d      	negmi	r5, r5
 8003762:	60a3      	strmi	r3, [r4, #8]
 8003764:	61a5      	strmi	r5, [r4, #24]
 8003766:	bf58      	it	pl
 8003768:	60a5      	strpl	r5, [r4, #8]
 800376a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800376c:	f015 0501 	ands.w	r5, r5, #1
 8003770:	d115      	bne.n	800379e <setvbuf+0x176>
 8003772:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003776:	e7c8      	b.n	800370a <setvbuf+0xe2>
 8003778:	4648      	mov	r0, r9
 800377a:	f000 fa03 	bl	8003b84 <malloc>
 800377e:	4606      	mov	r6, r0
 8003780:	2800      	cmp	r0, #0
 8003782:	d0ae      	beq.n	80036e2 <setvbuf+0xba>
 8003784:	464d      	mov	r5, r9
 8003786:	89a3      	ldrh	r3, [r4, #12]
 8003788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800378c:	81a3      	strh	r3, [r4, #12]
 800378e:	e7d0      	b.n	8003732 <setvbuf+0x10a>
 8003790:	2500      	movs	r5, #0
 8003792:	e7a8      	b.n	80036e6 <setvbuf+0xbe>
 8003794:	60a3      	str	r3, [r4, #8]
 8003796:	e7e8      	b.n	800376a <setvbuf+0x142>
 8003798:	f04f 35ff 	mov.w	r5, #4294967295
 800379c:	e7b9      	b.n	8003712 <setvbuf+0xea>
 800379e:	2500      	movs	r5, #0
 80037a0:	e7b7      	b.n	8003712 <setvbuf+0xea>
 80037a2:	bf00      	nop
 80037a4:	2000000c 	.word	0x2000000c
 80037a8:	08005a28 	.word	0x08005a28
 80037ac:	08005a48 	.word	0x08005a48
 80037b0:	08005a08 	.word	0x08005a08

080037b4 <siprintf>:
 80037b4:	b40e      	push	{r1, r2, r3}
 80037b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037ba:	b500      	push	{lr}
 80037bc:	b09c      	sub	sp, #112	; 0x70
 80037be:	ab1d      	add	r3, sp, #116	; 0x74
 80037c0:	9002      	str	r0, [sp, #8]
 80037c2:	9006      	str	r0, [sp, #24]
 80037c4:	9107      	str	r1, [sp, #28]
 80037c6:	9104      	str	r1, [sp, #16]
 80037c8:	4808      	ldr	r0, [pc, #32]	; (80037ec <siprintf+0x38>)
 80037ca:	4909      	ldr	r1, [pc, #36]	; (80037f0 <siprintf+0x3c>)
 80037cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80037d0:	9105      	str	r1, [sp, #20]
 80037d2:	6800      	ldr	r0, [r0, #0]
 80037d4:	a902      	add	r1, sp, #8
 80037d6:	9301      	str	r3, [sp, #4]
 80037d8:	f000 fa44 	bl	8003c64 <_svfiprintf_r>
 80037dc:	2200      	movs	r2, #0
 80037de:	9b02      	ldr	r3, [sp, #8]
 80037e0:	701a      	strb	r2, [r3, #0]
 80037e2:	b01c      	add	sp, #112	; 0x70
 80037e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80037e8:	b003      	add	sp, #12
 80037ea:	4770      	bx	lr
 80037ec:	2000000c 	.word	0x2000000c
 80037f0:	ffff0208 	.word	0xffff0208

080037f4 <__sread>:
 80037f4:	b510      	push	{r4, lr}
 80037f6:	460c      	mov	r4, r1
 80037f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037fc:	f001 f940 	bl	8004a80 <_read_r>
 8003800:	2800      	cmp	r0, #0
 8003802:	bfab      	itete	ge
 8003804:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003806:	89a3      	ldrhlt	r3, [r4, #12]
 8003808:	181b      	addge	r3, r3, r0
 800380a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800380e:	bfac      	ite	ge
 8003810:	6563      	strge	r3, [r4, #84]	; 0x54
 8003812:	81a3      	strhlt	r3, [r4, #12]
 8003814:	bd10      	pop	{r4, pc}

08003816 <__swrite>:
 8003816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800381a:	461f      	mov	r7, r3
 800381c:	898b      	ldrh	r3, [r1, #12]
 800381e:	4605      	mov	r5, r0
 8003820:	05db      	lsls	r3, r3, #23
 8003822:	460c      	mov	r4, r1
 8003824:	4616      	mov	r6, r2
 8003826:	d505      	bpl.n	8003834 <__swrite+0x1e>
 8003828:	2302      	movs	r3, #2
 800382a:	2200      	movs	r2, #0
 800382c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003830:	f000 f930 	bl	8003a94 <_lseek_r>
 8003834:	89a3      	ldrh	r3, [r4, #12]
 8003836:	4632      	mov	r2, r6
 8003838:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800383c:	81a3      	strh	r3, [r4, #12]
 800383e:	4628      	mov	r0, r5
 8003840:	463b      	mov	r3, r7
 8003842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003846:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800384a:	f000 b893 	b.w	8003974 <_write_r>

0800384e <__sseek>:
 800384e:	b510      	push	{r4, lr}
 8003850:	460c      	mov	r4, r1
 8003852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003856:	f000 f91d 	bl	8003a94 <_lseek_r>
 800385a:	1c43      	adds	r3, r0, #1
 800385c:	89a3      	ldrh	r3, [r4, #12]
 800385e:	bf15      	itete	ne
 8003860:	6560      	strne	r0, [r4, #84]	; 0x54
 8003862:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003866:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800386a:	81a3      	strheq	r3, [r4, #12]
 800386c:	bf18      	it	ne
 800386e:	81a3      	strhne	r3, [r4, #12]
 8003870:	bd10      	pop	{r4, pc}

08003872 <__sclose>:
 8003872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003876:	f000 b8fd 	b.w	8003a74 <_close_r>

0800387a <strncmp>:
 800387a:	4603      	mov	r3, r0
 800387c:	b510      	push	{r4, lr}
 800387e:	b172      	cbz	r2, 800389e <strncmp+0x24>
 8003880:	3901      	subs	r1, #1
 8003882:	1884      	adds	r4, r0, r2
 8003884:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003888:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800388c:	4290      	cmp	r0, r2
 800388e:	d101      	bne.n	8003894 <strncmp+0x1a>
 8003890:	42a3      	cmp	r3, r4
 8003892:	d101      	bne.n	8003898 <strncmp+0x1e>
 8003894:	1a80      	subs	r0, r0, r2
 8003896:	bd10      	pop	{r4, pc}
 8003898:	2800      	cmp	r0, #0
 800389a:	d1f3      	bne.n	8003884 <strncmp+0xa>
 800389c:	e7fa      	b.n	8003894 <strncmp+0x1a>
 800389e:	4610      	mov	r0, r2
 80038a0:	e7f9      	b.n	8003896 <strncmp+0x1c>

080038a2 <strstr>:
 80038a2:	780a      	ldrb	r2, [r1, #0]
 80038a4:	b570      	push	{r4, r5, r6, lr}
 80038a6:	b96a      	cbnz	r2, 80038c4 <strstr+0x22>
 80038a8:	bd70      	pop	{r4, r5, r6, pc}
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d109      	bne.n	80038c2 <strstr+0x20>
 80038ae:	460c      	mov	r4, r1
 80038b0:	4605      	mov	r5, r0
 80038b2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0f6      	beq.n	80038a8 <strstr+0x6>
 80038ba:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80038be:	429e      	cmp	r6, r3
 80038c0:	d0f7      	beq.n	80038b2 <strstr+0x10>
 80038c2:	3001      	adds	r0, #1
 80038c4:	7803      	ldrb	r3, [r0, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1ef      	bne.n	80038aa <strstr+0x8>
 80038ca:	4618      	mov	r0, r3
 80038cc:	e7ec      	b.n	80038a8 <strstr+0x6>
	...

080038d0 <__swbuf_r>:
 80038d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d2:	460e      	mov	r6, r1
 80038d4:	4614      	mov	r4, r2
 80038d6:	4605      	mov	r5, r0
 80038d8:	b118      	cbz	r0, 80038e2 <__swbuf_r+0x12>
 80038da:	6983      	ldr	r3, [r0, #24]
 80038dc:	b90b      	cbnz	r3, 80038e2 <__swbuf_r+0x12>
 80038de:	f7ff fc19 	bl	8003114 <__sinit>
 80038e2:	4b21      	ldr	r3, [pc, #132]	; (8003968 <__swbuf_r+0x98>)
 80038e4:	429c      	cmp	r4, r3
 80038e6:	d12b      	bne.n	8003940 <__swbuf_r+0x70>
 80038e8:	686c      	ldr	r4, [r5, #4]
 80038ea:	69a3      	ldr	r3, [r4, #24]
 80038ec:	60a3      	str	r3, [r4, #8]
 80038ee:	89a3      	ldrh	r3, [r4, #12]
 80038f0:	071a      	lsls	r2, r3, #28
 80038f2:	d52f      	bpl.n	8003954 <__swbuf_r+0x84>
 80038f4:	6923      	ldr	r3, [r4, #16]
 80038f6:	b36b      	cbz	r3, 8003954 <__swbuf_r+0x84>
 80038f8:	6923      	ldr	r3, [r4, #16]
 80038fa:	6820      	ldr	r0, [r4, #0]
 80038fc:	b2f6      	uxtb	r6, r6
 80038fe:	1ac0      	subs	r0, r0, r3
 8003900:	6963      	ldr	r3, [r4, #20]
 8003902:	4637      	mov	r7, r6
 8003904:	4283      	cmp	r3, r0
 8003906:	dc04      	bgt.n	8003912 <__swbuf_r+0x42>
 8003908:	4621      	mov	r1, r4
 800390a:	4628      	mov	r0, r5
 800390c:	f7ff fb5c 	bl	8002fc8 <_fflush_r>
 8003910:	bb30      	cbnz	r0, 8003960 <__swbuf_r+0x90>
 8003912:	68a3      	ldr	r3, [r4, #8]
 8003914:	3001      	adds	r0, #1
 8003916:	3b01      	subs	r3, #1
 8003918:	60a3      	str	r3, [r4, #8]
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	1c5a      	adds	r2, r3, #1
 800391e:	6022      	str	r2, [r4, #0]
 8003920:	701e      	strb	r6, [r3, #0]
 8003922:	6963      	ldr	r3, [r4, #20]
 8003924:	4283      	cmp	r3, r0
 8003926:	d004      	beq.n	8003932 <__swbuf_r+0x62>
 8003928:	89a3      	ldrh	r3, [r4, #12]
 800392a:	07db      	lsls	r3, r3, #31
 800392c:	d506      	bpl.n	800393c <__swbuf_r+0x6c>
 800392e:	2e0a      	cmp	r6, #10
 8003930:	d104      	bne.n	800393c <__swbuf_r+0x6c>
 8003932:	4621      	mov	r1, r4
 8003934:	4628      	mov	r0, r5
 8003936:	f7ff fb47 	bl	8002fc8 <_fflush_r>
 800393a:	b988      	cbnz	r0, 8003960 <__swbuf_r+0x90>
 800393c:	4638      	mov	r0, r7
 800393e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003940:	4b0a      	ldr	r3, [pc, #40]	; (800396c <__swbuf_r+0x9c>)
 8003942:	429c      	cmp	r4, r3
 8003944:	d101      	bne.n	800394a <__swbuf_r+0x7a>
 8003946:	68ac      	ldr	r4, [r5, #8]
 8003948:	e7cf      	b.n	80038ea <__swbuf_r+0x1a>
 800394a:	4b09      	ldr	r3, [pc, #36]	; (8003970 <__swbuf_r+0xa0>)
 800394c:	429c      	cmp	r4, r3
 800394e:	bf08      	it	eq
 8003950:	68ec      	ldreq	r4, [r5, #12]
 8003952:	e7ca      	b.n	80038ea <__swbuf_r+0x1a>
 8003954:	4621      	mov	r1, r4
 8003956:	4628      	mov	r0, r5
 8003958:	f000 f81e 	bl	8003998 <__swsetup_r>
 800395c:	2800      	cmp	r0, #0
 800395e:	d0cb      	beq.n	80038f8 <__swbuf_r+0x28>
 8003960:	f04f 37ff 	mov.w	r7, #4294967295
 8003964:	e7ea      	b.n	800393c <__swbuf_r+0x6c>
 8003966:	bf00      	nop
 8003968:	08005a28 	.word	0x08005a28
 800396c:	08005a48 	.word	0x08005a48
 8003970:	08005a08 	.word	0x08005a08

08003974 <_write_r>:
 8003974:	b538      	push	{r3, r4, r5, lr}
 8003976:	4604      	mov	r4, r0
 8003978:	4608      	mov	r0, r1
 800397a:	4611      	mov	r1, r2
 800397c:	2200      	movs	r2, #0
 800397e:	4d05      	ldr	r5, [pc, #20]	; (8003994 <_write_r+0x20>)
 8003980:	602a      	str	r2, [r5, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	f7fd fc5b 	bl	800123e <_write>
 8003988:	1c43      	adds	r3, r0, #1
 800398a:	d102      	bne.n	8003992 <_write_r+0x1e>
 800398c:	682b      	ldr	r3, [r5, #0]
 800398e:	b103      	cbz	r3, 8003992 <_write_r+0x1e>
 8003990:	6023      	str	r3, [r4, #0]
 8003992:	bd38      	pop	{r3, r4, r5, pc}
 8003994:	20000128 	.word	0x20000128

08003998 <__swsetup_r>:
 8003998:	4b32      	ldr	r3, [pc, #200]	; (8003a64 <__swsetup_r+0xcc>)
 800399a:	b570      	push	{r4, r5, r6, lr}
 800399c:	681d      	ldr	r5, [r3, #0]
 800399e:	4606      	mov	r6, r0
 80039a0:	460c      	mov	r4, r1
 80039a2:	b125      	cbz	r5, 80039ae <__swsetup_r+0x16>
 80039a4:	69ab      	ldr	r3, [r5, #24]
 80039a6:	b913      	cbnz	r3, 80039ae <__swsetup_r+0x16>
 80039a8:	4628      	mov	r0, r5
 80039aa:	f7ff fbb3 	bl	8003114 <__sinit>
 80039ae:	4b2e      	ldr	r3, [pc, #184]	; (8003a68 <__swsetup_r+0xd0>)
 80039b0:	429c      	cmp	r4, r3
 80039b2:	d10f      	bne.n	80039d4 <__swsetup_r+0x3c>
 80039b4:	686c      	ldr	r4, [r5, #4]
 80039b6:	89a3      	ldrh	r3, [r4, #12]
 80039b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80039bc:	0719      	lsls	r1, r3, #28
 80039be:	d42c      	bmi.n	8003a1a <__swsetup_r+0x82>
 80039c0:	06dd      	lsls	r5, r3, #27
 80039c2:	d411      	bmi.n	80039e8 <__swsetup_r+0x50>
 80039c4:	2309      	movs	r3, #9
 80039c6:	6033      	str	r3, [r6, #0]
 80039c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80039cc:	f04f 30ff 	mov.w	r0, #4294967295
 80039d0:	81a3      	strh	r3, [r4, #12]
 80039d2:	e03e      	b.n	8003a52 <__swsetup_r+0xba>
 80039d4:	4b25      	ldr	r3, [pc, #148]	; (8003a6c <__swsetup_r+0xd4>)
 80039d6:	429c      	cmp	r4, r3
 80039d8:	d101      	bne.n	80039de <__swsetup_r+0x46>
 80039da:	68ac      	ldr	r4, [r5, #8]
 80039dc:	e7eb      	b.n	80039b6 <__swsetup_r+0x1e>
 80039de:	4b24      	ldr	r3, [pc, #144]	; (8003a70 <__swsetup_r+0xd8>)
 80039e0:	429c      	cmp	r4, r3
 80039e2:	bf08      	it	eq
 80039e4:	68ec      	ldreq	r4, [r5, #12]
 80039e6:	e7e6      	b.n	80039b6 <__swsetup_r+0x1e>
 80039e8:	0758      	lsls	r0, r3, #29
 80039ea:	d512      	bpl.n	8003a12 <__swsetup_r+0x7a>
 80039ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039ee:	b141      	cbz	r1, 8003a02 <__swsetup_r+0x6a>
 80039f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039f4:	4299      	cmp	r1, r3
 80039f6:	d002      	beq.n	80039fe <__swsetup_r+0x66>
 80039f8:	4630      	mov	r0, r6
 80039fa:	f7ff fc83 	bl	8003304 <_free_r>
 80039fe:	2300      	movs	r3, #0
 8003a00:	6363      	str	r3, [r4, #52]	; 0x34
 8003a02:	89a3      	ldrh	r3, [r4, #12]
 8003a04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003a08:	81a3      	strh	r3, [r4, #12]
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	6063      	str	r3, [r4, #4]
 8003a0e:	6923      	ldr	r3, [r4, #16]
 8003a10:	6023      	str	r3, [r4, #0]
 8003a12:	89a3      	ldrh	r3, [r4, #12]
 8003a14:	f043 0308 	orr.w	r3, r3, #8
 8003a18:	81a3      	strh	r3, [r4, #12]
 8003a1a:	6923      	ldr	r3, [r4, #16]
 8003a1c:	b94b      	cbnz	r3, 8003a32 <__swsetup_r+0x9a>
 8003a1e:	89a3      	ldrh	r3, [r4, #12]
 8003a20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a28:	d003      	beq.n	8003a32 <__swsetup_r+0x9a>
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	4630      	mov	r0, r6
 8003a2e:	f000 f869 	bl	8003b04 <__smakebuf_r>
 8003a32:	89a0      	ldrh	r0, [r4, #12]
 8003a34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a38:	f010 0301 	ands.w	r3, r0, #1
 8003a3c:	d00a      	beq.n	8003a54 <__swsetup_r+0xbc>
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60a3      	str	r3, [r4, #8]
 8003a42:	6963      	ldr	r3, [r4, #20]
 8003a44:	425b      	negs	r3, r3
 8003a46:	61a3      	str	r3, [r4, #24]
 8003a48:	6923      	ldr	r3, [r4, #16]
 8003a4a:	b943      	cbnz	r3, 8003a5e <__swsetup_r+0xc6>
 8003a4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003a50:	d1ba      	bne.n	80039c8 <__swsetup_r+0x30>
 8003a52:	bd70      	pop	{r4, r5, r6, pc}
 8003a54:	0781      	lsls	r1, r0, #30
 8003a56:	bf58      	it	pl
 8003a58:	6963      	ldrpl	r3, [r4, #20]
 8003a5a:	60a3      	str	r3, [r4, #8]
 8003a5c:	e7f4      	b.n	8003a48 <__swsetup_r+0xb0>
 8003a5e:	2000      	movs	r0, #0
 8003a60:	e7f7      	b.n	8003a52 <__swsetup_r+0xba>
 8003a62:	bf00      	nop
 8003a64:	2000000c 	.word	0x2000000c
 8003a68:	08005a28 	.word	0x08005a28
 8003a6c:	08005a48 	.word	0x08005a48
 8003a70:	08005a08 	.word	0x08005a08

08003a74 <_close_r>:
 8003a74:	b538      	push	{r3, r4, r5, lr}
 8003a76:	2300      	movs	r3, #0
 8003a78:	4d05      	ldr	r5, [pc, #20]	; (8003a90 <_close_r+0x1c>)
 8003a7a:	4604      	mov	r4, r0
 8003a7c:	4608      	mov	r0, r1
 8003a7e:	602b      	str	r3, [r5, #0]
 8003a80:	f7fd fbf9 	bl	8001276 <_close>
 8003a84:	1c43      	adds	r3, r0, #1
 8003a86:	d102      	bne.n	8003a8e <_close_r+0x1a>
 8003a88:	682b      	ldr	r3, [r5, #0]
 8003a8a:	b103      	cbz	r3, 8003a8e <_close_r+0x1a>
 8003a8c:	6023      	str	r3, [r4, #0]
 8003a8e:	bd38      	pop	{r3, r4, r5, pc}
 8003a90:	20000128 	.word	0x20000128

08003a94 <_lseek_r>:
 8003a94:	b538      	push	{r3, r4, r5, lr}
 8003a96:	4604      	mov	r4, r0
 8003a98:	4608      	mov	r0, r1
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	4d05      	ldr	r5, [pc, #20]	; (8003ab4 <_lseek_r+0x20>)
 8003aa0:	602a      	str	r2, [r5, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f7fd fc0b 	bl	80012be <_lseek>
 8003aa8:	1c43      	adds	r3, r0, #1
 8003aaa:	d102      	bne.n	8003ab2 <_lseek_r+0x1e>
 8003aac:	682b      	ldr	r3, [r5, #0]
 8003aae:	b103      	cbz	r3, 8003ab2 <_lseek_r+0x1e>
 8003ab0:	6023      	str	r3, [r4, #0]
 8003ab2:	bd38      	pop	{r3, r4, r5, pc}
 8003ab4:	20000128 	.word	0x20000128

08003ab8 <__swhatbuf_r>:
 8003ab8:	b570      	push	{r4, r5, r6, lr}
 8003aba:	460e      	mov	r6, r1
 8003abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ac0:	4614      	mov	r4, r2
 8003ac2:	2900      	cmp	r1, #0
 8003ac4:	461d      	mov	r5, r3
 8003ac6:	b096      	sub	sp, #88	; 0x58
 8003ac8:	da08      	bge.n	8003adc <__swhatbuf_r+0x24>
 8003aca:	2200      	movs	r2, #0
 8003acc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003ad0:	602a      	str	r2, [r5, #0]
 8003ad2:	061a      	lsls	r2, r3, #24
 8003ad4:	d410      	bmi.n	8003af8 <__swhatbuf_r+0x40>
 8003ad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ada:	e00e      	b.n	8003afa <__swhatbuf_r+0x42>
 8003adc:	466a      	mov	r2, sp
 8003ade:	f001 fa71 	bl	8004fc4 <_fstat_r>
 8003ae2:	2800      	cmp	r0, #0
 8003ae4:	dbf1      	blt.n	8003aca <__swhatbuf_r+0x12>
 8003ae6:	9a01      	ldr	r2, [sp, #4]
 8003ae8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003aec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003af0:	425a      	negs	r2, r3
 8003af2:	415a      	adcs	r2, r3
 8003af4:	602a      	str	r2, [r5, #0]
 8003af6:	e7ee      	b.n	8003ad6 <__swhatbuf_r+0x1e>
 8003af8:	2340      	movs	r3, #64	; 0x40
 8003afa:	2000      	movs	r0, #0
 8003afc:	6023      	str	r3, [r4, #0]
 8003afe:	b016      	add	sp, #88	; 0x58
 8003b00:	bd70      	pop	{r4, r5, r6, pc}
	...

08003b04 <__smakebuf_r>:
 8003b04:	898b      	ldrh	r3, [r1, #12]
 8003b06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b08:	079d      	lsls	r5, r3, #30
 8003b0a:	4606      	mov	r6, r0
 8003b0c:	460c      	mov	r4, r1
 8003b0e:	d507      	bpl.n	8003b20 <__smakebuf_r+0x1c>
 8003b10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b14:	6023      	str	r3, [r4, #0]
 8003b16:	6123      	str	r3, [r4, #16]
 8003b18:	2301      	movs	r3, #1
 8003b1a:	6163      	str	r3, [r4, #20]
 8003b1c:	b002      	add	sp, #8
 8003b1e:	bd70      	pop	{r4, r5, r6, pc}
 8003b20:	466a      	mov	r2, sp
 8003b22:	ab01      	add	r3, sp, #4
 8003b24:	f7ff ffc8 	bl	8003ab8 <__swhatbuf_r>
 8003b28:	9900      	ldr	r1, [sp, #0]
 8003b2a:	4605      	mov	r5, r0
 8003b2c:	4630      	mov	r0, r6
 8003b2e:	f7ff fc51 	bl	80033d4 <_malloc_r>
 8003b32:	b948      	cbnz	r0, 8003b48 <__smakebuf_r+0x44>
 8003b34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b38:	059a      	lsls	r2, r3, #22
 8003b3a:	d4ef      	bmi.n	8003b1c <__smakebuf_r+0x18>
 8003b3c:	f023 0303 	bic.w	r3, r3, #3
 8003b40:	f043 0302 	orr.w	r3, r3, #2
 8003b44:	81a3      	strh	r3, [r4, #12]
 8003b46:	e7e3      	b.n	8003b10 <__smakebuf_r+0xc>
 8003b48:	4b0d      	ldr	r3, [pc, #52]	; (8003b80 <__smakebuf_r+0x7c>)
 8003b4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003b4c:	89a3      	ldrh	r3, [r4, #12]
 8003b4e:	6020      	str	r0, [r4, #0]
 8003b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b54:	81a3      	strh	r3, [r4, #12]
 8003b56:	9b00      	ldr	r3, [sp, #0]
 8003b58:	6120      	str	r0, [r4, #16]
 8003b5a:	6163      	str	r3, [r4, #20]
 8003b5c:	9b01      	ldr	r3, [sp, #4]
 8003b5e:	b15b      	cbz	r3, 8003b78 <__smakebuf_r+0x74>
 8003b60:	4630      	mov	r0, r6
 8003b62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b66:	f001 fa3f 	bl	8004fe8 <_isatty_r>
 8003b6a:	b128      	cbz	r0, 8003b78 <__smakebuf_r+0x74>
 8003b6c:	89a3      	ldrh	r3, [r4, #12]
 8003b6e:	f023 0303 	bic.w	r3, r3, #3
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	81a3      	strh	r3, [r4, #12]
 8003b78:	89a0      	ldrh	r0, [r4, #12]
 8003b7a:	4305      	orrs	r5, r0
 8003b7c:	81a5      	strh	r5, [r4, #12]
 8003b7e:	e7cd      	b.n	8003b1c <__smakebuf_r+0x18>
 8003b80:	080030ad 	.word	0x080030ad

08003b84 <malloc>:
 8003b84:	4b02      	ldr	r3, [pc, #8]	; (8003b90 <malloc+0xc>)
 8003b86:	4601      	mov	r1, r0
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	f7ff bc23 	b.w	80033d4 <_malloc_r>
 8003b8e:	bf00      	nop
 8003b90:	2000000c 	.word	0x2000000c

08003b94 <__malloc_lock>:
 8003b94:	4801      	ldr	r0, [pc, #4]	; (8003b9c <__malloc_lock+0x8>)
 8003b96:	f7ff bb9c 	b.w	80032d2 <__retarget_lock_acquire_recursive>
 8003b9a:	bf00      	nop
 8003b9c:	2000011c 	.word	0x2000011c

08003ba0 <__malloc_unlock>:
 8003ba0:	4801      	ldr	r0, [pc, #4]	; (8003ba8 <__malloc_unlock+0x8>)
 8003ba2:	f7ff bb97 	b.w	80032d4 <__retarget_lock_release_recursive>
 8003ba6:	bf00      	nop
 8003ba8:	2000011c 	.word	0x2000011c

08003bac <__ssputs_r>:
 8003bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bb0:	688e      	ldr	r6, [r1, #8]
 8003bb2:	4682      	mov	sl, r0
 8003bb4:	429e      	cmp	r6, r3
 8003bb6:	460c      	mov	r4, r1
 8003bb8:	4690      	mov	r8, r2
 8003bba:	461f      	mov	r7, r3
 8003bbc:	d838      	bhi.n	8003c30 <__ssputs_r+0x84>
 8003bbe:	898a      	ldrh	r2, [r1, #12]
 8003bc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003bc4:	d032      	beq.n	8003c2c <__ssputs_r+0x80>
 8003bc6:	6825      	ldr	r5, [r4, #0]
 8003bc8:	6909      	ldr	r1, [r1, #16]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	eba5 0901 	sub.w	r9, r5, r1
 8003bd0:	6965      	ldr	r5, [r4, #20]
 8003bd2:	444b      	add	r3, r9
 8003bd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003bdc:	106d      	asrs	r5, r5, #1
 8003bde:	429d      	cmp	r5, r3
 8003be0:	bf38      	it	cc
 8003be2:	461d      	movcc	r5, r3
 8003be4:	0553      	lsls	r3, r2, #21
 8003be6:	d531      	bpl.n	8003c4c <__ssputs_r+0xa0>
 8003be8:	4629      	mov	r1, r5
 8003bea:	f7ff fbf3 	bl	80033d4 <_malloc_r>
 8003bee:	4606      	mov	r6, r0
 8003bf0:	b950      	cbnz	r0, 8003c08 <__ssputs_r+0x5c>
 8003bf2:	230c      	movs	r3, #12
 8003bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf8:	f8ca 3000 	str.w	r3, [sl]
 8003bfc:	89a3      	ldrh	r3, [r4, #12]
 8003bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c02:	81a3      	strh	r3, [r4, #12]
 8003c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c08:	464a      	mov	r2, r9
 8003c0a:	6921      	ldr	r1, [r4, #16]
 8003c0c:	f7ff fb63 	bl	80032d6 <memcpy>
 8003c10:	89a3      	ldrh	r3, [r4, #12]
 8003c12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c1a:	81a3      	strh	r3, [r4, #12]
 8003c1c:	6126      	str	r6, [r4, #16]
 8003c1e:	444e      	add	r6, r9
 8003c20:	6026      	str	r6, [r4, #0]
 8003c22:	463e      	mov	r6, r7
 8003c24:	6165      	str	r5, [r4, #20]
 8003c26:	eba5 0509 	sub.w	r5, r5, r9
 8003c2a:	60a5      	str	r5, [r4, #8]
 8003c2c:	42be      	cmp	r6, r7
 8003c2e:	d900      	bls.n	8003c32 <__ssputs_r+0x86>
 8003c30:	463e      	mov	r6, r7
 8003c32:	4632      	mov	r2, r6
 8003c34:	4641      	mov	r1, r8
 8003c36:	6820      	ldr	r0, [r4, #0]
 8003c38:	f001 f9f4 	bl	8005024 <memmove>
 8003c3c:	68a3      	ldr	r3, [r4, #8]
 8003c3e:	2000      	movs	r0, #0
 8003c40:	1b9b      	subs	r3, r3, r6
 8003c42:	60a3      	str	r3, [r4, #8]
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	4433      	add	r3, r6
 8003c48:	6023      	str	r3, [r4, #0]
 8003c4a:	e7db      	b.n	8003c04 <__ssputs_r+0x58>
 8003c4c:	462a      	mov	r2, r5
 8003c4e:	f001 fa03 	bl	8005058 <_realloc_r>
 8003c52:	4606      	mov	r6, r0
 8003c54:	2800      	cmp	r0, #0
 8003c56:	d1e1      	bne.n	8003c1c <__ssputs_r+0x70>
 8003c58:	4650      	mov	r0, sl
 8003c5a:	6921      	ldr	r1, [r4, #16]
 8003c5c:	f7ff fb52 	bl	8003304 <_free_r>
 8003c60:	e7c7      	b.n	8003bf2 <__ssputs_r+0x46>
	...

08003c64 <_svfiprintf_r>:
 8003c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c68:	4698      	mov	r8, r3
 8003c6a:	898b      	ldrh	r3, [r1, #12]
 8003c6c:	4607      	mov	r7, r0
 8003c6e:	061b      	lsls	r3, r3, #24
 8003c70:	460d      	mov	r5, r1
 8003c72:	4614      	mov	r4, r2
 8003c74:	b09d      	sub	sp, #116	; 0x74
 8003c76:	d50e      	bpl.n	8003c96 <_svfiprintf_r+0x32>
 8003c78:	690b      	ldr	r3, [r1, #16]
 8003c7a:	b963      	cbnz	r3, 8003c96 <_svfiprintf_r+0x32>
 8003c7c:	2140      	movs	r1, #64	; 0x40
 8003c7e:	f7ff fba9 	bl	80033d4 <_malloc_r>
 8003c82:	6028      	str	r0, [r5, #0]
 8003c84:	6128      	str	r0, [r5, #16]
 8003c86:	b920      	cbnz	r0, 8003c92 <_svfiprintf_r+0x2e>
 8003c88:	230c      	movs	r3, #12
 8003c8a:	603b      	str	r3, [r7, #0]
 8003c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c90:	e0d1      	b.n	8003e36 <_svfiprintf_r+0x1d2>
 8003c92:	2340      	movs	r3, #64	; 0x40
 8003c94:	616b      	str	r3, [r5, #20]
 8003c96:	2300      	movs	r3, #0
 8003c98:	9309      	str	r3, [sp, #36]	; 0x24
 8003c9a:	2320      	movs	r3, #32
 8003c9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ca0:	2330      	movs	r3, #48	; 0x30
 8003ca2:	f04f 0901 	mov.w	r9, #1
 8003ca6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003caa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003e50 <_svfiprintf_r+0x1ec>
 8003cae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003cb2:	4623      	mov	r3, r4
 8003cb4:	469a      	mov	sl, r3
 8003cb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cba:	b10a      	cbz	r2, 8003cc0 <_svfiprintf_r+0x5c>
 8003cbc:	2a25      	cmp	r2, #37	; 0x25
 8003cbe:	d1f9      	bne.n	8003cb4 <_svfiprintf_r+0x50>
 8003cc0:	ebba 0b04 	subs.w	fp, sl, r4
 8003cc4:	d00b      	beq.n	8003cde <_svfiprintf_r+0x7a>
 8003cc6:	465b      	mov	r3, fp
 8003cc8:	4622      	mov	r2, r4
 8003cca:	4629      	mov	r1, r5
 8003ccc:	4638      	mov	r0, r7
 8003cce:	f7ff ff6d 	bl	8003bac <__ssputs_r>
 8003cd2:	3001      	adds	r0, #1
 8003cd4:	f000 80aa 	beq.w	8003e2c <_svfiprintf_r+0x1c8>
 8003cd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cda:	445a      	add	r2, fp
 8003cdc:	9209      	str	r2, [sp, #36]	; 0x24
 8003cde:	f89a 3000 	ldrb.w	r3, [sl]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 80a2 	beq.w	8003e2c <_svfiprintf_r+0x1c8>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f04f 32ff 	mov.w	r2, #4294967295
 8003cee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cf2:	f10a 0a01 	add.w	sl, sl, #1
 8003cf6:	9304      	str	r3, [sp, #16]
 8003cf8:	9307      	str	r3, [sp, #28]
 8003cfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cfe:	931a      	str	r3, [sp, #104]	; 0x68
 8003d00:	4654      	mov	r4, sl
 8003d02:	2205      	movs	r2, #5
 8003d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d08:	4851      	ldr	r0, [pc, #324]	; (8003e50 <_svfiprintf_r+0x1ec>)
 8003d0a:	f001 f97d 	bl	8005008 <memchr>
 8003d0e:	9a04      	ldr	r2, [sp, #16]
 8003d10:	b9d8      	cbnz	r0, 8003d4a <_svfiprintf_r+0xe6>
 8003d12:	06d0      	lsls	r0, r2, #27
 8003d14:	bf44      	itt	mi
 8003d16:	2320      	movmi	r3, #32
 8003d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d1c:	0711      	lsls	r1, r2, #28
 8003d1e:	bf44      	itt	mi
 8003d20:	232b      	movmi	r3, #43	; 0x2b
 8003d22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d26:	f89a 3000 	ldrb.w	r3, [sl]
 8003d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8003d2c:	d015      	beq.n	8003d5a <_svfiprintf_r+0xf6>
 8003d2e:	4654      	mov	r4, sl
 8003d30:	2000      	movs	r0, #0
 8003d32:	f04f 0c0a 	mov.w	ip, #10
 8003d36:	9a07      	ldr	r2, [sp, #28]
 8003d38:	4621      	mov	r1, r4
 8003d3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d3e:	3b30      	subs	r3, #48	; 0x30
 8003d40:	2b09      	cmp	r3, #9
 8003d42:	d94e      	bls.n	8003de2 <_svfiprintf_r+0x17e>
 8003d44:	b1b0      	cbz	r0, 8003d74 <_svfiprintf_r+0x110>
 8003d46:	9207      	str	r2, [sp, #28]
 8003d48:	e014      	b.n	8003d74 <_svfiprintf_r+0x110>
 8003d4a:	eba0 0308 	sub.w	r3, r0, r8
 8003d4e:	fa09 f303 	lsl.w	r3, r9, r3
 8003d52:	4313      	orrs	r3, r2
 8003d54:	46a2      	mov	sl, r4
 8003d56:	9304      	str	r3, [sp, #16]
 8003d58:	e7d2      	b.n	8003d00 <_svfiprintf_r+0x9c>
 8003d5a:	9b03      	ldr	r3, [sp, #12]
 8003d5c:	1d19      	adds	r1, r3, #4
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	9103      	str	r1, [sp, #12]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	bfbb      	ittet	lt
 8003d66:	425b      	neglt	r3, r3
 8003d68:	f042 0202 	orrlt.w	r2, r2, #2
 8003d6c:	9307      	strge	r3, [sp, #28]
 8003d6e:	9307      	strlt	r3, [sp, #28]
 8003d70:	bfb8      	it	lt
 8003d72:	9204      	strlt	r2, [sp, #16]
 8003d74:	7823      	ldrb	r3, [r4, #0]
 8003d76:	2b2e      	cmp	r3, #46	; 0x2e
 8003d78:	d10c      	bne.n	8003d94 <_svfiprintf_r+0x130>
 8003d7a:	7863      	ldrb	r3, [r4, #1]
 8003d7c:	2b2a      	cmp	r3, #42	; 0x2a
 8003d7e:	d135      	bne.n	8003dec <_svfiprintf_r+0x188>
 8003d80:	9b03      	ldr	r3, [sp, #12]
 8003d82:	3402      	adds	r4, #2
 8003d84:	1d1a      	adds	r2, r3, #4
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	9203      	str	r2, [sp, #12]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	bfb8      	it	lt
 8003d8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d92:	9305      	str	r3, [sp, #20]
 8003d94:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003e54 <_svfiprintf_r+0x1f0>
 8003d98:	2203      	movs	r2, #3
 8003d9a:	4650      	mov	r0, sl
 8003d9c:	7821      	ldrb	r1, [r4, #0]
 8003d9e:	f001 f933 	bl	8005008 <memchr>
 8003da2:	b140      	cbz	r0, 8003db6 <_svfiprintf_r+0x152>
 8003da4:	2340      	movs	r3, #64	; 0x40
 8003da6:	eba0 000a 	sub.w	r0, r0, sl
 8003daa:	fa03 f000 	lsl.w	r0, r3, r0
 8003dae:	9b04      	ldr	r3, [sp, #16]
 8003db0:	3401      	adds	r4, #1
 8003db2:	4303      	orrs	r3, r0
 8003db4:	9304      	str	r3, [sp, #16]
 8003db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dba:	2206      	movs	r2, #6
 8003dbc:	4826      	ldr	r0, [pc, #152]	; (8003e58 <_svfiprintf_r+0x1f4>)
 8003dbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003dc2:	f001 f921 	bl	8005008 <memchr>
 8003dc6:	2800      	cmp	r0, #0
 8003dc8:	d038      	beq.n	8003e3c <_svfiprintf_r+0x1d8>
 8003dca:	4b24      	ldr	r3, [pc, #144]	; (8003e5c <_svfiprintf_r+0x1f8>)
 8003dcc:	bb1b      	cbnz	r3, 8003e16 <_svfiprintf_r+0x1b2>
 8003dce:	9b03      	ldr	r3, [sp, #12]
 8003dd0:	3307      	adds	r3, #7
 8003dd2:	f023 0307 	bic.w	r3, r3, #7
 8003dd6:	3308      	adds	r3, #8
 8003dd8:	9303      	str	r3, [sp, #12]
 8003dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ddc:	4433      	add	r3, r6
 8003dde:	9309      	str	r3, [sp, #36]	; 0x24
 8003de0:	e767      	b.n	8003cb2 <_svfiprintf_r+0x4e>
 8003de2:	460c      	mov	r4, r1
 8003de4:	2001      	movs	r0, #1
 8003de6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003dea:	e7a5      	b.n	8003d38 <_svfiprintf_r+0xd4>
 8003dec:	2300      	movs	r3, #0
 8003dee:	f04f 0c0a 	mov.w	ip, #10
 8003df2:	4619      	mov	r1, r3
 8003df4:	3401      	adds	r4, #1
 8003df6:	9305      	str	r3, [sp, #20]
 8003df8:	4620      	mov	r0, r4
 8003dfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003dfe:	3a30      	subs	r2, #48	; 0x30
 8003e00:	2a09      	cmp	r2, #9
 8003e02:	d903      	bls.n	8003e0c <_svfiprintf_r+0x1a8>
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0c5      	beq.n	8003d94 <_svfiprintf_r+0x130>
 8003e08:	9105      	str	r1, [sp, #20]
 8003e0a:	e7c3      	b.n	8003d94 <_svfiprintf_r+0x130>
 8003e0c:	4604      	mov	r4, r0
 8003e0e:	2301      	movs	r3, #1
 8003e10:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e14:	e7f0      	b.n	8003df8 <_svfiprintf_r+0x194>
 8003e16:	ab03      	add	r3, sp, #12
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	462a      	mov	r2, r5
 8003e1c:	4638      	mov	r0, r7
 8003e1e:	4b10      	ldr	r3, [pc, #64]	; (8003e60 <_svfiprintf_r+0x1fc>)
 8003e20:	a904      	add	r1, sp, #16
 8003e22:	f3af 8000 	nop.w
 8003e26:	1c42      	adds	r2, r0, #1
 8003e28:	4606      	mov	r6, r0
 8003e2a:	d1d6      	bne.n	8003dda <_svfiprintf_r+0x176>
 8003e2c:	89ab      	ldrh	r3, [r5, #12]
 8003e2e:	065b      	lsls	r3, r3, #25
 8003e30:	f53f af2c 	bmi.w	8003c8c <_svfiprintf_r+0x28>
 8003e34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e36:	b01d      	add	sp, #116	; 0x74
 8003e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e3c:	ab03      	add	r3, sp, #12
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	462a      	mov	r2, r5
 8003e42:	4638      	mov	r0, r7
 8003e44:	4b06      	ldr	r3, [pc, #24]	; (8003e60 <_svfiprintf_r+0x1fc>)
 8003e46:	a904      	add	r1, sp, #16
 8003e48:	f000 f9d4 	bl	80041f4 <_printf_i>
 8003e4c:	e7eb      	b.n	8003e26 <_svfiprintf_r+0x1c2>
 8003e4e:	bf00      	nop
 8003e50:	08005a6c 	.word	0x08005a6c
 8003e54:	08005a72 	.word	0x08005a72
 8003e58:	08005a76 	.word	0x08005a76
 8003e5c:	00000000 	.word	0x00000000
 8003e60:	08003bad 	.word	0x08003bad

08003e64 <__sfputc_r>:
 8003e64:	6893      	ldr	r3, [r2, #8]
 8003e66:	b410      	push	{r4}
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	6093      	str	r3, [r2, #8]
 8003e6e:	da07      	bge.n	8003e80 <__sfputc_r+0x1c>
 8003e70:	6994      	ldr	r4, [r2, #24]
 8003e72:	42a3      	cmp	r3, r4
 8003e74:	db01      	blt.n	8003e7a <__sfputc_r+0x16>
 8003e76:	290a      	cmp	r1, #10
 8003e78:	d102      	bne.n	8003e80 <__sfputc_r+0x1c>
 8003e7a:	bc10      	pop	{r4}
 8003e7c:	f7ff bd28 	b.w	80038d0 <__swbuf_r>
 8003e80:	6813      	ldr	r3, [r2, #0]
 8003e82:	1c58      	adds	r0, r3, #1
 8003e84:	6010      	str	r0, [r2, #0]
 8003e86:	7019      	strb	r1, [r3, #0]
 8003e88:	4608      	mov	r0, r1
 8003e8a:	bc10      	pop	{r4}
 8003e8c:	4770      	bx	lr

08003e8e <__sfputs_r>:
 8003e8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e90:	4606      	mov	r6, r0
 8003e92:	460f      	mov	r7, r1
 8003e94:	4614      	mov	r4, r2
 8003e96:	18d5      	adds	r5, r2, r3
 8003e98:	42ac      	cmp	r4, r5
 8003e9a:	d101      	bne.n	8003ea0 <__sfputs_r+0x12>
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	e007      	b.n	8003eb0 <__sfputs_r+0x22>
 8003ea0:	463a      	mov	r2, r7
 8003ea2:	4630      	mov	r0, r6
 8003ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ea8:	f7ff ffdc 	bl	8003e64 <__sfputc_r>
 8003eac:	1c43      	adds	r3, r0, #1
 8003eae:	d1f3      	bne.n	8003e98 <__sfputs_r+0xa>
 8003eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003eb4 <_vfiprintf_r>:
 8003eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eb8:	460d      	mov	r5, r1
 8003eba:	4614      	mov	r4, r2
 8003ebc:	4698      	mov	r8, r3
 8003ebe:	4606      	mov	r6, r0
 8003ec0:	b09d      	sub	sp, #116	; 0x74
 8003ec2:	b118      	cbz	r0, 8003ecc <_vfiprintf_r+0x18>
 8003ec4:	6983      	ldr	r3, [r0, #24]
 8003ec6:	b90b      	cbnz	r3, 8003ecc <_vfiprintf_r+0x18>
 8003ec8:	f7ff f924 	bl	8003114 <__sinit>
 8003ecc:	4b89      	ldr	r3, [pc, #548]	; (80040f4 <_vfiprintf_r+0x240>)
 8003ece:	429d      	cmp	r5, r3
 8003ed0:	d11b      	bne.n	8003f0a <_vfiprintf_r+0x56>
 8003ed2:	6875      	ldr	r5, [r6, #4]
 8003ed4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ed6:	07d9      	lsls	r1, r3, #31
 8003ed8:	d405      	bmi.n	8003ee6 <_vfiprintf_r+0x32>
 8003eda:	89ab      	ldrh	r3, [r5, #12]
 8003edc:	059a      	lsls	r2, r3, #22
 8003ede:	d402      	bmi.n	8003ee6 <_vfiprintf_r+0x32>
 8003ee0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ee2:	f7ff f9f6 	bl	80032d2 <__retarget_lock_acquire_recursive>
 8003ee6:	89ab      	ldrh	r3, [r5, #12]
 8003ee8:	071b      	lsls	r3, r3, #28
 8003eea:	d501      	bpl.n	8003ef0 <_vfiprintf_r+0x3c>
 8003eec:	692b      	ldr	r3, [r5, #16]
 8003eee:	b9eb      	cbnz	r3, 8003f2c <_vfiprintf_r+0x78>
 8003ef0:	4629      	mov	r1, r5
 8003ef2:	4630      	mov	r0, r6
 8003ef4:	f7ff fd50 	bl	8003998 <__swsetup_r>
 8003ef8:	b1c0      	cbz	r0, 8003f2c <_vfiprintf_r+0x78>
 8003efa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003efc:	07dc      	lsls	r4, r3, #31
 8003efe:	d50e      	bpl.n	8003f1e <_vfiprintf_r+0x6a>
 8003f00:	f04f 30ff 	mov.w	r0, #4294967295
 8003f04:	b01d      	add	sp, #116	; 0x74
 8003f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f0a:	4b7b      	ldr	r3, [pc, #492]	; (80040f8 <_vfiprintf_r+0x244>)
 8003f0c:	429d      	cmp	r5, r3
 8003f0e:	d101      	bne.n	8003f14 <_vfiprintf_r+0x60>
 8003f10:	68b5      	ldr	r5, [r6, #8]
 8003f12:	e7df      	b.n	8003ed4 <_vfiprintf_r+0x20>
 8003f14:	4b79      	ldr	r3, [pc, #484]	; (80040fc <_vfiprintf_r+0x248>)
 8003f16:	429d      	cmp	r5, r3
 8003f18:	bf08      	it	eq
 8003f1a:	68f5      	ldreq	r5, [r6, #12]
 8003f1c:	e7da      	b.n	8003ed4 <_vfiprintf_r+0x20>
 8003f1e:	89ab      	ldrh	r3, [r5, #12]
 8003f20:	0598      	lsls	r0, r3, #22
 8003f22:	d4ed      	bmi.n	8003f00 <_vfiprintf_r+0x4c>
 8003f24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f26:	f7ff f9d5 	bl	80032d4 <__retarget_lock_release_recursive>
 8003f2a:	e7e9      	b.n	8003f00 <_vfiprintf_r+0x4c>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8003f30:	2320      	movs	r3, #32
 8003f32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f36:	2330      	movs	r3, #48	; 0x30
 8003f38:	f04f 0901 	mov.w	r9, #1
 8003f3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f40:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004100 <_vfiprintf_r+0x24c>
 8003f44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f48:	4623      	mov	r3, r4
 8003f4a:	469a      	mov	sl, r3
 8003f4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f50:	b10a      	cbz	r2, 8003f56 <_vfiprintf_r+0xa2>
 8003f52:	2a25      	cmp	r2, #37	; 0x25
 8003f54:	d1f9      	bne.n	8003f4a <_vfiprintf_r+0x96>
 8003f56:	ebba 0b04 	subs.w	fp, sl, r4
 8003f5a:	d00b      	beq.n	8003f74 <_vfiprintf_r+0xc0>
 8003f5c:	465b      	mov	r3, fp
 8003f5e:	4622      	mov	r2, r4
 8003f60:	4629      	mov	r1, r5
 8003f62:	4630      	mov	r0, r6
 8003f64:	f7ff ff93 	bl	8003e8e <__sfputs_r>
 8003f68:	3001      	adds	r0, #1
 8003f6a:	f000 80aa 	beq.w	80040c2 <_vfiprintf_r+0x20e>
 8003f6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f70:	445a      	add	r2, fp
 8003f72:	9209      	str	r2, [sp, #36]	; 0x24
 8003f74:	f89a 3000 	ldrb.w	r3, [sl]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 80a2 	beq.w	80040c2 <_vfiprintf_r+0x20e>
 8003f7e:	2300      	movs	r3, #0
 8003f80:	f04f 32ff 	mov.w	r2, #4294967295
 8003f84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f88:	f10a 0a01 	add.w	sl, sl, #1
 8003f8c:	9304      	str	r3, [sp, #16]
 8003f8e:	9307      	str	r3, [sp, #28]
 8003f90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f94:	931a      	str	r3, [sp, #104]	; 0x68
 8003f96:	4654      	mov	r4, sl
 8003f98:	2205      	movs	r2, #5
 8003f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f9e:	4858      	ldr	r0, [pc, #352]	; (8004100 <_vfiprintf_r+0x24c>)
 8003fa0:	f001 f832 	bl	8005008 <memchr>
 8003fa4:	9a04      	ldr	r2, [sp, #16]
 8003fa6:	b9d8      	cbnz	r0, 8003fe0 <_vfiprintf_r+0x12c>
 8003fa8:	06d1      	lsls	r1, r2, #27
 8003faa:	bf44      	itt	mi
 8003fac:	2320      	movmi	r3, #32
 8003fae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fb2:	0713      	lsls	r3, r2, #28
 8003fb4:	bf44      	itt	mi
 8003fb6:	232b      	movmi	r3, #43	; 0x2b
 8003fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fbc:	f89a 3000 	ldrb.w	r3, [sl]
 8003fc0:	2b2a      	cmp	r3, #42	; 0x2a
 8003fc2:	d015      	beq.n	8003ff0 <_vfiprintf_r+0x13c>
 8003fc4:	4654      	mov	r4, sl
 8003fc6:	2000      	movs	r0, #0
 8003fc8:	f04f 0c0a 	mov.w	ip, #10
 8003fcc:	9a07      	ldr	r2, [sp, #28]
 8003fce:	4621      	mov	r1, r4
 8003fd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fd4:	3b30      	subs	r3, #48	; 0x30
 8003fd6:	2b09      	cmp	r3, #9
 8003fd8:	d94e      	bls.n	8004078 <_vfiprintf_r+0x1c4>
 8003fda:	b1b0      	cbz	r0, 800400a <_vfiprintf_r+0x156>
 8003fdc:	9207      	str	r2, [sp, #28]
 8003fde:	e014      	b.n	800400a <_vfiprintf_r+0x156>
 8003fe0:	eba0 0308 	sub.w	r3, r0, r8
 8003fe4:	fa09 f303 	lsl.w	r3, r9, r3
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	46a2      	mov	sl, r4
 8003fec:	9304      	str	r3, [sp, #16]
 8003fee:	e7d2      	b.n	8003f96 <_vfiprintf_r+0xe2>
 8003ff0:	9b03      	ldr	r3, [sp, #12]
 8003ff2:	1d19      	adds	r1, r3, #4
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	9103      	str	r1, [sp, #12]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bfbb      	ittet	lt
 8003ffc:	425b      	neglt	r3, r3
 8003ffe:	f042 0202 	orrlt.w	r2, r2, #2
 8004002:	9307      	strge	r3, [sp, #28]
 8004004:	9307      	strlt	r3, [sp, #28]
 8004006:	bfb8      	it	lt
 8004008:	9204      	strlt	r2, [sp, #16]
 800400a:	7823      	ldrb	r3, [r4, #0]
 800400c:	2b2e      	cmp	r3, #46	; 0x2e
 800400e:	d10c      	bne.n	800402a <_vfiprintf_r+0x176>
 8004010:	7863      	ldrb	r3, [r4, #1]
 8004012:	2b2a      	cmp	r3, #42	; 0x2a
 8004014:	d135      	bne.n	8004082 <_vfiprintf_r+0x1ce>
 8004016:	9b03      	ldr	r3, [sp, #12]
 8004018:	3402      	adds	r4, #2
 800401a:	1d1a      	adds	r2, r3, #4
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	9203      	str	r2, [sp, #12]
 8004020:	2b00      	cmp	r3, #0
 8004022:	bfb8      	it	lt
 8004024:	f04f 33ff 	movlt.w	r3, #4294967295
 8004028:	9305      	str	r3, [sp, #20]
 800402a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004104 <_vfiprintf_r+0x250>
 800402e:	2203      	movs	r2, #3
 8004030:	4650      	mov	r0, sl
 8004032:	7821      	ldrb	r1, [r4, #0]
 8004034:	f000 ffe8 	bl	8005008 <memchr>
 8004038:	b140      	cbz	r0, 800404c <_vfiprintf_r+0x198>
 800403a:	2340      	movs	r3, #64	; 0x40
 800403c:	eba0 000a 	sub.w	r0, r0, sl
 8004040:	fa03 f000 	lsl.w	r0, r3, r0
 8004044:	9b04      	ldr	r3, [sp, #16]
 8004046:	3401      	adds	r4, #1
 8004048:	4303      	orrs	r3, r0
 800404a:	9304      	str	r3, [sp, #16]
 800404c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004050:	2206      	movs	r2, #6
 8004052:	482d      	ldr	r0, [pc, #180]	; (8004108 <_vfiprintf_r+0x254>)
 8004054:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004058:	f000 ffd6 	bl	8005008 <memchr>
 800405c:	2800      	cmp	r0, #0
 800405e:	d03f      	beq.n	80040e0 <_vfiprintf_r+0x22c>
 8004060:	4b2a      	ldr	r3, [pc, #168]	; (800410c <_vfiprintf_r+0x258>)
 8004062:	bb1b      	cbnz	r3, 80040ac <_vfiprintf_r+0x1f8>
 8004064:	9b03      	ldr	r3, [sp, #12]
 8004066:	3307      	adds	r3, #7
 8004068:	f023 0307 	bic.w	r3, r3, #7
 800406c:	3308      	adds	r3, #8
 800406e:	9303      	str	r3, [sp, #12]
 8004070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004072:	443b      	add	r3, r7
 8004074:	9309      	str	r3, [sp, #36]	; 0x24
 8004076:	e767      	b.n	8003f48 <_vfiprintf_r+0x94>
 8004078:	460c      	mov	r4, r1
 800407a:	2001      	movs	r0, #1
 800407c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004080:	e7a5      	b.n	8003fce <_vfiprintf_r+0x11a>
 8004082:	2300      	movs	r3, #0
 8004084:	f04f 0c0a 	mov.w	ip, #10
 8004088:	4619      	mov	r1, r3
 800408a:	3401      	adds	r4, #1
 800408c:	9305      	str	r3, [sp, #20]
 800408e:	4620      	mov	r0, r4
 8004090:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004094:	3a30      	subs	r2, #48	; 0x30
 8004096:	2a09      	cmp	r2, #9
 8004098:	d903      	bls.n	80040a2 <_vfiprintf_r+0x1ee>
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0c5      	beq.n	800402a <_vfiprintf_r+0x176>
 800409e:	9105      	str	r1, [sp, #20]
 80040a0:	e7c3      	b.n	800402a <_vfiprintf_r+0x176>
 80040a2:	4604      	mov	r4, r0
 80040a4:	2301      	movs	r3, #1
 80040a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80040aa:	e7f0      	b.n	800408e <_vfiprintf_r+0x1da>
 80040ac:	ab03      	add	r3, sp, #12
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	462a      	mov	r2, r5
 80040b2:	4630      	mov	r0, r6
 80040b4:	4b16      	ldr	r3, [pc, #88]	; (8004110 <_vfiprintf_r+0x25c>)
 80040b6:	a904      	add	r1, sp, #16
 80040b8:	f3af 8000 	nop.w
 80040bc:	4607      	mov	r7, r0
 80040be:	1c78      	adds	r0, r7, #1
 80040c0:	d1d6      	bne.n	8004070 <_vfiprintf_r+0x1bc>
 80040c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040c4:	07d9      	lsls	r1, r3, #31
 80040c6:	d405      	bmi.n	80040d4 <_vfiprintf_r+0x220>
 80040c8:	89ab      	ldrh	r3, [r5, #12]
 80040ca:	059a      	lsls	r2, r3, #22
 80040cc:	d402      	bmi.n	80040d4 <_vfiprintf_r+0x220>
 80040ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040d0:	f7ff f900 	bl	80032d4 <__retarget_lock_release_recursive>
 80040d4:	89ab      	ldrh	r3, [r5, #12]
 80040d6:	065b      	lsls	r3, r3, #25
 80040d8:	f53f af12 	bmi.w	8003f00 <_vfiprintf_r+0x4c>
 80040dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040de:	e711      	b.n	8003f04 <_vfiprintf_r+0x50>
 80040e0:	ab03      	add	r3, sp, #12
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	462a      	mov	r2, r5
 80040e6:	4630      	mov	r0, r6
 80040e8:	4b09      	ldr	r3, [pc, #36]	; (8004110 <_vfiprintf_r+0x25c>)
 80040ea:	a904      	add	r1, sp, #16
 80040ec:	f000 f882 	bl	80041f4 <_printf_i>
 80040f0:	e7e4      	b.n	80040bc <_vfiprintf_r+0x208>
 80040f2:	bf00      	nop
 80040f4:	08005a28 	.word	0x08005a28
 80040f8:	08005a48 	.word	0x08005a48
 80040fc:	08005a08 	.word	0x08005a08
 8004100:	08005a6c 	.word	0x08005a6c
 8004104:	08005a72 	.word	0x08005a72
 8004108:	08005a76 	.word	0x08005a76
 800410c:	00000000 	.word	0x00000000
 8004110:	08003e8f 	.word	0x08003e8f

08004114 <_printf_common>:
 8004114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004118:	4616      	mov	r6, r2
 800411a:	4699      	mov	r9, r3
 800411c:	688a      	ldr	r2, [r1, #8]
 800411e:	690b      	ldr	r3, [r1, #16]
 8004120:	4607      	mov	r7, r0
 8004122:	4293      	cmp	r3, r2
 8004124:	bfb8      	it	lt
 8004126:	4613      	movlt	r3, r2
 8004128:	6033      	str	r3, [r6, #0]
 800412a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800412e:	460c      	mov	r4, r1
 8004130:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004134:	b10a      	cbz	r2, 800413a <_printf_common+0x26>
 8004136:	3301      	adds	r3, #1
 8004138:	6033      	str	r3, [r6, #0]
 800413a:	6823      	ldr	r3, [r4, #0]
 800413c:	0699      	lsls	r1, r3, #26
 800413e:	bf42      	ittt	mi
 8004140:	6833      	ldrmi	r3, [r6, #0]
 8004142:	3302      	addmi	r3, #2
 8004144:	6033      	strmi	r3, [r6, #0]
 8004146:	6825      	ldr	r5, [r4, #0]
 8004148:	f015 0506 	ands.w	r5, r5, #6
 800414c:	d106      	bne.n	800415c <_printf_common+0x48>
 800414e:	f104 0a19 	add.w	sl, r4, #25
 8004152:	68e3      	ldr	r3, [r4, #12]
 8004154:	6832      	ldr	r2, [r6, #0]
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	42ab      	cmp	r3, r5
 800415a:	dc28      	bgt.n	80041ae <_printf_common+0x9a>
 800415c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004160:	1e13      	subs	r3, r2, #0
 8004162:	6822      	ldr	r2, [r4, #0]
 8004164:	bf18      	it	ne
 8004166:	2301      	movne	r3, #1
 8004168:	0692      	lsls	r2, r2, #26
 800416a:	d42d      	bmi.n	80041c8 <_printf_common+0xb4>
 800416c:	4649      	mov	r1, r9
 800416e:	4638      	mov	r0, r7
 8004170:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004174:	47c0      	blx	r8
 8004176:	3001      	adds	r0, #1
 8004178:	d020      	beq.n	80041bc <_printf_common+0xa8>
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	68e5      	ldr	r5, [r4, #12]
 800417e:	f003 0306 	and.w	r3, r3, #6
 8004182:	2b04      	cmp	r3, #4
 8004184:	bf18      	it	ne
 8004186:	2500      	movne	r5, #0
 8004188:	6832      	ldr	r2, [r6, #0]
 800418a:	f04f 0600 	mov.w	r6, #0
 800418e:	68a3      	ldr	r3, [r4, #8]
 8004190:	bf08      	it	eq
 8004192:	1aad      	subeq	r5, r5, r2
 8004194:	6922      	ldr	r2, [r4, #16]
 8004196:	bf08      	it	eq
 8004198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800419c:	4293      	cmp	r3, r2
 800419e:	bfc4      	itt	gt
 80041a0:	1a9b      	subgt	r3, r3, r2
 80041a2:	18ed      	addgt	r5, r5, r3
 80041a4:	341a      	adds	r4, #26
 80041a6:	42b5      	cmp	r5, r6
 80041a8:	d11a      	bne.n	80041e0 <_printf_common+0xcc>
 80041aa:	2000      	movs	r0, #0
 80041ac:	e008      	b.n	80041c0 <_printf_common+0xac>
 80041ae:	2301      	movs	r3, #1
 80041b0:	4652      	mov	r2, sl
 80041b2:	4649      	mov	r1, r9
 80041b4:	4638      	mov	r0, r7
 80041b6:	47c0      	blx	r8
 80041b8:	3001      	adds	r0, #1
 80041ba:	d103      	bne.n	80041c4 <_printf_common+0xb0>
 80041bc:	f04f 30ff 	mov.w	r0, #4294967295
 80041c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041c4:	3501      	adds	r5, #1
 80041c6:	e7c4      	b.n	8004152 <_printf_common+0x3e>
 80041c8:	2030      	movs	r0, #48	; 0x30
 80041ca:	18e1      	adds	r1, r4, r3
 80041cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041d6:	4422      	add	r2, r4
 80041d8:	3302      	adds	r3, #2
 80041da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041de:	e7c5      	b.n	800416c <_printf_common+0x58>
 80041e0:	2301      	movs	r3, #1
 80041e2:	4622      	mov	r2, r4
 80041e4:	4649      	mov	r1, r9
 80041e6:	4638      	mov	r0, r7
 80041e8:	47c0      	blx	r8
 80041ea:	3001      	adds	r0, #1
 80041ec:	d0e6      	beq.n	80041bc <_printf_common+0xa8>
 80041ee:	3601      	adds	r6, #1
 80041f0:	e7d9      	b.n	80041a6 <_printf_common+0x92>
	...

080041f4 <_printf_i>:
 80041f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041f8:	7e0f      	ldrb	r7, [r1, #24]
 80041fa:	4691      	mov	r9, r2
 80041fc:	2f78      	cmp	r7, #120	; 0x78
 80041fe:	4680      	mov	r8, r0
 8004200:	460c      	mov	r4, r1
 8004202:	469a      	mov	sl, r3
 8004204:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004206:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800420a:	d807      	bhi.n	800421c <_printf_i+0x28>
 800420c:	2f62      	cmp	r7, #98	; 0x62
 800420e:	d80a      	bhi.n	8004226 <_printf_i+0x32>
 8004210:	2f00      	cmp	r7, #0
 8004212:	f000 80d9 	beq.w	80043c8 <_printf_i+0x1d4>
 8004216:	2f58      	cmp	r7, #88	; 0x58
 8004218:	f000 80a4 	beq.w	8004364 <_printf_i+0x170>
 800421c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004220:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004224:	e03a      	b.n	800429c <_printf_i+0xa8>
 8004226:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800422a:	2b15      	cmp	r3, #21
 800422c:	d8f6      	bhi.n	800421c <_printf_i+0x28>
 800422e:	a101      	add	r1, pc, #4	; (adr r1, 8004234 <_printf_i+0x40>)
 8004230:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004234:	0800428d 	.word	0x0800428d
 8004238:	080042a1 	.word	0x080042a1
 800423c:	0800421d 	.word	0x0800421d
 8004240:	0800421d 	.word	0x0800421d
 8004244:	0800421d 	.word	0x0800421d
 8004248:	0800421d 	.word	0x0800421d
 800424c:	080042a1 	.word	0x080042a1
 8004250:	0800421d 	.word	0x0800421d
 8004254:	0800421d 	.word	0x0800421d
 8004258:	0800421d 	.word	0x0800421d
 800425c:	0800421d 	.word	0x0800421d
 8004260:	080043af 	.word	0x080043af
 8004264:	080042d1 	.word	0x080042d1
 8004268:	08004391 	.word	0x08004391
 800426c:	0800421d 	.word	0x0800421d
 8004270:	0800421d 	.word	0x0800421d
 8004274:	080043d1 	.word	0x080043d1
 8004278:	0800421d 	.word	0x0800421d
 800427c:	080042d1 	.word	0x080042d1
 8004280:	0800421d 	.word	0x0800421d
 8004284:	0800421d 	.word	0x0800421d
 8004288:	08004399 	.word	0x08004399
 800428c:	682b      	ldr	r3, [r5, #0]
 800428e:	1d1a      	adds	r2, r3, #4
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	602a      	str	r2, [r5, #0]
 8004294:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004298:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800429c:	2301      	movs	r3, #1
 800429e:	e0a4      	b.n	80043ea <_printf_i+0x1f6>
 80042a0:	6820      	ldr	r0, [r4, #0]
 80042a2:	6829      	ldr	r1, [r5, #0]
 80042a4:	0606      	lsls	r6, r0, #24
 80042a6:	f101 0304 	add.w	r3, r1, #4
 80042aa:	d50a      	bpl.n	80042c2 <_printf_i+0xce>
 80042ac:	680e      	ldr	r6, [r1, #0]
 80042ae:	602b      	str	r3, [r5, #0]
 80042b0:	2e00      	cmp	r6, #0
 80042b2:	da03      	bge.n	80042bc <_printf_i+0xc8>
 80042b4:	232d      	movs	r3, #45	; 0x2d
 80042b6:	4276      	negs	r6, r6
 80042b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042bc:	230a      	movs	r3, #10
 80042be:	485e      	ldr	r0, [pc, #376]	; (8004438 <_printf_i+0x244>)
 80042c0:	e019      	b.n	80042f6 <_printf_i+0x102>
 80042c2:	680e      	ldr	r6, [r1, #0]
 80042c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042c8:	602b      	str	r3, [r5, #0]
 80042ca:	bf18      	it	ne
 80042cc:	b236      	sxthne	r6, r6
 80042ce:	e7ef      	b.n	80042b0 <_printf_i+0xbc>
 80042d0:	682b      	ldr	r3, [r5, #0]
 80042d2:	6820      	ldr	r0, [r4, #0]
 80042d4:	1d19      	adds	r1, r3, #4
 80042d6:	6029      	str	r1, [r5, #0]
 80042d8:	0601      	lsls	r1, r0, #24
 80042da:	d501      	bpl.n	80042e0 <_printf_i+0xec>
 80042dc:	681e      	ldr	r6, [r3, #0]
 80042de:	e002      	b.n	80042e6 <_printf_i+0xf2>
 80042e0:	0646      	lsls	r6, r0, #25
 80042e2:	d5fb      	bpl.n	80042dc <_printf_i+0xe8>
 80042e4:	881e      	ldrh	r6, [r3, #0]
 80042e6:	2f6f      	cmp	r7, #111	; 0x6f
 80042e8:	bf0c      	ite	eq
 80042ea:	2308      	moveq	r3, #8
 80042ec:	230a      	movne	r3, #10
 80042ee:	4852      	ldr	r0, [pc, #328]	; (8004438 <_printf_i+0x244>)
 80042f0:	2100      	movs	r1, #0
 80042f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042f6:	6865      	ldr	r5, [r4, #4]
 80042f8:	2d00      	cmp	r5, #0
 80042fa:	bfa8      	it	ge
 80042fc:	6821      	ldrge	r1, [r4, #0]
 80042fe:	60a5      	str	r5, [r4, #8]
 8004300:	bfa4      	itt	ge
 8004302:	f021 0104 	bicge.w	r1, r1, #4
 8004306:	6021      	strge	r1, [r4, #0]
 8004308:	b90e      	cbnz	r6, 800430e <_printf_i+0x11a>
 800430a:	2d00      	cmp	r5, #0
 800430c:	d04d      	beq.n	80043aa <_printf_i+0x1b6>
 800430e:	4615      	mov	r5, r2
 8004310:	fbb6 f1f3 	udiv	r1, r6, r3
 8004314:	fb03 6711 	mls	r7, r3, r1, r6
 8004318:	5dc7      	ldrb	r7, [r0, r7]
 800431a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800431e:	4637      	mov	r7, r6
 8004320:	42bb      	cmp	r3, r7
 8004322:	460e      	mov	r6, r1
 8004324:	d9f4      	bls.n	8004310 <_printf_i+0x11c>
 8004326:	2b08      	cmp	r3, #8
 8004328:	d10b      	bne.n	8004342 <_printf_i+0x14e>
 800432a:	6823      	ldr	r3, [r4, #0]
 800432c:	07de      	lsls	r6, r3, #31
 800432e:	d508      	bpl.n	8004342 <_printf_i+0x14e>
 8004330:	6923      	ldr	r3, [r4, #16]
 8004332:	6861      	ldr	r1, [r4, #4]
 8004334:	4299      	cmp	r1, r3
 8004336:	bfde      	ittt	le
 8004338:	2330      	movle	r3, #48	; 0x30
 800433a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800433e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004342:	1b52      	subs	r2, r2, r5
 8004344:	6122      	str	r2, [r4, #16]
 8004346:	464b      	mov	r3, r9
 8004348:	4621      	mov	r1, r4
 800434a:	4640      	mov	r0, r8
 800434c:	f8cd a000 	str.w	sl, [sp]
 8004350:	aa03      	add	r2, sp, #12
 8004352:	f7ff fedf 	bl	8004114 <_printf_common>
 8004356:	3001      	adds	r0, #1
 8004358:	d14c      	bne.n	80043f4 <_printf_i+0x200>
 800435a:	f04f 30ff 	mov.w	r0, #4294967295
 800435e:	b004      	add	sp, #16
 8004360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004364:	4834      	ldr	r0, [pc, #208]	; (8004438 <_printf_i+0x244>)
 8004366:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800436a:	6829      	ldr	r1, [r5, #0]
 800436c:	6823      	ldr	r3, [r4, #0]
 800436e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004372:	6029      	str	r1, [r5, #0]
 8004374:	061d      	lsls	r5, r3, #24
 8004376:	d514      	bpl.n	80043a2 <_printf_i+0x1ae>
 8004378:	07df      	lsls	r7, r3, #31
 800437a:	bf44      	itt	mi
 800437c:	f043 0320 	orrmi.w	r3, r3, #32
 8004380:	6023      	strmi	r3, [r4, #0]
 8004382:	b91e      	cbnz	r6, 800438c <_printf_i+0x198>
 8004384:	6823      	ldr	r3, [r4, #0]
 8004386:	f023 0320 	bic.w	r3, r3, #32
 800438a:	6023      	str	r3, [r4, #0]
 800438c:	2310      	movs	r3, #16
 800438e:	e7af      	b.n	80042f0 <_printf_i+0xfc>
 8004390:	6823      	ldr	r3, [r4, #0]
 8004392:	f043 0320 	orr.w	r3, r3, #32
 8004396:	6023      	str	r3, [r4, #0]
 8004398:	2378      	movs	r3, #120	; 0x78
 800439a:	4828      	ldr	r0, [pc, #160]	; (800443c <_printf_i+0x248>)
 800439c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043a0:	e7e3      	b.n	800436a <_printf_i+0x176>
 80043a2:	0659      	lsls	r1, r3, #25
 80043a4:	bf48      	it	mi
 80043a6:	b2b6      	uxthmi	r6, r6
 80043a8:	e7e6      	b.n	8004378 <_printf_i+0x184>
 80043aa:	4615      	mov	r5, r2
 80043ac:	e7bb      	b.n	8004326 <_printf_i+0x132>
 80043ae:	682b      	ldr	r3, [r5, #0]
 80043b0:	6826      	ldr	r6, [r4, #0]
 80043b2:	1d18      	adds	r0, r3, #4
 80043b4:	6961      	ldr	r1, [r4, #20]
 80043b6:	6028      	str	r0, [r5, #0]
 80043b8:	0635      	lsls	r5, r6, #24
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	d501      	bpl.n	80043c2 <_printf_i+0x1ce>
 80043be:	6019      	str	r1, [r3, #0]
 80043c0:	e002      	b.n	80043c8 <_printf_i+0x1d4>
 80043c2:	0670      	lsls	r0, r6, #25
 80043c4:	d5fb      	bpl.n	80043be <_printf_i+0x1ca>
 80043c6:	8019      	strh	r1, [r3, #0]
 80043c8:	2300      	movs	r3, #0
 80043ca:	4615      	mov	r5, r2
 80043cc:	6123      	str	r3, [r4, #16]
 80043ce:	e7ba      	b.n	8004346 <_printf_i+0x152>
 80043d0:	682b      	ldr	r3, [r5, #0]
 80043d2:	2100      	movs	r1, #0
 80043d4:	1d1a      	adds	r2, r3, #4
 80043d6:	602a      	str	r2, [r5, #0]
 80043d8:	681d      	ldr	r5, [r3, #0]
 80043da:	6862      	ldr	r2, [r4, #4]
 80043dc:	4628      	mov	r0, r5
 80043de:	f000 fe13 	bl	8005008 <memchr>
 80043e2:	b108      	cbz	r0, 80043e8 <_printf_i+0x1f4>
 80043e4:	1b40      	subs	r0, r0, r5
 80043e6:	6060      	str	r0, [r4, #4]
 80043e8:	6863      	ldr	r3, [r4, #4]
 80043ea:	6123      	str	r3, [r4, #16]
 80043ec:	2300      	movs	r3, #0
 80043ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043f2:	e7a8      	b.n	8004346 <_printf_i+0x152>
 80043f4:	462a      	mov	r2, r5
 80043f6:	4649      	mov	r1, r9
 80043f8:	4640      	mov	r0, r8
 80043fa:	6923      	ldr	r3, [r4, #16]
 80043fc:	47d0      	blx	sl
 80043fe:	3001      	adds	r0, #1
 8004400:	d0ab      	beq.n	800435a <_printf_i+0x166>
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	079b      	lsls	r3, r3, #30
 8004406:	d413      	bmi.n	8004430 <_printf_i+0x23c>
 8004408:	68e0      	ldr	r0, [r4, #12]
 800440a:	9b03      	ldr	r3, [sp, #12]
 800440c:	4298      	cmp	r0, r3
 800440e:	bfb8      	it	lt
 8004410:	4618      	movlt	r0, r3
 8004412:	e7a4      	b.n	800435e <_printf_i+0x16a>
 8004414:	2301      	movs	r3, #1
 8004416:	4632      	mov	r2, r6
 8004418:	4649      	mov	r1, r9
 800441a:	4640      	mov	r0, r8
 800441c:	47d0      	blx	sl
 800441e:	3001      	adds	r0, #1
 8004420:	d09b      	beq.n	800435a <_printf_i+0x166>
 8004422:	3501      	adds	r5, #1
 8004424:	68e3      	ldr	r3, [r4, #12]
 8004426:	9903      	ldr	r1, [sp, #12]
 8004428:	1a5b      	subs	r3, r3, r1
 800442a:	42ab      	cmp	r3, r5
 800442c:	dcf2      	bgt.n	8004414 <_printf_i+0x220>
 800442e:	e7eb      	b.n	8004408 <_printf_i+0x214>
 8004430:	2500      	movs	r5, #0
 8004432:	f104 0619 	add.w	r6, r4, #25
 8004436:	e7f5      	b.n	8004424 <_printf_i+0x230>
 8004438:	08005a7d 	.word	0x08005a7d
 800443c:	08005a8e 	.word	0x08005a8e

08004440 <__svfiscanf_r>:
 8004440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004444:	461d      	mov	r5, r3
 8004446:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8004448:	4606      	mov	r6, r0
 800444a:	07df      	lsls	r7, r3, #31
 800444c:	460c      	mov	r4, r1
 800444e:	4692      	mov	sl, r2
 8004450:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8004454:	d405      	bmi.n	8004462 <__svfiscanf_r+0x22>
 8004456:	898b      	ldrh	r3, [r1, #12]
 8004458:	0598      	lsls	r0, r3, #22
 800445a:	d402      	bmi.n	8004462 <__svfiscanf_r+0x22>
 800445c:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800445e:	f7fe ff38 	bl	80032d2 <__retarget_lock_acquire_recursive>
 8004462:	2300      	movs	r3, #0
 8004464:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8004468:	4ba6      	ldr	r3, [pc, #664]	; (8004704 <__svfiscanf_r+0x2c4>)
 800446a:	f10d 0804 	add.w	r8, sp, #4
 800446e:	93a0      	str	r3, [sp, #640]	; 0x280
 8004470:	4ba5      	ldr	r3, [pc, #660]	; (8004708 <__svfiscanf_r+0x2c8>)
 8004472:	4fa6      	ldr	r7, [pc, #664]	; (800470c <__svfiscanf_r+0x2cc>)
 8004474:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8004710 <__svfiscanf_r+0x2d0>
 8004478:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800447c:	93a1      	str	r3, [sp, #644]	; 0x284
 800447e:	9500      	str	r5, [sp, #0]
 8004480:	f89a 3000 	ldrb.w	r3, [sl]
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 8173 	beq.w	8004770 <__svfiscanf_r+0x330>
 800448a:	5dd9      	ldrb	r1, [r3, r7]
 800448c:	f10a 0501 	add.w	r5, sl, #1
 8004490:	f011 0108 	ands.w	r1, r1, #8
 8004494:	d019      	beq.n	80044ca <__svfiscanf_r+0x8a>
 8004496:	6863      	ldr	r3, [r4, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	dd0f      	ble.n	80044bc <__svfiscanf_r+0x7c>
 800449c:	6823      	ldr	r3, [r4, #0]
 800449e:	781a      	ldrb	r2, [r3, #0]
 80044a0:	5cba      	ldrb	r2, [r7, r2]
 80044a2:	0711      	lsls	r1, r2, #28
 80044a4:	d401      	bmi.n	80044aa <__svfiscanf_r+0x6a>
 80044a6:	46aa      	mov	sl, r5
 80044a8:	e7ea      	b.n	8004480 <__svfiscanf_r+0x40>
 80044aa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80044ac:	3301      	adds	r3, #1
 80044ae:	3201      	adds	r2, #1
 80044b0:	9245      	str	r2, [sp, #276]	; 0x114
 80044b2:	6862      	ldr	r2, [r4, #4]
 80044b4:	6023      	str	r3, [r4, #0]
 80044b6:	3a01      	subs	r2, #1
 80044b8:	6062      	str	r2, [r4, #4]
 80044ba:	e7ec      	b.n	8004496 <__svfiscanf_r+0x56>
 80044bc:	4621      	mov	r1, r4
 80044be:	4630      	mov	r0, r6
 80044c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80044c2:	4798      	blx	r3
 80044c4:	2800      	cmp	r0, #0
 80044c6:	d0e9      	beq.n	800449c <__svfiscanf_r+0x5c>
 80044c8:	e7ed      	b.n	80044a6 <__svfiscanf_r+0x66>
 80044ca:	2b25      	cmp	r3, #37	; 0x25
 80044cc:	d012      	beq.n	80044f4 <__svfiscanf_r+0xb4>
 80044ce:	469a      	mov	sl, r3
 80044d0:	6863      	ldr	r3, [r4, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f340 8095 	ble.w	8004602 <__svfiscanf_r+0x1c2>
 80044d8:	6822      	ldr	r2, [r4, #0]
 80044da:	7813      	ldrb	r3, [r2, #0]
 80044dc:	4553      	cmp	r3, sl
 80044de:	f040 8147 	bne.w	8004770 <__svfiscanf_r+0x330>
 80044e2:	6863      	ldr	r3, [r4, #4]
 80044e4:	3201      	adds	r2, #1
 80044e6:	3b01      	subs	r3, #1
 80044e8:	6063      	str	r3, [r4, #4]
 80044ea:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80044ec:	6022      	str	r2, [r4, #0]
 80044ee:	3301      	adds	r3, #1
 80044f0:	9345      	str	r3, [sp, #276]	; 0x114
 80044f2:	e7d8      	b.n	80044a6 <__svfiscanf_r+0x66>
 80044f4:	9141      	str	r1, [sp, #260]	; 0x104
 80044f6:	9143      	str	r1, [sp, #268]	; 0x10c
 80044f8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80044fc:	220a      	movs	r2, #10
 80044fe:	2b2a      	cmp	r3, #42	; 0x2a
 8004500:	bf02      	ittt	eq
 8004502:	2310      	moveq	r3, #16
 8004504:	f10a 0502 	addeq.w	r5, sl, #2
 8004508:	9341      	streq	r3, [sp, #260]	; 0x104
 800450a:	46aa      	mov	sl, r5
 800450c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8004510:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8004514:	2b09      	cmp	r3, #9
 8004516:	d91e      	bls.n	8004556 <__svfiscanf_r+0x116>
 8004518:	2203      	movs	r2, #3
 800451a:	487d      	ldr	r0, [pc, #500]	; (8004710 <__svfiscanf_r+0x2d0>)
 800451c:	f000 fd74 	bl	8005008 <memchr>
 8004520:	b140      	cbz	r0, 8004534 <__svfiscanf_r+0xf4>
 8004522:	2301      	movs	r3, #1
 8004524:	4655      	mov	r5, sl
 8004526:	eba0 0009 	sub.w	r0, r0, r9
 800452a:	fa03 f000 	lsl.w	r0, r3, r0
 800452e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004530:	4318      	orrs	r0, r3
 8004532:	9041      	str	r0, [sp, #260]	; 0x104
 8004534:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004538:	2b78      	cmp	r3, #120	; 0x78
 800453a:	d807      	bhi.n	800454c <__svfiscanf_r+0x10c>
 800453c:	2b57      	cmp	r3, #87	; 0x57
 800453e:	d811      	bhi.n	8004564 <__svfiscanf_r+0x124>
 8004540:	2b25      	cmp	r3, #37	; 0x25
 8004542:	d0c4      	beq.n	80044ce <__svfiscanf_r+0x8e>
 8004544:	d858      	bhi.n	80045f8 <__svfiscanf_r+0x1b8>
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 80c8 	beq.w	80046dc <__svfiscanf_r+0x29c>
 800454c:	2303      	movs	r3, #3
 800454e:	9347      	str	r3, [sp, #284]	; 0x11c
 8004550:	230a      	movs	r3, #10
 8004552:	9342      	str	r3, [sp, #264]	; 0x108
 8004554:	e07c      	b.n	8004650 <__svfiscanf_r+0x210>
 8004556:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004558:	4655      	mov	r5, sl
 800455a:	fb02 1103 	mla	r1, r2, r3, r1
 800455e:	3930      	subs	r1, #48	; 0x30
 8004560:	9143      	str	r1, [sp, #268]	; 0x10c
 8004562:	e7d2      	b.n	800450a <__svfiscanf_r+0xca>
 8004564:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8004568:	2a20      	cmp	r2, #32
 800456a:	d8ef      	bhi.n	800454c <__svfiscanf_r+0x10c>
 800456c:	a101      	add	r1, pc, #4	; (adr r1, 8004574 <__svfiscanf_r+0x134>)
 800456e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004572:	bf00      	nop
 8004574:	0800463b 	.word	0x0800463b
 8004578:	0800454d 	.word	0x0800454d
 800457c:	0800454d 	.word	0x0800454d
 8004580:	08004699 	.word	0x08004699
 8004584:	0800454d 	.word	0x0800454d
 8004588:	0800454d 	.word	0x0800454d
 800458c:	0800454d 	.word	0x0800454d
 8004590:	0800454d 	.word	0x0800454d
 8004594:	0800454d 	.word	0x0800454d
 8004598:	0800454d 	.word	0x0800454d
 800459c:	0800454d 	.word	0x0800454d
 80045a0:	080046af 	.word	0x080046af
 80045a4:	08004685 	.word	0x08004685
 80045a8:	080045ff 	.word	0x080045ff
 80045ac:	080045ff 	.word	0x080045ff
 80045b0:	080045ff 	.word	0x080045ff
 80045b4:	0800454d 	.word	0x0800454d
 80045b8:	08004689 	.word	0x08004689
 80045bc:	0800454d 	.word	0x0800454d
 80045c0:	0800454d 	.word	0x0800454d
 80045c4:	0800454d 	.word	0x0800454d
 80045c8:	0800454d 	.word	0x0800454d
 80045cc:	080046bf 	.word	0x080046bf
 80045d0:	08004691 	.word	0x08004691
 80045d4:	08004633 	.word	0x08004633
 80045d8:	0800454d 	.word	0x0800454d
 80045dc:	0800454d 	.word	0x0800454d
 80045e0:	080046bb 	.word	0x080046bb
 80045e4:	0800454d 	.word	0x0800454d
 80045e8:	08004685 	.word	0x08004685
 80045ec:	0800454d 	.word	0x0800454d
 80045f0:	0800454d 	.word	0x0800454d
 80045f4:	0800463b 	.word	0x0800463b
 80045f8:	3b45      	subs	r3, #69	; 0x45
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d8a6      	bhi.n	800454c <__svfiscanf_r+0x10c>
 80045fe:	2305      	movs	r3, #5
 8004600:	e025      	b.n	800464e <__svfiscanf_r+0x20e>
 8004602:	4621      	mov	r1, r4
 8004604:	4630      	mov	r0, r6
 8004606:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004608:	4798      	blx	r3
 800460a:	2800      	cmp	r0, #0
 800460c:	f43f af64 	beq.w	80044d8 <__svfiscanf_r+0x98>
 8004610:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004612:	07da      	lsls	r2, r3, #31
 8004614:	f140 80a4 	bpl.w	8004760 <__svfiscanf_r+0x320>
 8004618:	9844      	ldr	r0, [sp, #272]	; 0x110
 800461a:	2800      	cmp	r0, #0
 800461c:	d067      	beq.n	80046ee <__svfiscanf_r+0x2ae>
 800461e:	89a3      	ldrh	r3, [r4, #12]
 8004620:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004624:	bf18      	it	ne
 8004626:	f04f 30ff 	movne.w	r0, #4294967295
 800462a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800462e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004632:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004634:	f042 0220 	orr.w	r2, r2, #32
 8004638:	9241      	str	r2, [sp, #260]	; 0x104
 800463a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800463c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004640:	9241      	str	r2, [sp, #260]	; 0x104
 8004642:	2210      	movs	r2, #16
 8004644:	2b6f      	cmp	r3, #111	; 0x6f
 8004646:	bf34      	ite	cc
 8004648:	2303      	movcc	r3, #3
 800464a:	2304      	movcs	r3, #4
 800464c:	9242      	str	r2, [sp, #264]	; 0x108
 800464e:	9347      	str	r3, [sp, #284]	; 0x11c
 8004650:	6863      	ldr	r3, [r4, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	dd4e      	ble.n	80046f4 <__svfiscanf_r+0x2b4>
 8004656:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004658:	065b      	lsls	r3, r3, #25
 800465a:	d404      	bmi.n	8004666 <__svfiscanf_r+0x226>
 800465c:	6823      	ldr	r3, [r4, #0]
 800465e:	781a      	ldrb	r2, [r3, #0]
 8004660:	5cba      	ldrb	r2, [r7, r2]
 8004662:	0710      	lsls	r0, r2, #28
 8004664:	d456      	bmi.n	8004714 <__svfiscanf_r+0x2d4>
 8004666:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004668:	2b02      	cmp	r3, #2
 800466a:	dc65      	bgt.n	8004738 <__svfiscanf_r+0x2f8>
 800466c:	466b      	mov	r3, sp
 800466e:	4622      	mov	r2, r4
 8004670:	4630      	mov	r0, r6
 8004672:	a941      	add	r1, sp, #260	; 0x104
 8004674:	f000 f8b2 	bl	80047dc <_scanf_chars>
 8004678:	2801      	cmp	r0, #1
 800467a:	d079      	beq.n	8004770 <__svfiscanf_r+0x330>
 800467c:	2802      	cmp	r0, #2
 800467e:	f47f af12 	bne.w	80044a6 <__svfiscanf_r+0x66>
 8004682:	e7c5      	b.n	8004610 <__svfiscanf_r+0x1d0>
 8004684:	220a      	movs	r2, #10
 8004686:	e7dd      	b.n	8004644 <__svfiscanf_r+0x204>
 8004688:	2300      	movs	r3, #0
 800468a:	9342      	str	r3, [sp, #264]	; 0x108
 800468c:	2303      	movs	r3, #3
 800468e:	e7de      	b.n	800464e <__svfiscanf_r+0x20e>
 8004690:	2308      	movs	r3, #8
 8004692:	9342      	str	r3, [sp, #264]	; 0x108
 8004694:	2304      	movs	r3, #4
 8004696:	e7da      	b.n	800464e <__svfiscanf_r+0x20e>
 8004698:	4629      	mov	r1, r5
 800469a:	4640      	mov	r0, r8
 800469c:	f000 fa98 	bl	8004bd0 <__sccl>
 80046a0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80046a2:	4605      	mov	r5, r0
 80046a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046a8:	9341      	str	r3, [sp, #260]	; 0x104
 80046aa:	2301      	movs	r3, #1
 80046ac:	e7cf      	b.n	800464e <__svfiscanf_r+0x20e>
 80046ae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80046b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046b4:	9341      	str	r3, [sp, #260]	; 0x104
 80046b6:	2300      	movs	r3, #0
 80046b8:	e7c9      	b.n	800464e <__svfiscanf_r+0x20e>
 80046ba:	2302      	movs	r3, #2
 80046bc:	e7c7      	b.n	800464e <__svfiscanf_r+0x20e>
 80046be:	9841      	ldr	r0, [sp, #260]	; 0x104
 80046c0:	06c3      	lsls	r3, r0, #27
 80046c2:	f53f aef0 	bmi.w	80044a6 <__svfiscanf_r+0x66>
 80046c6:	9b00      	ldr	r3, [sp, #0]
 80046c8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80046ca:	1d19      	adds	r1, r3, #4
 80046cc:	9100      	str	r1, [sp, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f010 0f01 	tst.w	r0, #1
 80046d4:	bf14      	ite	ne
 80046d6:	801a      	strhne	r2, [r3, #0]
 80046d8:	601a      	streq	r2, [r3, #0]
 80046da:	e6e4      	b.n	80044a6 <__svfiscanf_r+0x66>
 80046dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046de:	07d8      	lsls	r0, r3, #31
 80046e0:	d405      	bmi.n	80046ee <__svfiscanf_r+0x2ae>
 80046e2:	89a3      	ldrh	r3, [r4, #12]
 80046e4:	0599      	lsls	r1, r3, #22
 80046e6:	d402      	bmi.n	80046ee <__svfiscanf_r+0x2ae>
 80046e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046ea:	f7fe fdf3 	bl	80032d4 <__retarget_lock_release_recursive>
 80046ee:	f04f 30ff 	mov.w	r0, #4294967295
 80046f2:	e79a      	b.n	800462a <__svfiscanf_r+0x1ea>
 80046f4:	4621      	mov	r1, r4
 80046f6:	4630      	mov	r0, r6
 80046f8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80046fa:	4798      	blx	r3
 80046fc:	2800      	cmp	r0, #0
 80046fe:	d0aa      	beq.n	8004656 <__svfiscanf_r+0x216>
 8004700:	e786      	b.n	8004610 <__svfiscanf_r+0x1d0>
 8004702:	bf00      	nop
 8004704:	08004e95 	.word	0x08004e95
 8004708:	08004ab9 	.word	0x08004ab9
 800470c:	08005abb 	.word	0x08005abb
 8004710:	08005a72 	.word	0x08005a72
 8004714:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004716:	3201      	adds	r2, #1
 8004718:	9245      	str	r2, [sp, #276]	; 0x114
 800471a:	6862      	ldr	r2, [r4, #4]
 800471c:	3a01      	subs	r2, #1
 800471e:	2a00      	cmp	r2, #0
 8004720:	6062      	str	r2, [r4, #4]
 8004722:	dd02      	ble.n	800472a <__svfiscanf_r+0x2ea>
 8004724:	3301      	adds	r3, #1
 8004726:	6023      	str	r3, [r4, #0]
 8004728:	e798      	b.n	800465c <__svfiscanf_r+0x21c>
 800472a:	4621      	mov	r1, r4
 800472c:	4630      	mov	r0, r6
 800472e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004730:	4798      	blx	r3
 8004732:	2800      	cmp	r0, #0
 8004734:	d092      	beq.n	800465c <__svfiscanf_r+0x21c>
 8004736:	e76b      	b.n	8004610 <__svfiscanf_r+0x1d0>
 8004738:	2b04      	cmp	r3, #4
 800473a:	dc06      	bgt.n	800474a <__svfiscanf_r+0x30a>
 800473c:	466b      	mov	r3, sp
 800473e:	4622      	mov	r2, r4
 8004740:	4630      	mov	r0, r6
 8004742:	a941      	add	r1, sp, #260	; 0x104
 8004744:	f000 f8a4 	bl	8004890 <_scanf_i>
 8004748:	e796      	b.n	8004678 <__svfiscanf_r+0x238>
 800474a:	4b0f      	ldr	r3, [pc, #60]	; (8004788 <__svfiscanf_r+0x348>)
 800474c:	2b00      	cmp	r3, #0
 800474e:	f43f aeaa 	beq.w	80044a6 <__svfiscanf_r+0x66>
 8004752:	466b      	mov	r3, sp
 8004754:	4622      	mov	r2, r4
 8004756:	4630      	mov	r0, r6
 8004758:	a941      	add	r1, sp, #260	; 0x104
 800475a:	f3af 8000 	nop.w
 800475e:	e78b      	b.n	8004678 <__svfiscanf_r+0x238>
 8004760:	89a3      	ldrh	r3, [r4, #12]
 8004762:	0599      	lsls	r1, r3, #22
 8004764:	f53f af58 	bmi.w	8004618 <__svfiscanf_r+0x1d8>
 8004768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800476a:	f7fe fdb3 	bl	80032d4 <__retarget_lock_release_recursive>
 800476e:	e753      	b.n	8004618 <__svfiscanf_r+0x1d8>
 8004770:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004772:	07da      	lsls	r2, r3, #31
 8004774:	d405      	bmi.n	8004782 <__svfiscanf_r+0x342>
 8004776:	89a3      	ldrh	r3, [r4, #12]
 8004778:	059b      	lsls	r3, r3, #22
 800477a:	d402      	bmi.n	8004782 <__svfiscanf_r+0x342>
 800477c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800477e:	f7fe fda9 	bl	80032d4 <__retarget_lock_release_recursive>
 8004782:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004784:	e751      	b.n	800462a <__svfiscanf_r+0x1ea>
 8004786:	bf00      	nop
 8004788:	00000000 	.word	0x00000000

0800478c <_vfiscanf_r>:
 800478c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004790:	460c      	mov	r4, r1
 8004792:	4616      	mov	r6, r2
 8004794:	461f      	mov	r7, r3
 8004796:	4605      	mov	r5, r0
 8004798:	b118      	cbz	r0, 80047a2 <_vfiscanf_r+0x16>
 800479a:	6983      	ldr	r3, [r0, #24]
 800479c:	b90b      	cbnz	r3, 80047a2 <_vfiscanf_r+0x16>
 800479e:	f7fe fcb9 	bl	8003114 <__sinit>
 80047a2:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <_vfiscanf_r+0x44>)
 80047a4:	429c      	cmp	r4, r3
 80047a6:	d108      	bne.n	80047ba <_vfiscanf_r+0x2e>
 80047a8:	686c      	ldr	r4, [r5, #4]
 80047aa:	463b      	mov	r3, r7
 80047ac:	4632      	mov	r2, r6
 80047ae:	4621      	mov	r1, r4
 80047b0:	4628      	mov	r0, r5
 80047b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047b6:	f7ff be43 	b.w	8004440 <__svfiscanf_r>
 80047ba:	4b06      	ldr	r3, [pc, #24]	; (80047d4 <_vfiscanf_r+0x48>)
 80047bc:	429c      	cmp	r4, r3
 80047be:	d101      	bne.n	80047c4 <_vfiscanf_r+0x38>
 80047c0:	68ac      	ldr	r4, [r5, #8]
 80047c2:	e7f2      	b.n	80047aa <_vfiscanf_r+0x1e>
 80047c4:	4b04      	ldr	r3, [pc, #16]	; (80047d8 <_vfiscanf_r+0x4c>)
 80047c6:	429c      	cmp	r4, r3
 80047c8:	bf08      	it	eq
 80047ca:	68ec      	ldreq	r4, [r5, #12]
 80047cc:	e7ed      	b.n	80047aa <_vfiscanf_r+0x1e>
 80047ce:	bf00      	nop
 80047d0:	08005a28 	.word	0x08005a28
 80047d4:	08005a48 	.word	0x08005a48
 80047d8:	08005a08 	.word	0x08005a08

080047dc <_scanf_chars>:
 80047dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047e0:	4615      	mov	r5, r2
 80047e2:	688a      	ldr	r2, [r1, #8]
 80047e4:	4680      	mov	r8, r0
 80047e6:	460c      	mov	r4, r1
 80047e8:	b932      	cbnz	r2, 80047f8 <_scanf_chars+0x1c>
 80047ea:	698a      	ldr	r2, [r1, #24]
 80047ec:	2a00      	cmp	r2, #0
 80047ee:	bf0c      	ite	eq
 80047f0:	2201      	moveq	r2, #1
 80047f2:	f04f 32ff 	movne.w	r2, #4294967295
 80047f6:	608a      	str	r2, [r1, #8]
 80047f8:	2700      	movs	r7, #0
 80047fa:	6822      	ldr	r2, [r4, #0]
 80047fc:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800488c <_scanf_chars+0xb0>
 8004800:	06d1      	lsls	r1, r2, #27
 8004802:	bf5f      	itttt	pl
 8004804:	681a      	ldrpl	r2, [r3, #0]
 8004806:	1d11      	addpl	r1, r2, #4
 8004808:	6019      	strpl	r1, [r3, #0]
 800480a:	6816      	ldrpl	r6, [r2, #0]
 800480c:	69a0      	ldr	r0, [r4, #24]
 800480e:	b188      	cbz	r0, 8004834 <_scanf_chars+0x58>
 8004810:	2801      	cmp	r0, #1
 8004812:	d107      	bne.n	8004824 <_scanf_chars+0x48>
 8004814:	682b      	ldr	r3, [r5, #0]
 8004816:	781a      	ldrb	r2, [r3, #0]
 8004818:	6963      	ldr	r3, [r4, #20]
 800481a:	5c9b      	ldrb	r3, [r3, r2]
 800481c:	b953      	cbnz	r3, 8004834 <_scanf_chars+0x58>
 800481e:	2f00      	cmp	r7, #0
 8004820:	d031      	beq.n	8004886 <_scanf_chars+0xaa>
 8004822:	e022      	b.n	800486a <_scanf_chars+0x8e>
 8004824:	2802      	cmp	r0, #2
 8004826:	d120      	bne.n	800486a <_scanf_chars+0x8e>
 8004828:	682b      	ldr	r3, [r5, #0]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8004830:	071b      	lsls	r3, r3, #28
 8004832:	d41a      	bmi.n	800486a <_scanf_chars+0x8e>
 8004834:	6823      	ldr	r3, [r4, #0]
 8004836:	3701      	adds	r7, #1
 8004838:	06da      	lsls	r2, r3, #27
 800483a:	bf5e      	ittt	pl
 800483c:	682b      	ldrpl	r3, [r5, #0]
 800483e:	781b      	ldrbpl	r3, [r3, #0]
 8004840:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004844:	682a      	ldr	r2, [r5, #0]
 8004846:	686b      	ldr	r3, [r5, #4]
 8004848:	3201      	adds	r2, #1
 800484a:	602a      	str	r2, [r5, #0]
 800484c:	68a2      	ldr	r2, [r4, #8]
 800484e:	3b01      	subs	r3, #1
 8004850:	3a01      	subs	r2, #1
 8004852:	606b      	str	r3, [r5, #4]
 8004854:	60a2      	str	r2, [r4, #8]
 8004856:	b142      	cbz	r2, 800486a <_scanf_chars+0x8e>
 8004858:	2b00      	cmp	r3, #0
 800485a:	dcd7      	bgt.n	800480c <_scanf_chars+0x30>
 800485c:	4629      	mov	r1, r5
 800485e:	4640      	mov	r0, r8
 8004860:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004864:	4798      	blx	r3
 8004866:	2800      	cmp	r0, #0
 8004868:	d0d0      	beq.n	800480c <_scanf_chars+0x30>
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	f013 0310 	ands.w	r3, r3, #16
 8004870:	d105      	bne.n	800487e <_scanf_chars+0xa2>
 8004872:	68e2      	ldr	r2, [r4, #12]
 8004874:	3201      	adds	r2, #1
 8004876:	60e2      	str	r2, [r4, #12]
 8004878:	69a2      	ldr	r2, [r4, #24]
 800487a:	b102      	cbz	r2, 800487e <_scanf_chars+0xa2>
 800487c:	7033      	strb	r3, [r6, #0]
 800487e:	2000      	movs	r0, #0
 8004880:	6923      	ldr	r3, [r4, #16]
 8004882:	443b      	add	r3, r7
 8004884:	6123      	str	r3, [r4, #16]
 8004886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800488a:	bf00      	nop
 800488c:	08005abb 	.word	0x08005abb

08004890 <_scanf_i>:
 8004890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004894:	460c      	mov	r4, r1
 8004896:	4698      	mov	r8, r3
 8004898:	4b75      	ldr	r3, [pc, #468]	; (8004a70 <_scanf_i+0x1e0>)
 800489a:	b087      	sub	sp, #28
 800489c:	4682      	mov	sl, r0
 800489e:	4616      	mov	r6, r2
 80048a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80048a4:	ab03      	add	r3, sp, #12
 80048a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80048aa:	4b72      	ldr	r3, [pc, #456]	; (8004a74 <_scanf_i+0x1e4>)
 80048ac:	69a1      	ldr	r1, [r4, #24]
 80048ae:	4a72      	ldr	r2, [pc, #456]	; (8004a78 <_scanf_i+0x1e8>)
 80048b0:	4627      	mov	r7, r4
 80048b2:	2903      	cmp	r1, #3
 80048b4:	bf18      	it	ne
 80048b6:	461a      	movne	r2, r3
 80048b8:	68a3      	ldr	r3, [r4, #8]
 80048ba:	9201      	str	r2, [sp, #4]
 80048bc:	1e5a      	subs	r2, r3, #1
 80048be:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80048c2:	bf81      	itttt	hi
 80048c4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80048c8:	eb03 0905 	addhi.w	r9, r3, r5
 80048cc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80048d0:	60a3      	strhi	r3, [r4, #8]
 80048d2:	f857 3b1c 	ldr.w	r3, [r7], #28
 80048d6:	bf98      	it	ls
 80048d8:	f04f 0900 	movls.w	r9, #0
 80048dc:	463d      	mov	r5, r7
 80048de:	f04f 0b00 	mov.w	fp, #0
 80048e2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80048e6:	6023      	str	r3, [r4, #0]
 80048e8:	6831      	ldr	r1, [r6, #0]
 80048ea:	ab03      	add	r3, sp, #12
 80048ec:	2202      	movs	r2, #2
 80048ee:	7809      	ldrb	r1, [r1, #0]
 80048f0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80048f4:	f000 fb88 	bl	8005008 <memchr>
 80048f8:	b328      	cbz	r0, 8004946 <_scanf_i+0xb6>
 80048fa:	f1bb 0f01 	cmp.w	fp, #1
 80048fe:	d159      	bne.n	80049b4 <_scanf_i+0x124>
 8004900:	6862      	ldr	r2, [r4, #4]
 8004902:	b92a      	cbnz	r2, 8004910 <_scanf_i+0x80>
 8004904:	2308      	movs	r3, #8
 8004906:	6822      	ldr	r2, [r4, #0]
 8004908:	6063      	str	r3, [r4, #4]
 800490a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800490e:	6022      	str	r2, [r4, #0]
 8004910:	6822      	ldr	r2, [r4, #0]
 8004912:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004916:	6022      	str	r2, [r4, #0]
 8004918:	68a2      	ldr	r2, [r4, #8]
 800491a:	1e51      	subs	r1, r2, #1
 800491c:	60a1      	str	r1, [r4, #8]
 800491e:	b192      	cbz	r2, 8004946 <_scanf_i+0xb6>
 8004920:	6832      	ldr	r2, [r6, #0]
 8004922:	1c51      	adds	r1, r2, #1
 8004924:	6031      	str	r1, [r6, #0]
 8004926:	7812      	ldrb	r2, [r2, #0]
 8004928:	f805 2b01 	strb.w	r2, [r5], #1
 800492c:	6872      	ldr	r2, [r6, #4]
 800492e:	3a01      	subs	r2, #1
 8004930:	2a00      	cmp	r2, #0
 8004932:	6072      	str	r2, [r6, #4]
 8004934:	dc07      	bgt.n	8004946 <_scanf_i+0xb6>
 8004936:	4631      	mov	r1, r6
 8004938:	4650      	mov	r0, sl
 800493a:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800493e:	4790      	blx	r2
 8004940:	2800      	cmp	r0, #0
 8004942:	f040 8085 	bne.w	8004a50 <_scanf_i+0x1c0>
 8004946:	f10b 0b01 	add.w	fp, fp, #1
 800494a:	f1bb 0f03 	cmp.w	fp, #3
 800494e:	d1cb      	bne.n	80048e8 <_scanf_i+0x58>
 8004950:	6863      	ldr	r3, [r4, #4]
 8004952:	b90b      	cbnz	r3, 8004958 <_scanf_i+0xc8>
 8004954:	230a      	movs	r3, #10
 8004956:	6063      	str	r3, [r4, #4]
 8004958:	6863      	ldr	r3, [r4, #4]
 800495a:	4948      	ldr	r1, [pc, #288]	; (8004a7c <_scanf_i+0x1ec>)
 800495c:	6960      	ldr	r0, [r4, #20]
 800495e:	1ac9      	subs	r1, r1, r3
 8004960:	f000 f936 	bl	8004bd0 <__sccl>
 8004964:	f04f 0b00 	mov.w	fp, #0
 8004968:	68a3      	ldr	r3, [r4, #8]
 800496a:	6822      	ldr	r2, [r4, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d03d      	beq.n	80049ec <_scanf_i+0x15c>
 8004970:	6831      	ldr	r1, [r6, #0]
 8004972:	6960      	ldr	r0, [r4, #20]
 8004974:	f891 c000 	ldrb.w	ip, [r1]
 8004978:	f810 000c 	ldrb.w	r0, [r0, ip]
 800497c:	2800      	cmp	r0, #0
 800497e:	d035      	beq.n	80049ec <_scanf_i+0x15c>
 8004980:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004984:	d124      	bne.n	80049d0 <_scanf_i+0x140>
 8004986:	0510      	lsls	r0, r2, #20
 8004988:	d522      	bpl.n	80049d0 <_scanf_i+0x140>
 800498a:	f10b 0b01 	add.w	fp, fp, #1
 800498e:	f1b9 0f00 	cmp.w	r9, #0
 8004992:	d003      	beq.n	800499c <_scanf_i+0x10c>
 8004994:	3301      	adds	r3, #1
 8004996:	f109 39ff 	add.w	r9, r9, #4294967295
 800499a:	60a3      	str	r3, [r4, #8]
 800499c:	6873      	ldr	r3, [r6, #4]
 800499e:	3b01      	subs	r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	6073      	str	r3, [r6, #4]
 80049a4:	dd1b      	ble.n	80049de <_scanf_i+0x14e>
 80049a6:	6833      	ldr	r3, [r6, #0]
 80049a8:	3301      	adds	r3, #1
 80049aa:	6033      	str	r3, [r6, #0]
 80049ac:	68a3      	ldr	r3, [r4, #8]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	60a3      	str	r3, [r4, #8]
 80049b2:	e7d9      	b.n	8004968 <_scanf_i+0xd8>
 80049b4:	f1bb 0f02 	cmp.w	fp, #2
 80049b8:	d1ae      	bne.n	8004918 <_scanf_i+0x88>
 80049ba:	6822      	ldr	r2, [r4, #0]
 80049bc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80049c0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80049c4:	d1bf      	bne.n	8004946 <_scanf_i+0xb6>
 80049c6:	2310      	movs	r3, #16
 80049c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049cc:	6063      	str	r3, [r4, #4]
 80049ce:	e7a2      	b.n	8004916 <_scanf_i+0x86>
 80049d0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80049d4:	6022      	str	r2, [r4, #0]
 80049d6:	780b      	ldrb	r3, [r1, #0]
 80049d8:	f805 3b01 	strb.w	r3, [r5], #1
 80049dc:	e7de      	b.n	800499c <_scanf_i+0x10c>
 80049de:	4631      	mov	r1, r6
 80049e0:	4650      	mov	r0, sl
 80049e2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80049e6:	4798      	blx	r3
 80049e8:	2800      	cmp	r0, #0
 80049ea:	d0df      	beq.n	80049ac <_scanf_i+0x11c>
 80049ec:	6823      	ldr	r3, [r4, #0]
 80049ee:	05db      	lsls	r3, r3, #23
 80049f0:	d50d      	bpl.n	8004a0e <_scanf_i+0x17e>
 80049f2:	42bd      	cmp	r5, r7
 80049f4:	d909      	bls.n	8004a0a <_scanf_i+0x17a>
 80049f6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80049fa:	4632      	mov	r2, r6
 80049fc:	4650      	mov	r0, sl
 80049fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a02:	f105 39ff 	add.w	r9, r5, #4294967295
 8004a06:	4798      	blx	r3
 8004a08:	464d      	mov	r5, r9
 8004a0a:	42bd      	cmp	r5, r7
 8004a0c:	d02d      	beq.n	8004a6a <_scanf_i+0x1da>
 8004a0e:	6822      	ldr	r2, [r4, #0]
 8004a10:	f012 0210 	ands.w	r2, r2, #16
 8004a14:	d113      	bne.n	8004a3e <_scanf_i+0x1ae>
 8004a16:	702a      	strb	r2, [r5, #0]
 8004a18:	4639      	mov	r1, r7
 8004a1a:	6863      	ldr	r3, [r4, #4]
 8004a1c:	4650      	mov	r0, sl
 8004a1e:	9e01      	ldr	r6, [sp, #4]
 8004a20:	47b0      	blx	r6
 8004a22:	6821      	ldr	r1, [r4, #0]
 8004a24:	f8d8 3000 	ldr.w	r3, [r8]
 8004a28:	f011 0f20 	tst.w	r1, #32
 8004a2c:	d013      	beq.n	8004a56 <_scanf_i+0x1c6>
 8004a2e:	1d1a      	adds	r2, r3, #4
 8004a30:	f8c8 2000 	str.w	r2, [r8]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6018      	str	r0, [r3, #0]
 8004a38:	68e3      	ldr	r3, [r4, #12]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	60e3      	str	r3, [r4, #12]
 8004a3e:	2000      	movs	r0, #0
 8004a40:	1bed      	subs	r5, r5, r7
 8004a42:	44ab      	add	fp, r5
 8004a44:	6925      	ldr	r5, [r4, #16]
 8004a46:	445d      	add	r5, fp
 8004a48:	6125      	str	r5, [r4, #16]
 8004a4a:	b007      	add	sp, #28
 8004a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a50:	f04f 0b00 	mov.w	fp, #0
 8004a54:	e7ca      	b.n	80049ec <_scanf_i+0x15c>
 8004a56:	1d1a      	adds	r2, r3, #4
 8004a58:	f8c8 2000 	str.w	r2, [r8]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f011 0f01 	tst.w	r1, #1
 8004a62:	bf14      	ite	ne
 8004a64:	8018      	strhne	r0, [r3, #0]
 8004a66:	6018      	streq	r0, [r3, #0]
 8004a68:	e7e6      	b.n	8004a38 <_scanf_i+0x1a8>
 8004a6a:	2001      	movs	r0, #1
 8004a6c:	e7ed      	b.n	8004a4a <_scanf_i+0x1ba>
 8004a6e:	bf00      	nop
 8004a70:	080059e4 	.word	0x080059e4
 8004a74:	08004e21 	.word	0x08004e21
 8004a78:	08004d39 	.word	0x08004d39
 8004a7c:	08005ab8 	.word	0x08005ab8

08004a80 <_read_r>:
 8004a80:	b538      	push	{r3, r4, r5, lr}
 8004a82:	4604      	mov	r4, r0
 8004a84:	4608      	mov	r0, r1
 8004a86:	4611      	mov	r1, r2
 8004a88:	2200      	movs	r2, #0
 8004a8a:	4d05      	ldr	r5, [pc, #20]	; (8004aa0 <_read_r+0x20>)
 8004a8c:	602a      	str	r2, [r5, #0]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	f7fc fbb8 	bl	8001204 <_read>
 8004a94:	1c43      	adds	r3, r0, #1
 8004a96:	d102      	bne.n	8004a9e <_read_r+0x1e>
 8004a98:	682b      	ldr	r3, [r5, #0]
 8004a9a:	b103      	cbz	r3, 8004a9e <_read_r+0x1e>
 8004a9c:	6023      	str	r3, [r4, #0]
 8004a9e:	bd38      	pop	{r3, r4, r5, pc}
 8004aa0:	20000128 	.word	0x20000128

08004aa4 <lflush>:
 8004aa4:	8983      	ldrh	r3, [r0, #12]
 8004aa6:	f003 0309 	and.w	r3, r3, #9
 8004aaa:	2b09      	cmp	r3, #9
 8004aac:	d101      	bne.n	8004ab2 <lflush+0xe>
 8004aae:	f7fe bac7 	b.w	8003040 <fflush>
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	4770      	bx	lr
	...

08004ab8 <__srefill_r>:
 8004ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aba:	460c      	mov	r4, r1
 8004abc:	4605      	mov	r5, r0
 8004abe:	b118      	cbz	r0, 8004ac8 <__srefill_r+0x10>
 8004ac0:	6983      	ldr	r3, [r0, #24]
 8004ac2:	b90b      	cbnz	r3, 8004ac8 <__srefill_r+0x10>
 8004ac4:	f7fe fb26 	bl	8003114 <__sinit>
 8004ac8:	4b3c      	ldr	r3, [pc, #240]	; (8004bbc <__srefill_r+0x104>)
 8004aca:	429c      	cmp	r4, r3
 8004acc:	d10a      	bne.n	8004ae4 <__srefill_r+0x2c>
 8004ace:	686c      	ldr	r4, [r5, #4]
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	6063      	str	r3, [r4, #4]
 8004ad4:	89a3      	ldrh	r3, [r4, #12]
 8004ad6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ada:	069e      	lsls	r6, r3, #26
 8004adc:	d50c      	bpl.n	8004af8 <__srefill_r+0x40>
 8004ade:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae2:	e067      	b.n	8004bb4 <__srefill_r+0xfc>
 8004ae4:	4b36      	ldr	r3, [pc, #216]	; (8004bc0 <__srefill_r+0x108>)
 8004ae6:	429c      	cmp	r4, r3
 8004ae8:	d101      	bne.n	8004aee <__srefill_r+0x36>
 8004aea:	68ac      	ldr	r4, [r5, #8]
 8004aec:	e7f0      	b.n	8004ad0 <__srefill_r+0x18>
 8004aee:	4b35      	ldr	r3, [pc, #212]	; (8004bc4 <__srefill_r+0x10c>)
 8004af0:	429c      	cmp	r4, r3
 8004af2:	bf08      	it	eq
 8004af4:	68ec      	ldreq	r4, [r5, #12]
 8004af6:	e7eb      	b.n	8004ad0 <__srefill_r+0x18>
 8004af8:	0758      	lsls	r0, r3, #29
 8004afa:	d449      	bmi.n	8004b90 <__srefill_r+0xd8>
 8004afc:	06d9      	lsls	r1, r3, #27
 8004afe:	d405      	bmi.n	8004b0c <__srefill_r+0x54>
 8004b00:	2309      	movs	r3, #9
 8004b02:	602b      	str	r3, [r5, #0]
 8004b04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b08:	81a3      	strh	r3, [r4, #12]
 8004b0a:	e7e8      	b.n	8004ade <__srefill_r+0x26>
 8004b0c:	071a      	lsls	r2, r3, #28
 8004b0e:	d50b      	bpl.n	8004b28 <__srefill_r+0x70>
 8004b10:	4621      	mov	r1, r4
 8004b12:	4628      	mov	r0, r5
 8004b14:	f7fe fa58 	bl	8002fc8 <_fflush_r>
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	d1e0      	bne.n	8004ade <__srefill_r+0x26>
 8004b1c:	89a3      	ldrh	r3, [r4, #12]
 8004b1e:	60a0      	str	r0, [r4, #8]
 8004b20:	f023 0308 	bic.w	r3, r3, #8
 8004b24:	81a3      	strh	r3, [r4, #12]
 8004b26:	61a0      	str	r0, [r4, #24]
 8004b28:	89a3      	ldrh	r3, [r4, #12]
 8004b2a:	f043 0304 	orr.w	r3, r3, #4
 8004b2e:	81a3      	strh	r3, [r4, #12]
 8004b30:	6923      	ldr	r3, [r4, #16]
 8004b32:	b91b      	cbnz	r3, 8004b3c <__srefill_r+0x84>
 8004b34:	4621      	mov	r1, r4
 8004b36:	4628      	mov	r0, r5
 8004b38:	f7fe ffe4 	bl	8003b04 <__smakebuf_r>
 8004b3c:	89a6      	ldrh	r6, [r4, #12]
 8004b3e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8004b42:	07b3      	lsls	r3, r6, #30
 8004b44:	d00f      	beq.n	8004b66 <__srefill_r+0xae>
 8004b46:	2301      	movs	r3, #1
 8004b48:	81a3      	strh	r3, [r4, #12]
 8004b4a:	4b1f      	ldr	r3, [pc, #124]	; (8004bc8 <__srefill_r+0x110>)
 8004b4c:	491f      	ldr	r1, [pc, #124]	; (8004bcc <__srefill_r+0x114>)
 8004b4e:	6818      	ldr	r0, [r3, #0]
 8004b50:	f006 0609 	and.w	r6, r6, #9
 8004b54:	f7fe fb5c 	bl	8003210 <_fwalk>
 8004b58:	2e09      	cmp	r6, #9
 8004b5a:	81a7      	strh	r7, [r4, #12]
 8004b5c:	d103      	bne.n	8004b66 <__srefill_r+0xae>
 8004b5e:	4621      	mov	r1, r4
 8004b60:	4628      	mov	r0, r5
 8004b62:	f7fe f9af 	bl	8002ec4 <__sflush_r>
 8004b66:	6922      	ldr	r2, [r4, #16]
 8004b68:	4628      	mov	r0, r5
 8004b6a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004b6c:	6963      	ldr	r3, [r4, #20]
 8004b6e:	6a21      	ldr	r1, [r4, #32]
 8004b70:	6022      	str	r2, [r4, #0]
 8004b72:	47b0      	blx	r6
 8004b74:	2800      	cmp	r0, #0
 8004b76:	6060      	str	r0, [r4, #4]
 8004b78:	dc1d      	bgt.n	8004bb6 <__srefill_r+0xfe>
 8004b7a:	bf18      	it	ne
 8004b7c:	2200      	movne	r2, #0
 8004b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b82:	bf16      	itet	ne
 8004b84:	6062      	strne	r2, [r4, #4]
 8004b86:	f043 0320 	orreq.w	r3, r3, #32
 8004b8a:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8004b8e:	e7bb      	b.n	8004b08 <__srefill_r+0x50>
 8004b90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b92:	2900      	cmp	r1, #0
 8004b94:	d0cc      	beq.n	8004b30 <__srefill_r+0x78>
 8004b96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b9a:	4299      	cmp	r1, r3
 8004b9c:	d002      	beq.n	8004ba4 <__srefill_r+0xec>
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	f7fe fbb0 	bl	8003304 <_free_r>
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ba8:	6360      	str	r0, [r4, #52]	; 0x34
 8004baa:	6063      	str	r3, [r4, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0bf      	beq.n	8004b30 <__srefill_r+0x78>
 8004bb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004bb2:	6023      	str	r3, [r4, #0]
 8004bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	e7fc      	b.n	8004bb4 <__srefill_r+0xfc>
 8004bba:	bf00      	nop
 8004bbc:	08005a28 	.word	0x08005a28
 8004bc0:	08005a48 	.word	0x08005a48
 8004bc4:	08005a08 	.word	0x08005a08
 8004bc8:	08005a68 	.word	0x08005a68
 8004bcc:	08004aa5 	.word	0x08004aa5

08004bd0 <__sccl>:
 8004bd0:	b570      	push	{r4, r5, r6, lr}
 8004bd2:	780b      	ldrb	r3, [r1, #0]
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	2b5e      	cmp	r3, #94	; 0x5e
 8004bd8:	bf13      	iteet	ne
 8004bda:	2200      	movne	r2, #0
 8004bdc:	2201      	moveq	r2, #1
 8004bde:	784b      	ldrbeq	r3, [r1, #1]
 8004be0:	1c48      	addne	r0, r1, #1
 8004be2:	bf08      	it	eq
 8004be4:	1c88      	addeq	r0, r1, #2
 8004be6:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004bea:	1e61      	subs	r1, r4, #1
 8004bec:	f801 2f01 	strb.w	r2, [r1, #1]!
 8004bf0:	42a9      	cmp	r1, r5
 8004bf2:	d1fb      	bne.n	8004bec <__sccl+0x1c>
 8004bf4:	b90b      	cbnz	r3, 8004bfa <__sccl+0x2a>
 8004bf6:	3801      	subs	r0, #1
 8004bf8:	bd70      	pop	{r4, r5, r6, pc}
 8004bfa:	f082 0201 	eor.w	r2, r2, #1
 8004bfe:	4605      	mov	r5, r0
 8004c00:	54e2      	strb	r2, [r4, r3]
 8004c02:	4628      	mov	r0, r5
 8004c04:	f810 1b01 	ldrb.w	r1, [r0], #1
 8004c08:	292d      	cmp	r1, #45	; 0x2d
 8004c0a:	d006      	beq.n	8004c1a <__sccl+0x4a>
 8004c0c:	295d      	cmp	r1, #93	; 0x5d
 8004c0e:	d0f3      	beq.n	8004bf8 <__sccl+0x28>
 8004c10:	b909      	cbnz	r1, 8004c16 <__sccl+0x46>
 8004c12:	4628      	mov	r0, r5
 8004c14:	e7f0      	b.n	8004bf8 <__sccl+0x28>
 8004c16:	460b      	mov	r3, r1
 8004c18:	e7f1      	b.n	8004bfe <__sccl+0x2e>
 8004c1a:	786e      	ldrb	r6, [r5, #1]
 8004c1c:	2e5d      	cmp	r6, #93	; 0x5d
 8004c1e:	d0fa      	beq.n	8004c16 <__sccl+0x46>
 8004c20:	42b3      	cmp	r3, r6
 8004c22:	dcf8      	bgt.n	8004c16 <__sccl+0x46>
 8004c24:	4619      	mov	r1, r3
 8004c26:	3502      	adds	r5, #2
 8004c28:	3101      	adds	r1, #1
 8004c2a:	428e      	cmp	r6, r1
 8004c2c:	5462      	strb	r2, [r4, r1]
 8004c2e:	dcfb      	bgt.n	8004c28 <__sccl+0x58>
 8004c30:	1af1      	subs	r1, r6, r3
 8004c32:	3901      	subs	r1, #1
 8004c34:	42b3      	cmp	r3, r6
 8004c36:	bfa8      	it	ge
 8004c38:	2100      	movge	r1, #0
 8004c3a:	1c58      	adds	r0, r3, #1
 8004c3c:	1843      	adds	r3, r0, r1
 8004c3e:	e7e0      	b.n	8004c02 <__sccl+0x32>

08004c40 <_strtol_l.constprop.0>:
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c46:	4680      	mov	r8, r0
 8004c48:	d001      	beq.n	8004c4e <_strtol_l.constprop.0+0xe>
 8004c4a:	2b24      	cmp	r3, #36	; 0x24
 8004c4c:	d906      	bls.n	8004c5c <_strtol_l.constprop.0+0x1c>
 8004c4e:	f7fe f933 	bl	8002eb8 <__errno>
 8004c52:	2316      	movs	r3, #22
 8004c54:	6003      	str	r3, [r0, #0]
 8004c56:	2000      	movs	r0, #0
 8004c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c5c:	460d      	mov	r5, r1
 8004c5e:	4f35      	ldr	r7, [pc, #212]	; (8004d34 <_strtol_l.constprop.0+0xf4>)
 8004c60:	4628      	mov	r0, r5
 8004c62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c66:	5de6      	ldrb	r6, [r4, r7]
 8004c68:	f016 0608 	ands.w	r6, r6, #8
 8004c6c:	d1f8      	bne.n	8004c60 <_strtol_l.constprop.0+0x20>
 8004c6e:	2c2d      	cmp	r4, #45	; 0x2d
 8004c70:	d12f      	bne.n	8004cd2 <_strtol_l.constprop.0+0x92>
 8004c72:	2601      	movs	r6, #1
 8004c74:	782c      	ldrb	r4, [r5, #0]
 8004c76:	1c85      	adds	r5, r0, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d057      	beq.n	8004d2c <_strtol_l.constprop.0+0xec>
 8004c7c:	2b10      	cmp	r3, #16
 8004c7e:	d109      	bne.n	8004c94 <_strtol_l.constprop.0+0x54>
 8004c80:	2c30      	cmp	r4, #48	; 0x30
 8004c82:	d107      	bne.n	8004c94 <_strtol_l.constprop.0+0x54>
 8004c84:	7828      	ldrb	r0, [r5, #0]
 8004c86:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004c8a:	2858      	cmp	r0, #88	; 0x58
 8004c8c:	d149      	bne.n	8004d22 <_strtol_l.constprop.0+0xe2>
 8004c8e:	2310      	movs	r3, #16
 8004c90:	786c      	ldrb	r4, [r5, #1]
 8004c92:	3502      	adds	r5, #2
 8004c94:	2700      	movs	r7, #0
 8004c96:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8004c9a:	f10e 3eff 	add.w	lr, lr, #4294967295
 8004c9e:	fbbe f9f3 	udiv	r9, lr, r3
 8004ca2:	4638      	mov	r0, r7
 8004ca4:	fb03 ea19 	mls	sl, r3, r9, lr
 8004ca8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004cac:	f1bc 0f09 	cmp.w	ip, #9
 8004cb0:	d814      	bhi.n	8004cdc <_strtol_l.constprop.0+0x9c>
 8004cb2:	4664      	mov	r4, ip
 8004cb4:	42a3      	cmp	r3, r4
 8004cb6:	dd22      	ble.n	8004cfe <_strtol_l.constprop.0+0xbe>
 8004cb8:	2f00      	cmp	r7, #0
 8004cba:	db1d      	blt.n	8004cf8 <_strtol_l.constprop.0+0xb8>
 8004cbc:	4581      	cmp	r9, r0
 8004cbe:	d31b      	bcc.n	8004cf8 <_strtol_l.constprop.0+0xb8>
 8004cc0:	d101      	bne.n	8004cc6 <_strtol_l.constprop.0+0x86>
 8004cc2:	45a2      	cmp	sl, r4
 8004cc4:	db18      	blt.n	8004cf8 <_strtol_l.constprop.0+0xb8>
 8004cc6:	2701      	movs	r7, #1
 8004cc8:	fb00 4003 	mla	r0, r0, r3, r4
 8004ccc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004cd0:	e7ea      	b.n	8004ca8 <_strtol_l.constprop.0+0x68>
 8004cd2:	2c2b      	cmp	r4, #43	; 0x2b
 8004cd4:	bf04      	itt	eq
 8004cd6:	782c      	ldrbeq	r4, [r5, #0]
 8004cd8:	1c85      	addeq	r5, r0, #2
 8004cda:	e7cd      	b.n	8004c78 <_strtol_l.constprop.0+0x38>
 8004cdc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004ce0:	f1bc 0f19 	cmp.w	ip, #25
 8004ce4:	d801      	bhi.n	8004cea <_strtol_l.constprop.0+0xaa>
 8004ce6:	3c37      	subs	r4, #55	; 0x37
 8004ce8:	e7e4      	b.n	8004cb4 <_strtol_l.constprop.0+0x74>
 8004cea:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004cee:	f1bc 0f19 	cmp.w	ip, #25
 8004cf2:	d804      	bhi.n	8004cfe <_strtol_l.constprop.0+0xbe>
 8004cf4:	3c57      	subs	r4, #87	; 0x57
 8004cf6:	e7dd      	b.n	8004cb4 <_strtol_l.constprop.0+0x74>
 8004cf8:	f04f 37ff 	mov.w	r7, #4294967295
 8004cfc:	e7e6      	b.n	8004ccc <_strtol_l.constprop.0+0x8c>
 8004cfe:	2f00      	cmp	r7, #0
 8004d00:	da07      	bge.n	8004d12 <_strtol_l.constprop.0+0xd2>
 8004d02:	2322      	movs	r3, #34	; 0x22
 8004d04:	4670      	mov	r0, lr
 8004d06:	f8c8 3000 	str.w	r3, [r8]
 8004d0a:	2a00      	cmp	r2, #0
 8004d0c:	d0a4      	beq.n	8004c58 <_strtol_l.constprop.0+0x18>
 8004d0e:	1e69      	subs	r1, r5, #1
 8004d10:	e005      	b.n	8004d1e <_strtol_l.constprop.0+0xde>
 8004d12:	b106      	cbz	r6, 8004d16 <_strtol_l.constprop.0+0xd6>
 8004d14:	4240      	negs	r0, r0
 8004d16:	2a00      	cmp	r2, #0
 8004d18:	d09e      	beq.n	8004c58 <_strtol_l.constprop.0+0x18>
 8004d1a:	2f00      	cmp	r7, #0
 8004d1c:	d1f7      	bne.n	8004d0e <_strtol_l.constprop.0+0xce>
 8004d1e:	6011      	str	r1, [r2, #0]
 8004d20:	e79a      	b.n	8004c58 <_strtol_l.constprop.0+0x18>
 8004d22:	2430      	movs	r4, #48	; 0x30
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1b5      	bne.n	8004c94 <_strtol_l.constprop.0+0x54>
 8004d28:	2308      	movs	r3, #8
 8004d2a:	e7b3      	b.n	8004c94 <_strtol_l.constprop.0+0x54>
 8004d2c:	2c30      	cmp	r4, #48	; 0x30
 8004d2e:	d0a9      	beq.n	8004c84 <_strtol_l.constprop.0+0x44>
 8004d30:	230a      	movs	r3, #10
 8004d32:	e7af      	b.n	8004c94 <_strtol_l.constprop.0+0x54>
 8004d34:	08005abb 	.word	0x08005abb

08004d38 <_strtol_r>:
 8004d38:	f7ff bf82 	b.w	8004c40 <_strtol_l.constprop.0>

08004d3c <_strtoul_l.constprop.0>:
 8004d3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d40:	4686      	mov	lr, r0
 8004d42:	460d      	mov	r5, r1
 8004d44:	4f35      	ldr	r7, [pc, #212]	; (8004e1c <_strtoul_l.constprop.0+0xe0>)
 8004d46:	4628      	mov	r0, r5
 8004d48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004d4c:	5de6      	ldrb	r6, [r4, r7]
 8004d4e:	f016 0608 	ands.w	r6, r6, #8
 8004d52:	d1f8      	bne.n	8004d46 <_strtoul_l.constprop.0+0xa>
 8004d54:	2c2d      	cmp	r4, #45	; 0x2d
 8004d56:	d12f      	bne.n	8004db8 <_strtoul_l.constprop.0+0x7c>
 8004d58:	2601      	movs	r6, #1
 8004d5a:	782c      	ldrb	r4, [r5, #0]
 8004d5c:	1c85      	adds	r5, r0, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d057      	beq.n	8004e12 <_strtoul_l.constprop.0+0xd6>
 8004d62:	2b10      	cmp	r3, #16
 8004d64:	d109      	bne.n	8004d7a <_strtoul_l.constprop.0+0x3e>
 8004d66:	2c30      	cmp	r4, #48	; 0x30
 8004d68:	d107      	bne.n	8004d7a <_strtoul_l.constprop.0+0x3e>
 8004d6a:	7828      	ldrb	r0, [r5, #0]
 8004d6c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004d70:	2858      	cmp	r0, #88	; 0x58
 8004d72:	d149      	bne.n	8004e08 <_strtoul_l.constprop.0+0xcc>
 8004d74:	2310      	movs	r3, #16
 8004d76:	786c      	ldrb	r4, [r5, #1]
 8004d78:	3502      	adds	r5, #2
 8004d7a:	f04f 38ff 	mov.w	r8, #4294967295
 8004d7e:	fbb8 f8f3 	udiv	r8, r8, r3
 8004d82:	2700      	movs	r7, #0
 8004d84:	fb03 f908 	mul.w	r9, r3, r8
 8004d88:	4638      	mov	r0, r7
 8004d8a:	ea6f 0909 	mvn.w	r9, r9
 8004d8e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004d92:	f1bc 0f09 	cmp.w	ip, #9
 8004d96:	d814      	bhi.n	8004dc2 <_strtoul_l.constprop.0+0x86>
 8004d98:	4664      	mov	r4, ip
 8004d9a:	42a3      	cmp	r3, r4
 8004d9c:	dd22      	ble.n	8004de4 <_strtoul_l.constprop.0+0xa8>
 8004d9e:	2f00      	cmp	r7, #0
 8004da0:	db1d      	blt.n	8004dde <_strtoul_l.constprop.0+0xa2>
 8004da2:	4580      	cmp	r8, r0
 8004da4:	d31b      	bcc.n	8004dde <_strtoul_l.constprop.0+0xa2>
 8004da6:	d101      	bne.n	8004dac <_strtoul_l.constprop.0+0x70>
 8004da8:	45a1      	cmp	r9, r4
 8004daa:	db18      	blt.n	8004dde <_strtoul_l.constprop.0+0xa2>
 8004dac:	2701      	movs	r7, #1
 8004dae:	fb00 4003 	mla	r0, r0, r3, r4
 8004db2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004db6:	e7ea      	b.n	8004d8e <_strtoul_l.constprop.0+0x52>
 8004db8:	2c2b      	cmp	r4, #43	; 0x2b
 8004dba:	bf04      	itt	eq
 8004dbc:	782c      	ldrbeq	r4, [r5, #0]
 8004dbe:	1c85      	addeq	r5, r0, #2
 8004dc0:	e7cd      	b.n	8004d5e <_strtoul_l.constprop.0+0x22>
 8004dc2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004dc6:	f1bc 0f19 	cmp.w	ip, #25
 8004dca:	d801      	bhi.n	8004dd0 <_strtoul_l.constprop.0+0x94>
 8004dcc:	3c37      	subs	r4, #55	; 0x37
 8004dce:	e7e4      	b.n	8004d9a <_strtoul_l.constprop.0+0x5e>
 8004dd0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004dd4:	f1bc 0f19 	cmp.w	ip, #25
 8004dd8:	d804      	bhi.n	8004de4 <_strtoul_l.constprop.0+0xa8>
 8004dda:	3c57      	subs	r4, #87	; 0x57
 8004ddc:	e7dd      	b.n	8004d9a <_strtoul_l.constprop.0+0x5e>
 8004dde:	f04f 37ff 	mov.w	r7, #4294967295
 8004de2:	e7e6      	b.n	8004db2 <_strtoul_l.constprop.0+0x76>
 8004de4:	2f00      	cmp	r7, #0
 8004de6:	da07      	bge.n	8004df8 <_strtoul_l.constprop.0+0xbc>
 8004de8:	2322      	movs	r3, #34	; 0x22
 8004dea:	f04f 30ff 	mov.w	r0, #4294967295
 8004dee:	f8ce 3000 	str.w	r3, [lr]
 8004df2:	b932      	cbnz	r2, 8004e02 <_strtoul_l.constprop.0+0xc6>
 8004df4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004df8:	b106      	cbz	r6, 8004dfc <_strtoul_l.constprop.0+0xc0>
 8004dfa:	4240      	negs	r0, r0
 8004dfc:	2a00      	cmp	r2, #0
 8004dfe:	d0f9      	beq.n	8004df4 <_strtoul_l.constprop.0+0xb8>
 8004e00:	b107      	cbz	r7, 8004e04 <_strtoul_l.constprop.0+0xc8>
 8004e02:	1e69      	subs	r1, r5, #1
 8004e04:	6011      	str	r1, [r2, #0]
 8004e06:	e7f5      	b.n	8004df4 <_strtoul_l.constprop.0+0xb8>
 8004e08:	2430      	movs	r4, #48	; 0x30
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1b5      	bne.n	8004d7a <_strtoul_l.constprop.0+0x3e>
 8004e0e:	2308      	movs	r3, #8
 8004e10:	e7b3      	b.n	8004d7a <_strtoul_l.constprop.0+0x3e>
 8004e12:	2c30      	cmp	r4, #48	; 0x30
 8004e14:	d0a9      	beq.n	8004d6a <_strtoul_l.constprop.0+0x2e>
 8004e16:	230a      	movs	r3, #10
 8004e18:	e7af      	b.n	8004d7a <_strtoul_l.constprop.0+0x3e>
 8004e1a:	bf00      	nop
 8004e1c:	08005abb 	.word	0x08005abb

08004e20 <_strtoul_r>:
 8004e20:	f7ff bf8c 	b.w	8004d3c <_strtoul_l.constprop.0>

08004e24 <__submore>:
 8004e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e28:	460c      	mov	r4, r1
 8004e2a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004e2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e30:	4299      	cmp	r1, r3
 8004e32:	d11b      	bne.n	8004e6c <__submore+0x48>
 8004e34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e38:	f7fe facc 	bl	80033d4 <_malloc_r>
 8004e3c:	b918      	cbnz	r0, 8004e46 <__submore+0x22>
 8004e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e4a:	63a3      	str	r3, [r4, #56]	; 0x38
 8004e4c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004e50:	6360      	str	r0, [r4, #52]	; 0x34
 8004e52:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004e56:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004e5a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004e5e:	7043      	strb	r3, [r0, #1]
 8004e60:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004e64:	7003      	strb	r3, [r0, #0]
 8004e66:	6020      	str	r0, [r4, #0]
 8004e68:	2000      	movs	r0, #0
 8004e6a:	e7ea      	b.n	8004e42 <__submore+0x1e>
 8004e6c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004e6e:	0077      	lsls	r7, r6, #1
 8004e70:	463a      	mov	r2, r7
 8004e72:	f000 f8f1 	bl	8005058 <_realloc_r>
 8004e76:	4605      	mov	r5, r0
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	d0e0      	beq.n	8004e3e <__submore+0x1a>
 8004e7c:	eb00 0806 	add.w	r8, r0, r6
 8004e80:	4601      	mov	r1, r0
 8004e82:	4632      	mov	r2, r6
 8004e84:	4640      	mov	r0, r8
 8004e86:	f7fe fa26 	bl	80032d6 <memcpy>
 8004e8a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004e8e:	f8c4 8000 	str.w	r8, [r4]
 8004e92:	e7e9      	b.n	8004e68 <__submore+0x44>

08004e94 <_ungetc_r>:
 8004e94:	b570      	push	{r4, r5, r6, lr}
 8004e96:	4614      	mov	r4, r2
 8004e98:	1c4a      	adds	r2, r1, #1
 8004e9a:	4606      	mov	r6, r0
 8004e9c:	460d      	mov	r5, r1
 8004e9e:	d103      	bne.n	8004ea8 <_ungetc_r+0x14>
 8004ea0:	f04f 35ff 	mov.w	r5, #4294967295
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	bd70      	pop	{r4, r5, r6, pc}
 8004ea8:	b118      	cbz	r0, 8004eb2 <_ungetc_r+0x1e>
 8004eaa:	6983      	ldr	r3, [r0, #24]
 8004eac:	b90b      	cbnz	r3, 8004eb2 <_ungetc_r+0x1e>
 8004eae:	f7fe f931 	bl	8003114 <__sinit>
 8004eb2:	4b41      	ldr	r3, [pc, #260]	; (8004fb8 <_ungetc_r+0x124>)
 8004eb4:	429c      	cmp	r4, r3
 8004eb6:	d11d      	bne.n	8004ef4 <_ungetc_r+0x60>
 8004eb8:	6874      	ldr	r4, [r6, #4]
 8004eba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ebc:	07db      	lsls	r3, r3, #31
 8004ebe:	d405      	bmi.n	8004ecc <_ungetc_r+0x38>
 8004ec0:	89a3      	ldrh	r3, [r4, #12]
 8004ec2:	0598      	lsls	r0, r3, #22
 8004ec4:	d402      	bmi.n	8004ecc <_ungetc_r+0x38>
 8004ec6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ec8:	f7fe fa03 	bl	80032d2 <__retarget_lock_acquire_recursive>
 8004ecc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ed0:	f023 0320 	bic.w	r3, r3, #32
 8004ed4:	0759      	lsls	r1, r3, #29
 8004ed6:	81a3      	strh	r3, [r4, #12]
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	d42d      	bmi.n	8004f38 <_ungetc_r+0xa4>
 8004edc:	06d3      	lsls	r3, r2, #27
 8004ede:	d413      	bmi.n	8004f08 <_ungetc_r+0x74>
 8004ee0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ee2:	07dd      	lsls	r5, r3, #31
 8004ee4:	d4dc      	bmi.n	8004ea0 <_ungetc_r+0xc>
 8004ee6:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004eea:	d1d9      	bne.n	8004ea0 <_ungetc_r+0xc>
 8004eec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004eee:	f7fe f9f1 	bl	80032d4 <__retarget_lock_release_recursive>
 8004ef2:	e7d5      	b.n	8004ea0 <_ungetc_r+0xc>
 8004ef4:	4b31      	ldr	r3, [pc, #196]	; (8004fbc <_ungetc_r+0x128>)
 8004ef6:	429c      	cmp	r4, r3
 8004ef8:	d101      	bne.n	8004efe <_ungetc_r+0x6a>
 8004efa:	68b4      	ldr	r4, [r6, #8]
 8004efc:	e7dd      	b.n	8004eba <_ungetc_r+0x26>
 8004efe:	4b30      	ldr	r3, [pc, #192]	; (8004fc0 <_ungetc_r+0x12c>)
 8004f00:	429c      	cmp	r4, r3
 8004f02:	bf08      	it	eq
 8004f04:	68f4      	ldreq	r4, [r6, #12]
 8004f06:	e7d8      	b.n	8004eba <_ungetc_r+0x26>
 8004f08:	0710      	lsls	r0, r2, #28
 8004f0a:	d511      	bpl.n	8004f30 <_ungetc_r+0x9c>
 8004f0c:	4621      	mov	r1, r4
 8004f0e:	4630      	mov	r0, r6
 8004f10:	f7fe f85a 	bl	8002fc8 <_fflush_r>
 8004f14:	b130      	cbz	r0, 8004f24 <_ungetc_r+0x90>
 8004f16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f18:	07d9      	lsls	r1, r3, #31
 8004f1a:	d4c1      	bmi.n	8004ea0 <_ungetc_r+0xc>
 8004f1c:	89a3      	ldrh	r3, [r4, #12]
 8004f1e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004f22:	e7e2      	b.n	8004eea <_ungetc_r+0x56>
 8004f24:	89a3      	ldrh	r3, [r4, #12]
 8004f26:	60a0      	str	r0, [r4, #8]
 8004f28:	f023 0308 	bic.w	r3, r3, #8
 8004f2c:	81a3      	strh	r3, [r4, #12]
 8004f2e:	61a0      	str	r0, [r4, #24]
 8004f30:	89a3      	ldrh	r3, [r4, #12]
 8004f32:	f043 0304 	orr.w	r3, r3, #4
 8004f36:	81a3      	strh	r3, [r4, #12]
 8004f38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f3a:	6862      	ldr	r2, [r4, #4]
 8004f3c:	b2ed      	uxtb	r5, r5
 8004f3e:	b1d3      	cbz	r3, 8004f76 <_ungetc_r+0xe2>
 8004f40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f42:	4293      	cmp	r3, r2
 8004f44:	dc05      	bgt.n	8004f52 <_ungetc_r+0xbe>
 8004f46:	4621      	mov	r1, r4
 8004f48:	4630      	mov	r0, r6
 8004f4a:	f7ff ff6b 	bl	8004e24 <__submore>
 8004f4e:	2800      	cmp	r0, #0
 8004f50:	d1e1      	bne.n	8004f16 <_ungetc_r+0x82>
 8004f52:	6823      	ldr	r3, [r4, #0]
 8004f54:	1e5a      	subs	r2, r3, #1
 8004f56:	6022      	str	r2, [r4, #0]
 8004f58:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004f5c:	6863      	ldr	r3, [r4, #4]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	6063      	str	r3, [r4, #4]
 8004f62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f64:	07da      	lsls	r2, r3, #31
 8004f66:	d49d      	bmi.n	8004ea4 <_ungetc_r+0x10>
 8004f68:	89a3      	ldrh	r3, [r4, #12]
 8004f6a:	059b      	lsls	r3, r3, #22
 8004f6c:	d49a      	bmi.n	8004ea4 <_ungetc_r+0x10>
 8004f6e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f70:	f7fe f9b0 	bl	80032d4 <__retarget_lock_release_recursive>
 8004f74:	e796      	b.n	8004ea4 <_ungetc_r+0x10>
 8004f76:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004f78:	6920      	ldr	r0, [r4, #16]
 8004f7a:	6823      	ldr	r3, [r4, #0]
 8004f7c:	f001 0101 	and.w	r1, r1, #1
 8004f80:	b160      	cbz	r0, 8004f9c <_ungetc_r+0x108>
 8004f82:	4298      	cmp	r0, r3
 8004f84:	d20a      	bcs.n	8004f9c <_ungetc_r+0x108>
 8004f86:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8004f8a:	42a8      	cmp	r0, r5
 8004f8c:	d106      	bne.n	8004f9c <_ungetc_r+0x108>
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	3201      	adds	r2, #1
 8004f92:	6023      	str	r3, [r4, #0]
 8004f94:	6062      	str	r2, [r4, #4]
 8004f96:	2900      	cmp	r1, #0
 8004f98:	d184      	bne.n	8004ea4 <_ungetc_r+0x10>
 8004f9a:	e7e5      	b.n	8004f68 <_ungetc_r+0xd4>
 8004f9c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004fa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fa4:	6363      	str	r3, [r4, #52]	; 0x34
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	63a3      	str	r3, [r4, #56]	; 0x38
 8004faa:	4623      	mov	r3, r4
 8004fac:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004fb0:	6023      	str	r3, [r4, #0]
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	6063      	str	r3, [r4, #4]
 8004fb6:	e7ee      	b.n	8004f96 <_ungetc_r+0x102>
 8004fb8:	08005a28 	.word	0x08005a28
 8004fbc:	08005a48 	.word	0x08005a48
 8004fc0:	08005a08 	.word	0x08005a08

08004fc4 <_fstat_r>:
 8004fc4:	b538      	push	{r3, r4, r5, lr}
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	4d06      	ldr	r5, [pc, #24]	; (8004fe4 <_fstat_r+0x20>)
 8004fca:	4604      	mov	r4, r0
 8004fcc:	4608      	mov	r0, r1
 8004fce:	4611      	mov	r1, r2
 8004fd0:	602b      	str	r3, [r5, #0]
 8004fd2:	f7fc f95b 	bl	800128c <_fstat>
 8004fd6:	1c43      	adds	r3, r0, #1
 8004fd8:	d102      	bne.n	8004fe0 <_fstat_r+0x1c>
 8004fda:	682b      	ldr	r3, [r5, #0]
 8004fdc:	b103      	cbz	r3, 8004fe0 <_fstat_r+0x1c>
 8004fde:	6023      	str	r3, [r4, #0]
 8004fe0:	bd38      	pop	{r3, r4, r5, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20000128 	.word	0x20000128

08004fe8 <_isatty_r>:
 8004fe8:	b538      	push	{r3, r4, r5, lr}
 8004fea:	2300      	movs	r3, #0
 8004fec:	4d05      	ldr	r5, [pc, #20]	; (8005004 <_isatty_r+0x1c>)
 8004fee:	4604      	mov	r4, r0
 8004ff0:	4608      	mov	r0, r1
 8004ff2:	602b      	str	r3, [r5, #0]
 8004ff4:	f7fc f959 	bl	80012aa <_isatty>
 8004ff8:	1c43      	adds	r3, r0, #1
 8004ffa:	d102      	bne.n	8005002 <_isatty_r+0x1a>
 8004ffc:	682b      	ldr	r3, [r5, #0]
 8004ffe:	b103      	cbz	r3, 8005002 <_isatty_r+0x1a>
 8005000:	6023      	str	r3, [r4, #0]
 8005002:	bd38      	pop	{r3, r4, r5, pc}
 8005004:	20000128 	.word	0x20000128

08005008 <memchr>:
 8005008:	4603      	mov	r3, r0
 800500a:	b510      	push	{r4, lr}
 800500c:	b2c9      	uxtb	r1, r1
 800500e:	4402      	add	r2, r0
 8005010:	4293      	cmp	r3, r2
 8005012:	4618      	mov	r0, r3
 8005014:	d101      	bne.n	800501a <memchr+0x12>
 8005016:	2000      	movs	r0, #0
 8005018:	e003      	b.n	8005022 <memchr+0x1a>
 800501a:	7804      	ldrb	r4, [r0, #0]
 800501c:	3301      	adds	r3, #1
 800501e:	428c      	cmp	r4, r1
 8005020:	d1f6      	bne.n	8005010 <memchr+0x8>
 8005022:	bd10      	pop	{r4, pc}

08005024 <memmove>:
 8005024:	4288      	cmp	r0, r1
 8005026:	b510      	push	{r4, lr}
 8005028:	eb01 0402 	add.w	r4, r1, r2
 800502c:	d902      	bls.n	8005034 <memmove+0x10>
 800502e:	4284      	cmp	r4, r0
 8005030:	4623      	mov	r3, r4
 8005032:	d807      	bhi.n	8005044 <memmove+0x20>
 8005034:	1e43      	subs	r3, r0, #1
 8005036:	42a1      	cmp	r1, r4
 8005038:	d008      	beq.n	800504c <memmove+0x28>
 800503a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800503e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005042:	e7f8      	b.n	8005036 <memmove+0x12>
 8005044:	4601      	mov	r1, r0
 8005046:	4402      	add	r2, r0
 8005048:	428a      	cmp	r2, r1
 800504a:	d100      	bne.n	800504e <memmove+0x2a>
 800504c:	bd10      	pop	{r4, pc}
 800504e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005052:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005056:	e7f7      	b.n	8005048 <memmove+0x24>

08005058 <_realloc_r>:
 8005058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800505c:	4680      	mov	r8, r0
 800505e:	4614      	mov	r4, r2
 8005060:	460e      	mov	r6, r1
 8005062:	b921      	cbnz	r1, 800506e <_realloc_r+0x16>
 8005064:	4611      	mov	r1, r2
 8005066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800506a:	f7fe b9b3 	b.w	80033d4 <_malloc_r>
 800506e:	b92a      	cbnz	r2, 800507c <_realloc_r+0x24>
 8005070:	f7fe f948 	bl	8003304 <_free_r>
 8005074:	4625      	mov	r5, r4
 8005076:	4628      	mov	r0, r5
 8005078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800507c:	f000 f81b 	bl	80050b6 <_malloc_usable_size_r>
 8005080:	4284      	cmp	r4, r0
 8005082:	4607      	mov	r7, r0
 8005084:	d802      	bhi.n	800508c <_realloc_r+0x34>
 8005086:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800508a:	d812      	bhi.n	80050b2 <_realloc_r+0x5a>
 800508c:	4621      	mov	r1, r4
 800508e:	4640      	mov	r0, r8
 8005090:	f7fe f9a0 	bl	80033d4 <_malloc_r>
 8005094:	4605      	mov	r5, r0
 8005096:	2800      	cmp	r0, #0
 8005098:	d0ed      	beq.n	8005076 <_realloc_r+0x1e>
 800509a:	42bc      	cmp	r4, r7
 800509c:	4622      	mov	r2, r4
 800509e:	4631      	mov	r1, r6
 80050a0:	bf28      	it	cs
 80050a2:	463a      	movcs	r2, r7
 80050a4:	f7fe f917 	bl	80032d6 <memcpy>
 80050a8:	4631      	mov	r1, r6
 80050aa:	4640      	mov	r0, r8
 80050ac:	f7fe f92a 	bl	8003304 <_free_r>
 80050b0:	e7e1      	b.n	8005076 <_realloc_r+0x1e>
 80050b2:	4635      	mov	r5, r6
 80050b4:	e7df      	b.n	8005076 <_realloc_r+0x1e>

080050b6 <_malloc_usable_size_r>:
 80050b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050ba:	1f18      	subs	r0, r3, #4
 80050bc:	2b00      	cmp	r3, #0
 80050be:	bfbc      	itt	lt
 80050c0:	580b      	ldrlt	r3, [r1, r0]
 80050c2:	18c0      	addlt	r0, r0, r3
 80050c4:	4770      	bx	lr
	...

080050c8 <_init>:
 80050c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ca:	bf00      	nop
 80050cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ce:	bc08      	pop	{r3}
 80050d0:	469e      	mov	lr, r3
 80050d2:	4770      	bx	lr

080050d4 <_fini>:
 80050d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d6:	bf00      	nop
 80050d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050da:	bc08      	pop	{r3}
 80050dc:	469e      	mov	lr, r3
 80050de:	4770      	bx	lr
