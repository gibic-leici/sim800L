
sim800L.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e18  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c0  08004f24  08004f24  00014f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056e4  080056e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080056e4  080056e4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056e4  080056e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056e4  080056e4  000156e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056e8  080056e8  000156e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080056ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000070  0800575c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  0800575c  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007aa0  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a40  00000000  00000000  00027b39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  00029580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000780  00000000  00000000  00029da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c2b  00000000  00000000  0002a528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008a26  00000000  00000000  00042153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083cf5  00000000  00000000  0004ab79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ce86e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002de8  00000000  00000000  000ce8c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004f0c 	.word	0x08004f0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004f0c 	.word	0x08004f0c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000164:	1d39      	adds	r1, r7, #4
 8000166:	f04f 33ff 	mov.w	r3, #4294967295
 800016a:	2201      	movs	r2, #1
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <__io_putchar+0x20>)
 800016e:	f002 f830 	bl	80021d2 <HAL_UART_Transmit>
  return ch;
 8000172:	687b      	ldr	r3, [r7, #4]
}
 8000174:	4618      	mov	r0, r3
 8000176:	3708      	adds	r7, #8
 8000178:	46bd      	mov	sp, r7
 800017a:	bd80      	pop	{r7, pc}
 800017c:	2000008c 	.word	0x2000008c

08000180 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8000186:	2300      	movs	r3, #0
 8000188:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart1);
 800018a:	2300      	movs	r3, #0
 800018c:	603b      	str	r3, [r7, #0]
 800018e:	4b0e      	ldr	r3, [pc, #56]	; (80001c8 <__io_getchar+0x48>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	603b      	str	r3, [r7, #0]
 8000196:	4b0c      	ldr	r3, [pc, #48]	; (80001c8 <__io_getchar+0x48>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	603b      	str	r3, [r7, #0]
 800019e:	683b      	ldr	r3, [r7, #0]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80001a0:	1df9      	adds	r1, r7, #7
 80001a2:	f04f 33ff 	mov.w	r3, #4294967295
 80001a6:	2201      	movs	r2, #1
 80001a8:	4807      	ldr	r0, [pc, #28]	; (80001c8 <__io_getchar+0x48>)
 80001aa:	f002 f8a4 	bl	80022f6 <HAL_UART_Receive>
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80001ae:	1df9      	adds	r1, r7, #7
 80001b0:	f04f 33ff 	mov.w	r3, #4294967295
 80001b4:	2201      	movs	r2, #1
 80001b6:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__io_getchar+0x48>)
 80001b8:	f002 f80b 	bl	80021d2 <HAL_UART_Transmit>

  return ch;
 80001bc:	79fb      	ldrb	r3, [r7, #7]
}
 80001be:	4618      	mov	r0, r3
 80001c0:	3708      	adds	r7, #8
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bd80      	pop	{r7, pc}
 80001c6:	bf00      	nop
 80001c8:	2000008c 	.word	0x2000008c

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b5b0      	push	{r4, r5, r7, lr}
 80001ce:	f5ad 6d28 	sub.w	sp, sp, #2688	; 0xa80
 80001d2:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 ff9c 	bl	8001110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f9aa 	bl	8000530 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  setvbuf(stdin, NULL, _IONBF, 0);	// Esto es necesario para que scanf ande bien
 80001dc:	4bb3      	ldr	r3, [pc, #716]	; (80004ac <main+0x2e0>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	6858      	ldr	r0, [r3, #4]
 80001e2:	2300      	movs	r3, #0
 80001e4:	2202      	movs	r2, #2
 80001e6:	2100      	movs	r1, #0
 80001e8:	f003 f8dc 	bl	80033a4 <setvbuf>
  	  	  	  	  	  	  	  	    // con esto y lo de arriba ya anda el scanf :)

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ec:	f000 fa30 	bl	8000650 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001f0:	f000 f9da 	bl	80005a8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80001f4:	f000 fa02 	bl	80005fc <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */

  printf("Test de comandos AT... \r\n");
 80001f8:	48ad      	ldr	r0, [pc, #692]	; (80004b0 <main+0x2e4>)
 80001fa:	f003 f8a3 	bl	8003344 <puts>
  SerialDebug(&huart1,&huart2,26);
 80001fe:	221a      	movs	r2, #26
 8000200:	49ac      	ldr	r1, [pc, #688]	; (80004b4 <main+0x2e8>)
 8000202:	48ad      	ldr	r0, [pc, #692]	; (80004b8 <main+0x2ec>)
 8000204:	f000 fd7f 	bl	8000d06 <SerialDebug>

  // Inicializacion de la clase con la que manejo el sim800L

  SIM800 sim800;
  InitSIM(&sim800,&huart2,1);
 8000208:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800020c:	2201      	movs	r2, #1
 800020e:	49a9      	ldr	r1, [pc, #676]	; (80004b4 <main+0x2e8>)
 8000210:	4618      	mov	r0, r3
 8000212:	f000 fa77 	bl	8000704 <InitSIM>

  EnviarAT(&sim800);
 8000216:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800021a:	4618      	mov	r0, r3
 800021c:	f000 fb62 	bl	80008e4 <EnviarAT>
  ConsultarEstadoSIM(&sim800);
 8000220:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000224:	4618      	mov	r0, r3
 8000226:	f000 fc69 	bl	8000afc <ConsultarEstadoSIM>


  int bypass_conection = 0;
 800022a:	2300      	movs	r3, #0
 800022c:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74

  printf("Conectando a la red...(Presione alguna tecla para diagnosticar)\r\n");
 8000230:	48a2      	ldr	r0, [pc, #648]	; (80004bc <main+0x2f0>)
 8000232:	f003 f887 	bl	8003344 <puts>


  while( ( isConnected(&sim800,0) != 1 ) && (bypass_conection == 0) )
 8000236:	e049      	b.n	80002cc <main+0x100>
  {
	  if (getchar() != EOF)
 8000238:	f002 fee0 	bl	8002ffc <getchar>
 800023c:	4603      	mov	r3, r0
 800023e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000242:	d043      	beq.n	80002cc <main+0x100>
	  {
		  {
			  printf("Todavia no se ha podido establecer la conexion.\r\n");
 8000244:	489e      	ldr	r0, [pc, #632]	; (80004c0 <main+0x2f4>)
 8000246:	f003 f87d 	bl	8003344 <puts>
		  	  printf("1) Reintentar\r\n");
 800024a:	489e      	ldr	r0, [pc, #632]	; (80004c4 <main+0x2f8>)
 800024c:	f003 f87a 	bl	8003344 <puts>
		  	  printf("2) Diagnosticar\r\n");
 8000250:	489d      	ldr	r0, [pc, #628]	; (80004c8 <main+0x2fc>)
 8000252:	f003 f877 	bl	8003344 <puts>
		  	  printf("3) Serial Debug\r\n");
 8000256:	489d      	ldr	r0, [pc, #628]	; (80004cc <main+0x300>)
 8000258:	f003 f874 	bl	8003344 <puts>
		  	  printf("4) Continuar sin conexion\r\n");
 800025c:	489c      	ldr	r0, [pc, #624]	; (80004d0 <main+0x304>)
 800025e:	f003 f871 	bl	8003344 <puts>

		  	  int opcion;
		  	  scanf("%d",&opcion);
 8000262:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000266:	4619      	mov	r1, r3
 8000268:	489a      	ldr	r0, [pc, #616]	; (80004d4 <main+0x308>)
 800026a:	f003 f883 	bl	8003374 <iscanf>
		  	  switch(opcion)
 800026e:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8000272:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	3b01      	subs	r3, #1
 800027a:	2b03      	cmp	r3, #3
 800027c:	d826      	bhi.n	80002cc <main+0x100>
 800027e:	a201      	add	r2, pc, #4	; (adr r2, 8000284 <main+0xb8>)
 8000280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000284:	080002cd 	.word	0x080002cd
 8000288:	08000295 	.word	0x08000295
 800028c:	080002b3 	.word	0x080002b3
 8000290:	080002c5 	.word	0x080002c5
		  	  {
		  	  case 1:
		  		  break;
		  	  case 2:
		  		  ConsultarSignal(&sim800);
 8000294:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000298:	4618      	mov	r0, r3
 800029a:	f000 fc1f 	bl	8000adc <ConsultarSignal>
		  		  HAL_Delay(1000);
 800029e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002a2:	f000 ff97 	bl	80011d4 <HAL_Delay>
		  		  ListarRedesDisponibles(&sim800);
 80002a6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 fc36 	bl	8000b1c <ListarRedesDisponibles>
		  		  break;
 80002b0:	e00c      	b.n	80002cc <main+0x100>
		  	  case 3:
		  		  printf("Modo de Serial Debug. Ingrese ctr+z para salir");
 80002b2:	4889      	ldr	r0, [pc, #548]	; (80004d8 <main+0x30c>)
 80002b4:	f002 ffc0 	bl	8003238 <iprintf>
		  		  SerialDebug(&huart1,&huart2,26);
 80002b8:	221a      	movs	r2, #26
 80002ba:	497e      	ldr	r1, [pc, #504]	; (80004b4 <main+0x2e8>)
 80002bc:	487e      	ldr	r0, [pc, #504]	; (80004b8 <main+0x2ec>)
 80002be:	f000 fd22 	bl	8000d06 <SerialDebug>
		  		  break;
 80002c2:	e003      	b.n	80002cc <main+0x100>

		  	  case 4:
		  		  bypass_conection=1;
 80002c4:	2301      	movs	r3, #1
 80002c6:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
		  		  break;
 80002ca:	bf00      	nop
  while( ( isConnected(&sim800,0) != 1 ) && (bypass_conection == 0) )
 80002cc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 fab0 	bl	8000838 <isConnected>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d003      	beq.n	80002e6 <main+0x11a>
 80002de:	f8d7 3a74 	ldr.w	r3, [r7, #2676]	; 0xa74
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d0a8      	beq.n	8000238 <main+0x6c>
		  	  }
		    }
	  }
  }
  printf("Conectado con exito\r\n");
 80002e6:	487d      	ldr	r0, [pc, #500]	; (80004dc <main+0x310>)
 80002e8:	f003 f82c 	bl	8003344 <puts>


  InitGPRS(&sim800,1);
 80002ec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80002f0:	2101      	movs	r1, #1
 80002f2:	4618      	mov	r0, r3
 80002f4:	f000 fad0 	bl	8000898 <InitGPRS>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	printf("Bienvenido al Test de SIM800L\r\n");
 80002f8:	4879      	ldr	r0, [pc, #484]	; (80004e0 <main+0x314>)
 80002fa:	f003 f823 	bl	8003344 <puts>
	printf("1) Serial Debug\r\n");
 80002fe:	4879      	ldr	r0, [pc, #484]	; (80004e4 <main+0x318>)
 8000300:	f003 f820 	bl	8003344 <puts>
	printf("2) Recibir msj SMS \r\n");
 8000304:	4878      	ldr	r0, [pc, #480]	; (80004e8 <main+0x31c>)
 8000306:	f003 f81d 	bl	8003344 <puts>
	printf("3) Enviar msj SMS \r\n");
 800030a:	4878      	ldr	r0, [pc, #480]	; (80004ec <main+0x320>)
 800030c:	f003 f81a 	bl	8003344 <puts>
	printf("4) Testear el modo GPRS\r\n");
 8000310:	4877      	ldr	r0, [pc, #476]	; (80004f0 <main+0x324>)
 8000312:	f003 f817 	bl	8003344 <puts>
	printf("5) Enviar un msj TCP\r\n");
 8000316:	4877      	ldr	r0, [pc, #476]	; (80004f4 <main+0x328>)
 8000318:	f003 f814 	bl	8003344 <puts>
	printf("6) Enviar un msj largo (1500 bytes) por TCP\r\n");
 800031c:	4876      	ldr	r0, [pc, #472]	; (80004f8 <main+0x32c>)
 800031e:	f003 f811 	bl	8003344 <puts>

	int opcion1;
	char opcion2;
	scanf("%d",&opcion1);
 8000322:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000326:	4619      	mov	r1, r3
 8000328:	486a      	ldr	r0, [pc, #424]	; (80004d4 <main+0x308>)
 800032a:	f003 f823 	bl	8003374 <iscanf>

	char IP [50] = "181.231.229.4";
 800032e:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8000332:	f6a3 2574 	subw	r5, r3, #2676	; 0xa74
 8000336:	4b71      	ldr	r3, [pc, #452]	; (80004fc <main+0x330>)
 8000338:	462c      	mov	r4, r5
 800033a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800033c:	c407      	stmia	r4!, {r0, r1, r2}
 800033e:	8023      	strh	r3, [r4, #0]
 8000340:	f105 030e 	add.w	r3, r5, #14
 8000344:	2224      	movs	r2, #36	; 0x24
 8000346:	2100      	movs	r1, #0
 8000348:	4618      	mov	r0, r3
 800034a:	f002 fe90 	bl	800306e <memset>
	int puerto = 1050;
 800034e:	f240 431a 	movw	r3, #1050	; 0x41a
 8000352:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70

	switch(opcion1)
 8000356:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800035a:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	3b01      	subs	r3, #1
 8000362:	2b05      	cmp	r3, #5
 8000364:	d8c8      	bhi.n	80002f8 <main+0x12c>
 8000366:	a201      	add	r2, pc, #4	; (adr r2, 800036c <main+0x1a0>)
 8000368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800036c:	08000385 	.word	0x08000385
 8000370:	08000399 	.word	0x08000399
 8000374:	08000441 	.word	0x08000441
 8000378:	08000451 	.word	0x08000451
 800037c:	08000465 	.word	0x08000465
 8000380:	08000485 	.word	0x08000485
	{
	case 1:
		printf("Modo de Serial Debug. Ingrese ctr+z para salir");
 8000384:	4854      	ldr	r0, [pc, #336]	; (80004d8 <main+0x30c>)
 8000386:	f002 ff57 	bl	8003238 <iprintf>
		SerialDebug(&huart1,&huart2,26);
 800038a:	221a      	movs	r2, #26
 800038c:	4949      	ldr	r1, [pc, #292]	; (80004b4 <main+0x2e8>)
 800038e:	484a      	ldr	r0, [pc, #296]	; (80004b8 <main+0x2ec>)
 8000390:	f000 fcb9 	bl	8000d06 <SerialDebug>
		break;
 8000394:	e089      	b.n	80004aa <main+0x2de>
	case 2:
 8000396:	bf00      	nop
			do{
				printf("Esperando por SMS...\r\n");
 8000398:	4859      	ldr	r0, [pc, #356]	; (8000500 <main+0x334>)
 800039a:	f002 ffd3 	bl	8003344 <puts>
				char comando1 [LEN_CMD] = "\r\nLED_TOGGLE\r\n";
 800039e:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80003a2:	f5a3 6524 	sub.w	r5, r3, #2624	; 0xa40
 80003a6:	4b57      	ldr	r3, [pc, #348]	; (8000504 <main+0x338>)
 80003a8:	462c      	mov	r4, r5
 80003aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003ac:	c407      	stmia	r4!, {r0, r1, r2}
 80003ae:	8023      	strh	r3, [r4, #0]
 80003b0:	3402      	adds	r4, #2
 80003b2:	0c1b      	lsrs	r3, r3, #16
 80003b4:	7023      	strb	r3, [r4, #0]
 80003b6:	f105 030f 	add.w	r3, r5, #15
 80003ba:	2223      	movs	r2, #35	; 0x23
 80003bc:	2100      	movs	r1, #0
 80003be:	4618      	mov	r0, r3
 80003c0:	f002 fe55 	bl	800306e <memset>

				if (ListenSMS(&sim800) == 1)
 80003c4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 fbfb 	bl	8000bc4 <ListenSMS>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b01      	cmp	r3, #1
 80003d2:	d11e      	bne.n	8000412 <main+0x246>
				{
					printf("Texto del mensaje: %s",sim800.txt_last_sms);
 80003d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80003d8:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 80003dc:	4619      	mov	r1, r3
 80003de:	484a      	ldr	r0, [pc, #296]	; (8000508 <main+0x33c>)
 80003e0:	f002 ff2a 	bl	8003238 <iprintf>
					if(strncmp((sim800.txt_last_sms),comando1,strlen(comando1)) == 0)
 80003e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff feaf 	bl	800014c <strlen>
 80003ee:	4602      	mov	r2, r0
 80003f0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80003f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80003f8:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 80003fc:	4618      	mov	r0, r3
 80003fe:	f003 f8fa 	bl	80035f6 <strncmp>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d104      	bne.n	8000412 <main+0x246>
					{
						HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000408:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800040c:	483f      	ldr	r0, [pc, #252]	; (800050c <main+0x340>)
 800040e:	f001 fa5f 	bl	80018d0 <HAL_GPIO_TogglePin>
					}
				}


				printf("Desea esperar por otro SMS? (s/n) \r\n");
 8000412:	483f      	ldr	r0, [pc, #252]	; (8000510 <main+0x344>)
 8000414:	f002 ff96 	bl	8003344 <puts>
				fflush(stdin);
 8000418:	4b24      	ldr	r3, [pc, #144]	; (80004ac <main+0x2e0>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	685b      	ldr	r3, [r3, #4]
 800041e:	4618      	mov	r0, r3
 8000420:	f002 fcc8 	bl	8002db4 <fflush>
				scanf("%c",&opcion2);
 8000424:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 8000428:	4619      	mov	r1, r3
 800042a:	483a      	ldr	r0, [pc, #232]	; (8000514 <main+0x348>)
 800042c:	f002 ffa2 	bl	8003374 <iscanf>
				}while( opcion2 == 's');
 8000430:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8000434:	f6a3 230d 	subw	r3, r3, #2573	; 0xa0d
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b73      	cmp	r3, #115	; 0x73
 800043c:	d0ab      	beq.n	8000396 <main+0x1ca>

			break;
 800043e:	e034      	b.n	80004aa <main+0x2de>

	case 3:
		EnviarSMS(&sim800,"+5492966544589","Hola desde el SIM800 por SMS",1);
 8000440:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8000444:	2301      	movs	r3, #1
 8000446:	4a34      	ldr	r2, [pc, #208]	; (8000518 <main+0x34c>)
 8000448:	4934      	ldr	r1, [pc, #208]	; (800051c <main+0x350>)
 800044a:	f000 fb7b 	bl	8000b44 <EnviarSMS>
		break;
 800044e:	e02c      	b.n	80004aa <main+0x2de>

	case 4:
		printf("Probando GPRS, recuperando algo de una pag web... \r\n");
 8000450:	4833      	ldr	r0, [pc, #204]	; (8000520 <main+0x354>)
 8000452:	f002 ff77 	bl	8003344 <puts>
		TestGPRS(&sim800,1);
 8000456:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800045a:	2101      	movs	r1, #1
 800045c:	4618      	mov	r0, r3
 800045e:	f000 fa51 	bl	8000904 <TestGPRS>
		break;
 8000462:	e022      	b.n	80004aa <main+0x2de>

	case 5:
		printf("Enviando un msj al IP: %s\r\n",IP);
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	4619      	mov	r1, r3
 8000468:	482e      	ldr	r0, [pc, #184]	; (8000524 <main+0x358>)
 800046a:	f002 fee5 	bl	8003238 <iprintf>
		SendTCPtoIP(&sim800, "Hola desde el SIM800L por protocolo TCP\r\n", IP, puerto,1);
 800046e:	1d3a      	adds	r2, r7, #4
 8000470:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8000474:	2301      	movs	r3, #1
 8000476:	9300      	str	r3, [sp, #0]
 8000478:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 800047c:	492a      	ldr	r1, [pc, #168]	; (8000528 <main+0x35c>)
 800047e:	f000 fad5 	bl	8000a2c <SendTCPtoIP>
		break;
 8000482:	e012      	b.n	80004aa <main+0x2de>

	case 6:
		printf("Enviando un msj largo al IP: %s\r\n",IP);
 8000484:	1d3b      	adds	r3, r7, #4
 8000486:	4619      	mov	r1, r3
 8000488:	4828      	ldr	r0, [pc, #160]	; (800052c <main+0x360>)
 800048a:	f002 fed5 	bl	8003238 <iprintf>
		SendTCPtoIP(&sim800, sim800.buffer_largo , IP, puerto,1);
 800048e:	1d3a      	adds	r2, r7, #4
 8000490:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000494:	f603 0138 	addw	r1, r3, #2104	; 0x838
 8000498:	f107 0074 	add.w	r0, r7, #116	; 0x74
 800049c:	2301      	movs	r3, #1
 800049e:	9300      	str	r3, [sp, #0]
 80004a0:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 80004a4:	f000 fac2 	bl	8000a2c <SendTCPtoIP>
		break;
 80004a8:	bf00      	nop
  {
 80004aa:	e725      	b.n	80002f8 <main+0x12c>
 80004ac:	2000000c 	.word	0x2000000c
 80004b0:	08004f24 	.word	0x08004f24
 80004b4:	200000d0 	.word	0x200000d0
 80004b8:	2000008c 	.word	0x2000008c
 80004bc:	08004f40 	.word	0x08004f40
 80004c0:	08004f84 	.word	0x08004f84
 80004c4:	08004fb8 	.word	0x08004fb8
 80004c8:	08004fc8 	.word	0x08004fc8
 80004cc:	08004fdc 	.word	0x08004fdc
 80004d0:	08004ff0 	.word	0x08004ff0
 80004d4:	0800500c 	.word	0x0800500c
 80004d8:	08005010 	.word	0x08005010
 80004dc:	08005040 	.word	0x08005040
 80004e0:	08005058 	.word	0x08005058
 80004e4:	08005078 	.word	0x08005078
 80004e8:	0800508c 	.word	0x0800508c
 80004ec:	080050a4 	.word	0x080050a4
 80004f0:	080050b8 	.word	0x080050b8
 80004f4:	080050d4 	.word	0x080050d4
 80004f8:	080050ec 	.word	0x080050ec
 80004fc:	08005244 	.word	0x08005244
 8000500:	0800511c 	.word	0x0800511c
 8000504:	08005278 	.word	0x08005278
 8000508:	08005134 	.word	0x08005134
 800050c:	40011000 	.word	0x40011000
 8000510:	0800514c 	.word	0x0800514c
 8000514:	08005170 	.word	0x08005170
 8000518:	08005174 	.word	0x08005174
 800051c:	08005194 	.word	0x08005194
 8000520:	080051a4 	.word	0x080051a4
 8000524:	080051d8 	.word	0x080051d8
 8000528:	080051f4 	.word	0x080051f4
 800052c:	08005220 	.word	0x08005220

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b090      	sub	sp, #64	; 0x40
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0318 	add.w	r3, r7, #24
 800053a:	2228      	movs	r2, #40	; 0x28
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f002 fd95 	bl	800306e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000552:	2302      	movs	r3, #2
 8000554:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000556:	2301      	movs	r3, #1
 8000558:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055a:	2310      	movs	r3, #16
 800055c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800055e:	2300      	movs	r3, #0
 8000560:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000562:	f107 0318 	add.w	r3, r7, #24
 8000566:	4618      	mov	r0, r3
 8000568:	f001 f9cc 	bl	8001904 <HAL_RCC_OscConfig>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000572:	f000 f8c1 	bl	80006f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000576:	230f      	movs	r3, #15
 8000578:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800057a:	2300      	movs	r3, #0
 800057c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000582:	2300      	movs	r3, #0
 8000584:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f001 fc3a 	bl	8001e08 <HAL_RCC_ClockConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800059a:	f000 f8ad 	bl	80006f8 <Error_Handler>
  }
}
 800059e:	bf00      	nop
 80005a0:	3740      	adds	r7, #64	; 0x40
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
	...

080005a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005ae:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <MX_USART1_UART_Init+0x50>)
 80005b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005b2:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005ce:	220c      	movs	r2, #12
 80005d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005de:	4805      	ldr	r0, [pc, #20]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005e0:	f001 fdaa 	bl	8002138 <HAL_UART_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005ea:	f000 f885 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	2000008c 	.word	0x2000008c
 80005f8:	40013800 	.word	0x40013800

080005fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000602:	4a12      	ldr	r2, [pc, #72]	; (800064c <MX_USART2_UART_Init+0x50>)
 8000604:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000608:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800060c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000622:	220c      	movs	r2, #12
 8000624:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000634:	f001 fd80 	bl	8002138 <HAL_UART_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800063e:	f000 f85b 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	200000d0 	.word	0x200000d0
 800064c:	40004400 	.word	0x40004400

08000650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	f107 0308 	add.w	r3, r7, #8
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000664:	4b21      	ldr	r3, [pc, #132]	; (80006ec <MX_GPIO_Init+0x9c>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	4a20      	ldr	r2, [pc, #128]	; (80006ec <MX_GPIO_Init+0x9c>)
 800066a:	f043 0310 	orr.w	r3, r3, #16
 800066e:	6193      	str	r3, [r2, #24]
 8000670:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <MX_GPIO_Init+0x9c>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f003 0310 	and.w	r3, r3, #16
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <MX_GPIO_Init+0x9c>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a1a      	ldr	r2, [pc, #104]	; (80006ec <MX_GPIO_Init+0x9c>)
 8000682:	f043 0304 	orr.w	r3, r3, #4
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <MX_GPIO_Init+0x9c>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f003 0304 	and.w	r3, r3, #4
 8000690:	603b      	str	r3, [r7, #0]
 8000692:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800069a:	4815      	ldr	r0, [pc, #84]	; (80006f0 <MX_GPIO_Init+0xa0>)
 800069c:	f001 f900 	bl	80018a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_SIM_GPIO_Port, RST_SIM_Pin, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2120      	movs	r1, #32
 80006a4:	4813      	ldr	r0, [pc, #76]	; (80006f4 <MX_GPIO_Init+0xa4>)
 80006a6:	f001 f8fb 	bl	80018a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b0:	2301      	movs	r3, #1
 80006b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006b4:	2302      	movs	r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	2302      	movs	r3, #2
 80006ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	4619      	mov	r1, r3
 80006c2:	480b      	ldr	r0, [pc, #44]	; (80006f0 <MX_GPIO_Init+0xa0>)
 80006c4:	f000 ff68 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_SIM_Pin */
  GPIO_InitStruct.Pin = RST_SIM_Pin;
 80006c8:	2320      	movs	r3, #32
 80006ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006d0:	2301      	movs	r3, #1
 80006d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2302      	movs	r3, #2
 80006d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RST_SIM_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f107 0308 	add.w	r3, r7, #8
 80006dc:	4619      	mov	r1, r3
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_GPIO_Init+0xa4>)
 80006e0:	f000 ff5a 	bl	8001598 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006e4:	bf00      	nop
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40021000 	.word	0x40021000
 80006f0:	40011000 	.word	0x40011000
 80006f4:	40010800 	.word	0x40010800

080006f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006fc:	b672      	cpsid	i
}
 80006fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000700:	e7fe      	b.n	8000700 <Error_Handler+0x8>
	...

08000704 <InitSIM>:
#include <string.h>
#include <stdio.h>


void InitSIM(SIM800* sim, UART_HandleTypeDef * huart,int print)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]

	sim-> huart = huart;
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	68ba      	ldr	r2, [r7, #8]
 8000714:	601a      	str	r2, [r3, #0]
	memset(sim->response, 0, LENGTH);
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	3304      	adds	r3, #4
 800071a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f002 fca4 	bl	800306e <memset>
	memset(sim->txt_last_sms, 0, LEN_TXT);
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 800072c:	2264      	movs	r2, #100	; 0x64
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f002 fc9c 	bl	800306e <memset>

	memset(sim->buffer_largo,'c',LEN_BUF_LARGO);
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	f603 0338 	addw	r3, r3, #2104	; 0x838
 800073c:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000740:	2163      	movs	r1, #99	; 0x63
 8000742:	4618      	mov	r0, r3
 8000744:	f002 fc93 	bl	800306e <memset>

	EnviarComandoAT(sim,"AT+CMGF=1\r\n",print); // Activa modo texto
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	4906      	ldr	r1, [pc, #24]	; (8000764 <InitSIM+0x60>)
 800074c:	68f8      	ldr	r0, [r7, #12]
 800074e:	f000 f80d 	bl	800076c <EnviarComandoAT>
	EnviarComandoAT(sim,"AT+CNMI=2,1,0,0,0\r\n",print); // Configura recepcion de SMS
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	4904      	ldr	r1, [pc, #16]	; (8000768 <InitSIM+0x64>)
 8000756:	68f8      	ldr	r0, [r7, #12]
 8000758:	f000 f808 	bl	800076c <EnviarComandoAT>
												  // Esto es importante : Primer num: el 2 es para que guarde los msj en un buffer si la conexion Uart esta ocupada
												 // Segundo num: el 1 es para que guarde internamente los msj, despues para leerlos hay que usar CMGR. Si esto lo pones en 2 forwardea el msj directamente y no guarda nada


}
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	080052ac 	.word	0x080052ac
 8000768:	080052b8 	.word	0x080052b8

0800076c <EnviarComandoAT>:


void EnviarComandoAT(SIM800* sim, char* comando, int print)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
	Enviar(sim,comando);
 8000778:	68b9      	ldr	r1, [r7, #8]
 800077a:	68f8      	ldr	r0, [r7, #12]
 800077c:	f000 f80b 	bl	8000796 <Enviar>
	WaitForAnswer(sim,print);
 8000780:	6879      	ldr	r1, [r7, #4]
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	f000 f81e 	bl	80007c4 <WaitForAnswer>
	HAL_Delay(100);
 8000788:	2064      	movs	r0, #100	; 0x64
 800078a:	f000 fd23 	bl	80011d4 <HAL_Delay>
}
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <Enviar>:

void Enviar(SIM800 *sim, char * cadena)
{
 8000796:	b590      	push	{r4, r7, lr}
 8000798:	b083      	sub	sp, #12
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
 800079e:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit (sim->huart, (uint8_t*) cadena, strlen(cadena),TIMEOUT);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681c      	ldr	r4, [r3, #0]
 80007a4:	6838      	ldr	r0, [r7, #0]
 80007a6:	f7ff fcd1 	bl	800014c <strlen>
 80007aa:	4603      	mov	r3, r0
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007b2:	6839      	ldr	r1, [r7, #0]
 80007b4:	4620      	mov	r0, r4
 80007b6:	f001 fd0c 	bl	80021d2 <HAL_UART_Transmit>
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd90      	pop	{r4, r7, pc}
	...

080007c4 <WaitForAnswer>:


int WaitForAnswer(SIM800* sim,int print)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
	int counter=0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
	Borrar_respuesta(sim);
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f000 fa26 	bl	8000c24 <Borrar_respuesta>
	while((strlen(sim->response)==0) && (counter < WAIT_MAX / TIMEOUT) )
 80007d8:	e00c      	b.n	80007f4 <WaitForAnswer+0x30>
	{
		counter++;
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	3301      	adds	r3, #1
 80007de:	60fb      	str	r3, [r7, #12]
		HAL_UART_Receive (sim->huart, (uint8_t*) sim->response, LENGTH,TIMEOUT);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6818      	ldr	r0, [r3, #0]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	1d19      	adds	r1, r3, #4
 80007e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007ec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80007f0:	f001 fd81 	bl	80022f6 <HAL_UART_Receive>
	while((strlen(sim->response)==0) && (counter < WAIT_MAX / TIMEOUT) )
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	3304      	adds	r3, #4
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d102      	bne.n	8000804 <WaitForAnswer+0x40>
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2b13      	cmp	r3, #19
 8000802:	ddea      	ble.n	80007da <WaitForAnswer+0x16>
	}
	if(print == 1)
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d109      	bne.n	800081e <WaitForAnswer+0x5a>
	{
		if(counter ==  WAIT_MAX / TIMEOUT)
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	2b14      	cmp	r3, #20
 800080e:	d103      	bne.n	8000818 <WaitForAnswer+0x54>
		{
			printf("Tiempo de espera agotado\r\n");
 8000810:	4808      	ldr	r0, [pc, #32]	; (8000834 <WaitForAnswer+0x70>)
 8000812:	f002 fd97 	bl	8003344 <puts>
 8000816:	e002      	b.n	800081e <WaitForAnswer+0x5a>
		}
		else
		{
			Imprimir_respuesta(sim);
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f000 f9f3 	bl	8000c04 <Imprimir_respuesta>
		}

	}
	return (counter ==  WAIT_MAX / TIMEOUT)? 0:1;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	2b14      	cmp	r3, #20
 8000822:	bf14      	ite	ne
 8000824:	2301      	movne	r3, #1
 8000826:	2300      	moveq	r3, #0
 8000828:	b2db      	uxtb	r3, r3
}
 800082a:	4618      	mov	r0, r3
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	080052cc 	.word	0x080052cc

08000838 <isConnected>:

int isConnected(SIM800 *sim,int print)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
	// Si esta conectado creg me devuelve 0,1. Espero a la coma y me fijo el siguiente caracter
	EnviarComandoAT(sim,"AT+CREG?\r\n",print);
 8000842:	683a      	ldr	r2, [r7, #0]
 8000844:	4913      	ldr	r1, [pc, #76]	; (8000894 <isConnected+0x5c>)
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff ff90 	bl	800076c <EnviarComandoAT>

	int index = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
	while( (*(sim->response +index) != ',') && (*(sim->response+index) != '\0') )
 8000850:	e002      	b.n	8000858 <isConnected+0x20>
	{
		index++;
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	3301      	adds	r3, #1
 8000856:	60fb      	str	r3, [r7, #12]
	while( (*(sim->response +index) != ',') && (*(sim->response+index) != '\0') )
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	1d1a      	adds	r2, r3, #4
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	4413      	add	r3, r2
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b2c      	cmp	r3, #44	; 0x2c
 8000864:	d006      	beq.n	8000874 <isConnected+0x3c>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	1d1a      	adds	r2, r3, #4
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	4413      	add	r3, r2
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d1ee      	bne.n	8000852 <isConnected+0x1a>
	}

	return (*(sim->response+index+1) == '1' )?1:0;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	1d1a      	adds	r2, r3, #4
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	3301      	adds	r3, #1
 800087c:	4413      	add	r3, r2
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b31      	cmp	r3, #49	; 0x31
 8000882:	bf0c      	ite	eq
 8000884:	2301      	moveq	r3, #1
 8000886:	2300      	movne	r3, #0
 8000888:	b2db      	uxtb	r3, r3
}
 800088a:	4618      	mov	r0, r3
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	080052e8 	.word	0x080052e8

08000898 <InitGPRS>:


void InitGPRS(SIM800 *sim,int print)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]

	// Esto me parece que es innecesario...
	EnviarComandoAT(sim, "AT+CFUN=1\r\n",print);
 80008a2:	683a      	ldr	r2, [r7, #0]
 80008a4:	490b      	ldr	r1, [pc, #44]	; (80008d4 <InitGPRS+0x3c>)
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f7ff ff60 	bl	800076c <EnviarComandoAT>

	//EnviarComandoAT(sim,"AT+CSTT=\"igprs.claro.com.ar\",\"ctigprs\",\"ctigprs999\"\r\n",print);
	EnviarComandoAT(sim,"AT+CSTT=\"igprs.claro.com.ar\",\"\",\"\"\r\n",print);
 80008ac:	683a      	ldr	r2, [r7, #0]
 80008ae:	490a      	ldr	r1, [pc, #40]	; (80008d8 <InitGPRS+0x40>)
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff ff5b 	bl	800076c <EnviarComandoAT>
		// Esto setea el APN contraseña y usuario de Claro. Sin esto se conecta igual a red celular pero no anda el GPRS

	EnviarComandoAT(sim,"AT+CIICR\r\n",print);	// Inicializa el GPRS
 80008b6:	683a      	ldr	r2, [r7, #0]
 80008b8:	4908      	ldr	r1, [pc, #32]	; (80008dc <InitGPRS+0x44>)
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff ff56 	bl	800076c <EnviarComandoAT>


	EnviarComandoAT(sim,"AT+CIFSR\r\n",print);	// Debería imprimir el IP
 80008c0:	683a      	ldr	r2, [r7, #0]
 80008c2:	4907      	ldr	r1, [pc, #28]	; (80008e0 <InitGPRS+0x48>)
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f7ff ff51 	bl	800076c <EnviarComandoAT>
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	080052f4 	.word	0x080052f4
 80008d8:	08005300 	.word	0x08005300
 80008dc:	08005328 	.word	0x08005328
 80008e0:	08005334 	.word	0x08005334

080008e4 <EnviarAT>:



void EnviarAT(SIM800* sim)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	EnviarComandoAT(sim,"AT\r\n",1);
 80008ec:	2201      	movs	r2, #1
 80008ee:	4904      	ldr	r1, [pc, #16]	; (8000900 <EnviarAT+0x1c>)
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f7ff ff3b 	bl	800076c <EnviarComandoAT>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	08005340 	.word	0x08005340

08000904 <TestGPRS>:

void TestGPRS(SIM800* sim,int print)
{
 8000904:	b5b0      	push	{r4, r5, r7, lr}
 8000906:	b0ce      	sub	sp, #312	; 0x138
 8000908:	af00      	add	r7, sp, #0
 800090a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800090e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000912:	6018      	str	r0, [r3, #0]
 8000914:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000918:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800091c:	6019      	str	r1, [r3, #0]

	char cmd [LEN_TXT] = "AT+CIPSTART=\"TCP\",\"httpbin.org\",80\r\n";
 800091e:	4b40      	ldr	r3, [pc, #256]	; (8000a20 <TestGPRS+0x11c>)
 8000920:	f107 04d4 	add.w	r4, r7, #212	; 0xd4
 8000924:	461d      	mov	r5, r3
 8000926:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000928:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800092a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800092c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800092e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000932:	6020      	str	r0, [r4, #0]
 8000934:	3404      	adds	r4, #4
 8000936:	7021      	strb	r1, [r4, #0]
 8000938:	f107 03f9 	add.w	r3, r7, #249	; 0xf9
 800093c:	223f      	movs	r2, #63	; 0x3f
 800093e:	2100      	movs	r1, #0
 8000940:	4618      	mov	r0, r3
 8000942:	f002 fb94 	bl	800306e <memset>
	EnviarComandoAT(sim,cmd,print);
 8000946:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800094a:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 800094e:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8000952:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000956:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800095a:	6812      	ldr	r2, [r2, #0]
 800095c:	6818      	ldr	r0, [r3, #0]
 800095e:	f7ff ff05 	bl	800076c <EnviarComandoAT>
	WaitForAnswer(sim, 1); // Aca espero dos veces porque primero va el OK y despues el connect OK
 8000962:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000966:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800096a:	2101      	movs	r1, #1
 800096c:	6818      	ldr	r0, [r3, #0]
 800096e:	f7ff ff29 	bl	80007c4 <WaitForAnswer>

	// HTTP Request:
	char cmd2 [LEN_TXT] = "GET /get HTTP/1.1\r\nHost: httpbin.org\r\nAccept: */* \r\n\r\n";
 8000972:	4b2c      	ldr	r3, [pc, #176]	; (8000a24 <TestGPRS+0x120>)
 8000974:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000978:	461d      	mov	r5, r3
 800097a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800097c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800097e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000980:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000982:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000984:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000986:	e895 0003 	ldmia.w	r5, {r0, r1}
 800098a:	6020      	str	r0, [r4, #0]
 800098c:	3404      	adds	r4, #4
 800098e:	8021      	strh	r1, [r4, #0]
 8000990:	3402      	adds	r4, #2
 8000992:	0c0b      	lsrs	r3, r1, #16
 8000994:	7023      	strb	r3, [r4, #0]
 8000996:	f107 03a7 	add.w	r3, r7, #167	; 0xa7
 800099a:	222d      	movs	r2, #45	; 0x2d
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f002 fb65 	bl	800306e <memset>
	char cmd3 [LEN_TXT];
	sprintf(cmd3,"AT+CIPSEND=%d\r\n",strlen(cmd2));
 80009a4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fbcf 	bl	800014c <strlen>
 80009ae:	4602      	mov	r2, r0
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	491c      	ldr	r1, [pc, #112]	; (8000a28 <TestGPRS+0x124>)
 80009b6:	4618      	mov	r0, r3
 80009b8:	f002 fdba 	bl	8003530 <siprintf>
	EnviarComandoAT(sim,cmd3,print);
 80009bc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009c0:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 80009c4:	f107 010c 	add.w	r1, r7, #12
 80009c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009cc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009d0:	6812      	ldr	r2, [r2, #0]
 80009d2:	6818      	ldr	r0, [r3, #0]
 80009d4:	f7ff feca 	bl	800076c <EnviarComandoAT>

	EnviarComandoAT(sim,cmd2,print);
 80009d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009dc:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 80009e0:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80009e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009e8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009ec:	6812      	ldr	r2, [r2, #0]
 80009ee:	6818      	ldr	r0, [r3, #0]
 80009f0:	f7ff febc 	bl	800076c <EnviarComandoAT>

	// Esperamos la respuesta y despues cerramos
	WaitForAnswer(sim,1);
 80009f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009f8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009fc:	2101      	movs	r1, #1
 80009fe:	6818      	ldr	r0, [r3, #0]
 8000a00:	f7ff fee0 	bl	80007c4 <WaitForAnswer>
	WaitForAnswer(sim,1);
 8000a04:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a08:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	6818      	ldr	r0, [r3, #0]
 8000a10:	f7ff fed8 	bl	80007c4 <WaitForAnswer>

}
 8000a14:	bf00      	nop
 8000a16:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bdb0      	pop	{r4, r5, r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	08005358 	.word	0x08005358
 8000a24:	080053bc 	.word	0x080053bc
 8000a28:	08005348 	.word	0x08005348

08000a2c <SendTCPtoIP>:

// IMPORTANTE -> Esto anda hasta 450 bytes en msj sino se traba todo!

void SendTCPtoIP(SIM800* sim, char * msj, char* IP, int port,int print)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b0b6      	sub	sp, #216	; 0xd8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
 8000a38:	603b      	str	r3, [r7, #0]
	if(strlen(msj)<=450)
 8000a3a:	68b8      	ldr	r0, [r7, #8]
 8000a3c:	f7ff fb86 	bl	800014c <strlen>
 8000a40:	4603      	mov	r3, r0
 8000a42:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000a46:	d837      	bhi.n	8000ab8 <SendTCPtoIP+0x8c>
	{
		EnviarComandoAT(sim,"AT+CIFSR\r\n",print);	// Debería imprimir el IP
 8000a48:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8000a4c:	491e      	ldr	r1, [pc, #120]	; (8000ac8 <SendTCPtoIP+0x9c>)
 8000a4e:	68f8      	ldr	r0, [r7, #12]
 8000a50:	f7ff fe8c 	bl	800076c <EnviarComandoAT>

		char cmd [LEN_TXT];
		sprintf(cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",IP,port);
 8000a54:	f107 0010 	add.w	r0, r7, #16
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	491b      	ldr	r1, [pc, #108]	; (8000acc <SendTCPtoIP+0xa0>)
 8000a5e:	f002 fd67 	bl	8003530 <siprintf>
		EnviarComandoAT(sim,cmd,print);
 8000a62:	f107 0310 	add.w	r3, r7, #16
 8000a66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	68f8      	ldr	r0, [r7, #12]
 8000a6e:	f7ff fe7d 	bl	800076c <EnviarComandoAT>
		WaitForAnswer(sim, 1); // Aca espero dos veces porque primero va el OK y despues el connect OK
 8000a72:	2101      	movs	r1, #1
 8000a74:	68f8      	ldr	r0, [r7, #12]
 8000a76:	f7ff fea5 	bl	80007c4 <WaitForAnswer>

		char cmd2 [LEN_TXT];
		sprintf(cmd2,"AT+CIPSEND=%d\r\n",strlen(msj));
 8000a7a:	68b8      	ldr	r0, [r7, #8]
 8000a7c:	f7ff fb66 	bl	800014c <strlen>
 8000a80:	4602      	mov	r2, r0
 8000a82:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000a86:	4912      	ldr	r1, [pc, #72]	; (8000ad0 <SendTCPtoIP+0xa4>)
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f002 fd51 	bl	8003530 <siprintf>
		EnviarComandoAT(sim,cmd2,print);
 8000a8e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000a92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8000a96:	4619      	mov	r1, r3
 8000a98:	68f8      	ldr	r0, [r7, #12]
 8000a9a:	f7ff fe67 	bl	800076c <EnviarComandoAT>
		EnviarComandoAT(sim,msj,print);
 8000a9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8000aa2:	68b9      	ldr	r1, [r7, #8]
 8000aa4:	68f8      	ldr	r0, [r7, #12]
 8000aa6:	f7ff fe61 	bl	800076c <EnviarComandoAT>
		EnviarComandoAT(sim,"AT+CIPCLOSE\r\n",print);
 8000aaa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8000aae:	4909      	ldr	r1, [pc, #36]	; (8000ad4 <SendTCPtoIP+0xa8>)
 8000ab0:	68f8      	ldr	r0, [r7, #12]
 8000ab2:	f7ff fe5b 	bl	800076c <EnviarComandoAT>
	{
		printf("Msj demasiado largo para mandar de esta forma \r\n");
	}


}
 8000ab6:	e002      	b.n	8000abe <SendTCPtoIP+0x92>
		printf("Msj demasiado largo para mandar de esta forma \r\n");
 8000ab8:	4807      	ldr	r0, [pc, #28]	; (8000ad8 <SendTCPtoIP+0xac>)
 8000aba:	f002 fc43 	bl	8003344 <puts>
}
 8000abe:	bf00      	nop
 8000ac0:	37d8      	adds	r7, #216	; 0xd8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	08005334 	.word	0x08005334
 8000acc:	08005420 	.word	0x08005420
 8000ad0:	08005348 	.word	0x08005348
 8000ad4:	0800543c 	.word	0x0800543c
 8000ad8:	0800544c 	.word	0x0800544c

08000adc <ConsultarSignal>:
{
	WaitForAnswer(sim,1);
}

void ConsultarSignal(SIM800* sim)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	EnviarComandoAT(sim,"AT+CSQ\r\n",1);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	4904      	ldr	r1, [pc, #16]	; (8000af8 <ConsultarSignal+0x1c>)
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff fe3f 	bl	800076c <EnviarComandoAT>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	0800547c 	.word	0x0800547c

08000afc <ConsultarEstadoSIM>:

void ConsultarEstadoSIM(SIM800* sim)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	EnviarComandoAT(sim,"AT+CPIN?\r\n",1);
 8000b04:	2201      	movs	r2, #1
 8000b06:	4904      	ldr	r1, [pc, #16]	; (8000b18 <ConsultarEstadoSIM+0x1c>)
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff fe2f 	bl	800076c <EnviarComandoAT>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	08005488 	.word	0x08005488

08000b1c <ListarRedesDisponibles>:

void ListarRedesDisponibles(SIM800* sim)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	EnviarComandoAT(sim,"AT+COPS=?\r\n",1);
 8000b24:	2201      	movs	r2, #1
 8000b26:	4906      	ldr	r1, [pc, #24]	; (8000b40 <ListarRedesDisponibles+0x24>)
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff fe1f 	bl	800076c <EnviarComandoAT>
	WaitForAnswer(sim,1);
 8000b2e:	2101      	movs	r1, #1
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff fe47 	bl	80007c4 <WaitForAnswer>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	08005494 	.word	0x08005494

08000b44 <EnviarSMS>:

void EnviarSMS(SIM800 * sim, char * numero, char* mensaje, int print )
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b092      	sub	sp, #72	; 0x48
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
 8000b50:	603b      	str	r3, [r7, #0]
	char cmd [LEN_CMD];

	sprintf(cmd,"AT+CMGS=\"%s\"\r\n",numero);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	490b      	ldr	r1, [pc, #44]	; (8000b88 <EnviarSMS+0x44>)
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f002 fce8 	bl	8003530 <siprintf>

	EnviarComandoAT(sim,cmd,print);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	683a      	ldr	r2, [r7, #0]
 8000b66:	4619      	mov	r1, r3
 8000b68:	68f8      	ldr	r0, [r7, #12]
 8000b6a:	f7ff fdff 	bl	800076c <EnviarComandoAT>

	Enviar(sim,mensaje);
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	68f8      	ldr	r0, [r7, #12]
 8000b72:	f7ff fe10 	bl	8000796 <Enviar>
	Enviar(sim,"\r\n\032");
 8000b76:	4905      	ldr	r1, [pc, #20]	; (8000b8c <EnviarSMS+0x48>)
 8000b78:	68f8      	ldr	r0, [r7, #12]
 8000b7a:	f7ff fe0c 	bl	8000796 <Enviar>

}
 8000b7e:	bf00      	nop
 8000b80:	3748      	adds	r7, #72	; 0x48
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	080054a0 	.word	0x080054a0
 8000b8c:	080054b0 	.word	0x080054b0

08000b90 <LeerSMS_i>:
{
	EnviarComandoAT(sim,"AT+CMGDA=\"DEL ALL\"\r\n",print);
}

void LeerSMS_i(SIM800 *sim, int i, int print)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b092      	sub	sp, #72	; 0x48
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
	char msj [LEN_CMD];
	sprintf(msj,"AT+CMGR=%d\r\n",i);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	68ba      	ldr	r2, [r7, #8]
 8000ba2:	4907      	ldr	r1, [pc, #28]	; (8000bc0 <LeerSMS_i+0x30>)
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f002 fcc3 	bl	8003530 <siprintf>
	EnviarComandoAT(sim,msj,print);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	68f8      	ldr	r0, [r7, #12]
 8000bb4:	f7ff fdda 	bl	800076c <EnviarComandoAT>
}
 8000bb8:	bf00      	nop
 8000bba:	3748      	adds	r7, #72	; 0x48
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	080054dc 	.word	0x080054dc

08000bc4 <ListenSMS>:

int ListenSMS(SIM800 * sim)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	if ( WaitForAnswer(sim, 0) == 1)
 8000bcc:	2100      	movs	r1, #0
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff fdf8 	bl	80007c4 <WaitForAnswer>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d10f      	bne.n	8000bfa <ListenSMS+0x36>
	{
		int indice = ExtraerIndiceCMTI(sim->response);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	3304      	adds	r3, #4
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 f830 	bl	8000c44 <ExtraerIndiceCMTI>
 8000be4:	60f8      	str	r0, [r7, #12]
		ExtraerTextoDeSMS(sim,indice,sim->txt_last_sms);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 8000bec:	461a      	mov	r2, r3
 8000bee:	68f9      	ldr	r1, [r7, #12]
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f000 f842 	bl	8000c7a <ExtraerTextoDeSMS>
		return 1;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e000      	b.n	8000bfc <ListenSMS+0x38>
	}
	return 0;
 8000bfa:	2300      	movs	r3, #0
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <Imprimir_respuesta>:

void Imprimir_respuesta(SIM800 *sim)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	printf("Respuesta: %s\r\n",sim->response);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3304      	adds	r3, #4
 8000c10:	4619      	mov	r1, r3
 8000c12:	4803      	ldr	r0, [pc, #12]	; (8000c20 <Imprimir_respuesta+0x1c>)
 8000c14:	f002 fb10 	bl	8003238 <iprintf>
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	080054ec 	.word	0x080054ec

08000c24 <Borrar_respuesta>:

void Borrar_respuesta(SIM800 *sim)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	memset(sim->response, 0, LENGTH);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3304      	adds	r3, #4
 8000c30:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f002 fa19 	bl	800306e <memset>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <ExtraerIndiceCMTI>:

int ExtraerIndiceCMTI(char * codigo)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	// Forma del codigo -> +CMTI: "SM",5

	int i = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
	while(*(codigo+i) !=',' ){i++;}
 8000c50:	e002      	b.n	8000c58 <ExtraerIndiceCMTI+0x14>
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	3301      	adds	r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b2c      	cmp	r3, #44	; 0x2c
 8000c62:	d1f6      	bne.n	8000c52 <ExtraerIndiceCMTI+0xe>

	return *(codigo+i+1)-48;	// Para pasarlo a entero
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	3301      	adds	r3, #1
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	3b30      	subs	r3, #48	; 0x30
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr

08000c7a <ExtraerTextoDeSMS>:

void ExtraerTextoDeSMS(SIM800 *sim, int indice, char * texto)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b088      	sub	sp, #32
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	60f8      	str	r0, [r7, #12]
 8000c82:	60b9      	str	r1, [r7, #8]
 8000c84:	607a      	str	r2, [r7, #4]
	LeerSMS_i(sim,indice,0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	68b9      	ldr	r1, [r7, #8]
 8000c8a:	68f8      	ldr	r0, [r7, #12]
 8000c8c:	f7ff ff80 	bl	8000b90 <LeerSMS_i>
	// Extrae el texto del SMS guardado en la posicion i
	// Formato del codigo -> 3,"READ/UNREAD","NUM","","FECHA" MSJ
	// Voy a contar comillas, serían 8

	int comillas = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
	int tam_header = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61bb      	str	r3, [r7, #24]
	while(comillas < 8)
 8000c98:	e00c      	b.n	8000cb4 <ExtraerTextoDeSMS+0x3a>
	{
		if(*(sim->response + tam_header) == '"') { comillas++; }
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	1d1a      	adds	r2, r3, #4
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b22      	cmp	r3, #34	; 0x22
 8000ca6:	d102      	bne.n	8000cae <ExtraerTextoDeSMS+0x34>
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	3301      	adds	r3, #1
 8000cac:	61fb      	str	r3, [r7, #28]
		tam_header++;
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	61bb      	str	r3, [r7, #24]
	while(comillas < 8)
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	2b07      	cmp	r3, #7
 8000cb8:	ddef      	ble.n	8000c9a <ExtraerTextoDeSMS+0x20>
	}

	int j;

	for (j = 0; j<strlen(sim->response)-tam_header;j++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	e00d      	b.n	8000cdc <ExtraerTextoDeSMS+0x62>
	{
		*(texto+j) = *(sim->response + tam_header + j);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	1d1a      	adds	r2, r3, #4
 8000cc4:	69b9      	ldr	r1, [r7, #24]
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	440b      	add	r3, r1
 8000cca:	441a      	add	r2, r3
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	440b      	add	r3, r1
 8000cd2:	7812      	ldrb	r2, [r2, #0]
 8000cd4:	701a      	strb	r2, [r3, #0]
	for (j = 0; j<strlen(sim->response)-tam_header;j++)
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	3304      	adds	r3, #4
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fa33 	bl	800014c <strlen>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	1ad2      	subs	r2, r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d8e6      	bhi.n	8000cc0 <ExtraerTextoDeSMS+0x46>
	}
	*(texto+j+1)='\0';
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	701a      	strb	r2, [r3, #0]
}
 8000cfe:	bf00      	nop
 8000d00:	3720      	adds	r7, #32
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <SerialDebug>:

void SerialDebug( UART_HandleTypeDef * huart1 , UART_HandleTypeDef * huart2 , char caracter_finalizacion )
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b086      	sub	sp, #24
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	60f8      	str	r0, [r7, #12]
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	4613      	mov	r3, r2
 8000d12:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_byte = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	75fb      	strb	r3, [r7, #23]

	while(rx_byte != 26)
 8000d18:	e024      	b.n	8000d64 <SerialDebug+0x5e>
	{


		while (HAL_UART_Receive(huart2, &rx_byte, 1, 0) == HAL_OK)
		{
		    HAL_UART_Transmit(huart1, &rx_byte, 1, 0xFFFF); // Forward received byte to UART1
 8000d1a:	f107 0117 	add.w	r1, r7, #23
 8000d1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d22:	2201      	movs	r2, #1
 8000d24:	68f8      	ldr	r0, [r7, #12]
 8000d26:	f001 fa54 	bl	80021d2 <HAL_UART_Transmit>
		while (HAL_UART_Receive(huart2, &rx_byte, 1, 0) == HAL_OK)
 8000d2a:	f107 0117 	add.w	r1, r7, #23
 8000d2e:	2300      	movs	r3, #0
 8000d30:	2201      	movs	r2, #1
 8000d32:	68b8      	ldr	r0, [r7, #8]
 8000d34:	f001 fadf 	bl	80022f6 <HAL_UART_Receive>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d0ed      	beq.n	8000d1a <SerialDebug+0x14>
		}
		while (HAL_UART_Receive(huart1, &rx_byte, 1, 0) == HAL_OK)
 8000d3e:	e007      	b.n	8000d50 <SerialDebug+0x4a>
		{
		    HAL_UART_Transmit(huart2, &rx_byte, 1, 0xFFFF); // Forward received byte to UART2
 8000d40:	f107 0117 	add.w	r1, r7, #23
 8000d44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d48:	2201      	movs	r2, #1
 8000d4a:	68b8      	ldr	r0, [r7, #8]
 8000d4c:	f001 fa41 	bl	80021d2 <HAL_UART_Transmit>
		while (HAL_UART_Receive(huart1, &rx_byte, 1, 0) == HAL_OK)
 8000d50:	f107 0117 	add.w	r1, r7, #23
 8000d54:	2300      	movs	r3, #0
 8000d56:	2201      	movs	r2, #1
 8000d58:	68f8      	ldr	r0, [r7, #12]
 8000d5a:	f001 facc 	bl	80022f6 <HAL_UART_Receive>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d0ed      	beq.n	8000d40 <SerialDebug+0x3a>
	while(rx_byte != 26)
 8000d64:	7dfb      	ldrb	r3, [r7, #23]
 8000d66:	2b1a      	cmp	r3, #26
 8000d68:	d1df      	bne.n	8000d2a <SerialDebug+0x24>
		}


	}
}
 8000d6a:	bf00      	nop
 8000d6c:	bf00      	nop
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <HAL_MspInit+0x5c>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	4a14      	ldr	r2, [pc, #80]	; (8000dd0 <HAL_MspInit+0x5c>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6193      	str	r3, [r2, #24]
 8000d86:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_MspInit+0x5c>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d92:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <HAL_MspInit+0x5c>)
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <HAL_MspInit+0x5c>)
 8000d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	61d3      	str	r3, [r2, #28]
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <HAL_MspInit+0x5c>)
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <HAL_MspInit+0x60>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <HAL_MspInit+0x60>)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40010000 	.word	0x40010000

08000dd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0318 	add.w	r3, r7, #24
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a3f      	ldr	r2, [pc, #252]	; (8000ef0 <HAL_UART_MspInit+0x118>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d13a      	bne.n	8000e6e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000df8:	4b3e      	ldr	r3, [pc, #248]	; (8000ef4 <HAL_UART_MspInit+0x11c>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	4a3d      	ldr	r2, [pc, #244]	; (8000ef4 <HAL_UART_MspInit+0x11c>)
 8000dfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e02:	6193      	str	r3, [r2, #24]
 8000e04:	4b3b      	ldr	r3, [pc, #236]	; (8000ef4 <HAL_UART_MspInit+0x11c>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e10:	4b38      	ldr	r3, [pc, #224]	; (8000ef4 <HAL_UART_MspInit+0x11c>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	4a37      	ldr	r2, [pc, #220]	; (8000ef4 <HAL_UART_MspInit+0x11c>)
 8000e16:	f043 0304 	orr.w	r3, r3, #4
 8000e1a:	6193      	str	r3, [r2, #24]
 8000e1c:	4b35      	ldr	r3, [pc, #212]	; (8000ef4 <HAL_UART_MspInit+0x11c>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	f003 0304 	and.w	r3, r3, #4
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e32:	2303      	movs	r3, #3
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f107 0318 	add.w	r3, r7, #24
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	482e      	ldr	r0, [pc, #184]	; (8000ef8 <HAL_UART_MspInit+0x120>)
 8000e3e:	f000 fbab 	bl	8001598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	f107 0318 	add.w	r3, r7, #24
 8000e54:	4619      	mov	r1, r3
 8000e56:	4828      	ldr	r0, [pc, #160]	; (8000ef8 <HAL_UART_MspInit+0x120>)
 8000e58:	f000 fb9e 	bl	8001598 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2100      	movs	r1, #0
 8000e60:	2025      	movs	r0, #37	; 0x25
 8000e62:	f000 fab2 	bl	80013ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e66:	2025      	movs	r0, #37	; 0x25
 8000e68:	f000 facb 	bl	8001402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e6c:	e03c      	b.n	8000ee8 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a22      	ldr	r2, [pc, #136]	; (8000efc <HAL_UART_MspInit+0x124>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d137      	bne.n	8000ee8 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e78:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <HAL_UART_MspInit+0x11c>)
 8000e7a:	69db      	ldr	r3, [r3, #28]
 8000e7c:	4a1d      	ldr	r2, [pc, #116]	; (8000ef4 <HAL_UART_MspInit+0x11c>)
 8000e7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e82:	61d3      	str	r3, [r2, #28]
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <HAL_UART_MspInit+0x11c>)
 8000e86:	69db      	ldr	r3, [r3, #28]
 8000e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e90:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <HAL_UART_MspInit+0x11c>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	4a17      	ldr	r2, [pc, #92]	; (8000ef4 <HAL_UART_MspInit+0x11c>)
 8000e96:	f043 0304 	orr.w	r3, r3, #4
 8000e9a:	6193      	str	r3, [r2, #24]
 8000e9c:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <HAL_UART_MspInit+0x11c>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	f003 0304 	and.w	r3, r3, #4
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ea8:	2304      	movs	r3, #4
 8000eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb4:	f107 0318 	add.w	r3, r7, #24
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480f      	ldr	r0, [pc, #60]	; (8000ef8 <HAL_UART_MspInit+0x120>)
 8000ebc:	f000 fb6c 	bl	8001598 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ec0:	2308      	movs	r3, #8
 8000ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ecc:	f107 0318 	add.w	r3, r7, #24
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <HAL_UART_MspInit+0x120>)
 8000ed4:	f000 fb60 	bl	8001598 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2100      	movs	r1, #0
 8000edc:	2026      	movs	r0, #38	; 0x26
 8000ede:	f000 fa74 	bl	80013ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ee2:	2026      	movs	r0, #38	; 0x26
 8000ee4:	f000 fa8d 	bl	8001402 <HAL_NVIC_EnableIRQ>
}
 8000ee8:	bf00      	nop
 8000eea:	3728      	adds	r7, #40	; 0x28
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40013800 	.word	0x40013800
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40010800 	.word	0x40010800
 8000efc:	40004400 	.word	0x40004400

08000f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <NMI_Handler+0x4>

08000f06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <HardFault_Handler+0x4>

08000f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <MemManage_Handler+0x4>

08000f12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <BusFault_Handler+0x4>

08000f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <UsageFault_Handler+0x4>

08000f1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr

08000f2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr

08000f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr

08000f42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f46:	f000 f929 	bl	800119c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <USART1_IRQHandler+0x10>)
 8000f56:	f001 fa71 	bl	800243c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	2000008c 	.word	0x2000008c

08000f64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <USART2_IRQHandler+0x10>)
 8000f6a:	f001 fa67 	bl	800243c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200000d0 	.word	0x200000d0

08000f78 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	e00a      	b.n	8000fa0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f8a:	f7ff f8f9 	bl	8000180 <__io_getchar>
 8000f8e:	4601      	mov	r1, r0
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	1c5a      	adds	r2, r3, #1
 8000f94:	60ba      	str	r2, [r7, #8]
 8000f96:	b2ca      	uxtb	r2, r1
 8000f98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	697a      	ldr	r2, [r7, #20]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	dbf0      	blt.n	8000f8a <_read+0x12>
  }

  return len;
 8000fa8:	687b      	ldr	r3, [r7, #4]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	60f8      	str	r0, [r7, #12]
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	e009      	b.n	8000fd8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	1c5a      	adds	r2, r3, #1
 8000fc8:	60ba      	str	r2, [r7, #8]
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff f8c5 	bl	800015c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697a      	ldr	r2, [r7, #20]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	dbf1      	blt.n	8000fc4 <_write+0x12>
  }
  return len;
 8000fe0:	687b      	ldr	r3, [r7, #4]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <_close>:

int _close(int file)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr

08001000 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001010:	605a      	str	r2, [r3, #4]
  return 0;
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr

0800101e <_isatty>:

int _isatty(int file)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr

08001032 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001032:	b480      	push	{r7}
 8001034:	b085      	sub	sp, #20
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
	...

0800104c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001054:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <_sbrk+0x5c>)
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <_sbrk+0x60>)
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001060:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <_sbrk+0x64>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d102      	bne.n	800106e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <_sbrk+0x64>)
 800106a:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <_sbrk+0x68>)
 800106c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	429a      	cmp	r2, r3
 800107a:	d207      	bcs.n	800108c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800107c:	f001 fdd6 	bl	8002c2c <__errno>
 8001080:	4603      	mov	r3, r0
 8001082:	220c      	movs	r2, #12
 8001084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
 800108a:	e009      	b.n	80010a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <_sbrk+0x64>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <_sbrk+0x64>)
 800109c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800109e:	68fb      	ldr	r3, [r7, #12]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20005000 	.word	0x20005000
 80010ac:	00000400 	.word	0x00000400
 80010b0:	20000114 	.word	0x20000114
 80010b4:	20000130 	.word	0x20000130

080010b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c4:	480c      	ldr	r0, [pc, #48]	; (80010f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010c6:	490d      	ldr	r1, [pc, #52]	; (80010fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010c8:	4a0d      	ldr	r2, [pc, #52]	; (8001100 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010cc:	e002      	b.n	80010d4 <LoopCopyDataInit>

080010ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d2:	3304      	adds	r3, #4

080010d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d8:	d3f9      	bcc.n	80010ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010dc:	4c0a      	ldr	r4, [pc, #40]	; (8001108 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e0:	e001      	b.n	80010e6 <LoopFillZerobss>

080010e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e4:	3204      	adds	r2, #4

080010e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e8:	d3fb      	bcc.n	80010e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010ea:	f7ff ffe5 	bl	80010b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ee:	f001 ff97 	bl	8003020 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010f2:	f7ff f86b 	bl	80001cc <main>
  bx lr
 80010f6:	4770      	bx	lr
  ldr r0, =_sdata
 80010f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010fc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001100:	080056ec 	.word	0x080056ec
  ldr r2, =_sbss
 8001104:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001108:	2000012c 	.word	0x2000012c

0800110c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800110c:	e7fe      	b.n	800110c <ADC1_2_IRQHandler>
	...

08001110 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <HAL_Init+0x28>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a07      	ldr	r2, [pc, #28]	; (8001138 <HAL_Init+0x28>)
 800111a:	f043 0310 	orr.w	r3, r3, #16
 800111e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001120:	2003      	movs	r0, #3
 8001122:	f000 f947 	bl	80013b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001126:	200f      	movs	r0, #15
 8001128:	f000 f808 	bl	800113c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800112c:	f7ff fe22 	bl	8000d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40022000 	.word	0x40022000

0800113c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_InitTick+0x54>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_InitTick+0x58>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	fbb3 f3f1 	udiv	r3, r3, r1
 8001156:	fbb2 f3f3 	udiv	r3, r2, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f95f 	bl	800141e <HAL_SYSTICK_Config>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e00e      	b.n	8001188 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b0f      	cmp	r3, #15
 800116e:	d80a      	bhi.n	8001186 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001170:	2200      	movs	r2, #0
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	f04f 30ff 	mov.w	r0, #4294967295
 8001178:	f000 f927 	bl	80013ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800117c:	4a06      	ldr	r2, [pc, #24]	; (8001198 <HAL_InitTick+0x5c>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001182:	2300      	movs	r3, #0
 8001184:	e000      	b.n	8001188 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000000 	.word	0x20000000
 8001194:	20000008 	.word	0x20000008
 8001198:	20000004 	.word	0x20000004

0800119c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <HAL_IncTick+0x1c>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <HAL_IncTick+0x20>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4413      	add	r3, r2
 80011ac:	4a03      	ldr	r2, [pc, #12]	; (80011bc <HAL_IncTick+0x20>)
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	20000008 	.word	0x20000008
 80011bc:	20000118 	.word	0x20000118

080011c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return uwTick;
 80011c4:	4b02      	ldr	r3, [pc, #8]	; (80011d0 <HAL_GetTick+0x10>)
 80011c6:	681b      	ldr	r3, [r3, #0]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	20000118 	.word	0x20000118

080011d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011dc:	f7ff fff0 	bl	80011c0 <HAL_GetTick>
 80011e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ec:	d005      	beq.n	80011fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <HAL_Delay+0x44>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4413      	add	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011fa:	bf00      	nop
 80011fc:	f7ff ffe0 	bl	80011c0 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	429a      	cmp	r2, r3
 800120a:	d8f7      	bhi.n	80011fc <HAL_Delay+0x28>
  {
  }
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000008 	.word	0x20000008

0800121c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001238:	4013      	ands	r3, r2
 800123a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800124c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124e:	4a04      	ldr	r2, [pc, #16]	; (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	60d3      	str	r3, [r2, #12]
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <__NVIC_GetPriorityGrouping+0x18>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	f003 0307 	and.w	r3, r3, #7
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	2b00      	cmp	r3, #0
 8001290:	db0b      	blt.n	80012aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	f003 021f 	and.w	r2, r3, #31
 8001298:	4906      	ldr	r1, [pc, #24]	; (80012b4 <__NVIC_EnableIRQ+0x34>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	095b      	lsrs	r3, r3, #5
 80012a0:	2001      	movs	r0, #1
 80012a2:	fa00 f202 	lsl.w	r2, r0, r2
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	e000e100 	.word	0xe000e100

080012b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	6039      	str	r1, [r7, #0]
 80012c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	db0a      	blt.n	80012e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	490c      	ldr	r1, [pc, #48]	; (8001304 <__NVIC_SetPriority+0x4c>)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	0112      	lsls	r2, r2, #4
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	440b      	add	r3, r1
 80012dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e0:	e00a      	b.n	80012f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4908      	ldr	r1, [pc, #32]	; (8001308 <__NVIC_SetPriority+0x50>)
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	3b04      	subs	r3, #4
 80012f0:	0112      	lsls	r2, r2, #4
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	440b      	add	r3, r1
 80012f6:	761a      	strb	r2, [r3, #24]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000e100 	.word	0xe000e100
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	; 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f1c3 0307 	rsb	r3, r3, #7
 8001326:	2b04      	cmp	r3, #4
 8001328:	bf28      	it	cs
 800132a:	2304      	movcs	r3, #4
 800132c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3304      	adds	r3, #4
 8001332:	2b06      	cmp	r3, #6
 8001334:	d902      	bls.n	800133c <NVIC_EncodePriority+0x30>
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3b03      	subs	r3, #3
 800133a:	e000      	b.n	800133e <NVIC_EncodePriority+0x32>
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	f04f 32ff 	mov.w	r2, #4294967295
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43da      	mvns	r2, r3
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	401a      	ands	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001354:	f04f 31ff 	mov.w	r1, #4294967295
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	43d9      	mvns	r1, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	4313      	orrs	r3, r2
         );
}
 8001366:	4618      	mov	r0, r3
 8001368:	3724      	adds	r7, #36	; 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001380:	d301      	bcc.n	8001386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001382:	2301      	movs	r3, #1
 8001384:	e00f      	b.n	80013a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001386:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <SysTick_Config+0x40>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3b01      	subs	r3, #1
 800138c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138e:	210f      	movs	r1, #15
 8001390:	f04f 30ff 	mov.w	r0, #4294967295
 8001394:	f7ff ff90 	bl	80012b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <SysTick_Config+0x40>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <SysTick_Config+0x40>)
 80013a0:	2207      	movs	r2, #7
 80013a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	e000e010 	.word	0xe000e010

080013b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ff2d 	bl	800121c <__NVIC_SetPriorityGrouping>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b086      	sub	sp, #24
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
 80013d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013dc:	f7ff ff42 	bl	8001264 <__NVIC_GetPriorityGrouping>
 80013e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	68b9      	ldr	r1, [r7, #8]
 80013e6:	6978      	ldr	r0, [r7, #20]
 80013e8:	f7ff ff90 	bl	800130c <NVIC_EncodePriority>
 80013ec:	4602      	mov	r2, r0
 80013ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f2:	4611      	mov	r1, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff5f 	bl	80012b8 <__NVIC_SetPriority>
}
 80013fa:	bf00      	nop
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800140c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff35 	bl	8001280 <__NVIC_EnableIRQ>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff ffa2 	bl	8001370 <SysTick_Config>
 800142c:	4603      	mov	r3, r0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001436:	b480      	push	{r7}
 8001438:	b085      	sub	sp, #20
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001448:	2b02      	cmp	r3, #2
 800144a:	d008      	beq.n	800145e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2204      	movs	r2, #4
 8001450:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e020      	b.n	80014a0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 020e 	bic.w	r2, r2, #14
 800146c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f022 0201 	bic.w	r2, r2, #1
 800147c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001486:	2101      	movs	r1, #1
 8001488:	fa01 f202 	lsl.w	r2, r1, r2
 800148c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2201      	movs	r2, #1
 8001492:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800149e:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
	...

080014ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d005      	beq.n	80014ce <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2204      	movs	r2, #4
 80014c6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	73fb      	strb	r3, [r7, #15]
 80014cc:	e051      	b.n	8001572 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 020e 	bic.w	r2, r2, #14
 80014dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 0201 	bic.w	r2, r2, #1
 80014ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a22      	ldr	r2, [pc, #136]	; (800157c <HAL_DMA_Abort_IT+0xd0>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d029      	beq.n	800154c <HAL_DMA_Abort_IT+0xa0>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a20      	ldr	r2, [pc, #128]	; (8001580 <HAL_DMA_Abort_IT+0xd4>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d022      	beq.n	8001548 <HAL_DMA_Abort_IT+0x9c>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a1f      	ldr	r2, [pc, #124]	; (8001584 <HAL_DMA_Abort_IT+0xd8>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d01a      	beq.n	8001542 <HAL_DMA_Abort_IT+0x96>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a1d      	ldr	r2, [pc, #116]	; (8001588 <HAL_DMA_Abort_IT+0xdc>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d012      	beq.n	800153c <HAL_DMA_Abort_IT+0x90>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a1c      	ldr	r2, [pc, #112]	; (800158c <HAL_DMA_Abort_IT+0xe0>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d00a      	beq.n	8001536 <HAL_DMA_Abort_IT+0x8a>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a1a      	ldr	r2, [pc, #104]	; (8001590 <HAL_DMA_Abort_IT+0xe4>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d102      	bne.n	8001530 <HAL_DMA_Abort_IT+0x84>
 800152a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800152e:	e00e      	b.n	800154e <HAL_DMA_Abort_IT+0xa2>
 8001530:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001534:	e00b      	b.n	800154e <HAL_DMA_Abort_IT+0xa2>
 8001536:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800153a:	e008      	b.n	800154e <HAL_DMA_Abort_IT+0xa2>
 800153c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001540:	e005      	b.n	800154e <HAL_DMA_Abort_IT+0xa2>
 8001542:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001546:	e002      	b.n	800154e <HAL_DMA_Abort_IT+0xa2>
 8001548:	2310      	movs	r3, #16
 800154a:	e000      	b.n	800154e <HAL_DMA_Abort_IT+0xa2>
 800154c:	2301      	movs	r3, #1
 800154e:	4a11      	ldr	r2, [pc, #68]	; (8001594 <HAL_DMA_Abort_IT+0xe8>)
 8001550:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	4798      	blx	r3
    } 
  }
  return status;
 8001572:	7bfb      	ldrb	r3, [r7, #15]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40020008 	.word	0x40020008
 8001580:	4002001c 	.word	0x4002001c
 8001584:	40020030 	.word	0x40020030
 8001588:	40020044 	.word	0x40020044
 800158c:	40020058 	.word	0x40020058
 8001590:	4002006c 	.word	0x4002006c
 8001594:	40020000 	.word	0x40020000

08001598 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001598:	b480      	push	{r7}
 800159a:	b08b      	sub	sp, #44	; 0x2c
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015a2:	2300      	movs	r3, #0
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015a6:	2300      	movs	r3, #0
 80015a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015aa:	e169      	b.n	8001880 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015ac:	2201      	movs	r2, #1
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	f040 8158 	bne.w	800187a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	4a9a      	ldr	r2, [pc, #616]	; (8001838 <HAL_GPIO_Init+0x2a0>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d05e      	beq.n	8001692 <HAL_GPIO_Init+0xfa>
 80015d4:	4a98      	ldr	r2, [pc, #608]	; (8001838 <HAL_GPIO_Init+0x2a0>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d875      	bhi.n	80016c6 <HAL_GPIO_Init+0x12e>
 80015da:	4a98      	ldr	r2, [pc, #608]	; (800183c <HAL_GPIO_Init+0x2a4>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d058      	beq.n	8001692 <HAL_GPIO_Init+0xfa>
 80015e0:	4a96      	ldr	r2, [pc, #600]	; (800183c <HAL_GPIO_Init+0x2a4>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d86f      	bhi.n	80016c6 <HAL_GPIO_Init+0x12e>
 80015e6:	4a96      	ldr	r2, [pc, #600]	; (8001840 <HAL_GPIO_Init+0x2a8>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d052      	beq.n	8001692 <HAL_GPIO_Init+0xfa>
 80015ec:	4a94      	ldr	r2, [pc, #592]	; (8001840 <HAL_GPIO_Init+0x2a8>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d869      	bhi.n	80016c6 <HAL_GPIO_Init+0x12e>
 80015f2:	4a94      	ldr	r2, [pc, #592]	; (8001844 <HAL_GPIO_Init+0x2ac>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d04c      	beq.n	8001692 <HAL_GPIO_Init+0xfa>
 80015f8:	4a92      	ldr	r2, [pc, #584]	; (8001844 <HAL_GPIO_Init+0x2ac>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d863      	bhi.n	80016c6 <HAL_GPIO_Init+0x12e>
 80015fe:	4a92      	ldr	r2, [pc, #584]	; (8001848 <HAL_GPIO_Init+0x2b0>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d046      	beq.n	8001692 <HAL_GPIO_Init+0xfa>
 8001604:	4a90      	ldr	r2, [pc, #576]	; (8001848 <HAL_GPIO_Init+0x2b0>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d85d      	bhi.n	80016c6 <HAL_GPIO_Init+0x12e>
 800160a:	2b12      	cmp	r3, #18
 800160c:	d82a      	bhi.n	8001664 <HAL_GPIO_Init+0xcc>
 800160e:	2b12      	cmp	r3, #18
 8001610:	d859      	bhi.n	80016c6 <HAL_GPIO_Init+0x12e>
 8001612:	a201      	add	r2, pc, #4	; (adr r2, 8001618 <HAL_GPIO_Init+0x80>)
 8001614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001618:	08001693 	.word	0x08001693
 800161c:	0800166d 	.word	0x0800166d
 8001620:	0800167f 	.word	0x0800167f
 8001624:	080016c1 	.word	0x080016c1
 8001628:	080016c7 	.word	0x080016c7
 800162c:	080016c7 	.word	0x080016c7
 8001630:	080016c7 	.word	0x080016c7
 8001634:	080016c7 	.word	0x080016c7
 8001638:	080016c7 	.word	0x080016c7
 800163c:	080016c7 	.word	0x080016c7
 8001640:	080016c7 	.word	0x080016c7
 8001644:	080016c7 	.word	0x080016c7
 8001648:	080016c7 	.word	0x080016c7
 800164c:	080016c7 	.word	0x080016c7
 8001650:	080016c7 	.word	0x080016c7
 8001654:	080016c7 	.word	0x080016c7
 8001658:	080016c7 	.word	0x080016c7
 800165c:	08001675 	.word	0x08001675
 8001660:	08001689 	.word	0x08001689
 8001664:	4a79      	ldr	r2, [pc, #484]	; (800184c <HAL_GPIO_Init+0x2b4>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d013      	beq.n	8001692 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800166a:	e02c      	b.n	80016c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	623b      	str	r3, [r7, #32]
          break;
 8001672:	e029      	b.n	80016c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	3304      	adds	r3, #4
 800167a:	623b      	str	r3, [r7, #32]
          break;
 800167c:	e024      	b.n	80016c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	3308      	adds	r3, #8
 8001684:	623b      	str	r3, [r7, #32]
          break;
 8001686:	e01f      	b.n	80016c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	330c      	adds	r3, #12
 800168e:	623b      	str	r3, [r7, #32]
          break;
 8001690:	e01a      	b.n	80016c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d102      	bne.n	80016a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800169a:	2304      	movs	r3, #4
 800169c:	623b      	str	r3, [r7, #32]
          break;
 800169e:	e013      	b.n	80016c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d105      	bne.n	80016b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016a8:	2308      	movs	r3, #8
 80016aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69fa      	ldr	r2, [r7, #28]
 80016b0:	611a      	str	r2, [r3, #16]
          break;
 80016b2:	e009      	b.n	80016c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016b4:	2308      	movs	r3, #8
 80016b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69fa      	ldr	r2, [r7, #28]
 80016bc:	615a      	str	r2, [r3, #20]
          break;
 80016be:	e003      	b.n	80016c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016c0:	2300      	movs	r3, #0
 80016c2:	623b      	str	r3, [r7, #32]
          break;
 80016c4:	e000      	b.n	80016c8 <HAL_GPIO_Init+0x130>
          break;
 80016c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	2bff      	cmp	r3, #255	; 0xff
 80016cc:	d801      	bhi.n	80016d2 <HAL_GPIO_Init+0x13a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	e001      	b.n	80016d6 <HAL_GPIO_Init+0x13e>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3304      	adds	r3, #4
 80016d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	2bff      	cmp	r3, #255	; 0xff
 80016dc:	d802      	bhi.n	80016e4 <HAL_GPIO_Init+0x14c>
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	e002      	b.n	80016ea <HAL_GPIO_Init+0x152>
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	3b08      	subs	r3, #8
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	210f      	movs	r1, #15
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	fa01 f303 	lsl.w	r3, r1, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	401a      	ands	r2, r3
 80016fc:	6a39      	ldr	r1, [r7, #32]
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	fa01 f303 	lsl.w	r3, r1, r3
 8001704:	431a      	orrs	r2, r3
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 80b1 	beq.w	800187a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001718:	4b4d      	ldr	r3, [pc, #308]	; (8001850 <HAL_GPIO_Init+0x2b8>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	4a4c      	ldr	r2, [pc, #304]	; (8001850 <HAL_GPIO_Init+0x2b8>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6193      	str	r3, [r2, #24]
 8001724:	4b4a      	ldr	r3, [pc, #296]	; (8001850 <HAL_GPIO_Init+0x2b8>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001730:	4a48      	ldr	r2, [pc, #288]	; (8001854 <HAL_GPIO_Init+0x2bc>)
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	089b      	lsrs	r3, r3, #2
 8001736:	3302      	adds	r3, #2
 8001738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	220f      	movs	r2, #15
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	4013      	ands	r3, r2
 8001752:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a40      	ldr	r2, [pc, #256]	; (8001858 <HAL_GPIO_Init+0x2c0>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d013      	beq.n	8001784 <HAL_GPIO_Init+0x1ec>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a3f      	ldr	r2, [pc, #252]	; (800185c <HAL_GPIO_Init+0x2c4>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d00d      	beq.n	8001780 <HAL_GPIO_Init+0x1e8>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a3e      	ldr	r2, [pc, #248]	; (8001860 <HAL_GPIO_Init+0x2c8>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d007      	beq.n	800177c <HAL_GPIO_Init+0x1e4>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a3d      	ldr	r2, [pc, #244]	; (8001864 <HAL_GPIO_Init+0x2cc>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d101      	bne.n	8001778 <HAL_GPIO_Init+0x1e0>
 8001774:	2303      	movs	r3, #3
 8001776:	e006      	b.n	8001786 <HAL_GPIO_Init+0x1ee>
 8001778:	2304      	movs	r3, #4
 800177a:	e004      	b.n	8001786 <HAL_GPIO_Init+0x1ee>
 800177c:	2302      	movs	r3, #2
 800177e:	e002      	b.n	8001786 <HAL_GPIO_Init+0x1ee>
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <HAL_GPIO_Init+0x1ee>
 8001784:	2300      	movs	r3, #0
 8001786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001788:	f002 0203 	and.w	r2, r2, #3
 800178c:	0092      	lsls	r2, r2, #2
 800178e:	4093      	lsls	r3, r2
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	4313      	orrs	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001796:	492f      	ldr	r1, [pc, #188]	; (8001854 <HAL_GPIO_Init+0x2bc>)
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	089b      	lsrs	r3, r3, #2
 800179c:	3302      	adds	r3, #2
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d006      	beq.n	80017be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017b0:	4b2d      	ldr	r3, [pc, #180]	; (8001868 <HAL_GPIO_Init+0x2d0>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	492c      	ldr	r1, [pc, #176]	; (8001868 <HAL_GPIO_Init+0x2d0>)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	600b      	str	r3, [r1, #0]
 80017bc:	e006      	b.n	80017cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017be:	4b2a      	ldr	r3, [pc, #168]	; (8001868 <HAL_GPIO_Init+0x2d0>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	4928      	ldr	r1, [pc, #160]	; (8001868 <HAL_GPIO_Init+0x2d0>)
 80017c8:	4013      	ands	r3, r2
 80017ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d006      	beq.n	80017e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017d8:	4b23      	ldr	r3, [pc, #140]	; (8001868 <HAL_GPIO_Init+0x2d0>)
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	4922      	ldr	r1, [pc, #136]	; (8001868 <HAL_GPIO_Init+0x2d0>)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	604b      	str	r3, [r1, #4]
 80017e4:	e006      	b.n	80017f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017e6:	4b20      	ldr	r3, [pc, #128]	; (8001868 <HAL_GPIO_Init+0x2d0>)
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	491e      	ldr	r1, [pc, #120]	; (8001868 <HAL_GPIO_Init+0x2d0>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d006      	beq.n	800180e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001800:	4b19      	ldr	r3, [pc, #100]	; (8001868 <HAL_GPIO_Init+0x2d0>)
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	4918      	ldr	r1, [pc, #96]	; (8001868 <HAL_GPIO_Init+0x2d0>)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	4313      	orrs	r3, r2
 800180a:	608b      	str	r3, [r1, #8]
 800180c:	e006      	b.n	800181c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800180e:	4b16      	ldr	r3, [pc, #88]	; (8001868 <HAL_GPIO_Init+0x2d0>)
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	43db      	mvns	r3, r3
 8001816:	4914      	ldr	r1, [pc, #80]	; (8001868 <HAL_GPIO_Init+0x2d0>)
 8001818:	4013      	ands	r3, r2
 800181a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d021      	beq.n	800186c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001828:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <HAL_GPIO_Init+0x2d0>)
 800182a:	68da      	ldr	r2, [r3, #12]
 800182c:	490e      	ldr	r1, [pc, #56]	; (8001868 <HAL_GPIO_Init+0x2d0>)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	60cb      	str	r3, [r1, #12]
 8001834:	e021      	b.n	800187a <HAL_GPIO_Init+0x2e2>
 8001836:	bf00      	nop
 8001838:	10320000 	.word	0x10320000
 800183c:	10310000 	.word	0x10310000
 8001840:	10220000 	.word	0x10220000
 8001844:	10210000 	.word	0x10210000
 8001848:	10120000 	.word	0x10120000
 800184c:	10110000 	.word	0x10110000
 8001850:	40021000 	.word	0x40021000
 8001854:	40010000 	.word	0x40010000
 8001858:	40010800 	.word	0x40010800
 800185c:	40010c00 	.word	0x40010c00
 8001860:	40011000 	.word	0x40011000
 8001864:	40011400 	.word	0x40011400
 8001868:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <HAL_GPIO_Init+0x304>)
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	43db      	mvns	r3, r3
 8001874:	4909      	ldr	r1, [pc, #36]	; (800189c <HAL_GPIO_Init+0x304>)
 8001876:	4013      	ands	r3, r2
 8001878:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	3301      	adds	r3, #1
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	fa22 f303 	lsr.w	r3, r2, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	f47f ae8e 	bne.w	80015ac <HAL_GPIO_Init+0x14>
  }
}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	372c      	adds	r7, #44	; 0x2c
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	40010400 	.word	0x40010400

080018a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	807b      	strh	r3, [r7, #2]
 80018ac:	4613      	mov	r3, r2
 80018ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018b0:	787b      	ldrb	r3, [r7, #1]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018b6:	887a      	ldrh	r2, [r7, #2]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018bc:	e003      	b.n	80018c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018be:	887b      	ldrh	r3, [r7, #2]
 80018c0:	041a      	lsls	r2, r3, #16
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	611a      	str	r2, [r3, #16]
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr

080018d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018e2:	887a      	ldrh	r2, [r7, #2]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4013      	ands	r3, r2
 80018e8:	041a      	lsls	r2, r3, #16
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	43d9      	mvns	r1, r3
 80018ee:	887b      	ldrh	r3, [r7, #2]
 80018f0:	400b      	ands	r3, r1
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	611a      	str	r2, [r3, #16]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr
	...

08001904 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e272      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 8087 	beq.w	8001a32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001924:	4b92      	ldr	r3, [pc, #584]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 030c 	and.w	r3, r3, #12
 800192c:	2b04      	cmp	r3, #4
 800192e:	d00c      	beq.n	800194a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001930:	4b8f      	ldr	r3, [pc, #572]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 030c 	and.w	r3, r3, #12
 8001938:	2b08      	cmp	r3, #8
 800193a:	d112      	bne.n	8001962 <HAL_RCC_OscConfig+0x5e>
 800193c:	4b8c      	ldr	r3, [pc, #560]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001948:	d10b      	bne.n	8001962 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194a:	4b89      	ldr	r3, [pc, #548]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d06c      	beq.n	8001a30 <HAL_RCC_OscConfig+0x12c>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d168      	bne.n	8001a30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e24c      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196a:	d106      	bne.n	800197a <HAL_RCC_OscConfig+0x76>
 800196c:	4b80      	ldr	r3, [pc, #512]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a7f      	ldr	r2, [pc, #508]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	e02e      	b.n	80019d8 <HAL_RCC_OscConfig+0xd4>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10c      	bne.n	800199c <HAL_RCC_OscConfig+0x98>
 8001982:	4b7b      	ldr	r3, [pc, #492]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a7a      	ldr	r2, [pc, #488]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	4b78      	ldr	r3, [pc, #480]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a77      	ldr	r2, [pc, #476]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001994:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	e01d      	b.n	80019d8 <HAL_RCC_OscConfig+0xd4>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019a4:	d10c      	bne.n	80019c0 <HAL_RCC_OscConfig+0xbc>
 80019a6:	4b72      	ldr	r3, [pc, #456]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a71      	ldr	r2, [pc, #452]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	4b6f      	ldr	r3, [pc, #444]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a6e      	ldr	r2, [pc, #440]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e00b      	b.n	80019d8 <HAL_RCC_OscConfig+0xd4>
 80019c0:	4b6b      	ldr	r3, [pc, #428]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a6a      	ldr	r2, [pc, #424]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	4b68      	ldr	r3, [pc, #416]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a67      	ldr	r2, [pc, #412]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d013      	beq.n	8001a08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7ff fbee 	bl	80011c0 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e8:	f7ff fbea 	bl	80011c0 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b64      	cmp	r3, #100	; 0x64
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e200      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fa:	4b5d      	ldr	r3, [pc, #372]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0f0      	beq.n	80019e8 <HAL_RCC_OscConfig+0xe4>
 8001a06:	e014      	b.n	8001a32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a08:	f7ff fbda 	bl	80011c0 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a10:	f7ff fbd6 	bl	80011c0 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b64      	cmp	r3, #100	; 0x64
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e1ec      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a22:	4b53      	ldr	r3, [pc, #332]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x10c>
 8001a2e:	e000      	b.n	8001a32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d063      	beq.n	8001b06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a3e:	4b4c      	ldr	r3, [pc, #304]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 030c 	and.w	r3, r3, #12
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00b      	beq.n	8001a62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a4a:	4b49      	ldr	r3, [pc, #292]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
 8001a52:	2b08      	cmp	r3, #8
 8001a54:	d11c      	bne.n	8001a90 <HAL_RCC_OscConfig+0x18c>
 8001a56:	4b46      	ldr	r3, [pc, #280]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d116      	bne.n	8001a90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a62:	4b43      	ldr	r3, [pc, #268]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d005      	beq.n	8001a7a <HAL_RCC_OscConfig+0x176>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d001      	beq.n	8001a7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e1c0      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a7a:	4b3d      	ldr	r3, [pc, #244]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	4939      	ldr	r1, [pc, #228]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a8e:	e03a      	b.n	8001b06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d020      	beq.n	8001ada <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a98:	4b36      	ldr	r3, [pc, #216]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9e:	f7ff fb8f 	bl	80011c0 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa6:	f7ff fb8b 	bl	80011c0 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e1a1      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab8:	4b2d      	ldr	r3, [pc, #180]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0f0      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac4:	4b2a      	ldr	r3, [pc, #168]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4927      	ldr	r1, [pc, #156]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	600b      	str	r3, [r1, #0]
 8001ad8:	e015      	b.n	8001b06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ada:	4b26      	ldr	r3, [pc, #152]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fb6e 	bl	80011c0 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae8:	f7ff fb6a 	bl	80011c0 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e180      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001afa:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d03a      	beq.n	8001b88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d019      	beq.n	8001b4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b1a:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b20:	f7ff fb4e 	bl	80011c0 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b28:	f7ff fb4a 	bl	80011c0 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e160      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b46:	2001      	movs	r0, #1
 8001b48:	f000 fad8 	bl	80020fc <RCC_Delay>
 8001b4c:	e01c      	b.n	8001b88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b54:	f7ff fb34 	bl	80011c0 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b5a:	e00f      	b.n	8001b7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b5c:	f7ff fb30 	bl	80011c0 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d908      	bls.n	8001b7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e146      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
 8001b6e:	bf00      	nop
 8001b70:	40021000 	.word	0x40021000
 8001b74:	42420000 	.word	0x42420000
 8001b78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b7c:	4b92      	ldr	r3, [pc, #584]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1e9      	bne.n	8001b5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 80a6 	beq.w	8001ce2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b96:	2300      	movs	r3, #0
 8001b98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b9a:	4b8b      	ldr	r3, [pc, #556]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10d      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba6:	4b88      	ldr	r3, [pc, #544]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	4a87      	ldr	r2, [pc, #540]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	61d3      	str	r3, [r2, #28]
 8001bb2:	4b85      	ldr	r3, [pc, #532]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc2:	4b82      	ldr	r3, [pc, #520]	; (8001dcc <HAL_RCC_OscConfig+0x4c8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d118      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bce:	4b7f      	ldr	r3, [pc, #508]	; (8001dcc <HAL_RCC_OscConfig+0x4c8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a7e      	ldr	r2, [pc, #504]	; (8001dcc <HAL_RCC_OscConfig+0x4c8>)
 8001bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bda:	f7ff faf1 	bl	80011c0 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001be2:	f7ff faed 	bl	80011c0 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b64      	cmp	r3, #100	; 0x64
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e103      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf4:	4b75      	ldr	r3, [pc, #468]	; (8001dcc <HAL_RCC_OscConfig+0x4c8>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0f0      	beq.n	8001be2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d106      	bne.n	8001c16 <HAL_RCC_OscConfig+0x312>
 8001c08:	4b6f      	ldr	r3, [pc, #444]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	4a6e      	ldr	r2, [pc, #440]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	6213      	str	r3, [r2, #32]
 8001c14:	e02d      	b.n	8001c72 <HAL_RCC_OscConfig+0x36e>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10c      	bne.n	8001c38 <HAL_RCC_OscConfig+0x334>
 8001c1e:	4b6a      	ldr	r3, [pc, #424]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	4a69      	ldr	r2, [pc, #420]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	f023 0301 	bic.w	r3, r3, #1
 8001c28:	6213      	str	r3, [r2, #32]
 8001c2a:	4b67      	ldr	r3, [pc, #412]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	4a66      	ldr	r2, [pc, #408]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	f023 0304 	bic.w	r3, r3, #4
 8001c34:	6213      	str	r3, [r2, #32]
 8001c36:	e01c      	b.n	8001c72 <HAL_RCC_OscConfig+0x36e>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	2b05      	cmp	r3, #5
 8001c3e:	d10c      	bne.n	8001c5a <HAL_RCC_OscConfig+0x356>
 8001c40:	4b61      	ldr	r3, [pc, #388]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	4a60      	ldr	r2, [pc, #384]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c46:	f043 0304 	orr.w	r3, r3, #4
 8001c4a:	6213      	str	r3, [r2, #32]
 8001c4c:	4b5e      	ldr	r3, [pc, #376]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	4a5d      	ldr	r2, [pc, #372]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6213      	str	r3, [r2, #32]
 8001c58:	e00b      	b.n	8001c72 <HAL_RCC_OscConfig+0x36e>
 8001c5a:	4b5b      	ldr	r3, [pc, #364]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	4a5a      	ldr	r2, [pc, #360]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c60:	f023 0301 	bic.w	r3, r3, #1
 8001c64:	6213      	str	r3, [r2, #32]
 8001c66:	4b58      	ldr	r3, [pc, #352]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	4a57      	ldr	r2, [pc, #348]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	f023 0304 	bic.w	r3, r3, #4
 8001c70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d015      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7a:	f7ff faa1 	bl	80011c0 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c80:	e00a      	b.n	8001c98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c82:	f7ff fa9d 	bl	80011c0 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e0b1      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c98:	4b4b      	ldr	r3, [pc, #300]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0ee      	beq.n	8001c82 <HAL_RCC_OscConfig+0x37e>
 8001ca4:	e014      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca6:	f7ff fa8b 	bl	80011c0 <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cac:	e00a      	b.n	8001cc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cae:	f7ff fa87 	bl	80011c0 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e09b      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc4:	4b40      	ldr	r3, [pc, #256]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1ee      	bne.n	8001cae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cd0:	7dfb      	ldrb	r3, [r7, #23]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d105      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cd6:	4b3c      	ldr	r3, [pc, #240]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	4a3b      	ldr	r2, [pc, #236]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 8087 	beq.w	8001dfa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cec:	4b36      	ldr	r3, [pc, #216]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 030c 	and.w	r3, r3, #12
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d061      	beq.n	8001dbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d146      	bne.n	8001d8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d00:	4b33      	ldr	r3, [pc, #204]	; (8001dd0 <HAL_RCC_OscConfig+0x4cc>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d06:	f7ff fa5b 	bl	80011c0 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0e:	f7ff fa57 	bl	80011c0 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e06d      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d20:	4b29      	ldr	r3, [pc, #164]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1f0      	bne.n	8001d0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d34:	d108      	bne.n	8001d48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d36:	4b24      	ldr	r3, [pc, #144]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	4921      	ldr	r1, [pc, #132]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d48:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a19      	ldr	r1, [r3, #32]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	430b      	orrs	r3, r1
 8001d5a:	491b      	ldr	r1, [pc, #108]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_RCC_OscConfig+0x4cc>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d66:	f7ff fa2b 	bl	80011c0 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6e:	f7ff fa27 	bl	80011c0 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e03d      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d80:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0x46a>
 8001d8c:	e035      	b.n	8001dfa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8e:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <HAL_RCC_OscConfig+0x4cc>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d94:	f7ff fa14 	bl	80011c0 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7ff fa10 	bl	80011c0 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e026      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x498>
 8001dba:	e01e      	b.n	8001dfa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d107      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e019      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40007000 	.word	0x40007000
 8001dd0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_RCC_OscConfig+0x500>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d106      	bne.n	8001df6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d001      	beq.n	8001dfa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40021000 	.word	0x40021000

08001e08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0d0      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e1c:	4b6a      	ldr	r3, [pc, #424]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d910      	bls.n	8001e4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2a:	4b67      	ldr	r3, [pc, #412]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 0207 	bic.w	r2, r3, #7
 8001e32:	4965      	ldr	r1, [pc, #404]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3a:	4b63      	ldr	r3, [pc, #396]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d001      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e0b8      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d020      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d005      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e64:	4b59      	ldr	r3, [pc, #356]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	4a58      	ldr	r2, [pc, #352]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001e6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d005      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e7c:	4b53      	ldr	r3, [pc, #332]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	4a52      	ldr	r2, [pc, #328]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e88:	4b50      	ldr	r3, [pc, #320]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	494d      	ldr	r1, [pc, #308]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d040      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d107      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eae:	4b47      	ldr	r3, [pc, #284]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d115      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e07f      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d107      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec6:	4b41      	ldr	r3, [pc, #260]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d109      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e073      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed6:	4b3d      	ldr	r3, [pc, #244]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e06b      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ee6:	4b39      	ldr	r3, [pc, #228]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f023 0203 	bic.w	r2, r3, #3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	4936      	ldr	r1, [pc, #216]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ef8:	f7ff f962 	bl	80011c0 <HAL_GetTick>
 8001efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efe:	e00a      	b.n	8001f16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f00:	f7ff f95e 	bl	80011c0 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e053      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f16:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 020c 	and.w	r2, r3, #12
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d1eb      	bne.n	8001f00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f28:	4b27      	ldr	r3, [pc, #156]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d210      	bcs.n	8001f58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f36:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 0207 	bic.w	r2, r3, #7
 8001f3e:	4922      	ldr	r1, [pc, #136]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f46:	4b20      	ldr	r3, [pc, #128]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d001      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e032      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d008      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f64:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	4916      	ldr	r1, [pc, #88]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d009      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f82:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	490e      	ldr	r1, [pc, #56]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f96:	f000 f821 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	490a      	ldr	r1, [pc, #40]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fa8:	5ccb      	ldrb	r3, [r1, r3]
 8001faa:	fa22 f303 	lsr.w	r3, r2, r3
 8001fae:	4a09      	ldr	r2, [pc, #36]	; (8001fd4 <HAL_RCC_ClockConfig+0x1cc>)
 8001fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <HAL_RCC_ClockConfig+0x1d0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff f8c0 	bl	800113c <HAL_InitTick>

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40022000 	.word	0x40022000
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	08005518 	.word	0x08005518
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	20000004 	.word	0x20000004

08001fdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fdc:	b490      	push	{r4, r7}
 8001fde:	b08a      	sub	sp, #40	; 0x28
 8001fe0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fe2:	4b29      	ldr	r3, [pc, #164]	; (8002088 <HAL_RCC_GetSysClockFreq+0xac>)
 8001fe4:	1d3c      	adds	r4, r7, #4
 8001fe6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fe8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fec:	f240 2301 	movw	r3, #513	; 0x201
 8001ff0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61bb      	str	r3, [r7, #24]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002002:	2300      	movs	r3, #0
 8002004:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002006:	4b21      	ldr	r3, [pc, #132]	; (800208c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f003 030c 	and.w	r3, r3, #12
 8002012:	2b04      	cmp	r3, #4
 8002014:	d002      	beq.n	800201c <HAL_RCC_GetSysClockFreq+0x40>
 8002016:	2b08      	cmp	r3, #8
 8002018:	d003      	beq.n	8002022 <HAL_RCC_GetSysClockFreq+0x46>
 800201a:	e02b      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800201c:	4b1c      	ldr	r3, [pc, #112]	; (8002090 <HAL_RCC_GetSysClockFreq+0xb4>)
 800201e:	623b      	str	r3, [r7, #32]
      break;
 8002020:	e02b      	b.n	800207a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	0c9b      	lsrs	r3, r3, #18
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	3328      	adds	r3, #40	; 0x28
 800202c:	443b      	add	r3, r7
 800202e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002032:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d012      	beq.n	8002064 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800203e:	4b13      	ldr	r3, [pc, #76]	; (800208c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	0c5b      	lsrs	r3, r3, #17
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	3328      	adds	r3, #40	; 0x28
 800204a:	443b      	add	r3, r7
 800204c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002050:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	4a0e      	ldr	r2, [pc, #56]	; (8002090 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002056:	fb03 f202 	mul.w	r2, r3, r2
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
 8002062:	e004      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	4a0b      	ldr	r2, [pc, #44]	; (8002094 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002068:	fb02 f303 	mul.w	r3, r2, r3
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	623b      	str	r3, [r7, #32]
      break;
 8002072:	e002      	b.n	800207a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002074:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002076:	623b      	str	r3, [r7, #32]
      break;
 8002078:	bf00      	nop
    }
  }
  return sysclockfreq;
 800207a:	6a3b      	ldr	r3, [r7, #32]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3728      	adds	r7, #40	; 0x28
 8002080:	46bd      	mov	sp, r7
 8002082:	bc90      	pop	{r4, r7}
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	080054fc 	.word	0x080054fc
 800208c:	40021000 	.word	0x40021000
 8002090:	007a1200 	.word	0x007a1200
 8002094:	003d0900 	.word	0x003d0900

08002098 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800209c:	4b02      	ldr	r3, [pc, #8]	; (80020a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800209e:	681b      	ldr	r3, [r3, #0]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr
 80020a8:	20000000 	.word	0x20000000

080020ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020b0:	f7ff fff2 	bl	8002098 <HAL_RCC_GetHCLKFreq>
 80020b4:	4602      	mov	r2, r0
 80020b6:	4b05      	ldr	r3, [pc, #20]	; (80020cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	0a1b      	lsrs	r3, r3, #8
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	4903      	ldr	r1, [pc, #12]	; (80020d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020c2:	5ccb      	ldrb	r3, [r1, r3]
 80020c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40021000 	.word	0x40021000
 80020d0:	08005528 	.word	0x08005528

080020d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020d8:	f7ff ffde 	bl	8002098 <HAL_RCC_GetHCLKFreq>
 80020dc:	4602      	mov	r2, r0
 80020de:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	0adb      	lsrs	r3, r3, #11
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	4903      	ldr	r1, [pc, #12]	; (80020f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020ea:	5ccb      	ldrb	r3, [r1, r3]
 80020ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40021000 	.word	0x40021000
 80020f8:	08005528 	.word	0x08005528

080020fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002104:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <RCC_Delay+0x34>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a0a      	ldr	r2, [pc, #40]	; (8002134 <RCC_Delay+0x38>)
 800210a:	fba2 2303 	umull	r2, r3, r2, r3
 800210e:	0a5b      	lsrs	r3, r3, #9
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	fb02 f303 	mul.w	r3, r2, r3
 8002116:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002118:	bf00      	nop
  }
  while (Delay --);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	1e5a      	subs	r2, r3, #1
 800211e:	60fa      	str	r2, [r7, #12]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1f9      	bne.n	8002118 <RCC_Delay+0x1c>
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr
 8002130:	20000000 	.word	0x20000000
 8002134:	10624dd3 	.word	0x10624dd3

08002138 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e03f      	b.n	80021ca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d106      	bne.n	8002164 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7fe fe3a 	bl	8000dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2224      	movs	r2, #36	; 0x24
 8002168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800217a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 fcc7 	bl	8002b10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	691a      	ldr	r2, [r3, #16]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002190:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695a      	ldr	r2, [r3, #20]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2220      	movs	r2, #32
 80021bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2220      	movs	r2, #32
 80021c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b08a      	sub	sp, #40	; 0x28
 80021d6:	af02      	add	r7, sp, #8
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	603b      	str	r3, [r7, #0]
 80021de:	4613      	mov	r3, r2
 80021e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b20      	cmp	r3, #32
 80021f0:	d17c      	bne.n	80022ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <HAL_UART_Transmit+0x2c>
 80021f8:	88fb      	ldrh	r3, [r7, #6]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e075      	b.n	80022ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_UART_Transmit+0x3e>
 800220c:	2302      	movs	r3, #2
 800220e:	e06e      	b.n	80022ee <HAL_UART_Transmit+0x11c>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2221      	movs	r2, #33	; 0x21
 8002222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002226:	f7fe ffcb 	bl	80011c0 <HAL_GetTick>
 800222a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	88fa      	ldrh	r2, [r7, #6]
 8002230:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	88fa      	ldrh	r2, [r7, #6]
 8002236:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002240:	d108      	bne.n	8002254 <HAL_UART_Transmit+0x82>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d104      	bne.n	8002254 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	61bb      	str	r3, [r7, #24]
 8002252:	e003      	b.n	800225c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002258:	2300      	movs	r3, #0
 800225a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002264:	e02a      	b.n	80022bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2200      	movs	r2, #0
 800226e:	2180      	movs	r1, #128	; 0x80
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 fab3 	bl	80027dc <UART_WaitOnFlagUntilTimeout>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e036      	b.n	80022ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10b      	bne.n	800229e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002294:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	3302      	adds	r3, #2
 800229a:	61bb      	str	r3, [r7, #24]
 800229c:	e007      	b.n	80022ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	781a      	ldrb	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	3301      	adds	r3, #1
 80022ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1cf      	bne.n	8002266 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	2200      	movs	r2, #0
 80022ce:	2140      	movs	r1, #64	; 0x40
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 fa83 	bl	80027dc <UART_WaitOnFlagUntilTimeout>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e006      	b.n	80022ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2220      	movs	r2, #32
 80022e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	e000      	b.n	80022ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80022ec:	2302      	movs	r3, #2
  }
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3720      	adds	r7, #32
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b08a      	sub	sp, #40	; 0x28
 80022fa:	af02      	add	r7, sp, #8
 80022fc:	60f8      	str	r0, [r7, #12]
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	603b      	str	r3, [r7, #0]
 8002302:	4613      	mov	r3, r2
 8002304:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b20      	cmp	r3, #32
 8002314:	f040 808c 	bne.w	8002430 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d002      	beq.n	8002324 <HAL_UART_Receive+0x2e>
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e084      	b.n	8002432 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_UART_Receive+0x40>
 8002332:	2302      	movs	r3, #2
 8002334:	e07d      	b.n	8002432 <HAL_UART_Receive+0x13c>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2222      	movs	r2, #34	; 0x22
 8002348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002352:	f7fe ff35 	bl	80011c0 <HAL_GetTick>
 8002356:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	88fa      	ldrh	r2, [r7, #6]
 800235c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	88fa      	ldrh	r2, [r7, #6]
 8002362:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800236c:	d108      	bne.n	8002380 <HAL_UART_Receive+0x8a>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d104      	bne.n	8002380 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	61bb      	str	r3, [r7, #24]
 800237e:	e003      	b.n	8002388 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002384:	2300      	movs	r3, #0
 8002386:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002390:	e043      	b.n	800241a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2200      	movs	r2, #0
 800239a:	2120      	movs	r1, #32
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 fa1d 	bl	80027dc <UART_WaitOnFlagUntilTimeout>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e042      	b.n	8002432 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10c      	bne.n	80023cc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023be:	b29a      	uxth	r2, r3
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	3302      	adds	r3, #2
 80023c8:	61bb      	str	r3, [r7, #24]
 80023ca:	e01f      	b.n	800240c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023d4:	d007      	beq.n	80023e6 <HAL_UART_Receive+0xf0>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10a      	bne.n	80023f4 <HAL_UART_Receive+0xfe>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d106      	bne.n	80023f4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	701a      	strb	r2, [r3, #0]
 80023f2:	e008      	b.n	8002406 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002400:	b2da      	uxtb	r2, r3
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3301      	adds	r3, #1
 800240a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002410:	b29b      	uxth	r3, r3
 8002412:	3b01      	subs	r3, #1
 8002414:	b29a      	uxth	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800241e:	b29b      	uxth	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1b6      	bne.n	8002392 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2220      	movs	r2, #32
 8002428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	e000      	b.n	8002432 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002430:	2302      	movs	r3, #2
  }
}
 8002432:	4618      	mov	r0, r3
 8002434:	3720      	adds	r7, #32
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b08a      	sub	sp, #40	; 0x28
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800245c:	2300      	movs	r3, #0
 800245e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10d      	bne.n	800248e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	f003 0320 	and.w	r3, r3, #32
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <HAL_UART_IRQHandler+0x52>
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	f003 0320 	and.w	r3, r3, #32
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 fa99 	bl	80029be <UART_Receive_IT>
      return;
 800248c:	e17b      	b.n	8002786 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80b1 	beq.w	80025f8 <HAL_UART_IRQHandler+0x1bc>
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b00      	cmp	r3, #0
 800249e:	d105      	bne.n	80024ac <HAL_UART_IRQHandler+0x70>
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 80a6 	beq.w	80025f8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00a      	beq.n	80024cc <HAL_UART_IRQHandler+0x90>
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	f043 0201 	orr.w	r2, r3, #1
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <HAL_UART_IRQHandler+0xb0>
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e4:	f043 0202 	orr.w	r2, r3, #2
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_UART_IRQHandler+0xd0>
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	f043 0204 	orr.w	r2, r3, #4
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00f      	beq.n	8002536 <HAL_UART_IRQHandler+0xfa>
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	f003 0320 	and.w	r3, r3, #32
 800251c:	2b00      	cmp	r3, #0
 800251e:	d104      	bne.n	800252a <HAL_UART_IRQHandler+0xee>
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f043 0208 	orr.w	r2, r3, #8
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 811e 	beq.w	800277c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	f003 0320 	and.w	r3, r3, #32
 8002546:	2b00      	cmp	r3, #0
 8002548:	d007      	beq.n	800255a <HAL_UART_IRQHandler+0x11e>
 800254a:	6a3b      	ldr	r3, [r7, #32]
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	2b00      	cmp	r3, #0
 8002552:	d002      	beq.n	800255a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 fa32 	bl	80029be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002564:	2b00      	cmp	r3, #0
 8002566:	bf14      	ite	ne
 8002568:	2301      	movne	r3, #1
 800256a:	2300      	moveq	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	2b00      	cmp	r3, #0
 800257a:	d102      	bne.n	8002582 <HAL_UART_IRQHandler+0x146>
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d031      	beq.n	80025e6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f974 	bl	8002870 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002592:	2b00      	cmp	r3, #0
 8002594:	d023      	beq.n	80025de <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695a      	ldr	r2, [r3, #20]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025a4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d013      	beq.n	80025d6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b2:	4a76      	ldr	r2, [pc, #472]	; (800278c <HAL_UART_IRQHandler+0x350>)
 80025b4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe ff76 	bl	80014ac <HAL_DMA_Abort_IT>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d016      	beq.n	80025f4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025d0:	4610      	mov	r0, r2
 80025d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025d4:	e00e      	b.n	80025f4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f8ec 	bl	80027b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025dc:	e00a      	b.n	80025f4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f8e8 	bl	80027b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e4:	e006      	b.n	80025f4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f8e4 	bl	80027b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80025f2:	e0c3      	b.n	800277c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025f4:	bf00      	nop
    return;
 80025f6:	e0c1      	b.n	800277c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	f040 80a1 	bne.w	8002744 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 809b 	beq.w	8002744 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 8095 	beq.w	8002744 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	d04e      	beq.n	80026dc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002648:	8a3b      	ldrh	r3, [r7, #16]
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 8098 	beq.w	8002780 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002654:	8a3a      	ldrh	r2, [r7, #16]
 8002656:	429a      	cmp	r2, r3
 8002658:	f080 8092 	bcs.w	8002780 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	8a3a      	ldrh	r2, [r7, #16]
 8002660:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	2b20      	cmp	r3, #32
 800266a:	d02b      	beq.n	80026c4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800267a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	695a      	ldr	r2, [r3, #20]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0201 	bic.w	r2, r2, #1
 800268a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	695a      	ldr	r2, [r3, #20]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800269a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2220      	movs	r2, #32
 80026a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68da      	ldr	r2, [r3, #12]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0210 	bic.w	r2, r2, #16
 80026b8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe feb9 	bl	8001436 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	4619      	mov	r1, r3
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f876 	bl	80027c6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80026da:	e051      	b.n	8002780 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d047      	beq.n	8002784 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80026f4:	8a7b      	ldrh	r3, [r7, #18]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d044      	beq.n	8002784 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002708:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695a      	ldr	r2, [r3, #20]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0201 	bic.w	r2, r2, #1
 8002718:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2220      	movs	r2, #32
 800271e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0210 	bic.w	r2, r2, #16
 8002736:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002738:	8a7b      	ldrh	r3, [r7, #18]
 800273a:	4619      	mov	r1, r3
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f842 	bl	80027c6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002742:	e01f      	b.n	8002784 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274a:	2b00      	cmp	r3, #0
 800274c:	d008      	beq.n	8002760 <HAL_UART_IRQHandler+0x324>
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f8c9 	bl	80028f0 <UART_Transmit_IT>
    return;
 800275e:	e012      	b.n	8002786 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00d      	beq.n	8002786 <HAL_UART_IRQHandler+0x34a>
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f90a 	bl	800298e <UART_EndTransmit_IT>
    return;
 800277a:	e004      	b.n	8002786 <HAL_UART_IRQHandler+0x34a>
    return;
 800277c:	bf00      	nop
 800277e:	e002      	b.n	8002786 <HAL_UART_IRQHandler+0x34a>
      return;
 8002780:	bf00      	nop
 8002782:	e000      	b.n	8002786 <HAL_UART_IRQHandler+0x34a>
      return;
 8002784:	bf00      	nop
  }
}
 8002786:	3728      	adds	r7, #40	; 0x28
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	080028c9 	.word	0x080028c9

08002790 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr

080027a2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr

080027c6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	460b      	mov	r3, r1
 80027d0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	603b      	str	r3, [r7, #0]
 80027e8:	4613      	mov	r3, r2
 80027ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ec:	e02c      	b.n	8002848 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f4:	d028      	beq.n	8002848 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d007      	beq.n	800280c <UART_WaitOnFlagUntilTimeout+0x30>
 80027fc:	f7fe fce0 	bl	80011c0 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	429a      	cmp	r2, r3
 800280a:	d21d      	bcs.n	8002848 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800281a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695a      	ldr	r2, [r3, #20]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0201 	bic.w	r2, r2, #1
 800282a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2220      	movs	r2, #32
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e00f      	b.n	8002868 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	4013      	ands	r3, r2
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	429a      	cmp	r2, r3
 8002856:	bf0c      	ite	eq
 8002858:	2301      	moveq	r3, #1
 800285a:	2300      	movne	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	461a      	mov	r2, r3
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	429a      	cmp	r2, r3
 8002864:	d0c3      	beq.n	80027ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002886:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0201 	bic.w	r2, r2, #1
 8002896:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	2b01      	cmp	r3, #1
 800289e:	d107      	bne.n	80028b0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0210 	bic.w	r2, r2, #16
 80028ae:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2220      	movs	r2, #32
 80028b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f7ff ff66 	bl	80027b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028e8:	bf00      	nop
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b21      	cmp	r3, #33	; 0x21
 8002902:	d13e      	bne.n	8002982 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800290c:	d114      	bne.n	8002938 <UART_Transmit_IT+0x48>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d110      	bne.n	8002938 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	461a      	mov	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800292a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	1c9a      	adds	r2, r3, #2
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	621a      	str	r2, [r3, #32]
 8002936:	e008      	b.n	800294a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	1c59      	adds	r1, r3, #1
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6211      	str	r1, [r2, #32]
 8002942:	781a      	ldrb	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800294e:	b29b      	uxth	r3, r3
 8002950:	3b01      	subs	r3, #1
 8002952:	b29b      	uxth	r3, r3
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	4619      	mov	r1, r3
 8002958:	84d1      	strh	r1, [r2, #38]	; 0x26
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10f      	bne.n	800297e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800296c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800297c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	e000      	b.n	8002984 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002982:	2302      	movs	r3, #2
  }
}
 8002984:	4618      	mov	r0, r3
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr

0800298e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2220      	movs	r2, #32
 80029aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff feee 	bl	8002790 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b086      	sub	sp, #24
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b22      	cmp	r3, #34	; 0x22
 80029d0:	f040 8099 	bne.w	8002b06 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029dc:	d117      	bne.n	8002a0e <UART_Receive_IT+0x50>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d113      	bne.n	8002a0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ee:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a06:	1c9a      	adds	r2, r3, #2
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	629a      	str	r2, [r3, #40]	; 0x28
 8002a0c:	e026      	b.n	8002a5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a20:	d007      	beq.n	8002a32 <UART_Receive_IT+0x74>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10a      	bne.n	8002a40 <UART_Receive_IT+0x82>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d106      	bne.n	8002a40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	701a      	strb	r2, [r3, #0]
 8002a3e:	e008      	b.n	8002a52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	4619      	mov	r1, r3
 8002a6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d148      	bne.n	8002b02 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0220 	bic.w	r2, r2, #32
 8002a7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0201 	bic.w	r2, r2, #1
 8002a9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d123      	bne.n	8002af8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0210 	bic.w	r2, r2, #16
 8002ac4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b10      	cmp	r3, #16
 8002ad2:	d10a      	bne.n	8002aea <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002aee:	4619      	mov	r1, r3
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7ff fe68 	bl	80027c6 <HAL_UARTEx_RxEventCallback>
 8002af6:	e002      	b.n	8002afe <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff fe52 	bl	80027a2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	e002      	b.n	8002b08 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	e000      	b.n	8002b08 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002b06:	2302      	movs	r3, #2
  }
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b4a:	f023 030c 	bic.w	r3, r3, #12
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6812      	ldr	r2, [r2, #0]
 8002b52:	68b9      	ldr	r1, [r7, #8]
 8002b54:	430b      	orrs	r3, r1
 8002b56:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699a      	ldr	r2, [r3, #24]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a2c      	ldr	r2, [pc, #176]	; (8002c24 <UART_SetConfig+0x114>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d103      	bne.n	8002b80 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b78:	f7ff faac 	bl	80020d4 <HAL_RCC_GetPCLK2Freq>
 8002b7c:	60f8      	str	r0, [r7, #12]
 8002b7e:	e002      	b.n	8002b86 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b80:	f7ff fa94 	bl	80020ac <HAL_RCC_GetPCLK1Freq>
 8002b84:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009a      	lsls	r2, r3, #2
 8002b90:	441a      	add	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9c:	4a22      	ldr	r2, [pc, #136]	; (8002c28 <UART_SetConfig+0x118>)
 8002b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	0119      	lsls	r1, r3, #4
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	009a      	lsls	r2, r3, #2
 8002bb0:	441a      	add	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bbc:	4b1a      	ldr	r3, [pc, #104]	; (8002c28 <UART_SetConfig+0x118>)
 8002bbe:	fba3 0302 	umull	r0, r3, r3, r2
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	2064      	movs	r0, #100	; 0x64
 8002bc6:	fb00 f303 	mul.w	r3, r0, r3
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	3332      	adds	r3, #50	; 0x32
 8002bd0:	4a15      	ldr	r2, [pc, #84]	; (8002c28 <UART_SetConfig+0x118>)
 8002bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bdc:	4419      	add	r1, r3
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4613      	mov	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	009a      	lsls	r2, r3, #2
 8002be8:	441a      	add	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <UART_SetConfig+0x118>)
 8002bf6:	fba3 0302 	umull	r0, r3, r3, r2
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	2064      	movs	r0, #100	; 0x64
 8002bfe:	fb00 f303 	mul.w	r3, r0, r3
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	3332      	adds	r3, #50	; 0x32
 8002c08:	4a07      	ldr	r2, [pc, #28]	; (8002c28 <UART_SetConfig+0x118>)
 8002c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0e:	095b      	lsrs	r3, r3, #5
 8002c10:	f003 020f 	and.w	r2, r3, #15
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	440a      	add	r2, r1
 8002c1a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c1c:	bf00      	nop
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40013800 	.word	0x40013800
 8002c28:	51eb851f 	.word	0x51eb851f

08002c2c <__errno>:
 8002c2c:	4b01      	ldr	r3, [pc, #4]	; (8002c34 <__errno+0x8>)
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	2000000c 	.word	0x2000000c

08002c38 <__sflush_r>:
 8002c38:	898a      	ldrh	r2, [r1, #12]
 8002c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3c:	4605      	mov	r5, r0
 8002c3e:	0710      	lsls	r0, r2, #28
 8002c40:	460c      	mov	r4, r1
 8002c42:	d457      	bmi.n	8002cf4 <__sflush_r+0xbc>
 8002c44:	684b      	ldr	r3, [r1, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	dc04      	bgt.n	8002c54 <__sflush_r+0x1c>
 8002c4a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	dc01      	bgt.n	8002c54 <__sflush_r+0x1c>
 8002c50:	2000      	movs	r0, #0
 8002c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002c56:	2e00      	cmp	r6, #0
 8002c58:	d0fa      	beq.n	8002c50 <__sflush_r+0x18>
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002c60:	682f      	ldr	r7, [r5, #0]
 8002c62:	602b      	str	r3, [r5, #0]
 8002c64:	d032      	beq.n	8002ccc <__sflush_r+0x94>
 8002c66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002c68:	89a3      	ldrh	r3, [r4, #12]
 8002c6a:	075a      	lsls	r2, r3, #29
 8002c6c:	d505      	bpl.n	8002c7a <__sflush_r+0x42>
 8002c6e:	6863      	ldr	r3, [r4, #4]
 8002c70:	1ac0      	subs	r0, r0, r3
 8002c72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c74:	b10b      	cbz	r3, 8002c7a <__sflush_r+0x42>
 8002c76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c78:	1ac0      	subs	r0, r0, r3
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002c80:	4628      	mov	r0, r5
 8002c82:	6a21      	ldr	r1, [r4, #32]
 8002c84:	47b0      	blx	r6
 8002c86:	1c43      	adds	r3, r0, #1
 8002c88:	89a3      	ldrh	r3, [r4, #12]
 8002c8a:	d106      	bne.n	8002c9a <__sflush_r+0x62>
 8002c8c:	6829      	ldr	r1, [r5, #0]
 8002c8e:	291d      	cmp	r1, #29
 8002c90:	d82c      	bhi.n	8002cec <__sflush_r+0xb4>
 8002c92:	4a29      	ldr	r2, [pc, #164]	; (8002d38 <__sflush_r+0x100>)
 8002c94:	40ca      	lsrs	r2, r1
 8002c96:	07d6      	lsls	r6, r2, #31
 8002c98:	d528      	bpl.n	8002cec <__sflush_r+0xb4>
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	6062      	str	r2, [r4, #4]
 8002c9e:	6922      	ldr	r2, [r4, #16]
 8002ca0:	04d9      	lsls	r1, r3, #19
 8002ca2:	6022      	str	r2, [r4, #0]
 8002ca4:	d504      	bpl.n	8002cb0 <__sflush_r+0x78>
 8002ca6:	1c42      	adds	r2, r0, #1
 8002ca8:	d101      	bne.n	8002cae <__sflush_r+0x76>
 8002caa:	682b      	ldr	r3, [r5, #0]
 8002cac:	b903      	cbnz	r3, 8002cb0 <__sflush_r+0x78>
 8002cae:	6560      	str	r0, [r4, #84]	; 0x54
 8002cb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002cb2:	602f      	str	r7, [r5, #0]
 8002cb4:	2900      	cmp	r1, #0
 8002cb6:	d0cb      	beq.n	8002c50 <__sflush_r+0x18>
 8002cb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002cbc:	4299      	cmp	r1, r3
 8002cbe:	d002      	beq.n	8002cc6 <__sflush_r+0x8e>
 8002cc0:	4628      	mov	r0, r5
 8002cc2:	f000 f9dd 	bl	8003080 <_free_r>
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	6360      	str	r0, [r4, #52]	; 0x34
 8002cca:	e7c2      	b.n	8002c52 <__sflush_r+0x1a>
 8002ccc:	6a21      	ldr	r1, [r4, #32]
 8002cce:	2301      	movs	r3, #1
 8002cd0:	4628      	mov	r0, r5
 8002cd2:	47b0      	blx	r6
 8002cd4:	1c41      	adds	r1, r0, #1
 8002cd6:	d1c7      	bne.n	8002c68 <__sflush_r+0x30>
 8002cd8:	682b      	ldr	r3, [r5, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0c4      	beq.n	8002c68 <__sflush_r+0x30>
 8002cde:	2b1d      	cmp	r3, #29
 8002ce0:	d001      	beq.n	8002ce6 <__sflush_r+0xae>
 8002ce2:	2b16      	cmp	r3, #22
 8002ce4:	d101      	bne.n	8002cea <__sflush_r+0xb2>
 8002ce6:	602f      	str	r7, [r5, #0]
 8002ce8:	e7b2      	b.n	8002c50 <__sflush_r+0x18>
 8002cea:	89a3      	ldrh	r3, [r4, #12]
 8002cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cf0:	81a3      	strh	r3, [r4, #12]
 8002cf2:	e7ae      	b.n	8002c52 <__sflush_r+0x1a>
 8002cf4:	690f      	ldr	r7, [r1, #16]
 8002cf6:	2f00      	cmp	r7, #0
 8002cf8:	d0aa      	beq.n	8002c50 <__sflush_r+0x18>
 8002cfa:	0793      	lsls	r3, r2, #30
 8002cfc:	bf18      	it	ne
 8002cfe:	2300      	movne	r3, #0
 8002d00:	680e      	ldr	r6, [r1, #0]
 8002d02:	bf08      	it	eq
 8002d04:	694b      	ldreq	r3, [r1, #20]
 8002d06:	1bf6      	subs	r6, r6, r7
 8002d08:	600f      	str	r7, [r1, #0]
 8002d0a:	608b      	str	r3, [r1, #8]
 8002d0c:	2e00      	cmp	r6, #0
 8002d0e:	dd9f      	ble.n	8002c50 <__sflush_r+0x18>
 8002d10:	4633      	mov	r3, r6
 8002d12:	463a      	mov	r2, r7
 8002d14:	4628      	mov	r0, r5
 8002d16:	6a21      	ldr	r1, [r4, #32]
 8002d18:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002d1c:	47e0      	blx	ip
 8002d1e:	2800      	cmp	r0, #0
 8002d20:	dc06      	bgt.n	8002d30 <__sflush_r+0xf8>
 8002d22:	89a3      	ldrh	r3, [r4, #12]
 8002d24:	f04f 30ff 	mov.w	r0, #4294967295
 8002d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d2c:	81a3      	strh	r3, [r4, #12]
 8002d2e:	e790      	b.n	8002c52 <__sflush_r+0x1a>
 8002d30:	4407      	add	r7, r0
 8002d32:	1a36      	subs	r6, r6, r0
 8002d34:	e7ea      	b.n	8002d0c <__sflush_r+0xd4>
 8002d36:	bf00      	nop
 8002d38:	20400001 	.word	0x20400001

08002d3c <_fflush_r>:
 8002d3c:	b538      	push	{r3, r4, r5, lr}
 8002d3e:	690b      	ldr	r3, [r1, #16]
 8002d40:	4605      	mov	r5, r0
 8002d42:	460c      	mov	r4, r1
 8002d44:	b913      	cbnz	r3, 8002d4c <_fflush_r+0x10>
 8002d46:	2500      	movs	r5, #0
 8002d48:	4628      	mov	r0, r5
 8002d4a:	bd38      	pop	{r3, r4, r5, pc}
 8002d4c:	b118      	cbz	r0, 8002d56 <_fflush_r+0x1a>
 8002d4e:	6983      	ldr	r3, [r0, #24]
 8002d50:	b90b      	cbnz	r3, 8002d56 <_fflush_r+0x1a>
 8002d52:	f000 f899 	bl	8002e88 <__sinit>
 8002d56:	4b14      	ldr	r3, [pc, #80]	; (8002da8 <_fflush_r+0x6c>)
 8002d58:	429c      	cmp	r4, r3
 8002d5a:	d11b      	bne.n	8002d94 <_fflush_r+0x58>
 8002d5c:	686c      	ldr	r4, [r5, #4]
 8002d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0ef      	beq.n	8002d46 <_fflush_r+0xa>
 8002d66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002d68:	07d0      	lsls	r0, r2, #31
 8002d6a:	d404      	bmi.n	8002d76 <_fflush_r+0x3a>
 8002d6c:	0599      	lsls	r1, r3, #22
 8002d6e:	d402      	bmi.n	8002d76 <_fflush_r+0x3a>
 8002d70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d72:	f000 f97a 	bl	800306a <__retarget_lock_acquire_recursive>
 8002d76:	4628      	mov	r0, r5
 8002d78:	4621      	mov	r1, r4
 8002d7a:	f7ff ff5d 	bl	8002c38 <__sflush_r>
 8002d7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d80:	4605      	mov	r5, r0
 8002d82:	07da      	lsls	r2, r3, #31
 8002d84:	d4e0      	bmi.n	8002d48 <_fflush_r+0xc>
 8002d86:	89a3      	ldrh	r3, [r4, #12]
 8002d88:	059b      	lsls	r3, r3, #22
 8002d8a:	d4dd      	bmi.n	8002d48 <_fflush_r+0xc>
 8002d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d8e:	f000 f96d 	bl	800306c <__retarget_lock_release_recursive>
 8002d92:	e7d9      	b.n	8002d48 <_fflush_r+0xc>
 8002d94:	4b05      	ldr	r3, [pc, #20]	; (8002dac <_fflush_r+0x70>)
 8002d96:	429c      	cmp	r4, r3
 8002d98:	d101      	bne.n	8002d9e <_fflush_r+0x62>
 8002d9a:	68ac      	ldr	r4, [r5, #8]
 8002d9c:	e7df      	b.n	8002d5e <_fflush_r+0x22>
 8002d9e:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <_fflush_r+0x74>)
 8002da0:	429c      	cmp	r4, r3
 8002da2:	bf08      	it	eq
 8002da4:	68ec      	ldreq	r4, [r5, #12]
 8002da6:	e7da      	b.n	8002d5e <_fflush_r+0x22>
 8002da8:	08005550 	.word	0x08005550
 8002dac:	08005570 	.word	0x08005570
 8002db0:	08005530 	.word	0x08005530

08002db4 <fflush>:
 8002db4:	4601      	mov	r1, r0
 8002db6:	b920      	cbnz	r0, 8002dc2 <fflush+0xe>
 8002db8:	4b04      	ldr	r3, [pc, #16]	; (8002dcc <fflush+0x18>)
 8002dba:	4905      	ldr	r1, [pc, #20]	; (8002dd0 <fflush+0x1c>)
 8002dbc:	6818      	ldr	r0, [r3, #0]
 8002dbe:	f000 b8fe 	b.w	8002fbe <_fwalk_reent>
 8002dc2:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <fflush+0x20>)
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	f7ff bfb9 	b.w	8002d3c <_fflush_r>
 8002dca:	bf00      	nop
 8002dcc:	08005590 	.word	0x08005590
 8002dd0:	08002d3d 	.word	0x08002d3d
 8002dd4:	2000000c 	.word	0x2000000c

08002dd8 <std>:
 8002dd8:	2300      	movs	r3, #0
 8002dda:	b510      	push	{r4, lr}
 8002ddc:	4604      	mov	r4, r0
 8002dde:	e9c0 3300 	strd	r3, r3, [r0]
 8002de2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002de6:	6083      	str	r3, [r0, #8]
 8002de8:	8181      	strh	r1, [r0, #12]
 8002dea:	6643      	str	r3, [r0, #100]	; 0x64
 8002dec:	81c2      	strh	r2, [r0, #14]
 8002dee:	6183      	str	r3, [r0, #24]
 8002df0:	4619      	mov	r1, r3
 8002df2:	2208      	movs	r2, #8
 8002df4:	305c      	adds	r0, #92	; 0x5c
 8002df6:	f000 f93a 	bl	800306e <memset>
 8002dfa:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <std+0x38>)
 8002dfc:	6224      	str	r4, [r4, #32]
 8002dfe:	6263      	str	r3, [r4, #36]	; 0x24
 8002e00:	4b04      	ldr	r3, [pc, #16]	; (8002e14 <std+0x3c>)
 8002e02:	62a3      	str	r3, [r4, #40]	; 0x28
 8002e04:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <std+0x40>)
 8002e06:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002e08:	4b04      	ldr	r3, [pc, #16]	; (8002e1c <std+0x44>)
 8002e0a:	6323      	str	r3, [r4, #48]	; 0x30
 8002e0c:	bd10      	pop	{r4, pc}
 8002e0e:	bf00      	nop
 8002e10:	08003571 	.word	0x08003571
 8002e14:	08003593 	.word	0x08003593
 8002e18:	080035cb 	.word	0x080035cb
 8002e1c:	080035ef 	.word	0x080035ef

08002e20 <_cleanup_r>:
 8002e20:	4901      	ldr	r1, [pc, #4]	; (8002e28 <_cleanup_r+0x8>)
 8002e22:	f000 b8cc 	b.w	8002fbe <_fwalk_reent>
 8002e26:	bf00      	nop
 8002e28:	08002d3d 	.word	0x08002d3d

08002e2c <__sfmoreglue>:
 8002e2c:	2268      	movs	r2, #104	; 0x68
 8002e2e:	b570      	push	{r4, r5, r6, lr}
 8002e30:	1e4d      	subs	r5, r1, #1
 8002e32:	4355      	muls	r5, r2
 8002e34:	460e      	mov	r6, r1
 8002e36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002e3a:	f000 f989 	bl	8003150 <_malloc_r>
 8002e3e:	4604      	mov	r4, r0
 8002e40:	b140      	cbz	r0, 8002e54 <__sfmoreglue+0x28>
 8002e42:	2100      	movs	r1, #0
 8002e44:	e9c0 1600 	strd	r1, r6, [r0]
 8002e48:	300c      	adds	r0, #12
 8002e4a:	60a0      	str	r0, [r4, #8]
 8002e4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002e50:	f000 f90d 	bl	800306e <memset>
 8002e54:	4620      	mov	r0, r4
 8002e56:	bd70      	pop	{r4, r5, r6, pc}

08002e58 <__sfp_lock_acquire>:
 8002e58:	4801      	ldr	r0, [pc, #4]	; (8002e60 <__sfp_lock_acquire+0x8>)
 8002e5a:	f000 b906 	b.w	800306a <__retarget_lock_acquire_recursive>
 8002e5e:	bf00      	nop
 8002e60:	2000011d 	.word	0x2000011d

08002e64 <__sfp_lock_release>:
 8002e64:	4801      	ldr	r0, [pc, #4]	; (8002e6c <__sfp_lock_release+0x8>)
 8002e66:	f000 b901 	b.w	800306c <__retarget_lock_release_recursive>
 8002e6a:	bf00      	nop
 8002e6c:	2000011d 	.word	0x2000011d

08002e70 <__sinit_lock_acquire>:
 8002e70:	4801      	ldr	r0, [pc, #4]	; (8002e78 <__sinit_lock_acquire+0x8>)
 8002e72:	f000 b8fa 	b.w	800306a <__retarget_lock_acquire_recursive>
 8002e76:	bf00      	nop
 8002e78:	2000011e 	.word	0x2000011e

08002e7c <__sinit_lock_release>:
 8002e7c:	4801      	ldr	r0, [pc, #4]	; (8002e84 <__sinit_lock_release+0x8>)
 8002e7e:	f000 b8f5 	b.w	800306c <__retarget_lock_release_recursive>
 8002e82:	bf00      	nop
 8002e84:	2000011e 	.word	0x2000011e

08002e88 <__sinit>:
 8002e88:	b510      	push	{r4, lr}
 8002e8a:	4604      	mov	r4, r0
 8002e8c:	f7ff fff0 	bl	8002e70 <__sinit_lock_acquire>
 8002e90:	69a3      	ldr	r3, [r4, #24]
 8002e92:	b11b      	cbz	r3, 8002e9c <__sinit+0x14>
 8002e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e98:	f7ff bff0 	b.w	8002e7c <__sinit_lock_release>
 8002e9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002ea0:	6523      	str	r3, [r4, #80]	; 0x50
 8002ea2:	4b13      	ldr	r3, [pc, #76]	; (8002ef0 <__sinit+0x68>)
 8002ea4:	4a13      	ldr	r2, [pc, #76]	; (8002ef4 <__sinit+0x6c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	62a2      	str	r2, [r4, #40]	; 0x28
 8002eaa:	42a3      	cmp	r3, r4
 8002eac:	bf08      	it	eq
 8002eae:	2301      	moveq	r3, #1
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	bf08      	it	eq
 8002eb4:	61a3      	streq	r3, [r4, #24]
 8002eb6:	f000 f81f 	bl	8002ef8 <__sfp>
 8002eba:	6060      	str	r0, [r4, #4]
 8002ebc:	4620      	mov	r0, r4
 8002ebe:	f000 f81b 	bl	8002ef8 <__sfp>
 8002ec2:	60a0      	str	r0, [r4, #8]
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	f000 f817 	bl	8002ef8 <__sfp>
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2104      	movs	r1, #4
 8002ece:	60e0      	str	r0, [r4, #12]
 8002ed0:	6860      	ldr	r0, [r4, #4]
 8002ed2:	f7ff ff81 	bl	8002dd8 <std>
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	2109      	movs	r1, #9
 8002eda:	68a0      	ldr	r0, [r4, #8]
 8002edc:	f7ff ff7c 	bl	8002dd8 <std>
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	2112      	movs	r1, #18
 8002ee4:	68e0      	ldr	r0, [r4, #12]
 8002ee6:	f7ff ff77 	bl	8002dd8 <std>
 8002eea:	2301      	movs	r3, #1
 8002eec:	61a3      	str	r3, [r4, #24]
 8002eee:	e7d1      	b.n	8002e94 <__sinit+0xc>
 8002ef0:	08005590 	.word	0x08005590
 8002ef4:	08002e21 	.word	0x08002e21

08002ef8 <__sfp>:
 8002ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002efa:	4607      	mov	r7, r0
 8002efc:	f7ff ffac 	bl	8002e58 <__sfp_lock_acquire>
 8002f00:	4b1e      	ldr	r3, [pc, #120]	; (8002f7c <__sfp+0x84>)
 8002f02:	681e      	ldr	r6, [r3, #0]
 8002f04:	69b3      	ldr	r3, [r6, #24]
 8002f06:	b913      	cbnz	r3, 8002f0e <__sfp+0x16>
 8002f08:	4630      	mov	r0, r6
 8002f0a:	f7ff ffbd 	bl	8002e88 <__sinit>
 8002f0e:	3648      	adds	r6, #72	; 0x48
 8002f10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002f14:	3b01      	subs	r3, #1
 8002f16:	d503      	bpl.n	8002f20 <__sfp+0x28>
 8002f18:	6833      	ldr	r3, [r6, #0]
 8002f1a:	b30b      	cbz	r3, 8002f60 <__sfp+0x68>
 8002f1c:	6836      	ldr	r6, [r6, #0]
 8002f1e:	e7f7      	b.n	8002f10 <__sfp+0x18>
 8002f20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002f24:	b9d5      	cbnz	r5, 8002f5c <__sfp+0x64>
 8002f26:	4b16      	ldr	r3, [pc, #88]	; (8002f80 <__sfp+0x88>)
 8002f28:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002f2c:	60e3      	str	r3, [r4, #12]
 8002f2e:	6665      	str	r5, [r4, #100]	; 0x64
 8002f30:	f000 f89a 	bl	8003068 <__retarget_lock_init_recursive>
 8002f34:	f7ff ff96 	bl	8002e64 <__sfp_lock_release>
 8002f38:	2208      	movs	r2, #8
 8002f3a:	4629      	mov	r1, r5
 8002f3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002f40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002f44:	6025      	str	r5, [r4, #0]
 8002f46:	61a5      	str	r5, [r4, #24]
 8002f48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002f4c:	f000 f88f 	bl	800306e <memset>
 8002f50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002f54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002f58:	4620      	mov	r0, r4
 8002f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f5c:	3468      	adds	r4, #104	; 0x68
 8002f5e:	e7d9      	b.n	8002f14 <__sfp+0x1c>
 8002f60:	2104      	movs	r1, #4
 8002f62:	4638      	mov	r0, r7
 8002f64:	f7ff ff62 	bl	8002e2c <__sfmoreglue>
 8002f68:	4604      	mov	r4, r0
 8002f6a:	6030      	str	r0, [r6, #0]
 8002f6c:	2800      	cmp	r0, #0
 8002f6e:	d1d5      	bne.n	8002f1c <__sfp+0x24>
 8002f70:	f7ff ff78 	bl	8002e64 <__sfp_lock_release>
 8002f74:	230c      	movs	r3, #12
 8002f76:	603b      	str	r3, [r7, #0]
 8002f78:	e7ee      	b.n	8002f58 <__sfp+0x60>
 8002f7a:	bf00      	nop
 8002f7c:	08005590 	.word	0x08005590
 8002f80:	ffff0001 	.word	0xffff0001

08002f84 <_fwalk>:
 8002f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f88:	460f      	mov	r7, r1
 8002f8a:	2600      	movs	r6, #0
 8002f8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002f90:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8002f94:	f1b8 0801 	subs.w	r8, r8, #1
 8002f98:	d505      	bpl.n	8002fa6 <_fwalk+0x22>
 8002f9a:	6824      	ldr	r4, [r4, #0]
 8002f9c:	2c00      	cmp	r4, #0
 8002f9e:	d1f7      	bne.n	8002f90 <_fwalk+0xc>
 8002fa0:	4630      	mov	r0, r6
 8002fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fa6:	89ab      	ldrh	r3, [r5, #12]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d906      	bls.n	8002fba <_fwalk+0x36>
 8002fac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	d002      	beq.n	8002fba <_fwalk+0x36>
 8002fb4:	4628      	mov	r0, r5
 8002fb6:	47b8      	blx	r7
 8002fb8:	4306      	orrs	r6, r0
 8002fba:	3568      	adds	r5, #104	; 0x68
 8002fbc:	e7ea      	b.n	8002f94 <_fwalk+0x10>

08002fbe <_fwalk_reent>:
 8002fbe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fc2:	4606      	mov	r6, r0
 8002fc4:	4688      	mov	r8, r1
 8002fc6:	2700      	movs	r7, #0
 8002fc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002fcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002fd0:	f1b9 0901 	subs.w	r9, r9, #1
 8002fd4:	d505      	bpl.n	8002fe2 <_fwalk_reent+0x24>
 8002fd6:	6824      	ldr	r4, [r4, #0]
 8002fd8:	2c00      	cmp	r4, #0
 8002fda:	d1f7      	bne.n	8002fcc <_fwalk_reent+0xe>
 8002fdc:	4638      	mov	r0, r7
 8002fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fe2:	89ab      	ldrh	r3, [r5, #12]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d907      	bls.n	8002ff8 <_fwalk_reent+0x3a>
 8002fe8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002fec:	3301      	adds	r3, #1
 8002fee:	d003      	beq.n	8002ff8 <_fwalk_reent+0x3a>
 8002ff0:	4629      	mov	r1, r5
 8002ff2:	4630      	mov	r0, r6
 8002ff4:	47c0      	blx	r8
 8002ff6:	4307      	orrs	r7, r0
 8002ff8:	3568      	adds	r5, #104	; 0x68
 8002ffa:	e7e9      	b.n	8002fd0 <_fwalk_reent+0x12>

08002ffc <getchar>:
 8002ffc:	4b07      	ldr	r3, [pc, #28]	; (800301c <getchar+0x20>)
 8002ffe:	b510      	push	{r4, lr}
 8003000:	681c      	ldr	r4, [r3, #0]
 8003002:	b124      	cbz	r4, 800300e <getchar+0x12>
 8003004:	69a3      	ldr	r3, [r4, #24]
 8003006:	b913      	cbnz	r3, 800300e <getchar+0x12>
 8003008:	4620      	mov	r0, r4
 800300a:	f7ff ff3d 	bl	8002e88 <__sinit>
 800300e:	4620      	mov	r0, r4
 8003010:	6861      	ldr	r1, [r4, #4]
 8003012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003016:	f000 bbe5 	b.w	80037e4 <_getc_r>
 800301a:	bf00      	nop
 800301c:	2000000c 	.word	0x2000000c

08003020 <__libc_init_array>:
 8003020:	b570      	push	{r4, r5, r6, lr}
 8003022:	2600      	movs	r6, #0
 8003024:	4d0c      	ldr	r5, [pc, #48]	; (8003058 <__libc_init_array+0x38>)
 8003026:	4c0d      	ldr	r4, [pc, #52]	; (800305c <__libc_init_array+0x3c>)
 8003028:	1b64      	subs	r4, r4, r5
 800302a:	10a4      	asrs	r4, r4, #2
 800302c:	42a6      	cmp	r6, r4
 800302e:	d109      	bne.n	8003044 <__libc_init_array+0x24>
 8003030:	f001 ff6c 	bl	8004f0c <_init>
 8003034:	2600      	movs	r6, #0
 8003036:	4d0a      	ldr	r5, [pc, #40]	; (8003060 <__libc_init_array+0x40>)
 8003038:	4c0a      	ldr	r4, [pc, #40]	; (8003064 <__libc_init_array+0x44>)
 800303a:	1b64      	subs	r4, r4, r5
 800303c:	10a4      	asrs	r4, r4, #2
 800303e:	42a6      	cmp	r6, r4
 8003040:	d105      	bne.n	800304e <__libc_init_array+0x2e>
 8003042:	bd70      	pop	{r4, r5, r6, pc}
 8003044:	f855 3b04 	ldr.w	r3, [r5], #4
 8003048:	4798      	blx	r3
 800304a:	3601      	adds	r6, #1
 800304c:	e7ee      	b.n	800302c <__libc_init_array+0xc>
 800304e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003052:	4798      	blx	r3
 8003054:	3601      	adds	r6, #1
 8003056:	e7f2      	b.n	800303e <__libc_init_array+0x1e>
 8003058:	080056e4 	.word	0x080056e4
 800305c:	080056e4 	.word	0x080056e4
 8003060:	080056e4 	.word	0x080056e4
 8003064:	080056e8 	.word	0x080056e8

08003068 <__retarget_lock_init_recursive>:
 8003068:	4770      	bx	lr

0800306a <__retarget_lock_acquire_recursive>:
 800306a:	4770      	bx	lr

0800306c <__retarget_lock_release_recursive>:
 800306c:	4770      	bx	lr

0800306e <memset>:
 800306e:	4603      	mov	r3, r0
 8003070:	4402      	add	r2, r0
 8003072:	4293      	cmp	r3, r2
 8003074:	d100      	bne.n	8003078 <memset+0xa>
 8003076:	4770      	bx	lr
 8003078:	f803 1b01 	strb.w	r1, [r3], #1
 800307c:	e7f9      	b.n	8003072 <memset+0x4>
	...

08003080 <_free_r>:
 8003080:	b538      	push	{r3, r4, r5, lr}
 8003082:	4605      	mov	r5, r0
 8003084:	2900      	cmp	r1, #0
 8003086:	d040      	beq.n	800310a <_free_r+0x8a>
 8003088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800308c:	1f0c      	subs	r4, r1, #4
 800308e:	2b00      	cmp	r3, #0
 8003090:	bfb8      	it	lt
 8003092:	18e4      	addlt	r4, r4, r3
 8003094:	f000 fc66 	bl	8003964 <__malloc_lock>
 8003098:	4a1c      	ldr	r2, [pc, #112]	; (800310c <_free_r+0x8c>)
 800309a:	6813      	ldr	r3, [r2, #0]
 800309c:	b933      	cbnz	r3, 80030ac <_free_r+0x2c>
 800309e:	6063      	str	r3, [r4, #4]
 80030a0:	6014      	str	r4, [r2, #0]
 80030a2:	4628      	mov	r0, r5
 80030a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030a8:	f000 bc62 	b.w	8003970 <__malloc_unlock>
 80030ac:	42a3      	cmp	r3, r4
 80030ae:	d908      	bls.n	80030c2 <_free_r+0x42>
 80030b0:	6820      	ldr	r0, [r4, #0]
 80030b2:	1821      	adds	r1, r4, r0
 80030b4:	428b      	cmp	r3, r1
 80030b6:	bf01      	itttt	eq
 80030b8:	6819      	ldreq	r1, [r3, #0]
 80030ba:	685b      	ldreq	r3, [r3, #4]
 80030bc:	1809      	addeq	r1, r1, r0
 80030be:	6021      	streq	r1, [r4, #0]
 80030c0:	e7ed      	b.n	800309e <_free_r+0x1e>
 80030c2:	461a      	mov	r2, r3
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	b10b      	cbz	r3, 80030cc <_free_r+0x4c>
 80030c8:	42a3      	cmp	r3, r4
 80030ca:	d9fa      	bls.n	80030c2 <_free_r+0x42>
 80030cc:	6811      	ldr	r1, [r2, #0]
 80030ce:	1850      	adds	r0, r2, r1
 80030d0:	42a0      	cmp	r0, r4
 80030d2:	d10b      	bne.n	80030ec <_free_r+0x6c>
 80030d4:	6820      	ldr	r0, [r4, #0]
 80030d6:	4401      	add	r1, r0
 80030d8:	1850      	adds	r0, r2, r1
 80030da:	4283      	cmp	r3, r0
 80030dc:	6011      	str	r1, [r2, #0]
 80030de:	d1e0      	bne.n	80030a2 <_free_r+0x22>
 80030e0:	6818      	ldr	r0, [r3, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	4401      	add	r1, r0
 80030e6:	6011      	str	r1, [r2, #0]
 80030e8:	6053      	str	r3, [r2, #4]
 80030ea:	e7da      	b.n	80030a2 <_free_r+0x22>
 80030ec:	d902      	bls.n	80030f4 <_free_r+0x74>
 80030ee:	230c      	movs	r3, #12
 80030f0:	602b      	str	r3, [r5, #0]
 80030f2:	e7d6      	b.n	80030a2 <_free_r+0x22>
 80030f4:	6820      	ldr	r0, [r4, #0]
 80030f6:	1821      	adds	r1, r4, r0
 80030f8:	428b      	cmp	r3, r1
 80030fa:	bf01      	itttt	eq
 80030fc:	6819      	ldreq	r1, [r3, #0]
 80030fe:	685b      	ldreq	r3, [r3, #4]
 8003100:	1809      	addeq	r1, r1, r0
 8003102:	6021      	streq	r1, [r4, #0]
 8003104:	6063      	str	r3, [r4, #4]
 8003106:	6054      	str	r4, [r2, #4]
 8003108:	e7cb      	b.n	80030a2 <_free_r+0x22>
 800310a:	bd38      	pop	{r3, r4, r5, pc}
 800310c:	20000120 	.word	0x20000120

08003110 <sbrk_aligned>:
 8003110:	b570      	push	{r4, r5, r6, lr}
 8003112:	4e0e      	ldr	r6, [pc, #56]	; (800314c <sbrk_aligned+0x3c>)
 8003114:	460c      	mov	r4, r1
 8003116:	6831      	ldr	r1, [r6, #0]
 8003118:	4605      	mov	r5, r0
 800311a:	b911      	cbnz	r1, 8003122 <sbrk_aligned+0x12>
 800311c:	f000 f91a 	bl	8003354 <_sbrk_r>
 8003120:	6030      	str	r0, [r6, #0]
 8003122:	4621      	mov	r1, r4
 8003124:	4628      	mov	r0, r5
 8003126:	f000 f915 	bl	8003354 <_sbrk_r>
 800312a:	1c43      	adds	r3, r0, #1
 800312c:	d00a      	beq.n	8003144 <sbrk_aligned+0x34>
 800312e:	1cc4      	adds	r4, r0, #3
 8003130:	f024 0403 	bic.w	r4, r4, #3
 8003134:	42a0      	cmp	r0, r4
 8003136:	d007      	beq.n	8003148 <sbrk_aligned+0x38>
 8003138:	1a21      	subs	r1, r4, r0
 800313a:	4628      	mov	r0, r5
 800313c:	f000 f90a 	bl	8003354 <_sbrk_r>
 8003140:	3001      	adds	r0, #1
 8003142:	d101      	bne.n	8003148 <sbrk_aligned+0x38>
 8003144:	f04f 34ff 	mov.w	r4, #4294967295
 8003148:	4620      	mov	r0, r4
 800314a:	bd70      	pop	{r4, r5, r6, pc}
 800314c:	20000124 	.word	0x20000124

08003150 <_malloc_r>:
 8003150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003154:	1ccd      	adds	r5, r1, #3
 8003156:	f025 0503 	bic.w	r5, r5, #3
 800315a:	3508      	adds	r5, #8
 800315c:	2d0c      	cmp	r5, #12
 800315e:	bf38      	it	cc
 8003160:	250c      	movcc	r5, #12
 8003162:	2d00      	cmp	r5, #0
 8003164:	4607      	mov	r7, r0
 8003166:	db01      	blt.n	800316c <_malloc_r+0x1c>
 8003168:	42a9      	cmp	r1, r5
 800316a:	d905      	bls.n	8003178 <_malloc_r+0x28>
 800316c:	230c      	movs	r3, #12
 800316e:	2600      	movs	r6, #0
 8003170:	603b      	str	r3, [r7, #0]
 8003172:	4630      	mov	r0, r6
 8003174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003178:	4e2e      	ldr	r6, [pc, #184]	; (8003234 <_malloc_r+0xe4>)
 800317a:	f000 fbf3 	bl	8003964 <__malloc_lock>
 800317e:	6833      	ldr	r3, [r6, #0]
 8003180:	461c      	mov	r4, r3
 8003182:	bb34      	cbnz	r4, 80031d2 <_malloc_r+0x82>
 8003184:	4629      	mov	r1, r5
 8003186:	4638      	mov	r0, r7
 8003188:	f7ff ffc2 	bl	8003110 <sbrk_aligned>
 800318c:	1c43      	adds	r3, r0, #1
 800318e:	4604      	mov	r4, r0
 8003190:	d14d      	bne.n	800322e <_malloc_r+0xde>
 8003192:	6834      	ldr	r4, [r6, #0]
 8003194:	4626      	mov	r6, r4
 8003196:	2e00      	cmp	r6, #0
 8003198:	d140      	bne.n	800321c <_malloc_r+0xcc>
 800319a:	6823      	ldr	r3, [r4, #0]
 800319c:	4631      	mov	r1, r6
 800319e:	4638      	mov	r0, r7
 80031a0:	eb04 0803 	add.w	r8, r4, r3
 80031a4:	f000 f8d6 	bl	8003354 <_sbrk_r>
 80031a8:	4580      	cmp	r8, r0
 80031aa:	d13a      	bne.n	8003222 <_malloc_r+0xd2>
 80031ac:	6821      	ldr	r1, [r4, #0]
 80031ae:	3503      	adds	r5, #3
 80031b0:	1a6d      	subs	r5, r5, r1
 80031b2:	f025 0503 	bic.w	r5, r5, #3
 80031b6:	3508      	adds	r5, #8
 80031b8:	2d0c      	cmp	r5, #12
 80031ba:	bf38      	it	cc
 80031bc:	250c      	movcc	r5, #12
 80031be:	4638      	mov	r0, r7
 80031c0:	4629      	mov	r1, r5
 80031c2:	f7ff ffa5 	bl	8003110 <sbrk_aligned>
 80031c6:	3001      	adds	r0, #1
 80031c8:	d02b      	beq.n	8003222 <_malloc_r+0xd2>
 80031ca:	6823      	ldr	r3, [r4, #0]
 80031cc:	442b      	add	r3, r5
 80031ce:	6023      	str	r3, [r4, #0]
 80031d0:	e00e      	b.n	80031f0 <_malloc_r+0xa0>
 80031d2:	6822      	ldr	r2, [r4, #0]
 80031d4:	1b52      	subs	r2, r2, r5
 80031d6:	d41e      	bmi.n	8003216 <_malloc_r+0xc6>
 80031d8:	2a0b      	cmp	r2, #11
 80031da:	d916      	bls.n	800320a <_malloc_r+0xba>
 80031dc:	1961      	adds	r1, r4, r5
 80031de:	42a3      	cmp	r3, r4
 80031e0:	6025      	str	r5, [r4, #0]
 80031e2:	bf18      	it	ne
 80031e4:	6059      	strne	r1, [r3, #4]
 80031e6:	6863      	ldr	r3, [r4, #4]
 80031e8:	bf08      	it	eq
 80031ea:	6031      	streq	r1, [r6, #0]
 80031ec:	5162      	str	r2, [r4, r5]
 80031ee:	604b      	str	r3, [r1, #4]
 80031f0:	4638      	mov	r0, r7
 80031f2:	f104 060b 	add.w	r6, r4, #11
 80031f6:	f000 fbbb 	bl	8003970 <__malloc_unlock>
 80031fa:	f026 0607 	bic.w	r6, r6, #7
 80031fe:	1d23      	adds	r3, r4, #4
 8003200:	1af2      	subs	r2, r6, r3
 8003202:	d0b6      	beq.n	8003172 <_malloc_r+0x22>
 8003204:	1b9b      	subs	r3, r3, r6
 8003206:	50a3      	str	r3, [r4, r2]
 8003208:	e7b3      	b.n	8003172 <_malloc_r+0x22>
 800320a:	6862      	ldr	r2, [r4, #4]
 800320c:	42a3      	cmp	r3, r4
 800320e:	bf0c      	ite	eq
 8003210:	6032      	streq	r2, [r6, #0]
 8003212:	605a      	strne	r2, [r3, #4]
 8003214:	e7ec      	b.n	80031f0 <_malloc_r+0xa0>
 8003216:	4623      	mov	r3, r4
 8003218:	6864      	ldr	r4, [r4, #4]
 800321a:	e7b2      	b.n	8003182 <_malloc_r+0x32>
 800321c:	4634      	mov	r4, r6
 800321e:	6876      	ldr	r6, [r6, #4]
 8003220:	e7b9      	b.n	8003196 <_malloc_r+0x46>
 8003222:	230c      	movs	r3, #12
 8003224:	4638      	mov	r0, r7
 8003226:	603b      	str	r3, [r7, #0]
 8003228:	f000 fba2 	bl	8003970 <__malloc_unlock>
 800322c:	e7a1      	b.n	8003172 <_malloc_r+0x22>
 800322e:	6025      	str	r5, [r4, #0]
 8003230:	e7de      	b.n	80031f0 <_malloc_r+0xa0>
 8003232:	bf00      	nop
 8003234:	20000120 	.word	0x20000120

08003238 <iprintf>:
 8003238:	b40f      	push	{r0, r1, r2, r3}
 800323a:	4b0a      	ldr	r3, [pc, #40]	; (8003264 <iprintf+0x2c>)
 800323c:	b513      	push	{r0, r1, r4, lr}
 800323e:	681c      	ldr	r4, [r3, #0]
 8003240:	b124      	cbz	r4, 800324c <iprintf+0x14>
 8003242:	69a3      	ldr	r3, [r4, #24]
 8003244:	b913      	cbnz	r3, 800324c <iprintf+0x14>
 8003246:	4620      	mov	r0, r4
 8003248:	f7ff fe1e 	bl	8002e88 <__sinit>
 800324c:	ab05      	add	r3, sp, #20
 800324e:	4620      	mov	r0, r4
 8003250:	9a04      	ldr	r2, [sp, #16]
 8003252:	68a1      	ldr	r1, [r4, #8]
 8003254:	9301      	str	r3, [sp, #4]
 8003256:	f000 fd15 	bl	8003c84 <_vfiprintf_r>
 800325a:	b002      	add	sp, #8
 800325c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003260:	b004      	add	sp, #16
 8003262:	4770      	bx	lr
 8003264:	2000000c 	.word	0x2000000c

08003268 <_puts_r>:
 8003268:	b570      	push	{r4, r5, r6, lr}
 800326a:	460e      	mov	r6, r1
 800326c:	4605      	mov	r5, r0
 800326e:	b118      	cbz	r0, 8003278 <_puts_r+0x10>
 8003270:	6983      	ldr	r3, [r0, #24]
 8003272:	b90b      	cbnz	r3, 8003278 <_puts_r+0x10>
 8003274:	f7ff fe08 	bl	8002e88 <__sinit>
 8003278:	69ab      	ldr	r3, [r5, #24]
 800327a:	68ac      	ldr	r4, [r5, #8]
 800327c:	b913      	cbnz	r3, 8003284 <_puts_r+0x1c>
 800327e:	4628      	mov	r0, r5
 8003280:	f7ff fe02 	bl	8002e88 <__sinit>
 8003284:	4b2c      	ldr	r3, [pc, #176]	; (8003338 <_puts_r+0xd0>)
 8003286:	429c      	cmp	r4, r3
 8003288:	d120      	bne.n	80032cc <_puts_r+0x64>
 800328a:	686c      	ldr	r4, [r5, #4]
 800328c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800328e:	07db      	lsls	r3, r3, #31
 8003290:	d405      	bmi.n	800329e <_puts_r+0x36>
 8003292:	89a3      	ldrh	r3, [r4, #12]
 8003294:	0598      	lsls	r0, r3, #22
 8003296:	d402      	bmi.n	800329e <_puts_r+0x36>
 8003298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800329a:	f7ff fee6 	bl	800306a <__retarget_lock_acquire_recursive>
 800329e:	89a3      	ldrh	r3, [r4, #12]
 80032a0:	0719      	lsls	r1, r3, #28
 80032a2:	d51d      	bpl.n	80032e0 <_puts_r+0x78>
 80032a4:	6923      	ldr	r3, [r4, #16]
 80032a6:	b1db      	cbz	r3, 80032e0 <_puts_r+0x78>
 80032a8:	3e01      	subs	r6, #1
 80032aa:	68a3      	ldr	r3, [r4, #8]
 80032ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80032b0:	3b01      	subs	r3, #1
 80032b2:	60a3      	str	r3, [r4, #8]
 80032b4:	bb39      	cbnz	r1, 8003306 <_puts_r+0x9e>
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	da38      	bge.n	800332c <_puts_r+0xc4>
 80032ba:	4622      	mov	r2, r4
 80032bc:	210a      	movs	r1, #10
 80032be:	4628      	mov	r0, r5
 80032c0:	f000 f9ae 	bl	8003620 <__swbuf_r>
 80032c4:	3001      	adds	r0, #1
 80032c6:	d011      	beq.n	80032ec <_puts_r+0x84>
 80032c8:	250a      	movs	r5, #10
 80032ca:	e011      	b.n	80032f0 <_puts_r+0x88>
 80032cc:	4b1b      	ldr	r3, [pc, #108]	; (800333c <_puts_r+0xd4>)
 80032ce:	429c      	cmp	r4, r3
 80032d0:	d101      	bne.n	80032d6 <_puts_r+0x6e>
 80032d2:	68ac      	ldr	r4, [r5, #8]
 80032d4:	e7da      	b.n	800328c <_puts_r+0x24>
 80032d6:	4b1a      	ldr	r3, [pc, #104]	; (8003340 <_puts_r+0xd8>)
 80032d8:	429c      	cmp	r4, r3
 80032da:	bf08      	it	eq
 80032dc:	68ec      	ldreq	r4, [r5, #12]
 80032de:	e7d5      	b.n	800328c <_puts_r+0x24>
 80032e0:	4621      	mov	r1, r4
 80032e2:	4628      	mov	r0, r5
 80032e4:	f000 fa00 	bl	80036e8 <__swsetup_r>
 80032e8:	2800      	cmp	r0, #0
 80032ea:	d0dd      	beq.n	80032a8 <_puts_r+0x40>
 80032ec:	f04f 35ff 	mov.w	r5, #4294967295
 80032f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032f2:	07da      	lsls	r2, r3, #31
 80032f4:	d405      	bmi.n	8003302 <_puts_r+0x9a>
 80032f6:	89a3      	ldrh	r3, [r4, #12]
 80032f8:	059b      	lsls	r3, r3, #22
 80032fa:	d402      	bmi.n	8003302 <_puts_r+0x9a>
 80032fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032fe:	f7ff feb5 	bl	800306c <__retarget_lock_release_recursive>
 8003302:	4628      	mov	r0, r5
 8003304:	bd70      	pop	{r4, r5, r6, pc}
 8003306:	2b00      	cmp	r3, #0
 8003308:	da04      	bge.n	8003314 <_puts_r+0xac>
 800330a:	69a2      	ldr	r2, [r4, #24]
 800330c:	429a      	cmp	r2, r3
 800330e:	dc06      	bgt.n	800331e <_puts_r+0xb6>
 8003310:	290a      	cmp	r1, #10
 8003312:	d004      	beq.n	800331e <_puts_r+0xb6>
 8003314:	6823      	ldr	r3, [r4, #0]
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	6022      	str	r2, [r4, #0]
 800331a:	7019      	strb	r1, [r3, #0]
 800331c:	e7c5      	b.n	80032aa <_puts_r+0x42>
 800331e:	4622      	mov	r2, r4
 8003320:	4628      	mov	r0, r5
 8003322:	f000 f97d 	bl	8003620 <__swbuf_r>
 8003326:	3001      	adds	r0, #1
 8003328:	d1bf      	bne.n	80032aa <_puts_r+0x42>
 800332a:	e7df      	b.n	80032ec <_puts_r+0x84>
 800332c:	250a      	movs	r5, #10
 800332e:	6823      	ldr	r3, [r4, #0]
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	6022      	str	r2, [r4, #0]
 8003334:	701d      	strb	r5, [r3, #0]
 8003336:	e7db      	b.n	80032f0 <_puts_r+0x88>
 8003338:	08005550 	.word	0x08005550
 800333c:	08005570 	.word	0x08005570
 8003340:	08005530 	.word	0x08005530

08003344 <puts>:
 8003344:	4b02      	ldr	r3, [pc, #8]	; (8003350 <puts+0xc>)
 8003346:	4601      	mov	r1, r0
 8003348:	6818      	ldr	r0, [r3, #0]
 800334a:	f7ff bf8d 	b.w	8003268 <_puts_r>
 800334e:	bf00      	nop
 8003350:	2000000c 	.word	0x2000000c

08003354 <_sbrk_r>:
 8003354:	b538      	push	{r3, r4, r5, lr}
 8003356:	2300      	movs	r3, #0
 8003358:	4d05      	ldr	r5, [pc, #20]	; (8003370 <_sbrk_r+0x1c>)
 800335a:	4604      	mov	r4, r0
 800335c:	4608      	mov	r0, r1
 800335e:	602b      	str	r3, [r5, #0]
 8003360:	f7fd fe74 	bl	800104c <_sbrk>
 8003364:	1c43      	adds	r3, r0, #1
 8003366:	d102      	bne.n	800336e <_sbrk_r+0x1a>
 8003368:	682b      	ldr	r3, [r5, #0]
 800336a:	b103      	cbz	r3, 800336e <_sbrk_r+0x1a>
 800336c:	6023      	str	r3, [r4, #0]
 800336e:	bd38      	pop	{r3, r4, r5, pc}
 8003370:	20000128 	.word	0x20000128

08003374 <iscanf>:
 8003374:	b40f      	push	{r0, r1, r2, r3}
 8003376:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <iscanf+0x2c>)
 8003378:	b513      	push	{r0, r1, r4, lr}
 800337a:	681c      	ldr	r4, [r3, #0]
 800337c:	b124      	cbz	r4, 8003388 <iscanf+0x14>
 800337e:	69a3      	ldr	r3, [r4, #24]
 8003380:	b913      	cbnz	r3, 8003388 <iscanf+0x14>
 8003382:	4620      	mov	r0, r4
 8003384:	f7ff fd80 	bl	8002e88 <__sinit>
 8003388:	ab05      	add	r3, sp, #20
 800338a:	4620      	mov	r0, r4
 800338c:	9a04      	ldr	r2, [sp, #16]
 800338e:	6861      	ldr	r1, [r4, #4]
 8003390:	9301      	str	r3, [sp, #4]
 8003392:	f001 f8e3 	bl	800455c <_vfiscanf_r>
 8003396:	b002      	add	sp, #8
 8003398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800339c:	b004      	add	sp, #16
 800339e:	4770      	bx	lr
 80033a0:	2000000c 	.word	0x2000000c

080033a4 <setvbuf>:
 80033a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80033a8:	461d      	mov	r5, r3
 80033aa:	4b5d      	ldr	r3, [pc, #372]	; (8003520 <setvbuf+0x17c>)
 80033ac:	4604      	mov	r4, r0
 80033ae:	681f      	ldr	r7, [r3, #0]
 80033b0:	460e      	mov	r6, r1
 80033b2:	4690      	mov	r8, r2
 80033b4:	b127      	cbz	r7, 80033c0 <setvbuf+0x1c>
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	b913      	cbnz	r3, 80033c0 <setvbuf+0x1c>
 80033ba:	4638      	mov	r0, r7
 80033bc:	f7ff fd64 	bl	8002e88 <__sinit>
 80033c0:	4b58      	ldr	r3, [pc, #352]	; (8003524 <setvbuf+0x180>)
 80033c2:	429c      	cmp	r4, r3
 80033c4:	d167      	bne.n	8003496 <setvbuf+0xf2>
 80033c6:	687c      	ldr	r4, [r7, #4]
 80033c8:	f1b8 0f02 	cmp.w	r8, #2
 80033cc:	d006      	beq.n	80033dc <setvbuf+0x38>
 80033ce:	f1b8 0f01 	cmp.w	r8, #1
 80033d2:	f200 809f 	bhi.w	8003514 <setvbuf+0x170>
 80033d6:	2d00      	cmp	r5, #0
 80033d8:	f2c0 809c 	blt.w	8003514 <setvbuf+0x170>
 80033dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033de:	07db      	lsls	r3, r3, #31
 80033e0:	d405      	bmi.n	80033ee <setvbuf+0x4a>
 80033e2:	89a3      	ldrh	r3, [r4, #12]
 80033e4:	0598      	lsls	r0, r3, #22
 80033e6:	d402      	bmi.n	80033ee <setvbuf+0x4a>
 80033e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033ea:	f7ff fe3e 	bl	800306a <__retarget_lock_acquire_recursive>
 80033ee:	4621      	mov	r1, r4
 80033f0:	4638      	mov	r0, r7
 80033f2:	f7ff fca3 	bl	8002d3c <_fflush_r>
 80033f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033f8:	b141      	cbz	r1, 800340c <setvbuf+0x68>
 80033fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033fe:	4299      	cmp	r1, r3
 8003400:	d002      	beq.n	8003408 <setvbuf+0x64>
 8003402:	4638      	mov	r0, r7
 8003404:	f7ff fe3c 	bl	8003080 <_free_r>
 8003408:	2300      	movs	r3, #0
 800340a:	6363      	str	r3, [r4, #52]	; 0x34
 800340c:	2300      	movs	r3, #0
 800340e:	61a3      	str	r3, [r4, #24]
 8003410:	6063      	str	r3, [r4, #4]
 8003412:	89a3      	ldrh	r3, [r4, #12]
 8003414:	0619      	lsls	r1, r3, #24
 8003416:	d503      	bpl.n	8003420 <setvbuf+0x7c>
 8003418:	4638      	mov	r0, r7
 800341a:	6921      	ldr	r1, [r4, #16]
 800341c:	f7ff fe30 	bl	8003080 <_free_r>
 8003420:	89a3      	ldrh	r3, [r4, #12]
 8003422:	f1b8 0f02 	cmp.w	r8, #2
 8003426:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800342a:	f023 0303 	bic.w	r3, r3, #3
 800342e:	81a3      	strh	r3, [r4, #12]
 8003430:	d06c      	beq.n	800350c <setvbuf+0x168>
 8003432:	ab01      	add	r3, sp, #4
 8003434:	466a      	mov	r2, sp
 8003436:	4621      	mov	r1, r4
 8003438:	4638      	mov	r0, r7
 800343a:	f000 fa25 	bl	8003888 <__swhatbuf_r>
 800343e:	89a3      	ldrh	r3, [r4, #12]
 8003440:	4318      	orrs	r0, r3
 8003442:	81a0      	strh	r0, [r4, #12]
 8003444:	2d00      	cmp	r5, #0
 8003446:	d130      	bne.n	80034aa <setvbuf+0x106>
 8003448:	9d00      	ldr	r5, [sp, #0]
 800344a:	4628      	mov	r0, r5
 800344c:	f000 fa82 	bl	8003954 <malloc>
 8003450:	4606      	mov	r6, r0
 8003452:	2800      	cmp	r0, #0
 8003454:	d155      	bne.n	8003502 <setvbuf+0x15e>
 8003456:	f8dd 9000 	ldr.w	r9, [sp]
 800345a:	45a9      	cmp	r9, r5
 800345c:	d14a      	bne.n	80034f4 <setvbuf+0x150>
 800345e:	f04f 35ff 	mov.w	r5, #4294967295
 8003462:	2200      	movs	r2, #0
 8003464:	60a2      	str	r2, [r4, #8]
 8003466:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800346a:	6022      	str	r2, [r4, #0]
 800346c:	6122      	str	r2, [r4, #16]
 800346e:	2201      	movs	r2, #1
 8003470:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003474:	6162      	str	r2, [r4, #20]
 8003476:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003478:	f043 0302 	orr.w	r3, r3, #2
 800347c:	07d2      	lsls	r2, r2, #31
 800347e:	81a3      	strh	r3, [r4, #12]
 8003480:	d405      	bmi.n	800348e <setvbuf+0xea>
 8003482:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003486:	d102      	bne.n	800348e <setvbuf+0xea>
 8003488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800348a:	f7ff fdef 	bl	800306c <__retarget_lock_release_recursive>
 800348e:	4628      	mov	r0, r5
 8003490:	b003      	add	sp, #12
 8003492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003496:	4b24      	ldr	r3, [pc, #144]	; (8003528 <setvbuf+0x184>)
 8003498:	429c      	cmp	r4, r3
 800349a:	d101      	bne.n	80034a0 <setvbuf+0xfc>
 800349c:	68bc      	ldr	r4, [r7, #8]
 800349e:	e793      	b.n	80033c8 <setvbuf+0x24>
 80034a0:	4b22      	ldr	r3, [pc, #136]	; (800352c <setvbuf+0x188>)
 80034a2:	429c      	cmp	r4, r3
 80034a4:	bf08      	it	eq
 80034a6:	68fc      	ldreq	r4, [r7, #12]
 80034a8:	e78e      	b.n	80033c8 <setvbuf+0x24>
 80034aa:	2e00      	cmp	r6, #0
 80034ac:	d0cd      	beq.n	800344a <setvbuf+0xa6>
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	b913      	cbnz	r3, 80034b8 <setvbuf+0x114>
 80034b2:	4638      	mov	r0, r7
 80034b4:	f7ff fce8 	bl	8002e88 <__sinit>
 80034b8:	f1b8 0f01 	cmp.w	r8, #1
 80034bc:	bf08      	it	eq
 80034be:	89a3      	ldrheq	r3, [r4, #12]
 80034c0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80034c4:	bf04      	itt	eq
 80034c6:	f043 0301 	orreq.w	r3, r3, #1
 80034ca:	81a3      	strheq	r3, [r4, #12]
 80034cc:	89a2      	ldrh	r2, [r4, #12]
 80034ce:	6026      	str	r6, [r4, #0]
 80034d0:	f012 0308 	ands.w	r3, r2, #8
 80034d4:	d01c      	beq.n	8003510 <setvbuf+0x16c>
 80034d6:	07d3      	lsls	r3, r2, #31
 80034d8:	bf41      	itttt	mi
 80034da:	2300      	movmi	r3, #0
 80034dc:	426d      	negmi	r5, r5
 80034de:	60a3      	strmi	r3, [r4, #8]
 80034e0:	61a5      	strmi	r5, [r4, #24]
 80034e2:	bf58      	it	pl
 80034e4:	60a5      	strpl	r5, [r4, #8]
 80034e6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80034e8:	f015 0501 	ands.w	r5, r5, #1
 80034ec:	d115      	bne.n	800351a <setvbuf+0x176>
 80034ee:	f412 7f00 	tst.w	r2, #512	; 0x200
 80034f2:	e7c8      	b.n	8003486 <setvbuf+0xe2>
 80034f4:	4648      	mov	r0, r9
 80034f6:	f000 fa2d 	bl	8003954 <malloc>
 80034fa:	4606      	mov	r6, r0
 80034fc:	2800      	cmp	r0, #0
 80034fe:	d0ae      	beq.n	800345e <setvbuf+0xba>
 8003500:	464d      	mov	r5, r9
 8003502:	89a3      	ldrh	r3, [r4, #12]
 8003504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003508:	81a3      	strh	r3, [r4, #12]
 800350a:	e7d0      	b.n	80034ae <setvbuf+0x10a>
 800350c:	2500      	movs	r5, #0
 800350e:	e7a8      	b.n	8003462 <setvbuf+0xbe>
 8003510:	60a3      	str	r3, [r4, #8]
 8003512:	e7e8      	b.n	80034e6 <setvbuf+0x142>
 8003514:	f04f 35ff 	mov.w	r5, #4294967295
 8003518:	e7b9      	b.n	800348e <setvbuf+0xea>
 800351a:	2500      	movs	r5, #0
 800351c:	e7b7      	b.n	800348e <setvbuf+0xea>
 800351e:	bf00      	nop
 8003520:	2000000c 	.word	0x2000000c
 8003524:	08005550 	.word	0x08005550
 8003528:	08005570 	.word	0x08005570
 800352c:	08005530 	.word	0x08005530

08003530 <siprintf>:
 8003530:	b40e      	push	{r1, r2, r3}
 8003532:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003536:	b500      	push	{lr}
 8003538:	b09c      	sub	sp, #112	; 0x70
 800353a:	ab1d      	add	r3, sp, #116	; 0x74
 800353c:	9002      	str	r0, [sp, #8]
 800353e:	9006      	str	r0, [sp, #24]
 8003540:	9107      	str	r1, [sp, #28]
 8003542:	9104      	str	r1, [sp, #16]
 8003544:	4808      	ldr	r0, [pc, #32]	; (8003568 <siprintf+0x38>)
 8003546:	4909      	ldr	r1, [pc, #36]	; (800356c <siprintf+0x3c>)
 8003548:	f853 2b04 	ldr.w	r2, [r3], #4
 800354c:	9105      	str	r1, [sp, #20]
 800354e:	6800      	ldr	r0, [r0, #0]
 8003550:	a902      	add	r1, sp, #8
 8003552:	9301      	str	r3, [sp, #4]
 8003554:	f000 fa6e 	bl	8003a34 <_svfiprintf_r>
 8003558:	2200      	movs	r2, #0
 800355a:	9b02      	ldr	r3, [sp, #8]
 800355c:	701a      	strb	r2, [r3, #0]
 800355e:	b01c      	add	sp, #112	; 0x70
 8003560:	f85d eb04 	ldr.w	lr, [sp], #4
 8003564:	b003      	add	sp, #12
 8003566:	4770      	bx	lr
 8003568:	2000000c 	.word	0x2000000c
 800356c:	ffff0208 	.word	0xffff0208

08003570 <__sread>:
 8003570:	b510      	push	{r4, lr}
 8003572:	460c      	mov	r4, r1
 8003574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003578:	f001 f96a 	bl	8004850 <_read_r>
 800357c:	2800      	cmp	r0, #0
 800357e:	bfab      	itete	ge
 8003580:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003582:	89a3      	ldrhlt	r3, [r4, #12]
 8003584:	181b      	addge	r3, r3, r0
 8003586:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800358a:	bfac      	ite	ge
 800358c:	6563      	strge	r3, [r4, #84]	; 0x54
 800358e:	81a3      	strhlt	r3, [r4, #12]
 8003590:	bd10      	pop	{r4, pc}

08003592 <__swrite>:
 8003592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003596:	461f      	mov	r7, r3
 8003598:	898b      	ldrh	r3, [r1, #12]
 800359a:	4605      	mov	r5, r0
 800359c:	05db      	lsls	r3, r3, #23
 800359e:	460c      	mov	r4, r1
 80035a0:	4616      	mov	r6, r2
 80035a2:	d505      	bpl.n	80035b0 <__swrite+0x1e>
 80035a4:	2302      	movs	r3, #2
 80035a6:	2200      	movs	r2, #0
 80035a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035ac:	f000 f95a 	bl	8003864 <_lseek_r>
 80035b0:	89a3      	ldrh	r3, [r4, #12]
 80035b2:	4632      	mov	r2, r6
 80035b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035b8:	81a3      	strh	r3, [r4, #12]
 80035ba:	4628      	mov	r0, r5
 80035bc:	463b      	mov	r3, r7
 80035be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035c6:	f000 b87d 	b.w	80036c4 <_write_r>

080035ca <__sseek>:
 80035ca:	b510      	push	{r4, lr}
 80035cc:	460c      	mov	r4, r1
 80035ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035d2:	f000 f947 	bl	8003864 <_lseek_r>
 80035d6:	1c43      	adds	r3, r0, #1
 80035d8:	89a3      	ldrh	r3, [r4, #12]
 80035da:	bf15      	itete	ne
 80035dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80035de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80035e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80035e6:	81a3      	strheq	r3, [r4, #12]
 80035e8:	bf18      	it	ne
 80035ea:	81a3      	strhne	r3, [r4, #12]
 80035ec:	bd10      	pop	{r4, pc}

080035ee <__sclose>:
 80035ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035f2:	f000 b8e7 	b.w	80037c4 <_close_r>

080035f6 <strncmp>:
 80035f6:	4603      	mov	r3, r0
 80035f8:	b510      	push	{r4, lr}
 80035fa:	b172      	cbz	r2, 800361a <strncmp+0x24>
 80035fc:	3901      	subs	r1, #1
 80035fe:	1884      	adds	r4, r0, r2
 8003600:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003604:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003608:	4290      	cmp	r0, r2
 800360a:	d101      	bne.n	8003610 <strncmp+0x1a>
 800360c:	42a3      	cmp	r3, r4
 800360e:	d101      	bne.n	8003614 <strncmp+0x1e>
 8003610:	1a80      	subs	r0, r0, r2
 8003612:	bd10      	pop	{r4, pc}
 8003614:	2800      	cmp	r0, #0
 8003616:	d1f3      	bne.n	8003600 <strncmp+0xa>
 8003618:	e7fa      	b.n	8003610 <strncmp+0x1a>
 800361a:	4610      	mov	r0, r2
 800361c:	e7f9      	b.n	8003612 <strncmp+0x1c>
	...

08003620 <__swbuf_r>:
 8003620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003622:	460e      	mov	r6, r1
 8003624:	4614      	mov	r4, r2
 8003626:	4605      	mov	r5, r0
 8003628:	b118      	cbz	r0, 8003632 <__swbuf_r+0x12>
 800362a:	6983      	ldr	r3, [r0, #24]
 800362c:	b90b      	cbnz	r3, 8003632 <__swbuf_r+0x12>
 800362e:	f7ff fc2b 	bl	8002e88 <__sinit>
 8003632:	4b21      	ldr	r3, [pc, #132]	; (80036b8 <__swbuf_r+0x98>)
 8003634:	429c      	cmp	r4, r3
 8003636:	d12b      	bne.n	8003690 <__swbuf_r+0x70>
 8003638:	686c      	ldr	r4, [r5, #4]
 800363a:	69a3      	ldr	r3, [r4, #24]
 800363c:	60a3      	str	r3, [r4, #8]
 800363e:	89a3      	ldrh	r3, [r4, #12]
 8003640:	071a      	lsls	r2, r3, #28
 8003642:	d52f      	bpl.n	80036a4 <__swbuf_r+0x84>
 8003644:	6923      	ldr	r3, [r4, #16]
 8003646:	b36b      	cbz	r3, 80036a4 <__swbuf_r+0x84>
 8003648:	6923      	ldr	r3, [r4, #16]
 800364a:	6820      	ldr	r0, [r4, #0]
 800364c:	b2f6      	uxtb	r6, r6
 800364e:	1ac0      	subs	r0, r0, r3
 8003650:	6963      	ldr	r3, [r4, #20]
 8003652:	4637      	mov	r7, r6
 8003654:	4283      	cmp	r3, r0
 8003656:	dc04      	bgt.n	8003662 <__swbuf_r+0x42>
 8003658:	4621      	mov	r1, r4
 800365a:	4628      	mov	r0, r5
 800365c:	f7ff fb6e 	bl	8002d3c <_fflush_r>
 8003660:	bb30      	cbnz	r0, 80036b0 <__swbuf_r+0x90>
 8003662:	68a3      	ldr	r3, [r4, #8]
 8003664:	3001      	adds	r0, #1
 8003666:	3b01      	subs	r3, #1
 8003668:	60a3      	str	r3, [r4, #8]
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	6022      	str	r2, [r4, #0]
 8003670:	701e      	strb	r6, [r3, #0]
 8003672:	6963      	ldr	r3, [r4, #20]
 8003674:	4283      	cmp	r3, r0
 8003676:	d004      	beq.n	8003682 <__swbuf_r+0x62>
 8003678:	89a3      	ldrh	r3, [r4, #12]
 800367a:	07db      	lsls	r3, r3, #31
 800367c:	d506      	bpl.n	800368c <__swbuf_r+0x6c>
 800367e:	2e0a      	cmp	r6, #10
 8003680:	d104      	bne.n	800368c <__swbuf_r+0x6c>
 8003682:	4621      	mov	r1, r4
 8003684:	4628      	mov	r0, r5
 8003686:	f7ff fb59 	bl	8002d3c <_fflush_r>
 800368a:	b988      	cbnz	r0, 80036b0 <__swbuf_r+0x90>
 800368c:	4638      	mov	r0, r7
 800368e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003690:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <__swbuf_r+0x9c>)
 8003692:	429c      	cmp	r4, r3
 8003694:	d101      	bne.n	800369a <__swbuf_r+0x7a>
 8003696:	68ac      	ldr	r4, [r5, #8]
 8003698:	e7cf      	b.n	800363a <__swbuf_r+0x1a>
 800369a:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <__swbuf_r+0xa0>)
 800369c:	429c      	cmp	r4, r3
 800369e:	bf08      	it	eq
 80036a0:	68ec      	ldreq	r4, [r5, #12]
 80036a2:	e7ca      	b.n	800363a <__swbuf_r+0x1a>
 80036a4:	4621      	mov	r1, r4
 80036a6:	4628      	mov	r0, r5
 80036a8:	f000 f81e 	bl	80036e8 <__swsetup_r>
 80036ac:	2800      	cmp	r0, #0
 80036ae:	d0cb      	beq.n	8003648 <__swbuf_r+0x28>
 80036b0:	f04f 37ff 	mov.w	r7, #4294967295
 80036b4:	e7ea      	b.n	800368c <__swbuf_r+0x6c>
 80036b6:	bf00      	nop
 80036b8:	08005550 	.word	0x08005550
 80036bc:	08005570 	.word	0x08005570
 80036c0:	08005530 	.word	0x08005530

080036c4 <_write_r>:
 80036c4:	b538      	push	{r3, r4, r5, lr}
 80036c6:	4604      	mov	r4, r0
 80036c8:	4608      	mov	r0, r1
 80036ca:	4611      	mov	r1, r2
 80036cc:	2200      	movs	r2, #0
 80036ce:	4d05      	ldr	r5, [pc, #20]	; (80036e4 <_write_r+0x20>)
 80036d0:	602a      	str	r2, [r5, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	f7fd fc6d 	bl	8000fb2 <_write>
 80036d8:	1c43      	adds	r3, r0, #1
 80036da:	d102      	bne.n	80036e2 <_write_r+0x1e>
 80036dc:	682b      	ldr	r3, [r5, #0]
 80036de:	b103      	cbz	r3, 80036e2 <_write_r+0x1e>
 80036e0:	6023      	str	r3, [r4, #0]
 80036e2:	bd38      	pop	{r3, r4, r5, pc}
 80036e4:	20000128 	.word	0x20000128

080036e8 <__swsetup_r>:
 80036e8:	4b32      	ldr	r3, [pc, #200]	; (80037b4 <__swsetup_r+0xcc>)
 80036ea:	b570      	push	{r4, r5, r6, lr}
 80036ec:	681d      	ldr	r5, [r3, #0]
 80036ee:	4606      	mov	r6, r0
 80036f0:	460c      	mov	r4, r1
 80036f2:	b125      	cbz	r5, 80036fe <__swsetup_r+0x16>
 80036f4:	69ab      	ldr	r3, [r5, #24]
 80036f6:	b913      	cbnz	r3, 80036fe <__swsetup_r+0x16>
 80036f8:	4628      	mov	r0, r5
 80036fa:	f7ff fbc5 	bl	8002e88 <__sinit>
 80036fe:	4b2e      	ldr	r3, [pc, #184]	; (80037b8 <__swsetup_r+0xd0>)
 8003700:	429c      	cmp	r4, r3
 8003702:	d10f      	bne.n	8003724 <__swsetup_r+0x3c>
 8003704:	686c      	ldr	r4, [r5, #4]
 8003706:	89a3      	ldrh	r3, [r4, #12]
 8003708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800370c:	0719      	lsls	r1, r3, #28
 800370e:	d42c      	bmi.n	800376a <__swsetup_r+0x82>
 8003710:	06dd      	lsls	r5, r3, #27
 8003712:	d411      	bmi.n	8003738 <__swsetup_r+0x50>
 8003714:	2309      	movs	r3, #9
 8003716:	6033      	str	r3, [r6, #0]
 8003718:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800371c:	f04f 30ff 	mov.w	r0, #4294967295
 8003720:	81a3      	strh	r3, [r4, #12]
 8003722:	e03e      	b.n	80037a2 <__swsetup_r+0xba>
 8003724:	4b25      	ldr	r3, [pc, #148]	; (80037bc <__swsetup_r+0xd4>)
 8003726:	429c      	cmp	r4, r3
 8003728:	d101      	bne.n	800372e <__swsetup_r+0x46>
 800372a:	68ac      	ldr	r4, [r5, #8]
 800372c:	e7eb      	b.n	8003706 <__swsetup_r+0x1e>
 800372e:	4b24      	ldr	r3, [pc, #144]	; (80037c0 <__swsetup_r+0xd8>)
 8003730:	429c      	cmp	r4, r3
 8003732:	bf08      	it	eq
 8003734:	68ec      	ldreq	r4, [r5, #12]
 8003736:	e7e6      	b.n	8003706 <__swsetup_r+0x1e>
 8003738:	0758      	lsls	r0, r3, #29
 800373a:	d512      	bpl.n	8003762 <__swsetup_r+0x7a>
 800373c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800373e:	b141      	cbz	r1, 8003752 <__swsetup_r+0x6a>
 8003740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003744:	4299      	cmp	r1, r3
 8003746:	d002      	beq.n	800374e <__swsetup_r+0x66>
 8003748:	4630      	mov	r0, r6
 800374a:	f7ff fc99 	bl	8003080 <_free_r>
 800374e:	2300      	movs	r3, #0
 8003750:	6363      	str	r3, [r4, #52]	; 0x34
 8003752:	89a3      	ldrh	r3, [r4, #12]
 8003754:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003758:	81a3      	strh	r3, [r4, #12]
 800375a:	2300      	movs	r3, #0
 800375c:	6063      	str	r3, [r4, #4]
 800375e:	6923      	ldr	r3, [r4, #16]
 8003760:	6023      	str	r3, [r4, #0]
 8003762:	89a3      	ldrh	r3, [r4, #12]
 8003764:	f043 0308 	orr.w	r3, r3, #8
 8003768:	81a3      	strh	r3, [r4, #12]
 800376a:	6923      	ldr	r3, [r4, #16]
 800376c:	b94b      	cbnz	r3, 8003782 <__swsetup_r+0x9a>
 800376e:	89a3      	ldrh	r3, [r4, #12]
 8003770:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003778:	d003      	beq.n	8003782 <__swsetup_r+0x9a>
 800377a:	4621      	mov	r1, r4
 800377c:	4630      	mov	r0, r6
 800377e:	f000 f8a9 	bl	80038d4 <__smakebuf_r>
 8003782:	89a0      	ldrh	r0, [r4, #12]
 8003784:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003788:	f010 0301 	ands.w	r3, r0, #1
 800378c:	d00a      	beq.n	80037a4 <__swsetup_r+0xbc>
 800378e:	2300      	movs	r3, #0
 8003790:	60a3      	str	r3, [r4, #8]
 8003792:	6963      	ldr	r3, [r4, #20]
 8003794:	425b      	negs	r3, r3
 8003796:	61a3      	str	r3, [r4, #24]
 8003798:	6923      	ldr	r3, [r4, #16]
 800379a:	b943      	cbnz	r3, 80037ae <__swsetup_r+0xc6>
 800379c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80037a0:	d1ba      	bne.n	8003718 <__swsetup_r+0x30>
 80037a2:	bd70      	pop	{r4, r5, r6, pc}
 80037a4:	0781      	lsls	r1, r0, #30
 80037a6:	bf58      	it	pl
 80037a8:	6963      	ldrpl	r3, [r4, #20]
 80037aa:	60a3      	str	r3, [r4, #8]
 80037ac:	e7f4      	b.n	8003798 <__swsetup_r+0xb0>
 80037ae:	2000      	movs	r0, #0
 80037b0:	e7f7      	b.n	80037a2 <__swsetup_r+0xba>
 80037b2:	bf00      	nop
 80037b4:	2000000c 	.word	0x2000000c
 80037b8:	08005550 	.word	0x08005550
 80037bc:	08005570 	.word	0x08005570
 80037c0:	08005530 	.word	0x08005530

080037c4 <_close_r>:
 80037c4:	b538      	push	{r3, r4, r5, lr}
 80037c6:	2300      	movs	r3, #0
 80037c8:	4d05      	ldr	r5, [pc, #20]	; (80037e0 <_close_r+0x1c>)
 80037ca:	4604      	mov	r4, r0
 80037cc:	4608      	mov	r0, r1
 80037ce:	602b      	str	r3, [r5, #0]
 80037d0:	f7fd fc0b 	bl	8000fea <_close>
 80037d4:	1c43      	adds	r3, r0, #1
 80037d6:	d102      	bne.n	80037de <_close_r+0x1a>
 80037d8:	682b      	ldr	r3, [r5, #0]
 80037da:	b103      	cbz	r3, 80037de <_close_r+0x1a>
 80037dc:	6023      	str	r3, [r4, #0]
 80037de:	bd38      	pop	{r3, r4, r5, pc}
 80037e0:	20000128 	.word	0x20000128

080037e4 <_getc_r>:
 80037e4:	b538      	push	{r3, r4, r5, lr}
 80037e6:	460c      	mov	r4, r1
 80037e8:	4605      	mov	r5, r0
 80037ea:	b118      	cbz	r0, 80037f4 <_getc_r+0x10>
 80037ec:	6983      	ldr	r3, [r0, #24]
 80037ee:	b90b      	cbnz	r3, 80037f4 <_getc_r+0x10>
 80037f0:	f7ff fb4a 	bl	8002e88 <__sinit>
 80037f4:	4b18      	ldr	r3, [pc, #96]	; (8003858 <_getc_r+0x74>)
 80037f6:	429c      	cmp	r4, r3
 80037f8:	d11e      	bne.n	8003838 <_getc_r+0x54>
 80037fa:	686c      	ldr	r4, [r5, #4]
 80037fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037fe:	07d8      	lsls	r0, r3, #31
 8003800:	d405      	bmi.n	800380e <_getc_r+0x2a>
 8003802:	89a3      	ldrh	r3, [r4, #12]
 8003804:	0599      	lsls	r1, r3, #22
 8003806:	d402      	bmi.n	800380e <_getc_r+0x2a>
 8003808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800380a:	f7ff fc2e 	bl	800306a <__retarget_lock_acquire_recursive>
 800380e:	6863      	ldr	r3, [r4, #4]
 8003810:	3b01      	subs	r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	6063      	str	r3, [r4, #4]
 8003816:	da19      	bge.n	800384c <_getc_r+0x68>
 8003818:	4628      	mov	r0, r5
 800381a:	4621      	mov	r1, r4
 800381c:	f001 f8c0 	bl	80049a0 <__srget_r>
 8003820:	4605      	mov	r5, r0
 8003822:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003824:	07da      	lsls	r2, r3, #31
 8003826:	d405      	bmi.n	8003834 <_getc_r+0x50>
 8003828:	89a3      	ldrh	r3, [r4, #12]
 800382a:	059b      	lsls	r3, r3, #22
 800382c:	d402      	bmi.n	8003834 <_getc_r+0x50>
 800382e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003830:	f7ff fc1c 	bl	800306c <__retarget_lock_release_recursive>
 8003834:	4628      	mov	r0, r5
 8003836:	bd38      	pop	{r3, r4, r5, pc}
 8003838:	4b08      	ldr	r3, [pc, #32]	; (800385c <_getc_r+0x78>)
 800383a:	429c      	cmp	r4, r3
 800383c:	d101      	bne.n	8003842 <_getc_r+0x5e>
 800383e:	68ac      	ldr	r4, [r5, #8]
 8003840:	e7dc      	b.n	80037fc <_getc_r+0x18>
 8003842:	4b07      	ldr	r3, [pc, #28]	; (8003860 <_getc_r+0x7c>)
 8003844:	429c      	cmp	r4, r3
 8003846:	bf08      	it	eq
 8003848:	68ec      	ldreq	r4, [r5, #12]
 800384a:	e7d7      	b.n	80037fc <_getc_r+0x18>
 800384c:	6823      	ldr	r3, [r4, #0]
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	6022      	str	r2, [r4, #0]
 8003852:	781d      	ldrb	r5, [r3, #0]
 8003854:	e7e5      	b.n	8003822 <_getc_r+0x3e>
 8003856:	bf00      	nop
 8003858:	08005550 	.word	0x08005550
 800385c:	08005570 	.word	0x08005570
 8003860:	08005530 	.word	0x08005530

08003864 <_lseek_r>:
 8003864:	b538      	push	{r3, r4, r5, lr}
 8003866:	4604      	mov	r4, r0
 8003868:	4608      	mov	r0, r1
 800386a:	4611      	mov	r1, r2
 800386c:	2200      	movs	r2, #0
 800386e:	4d05      	ldr	r5, [pc, #20]	; (8003884 <_lseek_r+0x20>)
 8003870:	602a      	str	r2, [r5, #0]
 8003872:	461a      	mov	r2, r3
 8003874:	f7fd fbdd 	bl	8001032 <_lseek>
 8003878:	1c43      	adds	r3, r0, #1
 800387a:	d102      	bne.n	8003882 <_lseek_r+0x1e>
 800387c:	682b      	ldr	r3, [r5, #0]
 800387e:	b103      	cbz	r3, 8003882 <_lseek_r+0x1e>
 8003880:	6023      	str	r3, [r4, #0]
 8003882:	bd38      	pop	{r3, r4, r5, pc}
 8003884:	20000128 	.word	0x20000128

08003888 <__swhatbuf_r>:
 8003888:	b570      	push	{r4, r5, r6, lr}
 800388a:	460e      	mov	r6, r1
 800388c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003890:	4614      	mov	r4, r2
 8003892:	2900      	cmp	r1, #0
 8003894:	461d      	mov	r5, r3
 8003896:	b096      	sub	sp, #88	; 0x58
 8003898:	da08      	bge.n	80038ac <__swhatbuf_r+0x24>
 800389a:	2200      	movs	r2, #0
 800389c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80038a0:	602a      	str	r2, [r5, #0]
 80038a2:	061a      	lsls	r2, r3, #24
 80038a4:	d410      	bmi.n	80038c8 <__swhatbuf_r+0x40>
 80038a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038aa:	e00e      	b.n	80038ca <__swhatbuf_r+0x42>
 80038ac:	466a      	mov	r2, sp
 80038ae:	f001 fa9d 	bl	8004dec <_fstat_r>
 80038b2:	2800      	cmp	r0, #0
 80038b4:	dbf1      	blt.n	800389a <__swhatbuf_r+0x12>
 80038b6:	9a01      	ldr	r2, [sp, #4]
 80038b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80038bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80038c0:	425a      	negs	r2, r3
 80038c2:	415a      	adcs	r2, r3
 80038c4:	602a      	str	r2, [r5, #0]
 80038c6:	e7ee      	b.n	80038a6 <__swhatbuf_r+0x1e>
 80038c8:	2340      	movs	r3, #64	; 0x40
 80038ca:	2000      	movs	r0, #0
 80038cc:	6023      	str	r3, [r4, #0]
 80038ce:	b016      	add	sp, #88	; 0x58
 80038d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080038d4 <__smakebuf_r>:
 80038d4:	898b      	ldrh	r3, [r1, #12]
 80038d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80038d8:	079d      	lsls	r5, r3, #30
 80038da:	4606      	mov	r6, r0
 80038dc:	460c      	mov	r4, r1
 80038de:	d507      	bpl.n	80038f0 <__smakebuf_r+0x1c>
 80038e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80038e4:	6023      	str	r3, [r4, #0]
 80038e6:	6123      	str	r3, [r4, #16]
 80038e8:	2301      	movs	r3, #1
 80038ea:	6163      	str	r3, [r4, #20]
 80038ec:	b002      	add	sp, #8
 80038ee:	bd70      	pop	{r4, r5, r6, pc}
 80038f0:	466a      	mov	r2, sp
 80038f2:	ab01      	add	r3, sp, #4
 80038f4:	f7ff ffc8 	bl	8003888 <__swhatbuf_r>
 80038f8:	9900      	ldr	r1, [sp, #0]
 80038fa:	4605      	mov	r5, r0
 80038fc:	4630      	mov	r0, r6
 80038fe:	f7ff fc27 	bl	8003150 <_malloc_r>
 8003902:	b948      	cbnz	r0, 8003918 <__smakebuf_r+0x44>
 8003904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003908:	059a      	lsls	r2, r3, #22
 800390a:	d4ef      	bmi.n	80038ec <__smakebuf_r+0x18>
 800390c:	f023 0303 	bic.w	r3, r3, #3
 8003910:	f043 0302 	orr.w	r3, r3, #2
 8003914:	81a3      	strh	r3, [r4, #12]
 8003916:	e7e3      	b.n	80038e0 <__smakebuf_r+0xc>
 8003918:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <__smakebuf_r+0x7c>)
 800391a:	62b3      	str	r3, [r6, #40]	; 0x28
 800391c:	89a3      	ldrh	r3, [r4, #12]
 800391e:	6020      	str	r0, [r4, #0]
 8003920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003924:	81a3      	strh	r3, [r4, #12]
 8003926:	9b00      	ldr	r3, [sp, #0]
 8003928:	6120      	str	r0, [r4, #16]
 800392a:	6163      	str	r3, [r4, #20]
 800392c:	9b01      	ldr	r3, [sp, #4]
 800392e:	b15b      	cbz	r3, 8003948 <__smakebuf_r+0x74>
 8003930:	4630      	mov	r0, r6
 8003932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003936:	f001 fa6b 	bl	8004e10 <_isatty_r>
 800393a:	b128      	cbz	r0, 8003948 <__smakebuf_r+0x74>
 800393c:	89a3      	ldrh	r3, [r4, #12]
 800393e:	f023 0303 	bic.w	r3, r3, #3
 8003942:	f043 0301 	orr.w	r3, r3, #1
 8003946:	81a3      	strh	r3, [r4, #12]
 8003948:	89a0      	ldrh	r0, [r4, #12]
 800394a:	4305      	orrs	r5, r0
 800394c:	81a5      	strh	r5, [r4, #12]
 800394e:	e7cd      	b.n	80038ec <__smakebuf_r+0x18>
 8003950:	08002e21 	.word	0x08002e21

08003954 <malloc>:
 8003954:	4b02      	ldr	r3, [pc, #8]	; (8003960 <malloc+0xc>)
 8003956:	4601      	mov	r1, r0
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	f7ff bbf9 	b.w	8003150 <_malloc_r>
 800395e:	bf00      	nop
 8003960:	2000000c 	.word	0x2000000c

08003964 <__malloc_lock>:
 8003964:	4801      	ldr	r0, [pc, #4]	; (800396c <__malloc_lock+0x8>)
 8003966:	f7ff bb80 	b.w	800306a <__retarget_lock_acquire_recursive>
 800396a:	bf00      	nop
 800396c:	2000011c 	.word	0x2000011c

08003970 <__malloc_unlock>:
 8003970:	4801      	ldr	r0, [pc, #4]	; (8003978 <__malloc_unlock+0x8>)
 8003972:	f7ff bb7b 	b.w	800306c <__retarget_lock_release_recursive>
 8003976:	bf00      	nop
 8003978:	2000011c 	.word	0x2000011c

0800397c <__ssputs_r>:
 800397c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003980:	688e      	ldr	r6, [r1, #8]
 8003982:	4682      	mov	sl, r0
 8003984:	429e      	cmp	r6, r3
 8003986:	460c      	mov	r4, r1
 8003988:	4690      	mov	r8, r2
 800398a:	461f      	mov	r7, r3
 800398c:	d838      	bhi.n	8003a00 <__ssputs_r+0x84>
 800398e:	898a      	ldrh	r2, [r1, #12]
 8003990:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003994:	d032      	beq.n	80039fc <__ssputs_r+0x80>
 8003996:	6825      	ldr	r5, [r4, #0]
 8003998:	6909      	ldr	r1, [r1, #16]
 800399a:	3301      	adds	r3, #1
 800399c:	eba5 0901 	sub.w	r9, r5, r1
 80039a0:	6965      	ldr	r5, [r4, #20]
 80039a2:	444b      	add	r3, r9
 80039a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039ac:	106d      	asrs	r5, r5, #1
 80039ae:	429d      	cmp	r5, r3
 80039b0:	bf38      	it	cc
 80039b2:	461d      	movcc	r5, r3
 80039b4:	0553      	lsls	r3, r2, #21
 80039b6:	d531      	bpl.n	8003a1c <__ssputs_r+0xa0>
 80039b8:	4629      	mov	r1, r5
 80039ba:	f7ff fbc9 	bl	8003150 <_malloc_r>
 80039be:	4606      	mov	r6, r0
 80039c0:	b950      	cbnz	r0, 80039d8 <__ssputs_r+0x5c>
 80039c2:	230c      	movs	r3, #12
 80039c4:	f04f 30ff 	mov.w	r0, #4294967295
 80039c8:	f8ca 3000 	str.w	r3, [sl]
 80039cc:	89a3      	ldrh	r3, [r4, #12]
 80039ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039d2:	81a3      	strh	r3, [r4, #12]
 80039d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039d8:	464a      	mov	r2, r9
 80039da:	6921      	ldr	r1, [r4, #16]
 80039dc:	f001 fa36 	bl	8004e4c <memcpy>
 80039e0:	89a3      	ldrh	r3, [r4, #12]
 80039e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80039e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ea:	81a3      	strh	r3, [r4, #12]
 80039ec:	6126      	str	r6, [r4, #16]
 80039ee:	444e      	add	r6, r9
 80039f0:	6026      	str	r6, [r4, #0]
 80039f2:	463e      	mov	r6, r7
 80039f4:	6165      	str	r5, [r4, #20]
 80039f6:	eba5 0509 	sub.w	r5, r5, r9
 80039fa:	60a5      	str	r5, [r4, #8]
 80039fc:	42be      	cmp	r6, r7
 80039fe:	d900      	bls.n	8003a02 <__ssputs_r+0x86>
 8003a00:	463e      	mov	r6, r7
 8003a02:	4632      	mov	r2, r6
 8003a04:	4641      	mov	r1, r8
 8003a06:	6820      	ldr	r0, [r4, #0]
 8003a08:	f001 fa2e 	bl	8004e68 <memmove>
 8003a0c:	68a3      	ldr	r3, [r4, #8]
 8003a0e:	2000      	movs	r0, #0
 8003a10:	1b9b      	subs	r3, r3, r6
 8003a12:	60a3      	str	r3, [r4, #8]
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	4433      	add	r3, r6
 8003a18:	6023      	str	r3, [r4, #0]
 8003a1a:	e7db      	b.n	80039d4 <__ssputs_r+0x58>
 8003a1c:	462a      	mov	r2, r5
 8003a1e:	f001 fa3d 	bl	8004e9c <_realloc_r>
 8003a22:	4606      	mov	r6, r0
 8003a24:	2800      	cmp	r0, #0
 8003a26:	d1e1      	bne.n	80039ec <__ssputs_r+0x70>
 8003a28:	4650      	mov	r0, sl
 8003a2a:	6921      	ldr	r1, [r4, #16]
 8003a2c:	f7ff fb28 	bl	8003080 <_free_r>
 8003a30:	e7c7      	b.n	80039c2 <__ssputs_r+0x46>
	...

08003a34 <_svfiprintf_r>:
 8003a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a38:	4698      	mov	r8, r3
 8003a3a:	898b      	ldrh	r3, [r1, #12]
 8003a3c:	4607      	mov	r7, r0
 8003a3e:	061b      	lsls	r3, r3, #24
 8003a40:	460d      	mov	r5, r1
 8003a42:	4614      	mov	r4, r2
 8003a44:	b09d      	sub	sp, #116	; 0x74
 8003a46:	d50e      	bpl.n	8003a66 <_svfiprintf_r+0x32>
 8003a48:	690b      	ldr	r3, [r1, #16]
 8003a4a:	b963      	cbnz	r3, 8003a66 <_svfiprintf_r+0x32>
 8003a4c:	2140      	movs	r1, #64	; 0x40
 8003a4e:	f7ff fb7f 	bl	8003150 <_malloc_r>
 8003a52:	6028      	str	r0, [r5, #0]
 8003a54:	6128      	str	r0, [r5, #16]
 8003a56:	b920      	cbnz	r0, 8003a62 <_svfiprintf_r+0x2e>
 8003a58:	230c      	movs	r3, #12
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a60:	e0d1      	b.n	8003c06 <_svfiprintf_r+0x1d2>
 8003a62:	2340      	movs	r3, #64	; 0x40
 8003a64:	616b      	str	r3, [r5, #20]
 8003a66:	2300      	movs	r3, #0
 8003a68:	9309      	str	r3, [sp, #36]	; 0x24
 8003a6a:	2320      	movs	r3, #32
 8003a6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a70:	2330      	movs	r3, #48	; 0x30
 8003a72:	f04f 0901 	mov.w	r9, #1
 8003a76:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003c20 <_svfiprintf_r+0x1ec>
 8003a7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a82:	4623      	mov	r3, r4
 8003a84:	469a      	mov	sl, r3
 8003a86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a8a:	b10a      	cbz	r2, 8003a90 <_svfiprintf_r+0x5c>
 8003a8c:	2a25      	cmp	r2, #37	; 0x25
 8003a8e:	d1f9      	bne.n	8003a84 <_svfiprintf_r+0x50>
 8003a90:	ebba 0b04 	subs.w	fp, sl, r4
 8003a94:	d00b      	beq.n	8003aae <_svfiprintf_r+0x7a>
 8003a96:	465b      	mov	r3, fp
 8003a98:	4622      	mov	r2, r4
 8003a9a:	4629      	mov	r1, r5
 8003a9c:	4638      	mov	r0, r7
 8003a9e:	f7ff ff6d 	bl	800397c <__ssputs_r>
 8003aa2:	3001      	adds	r0, #1
 8003aa4:	f000 80aa 	beq.w	8003bfc <_svfiprintf_r+0x1c8>
 8003aa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003aaa:	445a      	add	r2, fp
 8003aac:	9209      	str	r2, [sp, #36]	; 0x24
 8003aae:	f89a 3000 	ldrb.w	r3, [sl]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 80a2 	beq.w	8003bfc <_svfiprintf_r+0x1c8>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f04f 32ff 	mov.w	r2, #4294967295
 8003abe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ac2:	f10a 0a01 	add.w	sl, sl, #1
 8003ac6:	9304      	str	r3, [sp, #16]
 8003ac8:	9307      	str	r3, [sp, #28]
 8003aca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ace:	931a      	str	r3, [sp, #104]	; 0x68
 8003ad0:	4654      	mov	r4, sl
 8003ad2:	2205      	movs	r2, #5
 8003ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ad8:	4851      	ldr	r0, [pc, #324]	; (8003c20 <_svfiprintf_r+0x1ec>)
 8003ada:	f001 f9a9 	bl	8004e30 <memchr>
 8003ade:	9a04      	ldr	r2, [sp, #16]
 8003ae0:	b9d8      	cbnz	r0, 8003b1a <_svfiprintf_r+0xe6>
 8003ae2:	06d0      	lsls	r0, r2, #27
 8003ae4:	bf44      	itt	mi
 8003ae6:	2320      	movmi	r3, #32
 8003ae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003aec:	0711      	lsls	r1, r2, #28
 8003aee:	bf44      	itt	mi
 8003af0:	232b      	movmi	r3, #43	; 0x2b
 8003af2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003af6:	f89a 3000 	ldrb.w	r3, [sl]
 8003afa:	2b2a      	cmp	r3, #42	; 0x2a
 8003afc:	d015      	beq.n	8003b2a <_svfiprintf_r+0xf6>
 8003afe:	4654      	mov	r4, sl
 8003b00:	2000      	movs	r0, #0
 8003b02:	f04f 0c0a 	mov.w	ip, #10
 8003b06:	9a07      	ldr	r2, [sp, #28]
 8003b08:	4621      	mov	r1, r4
 8003b0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b0e:	3b30      	subs	r3, #48	; 0x30
 8003b10:	2b09      	cmp	r3, #9
 8003b12:	d94e      	bls.n	8003bb2 <_svfiprintf_r+0x17e>
 8003b14:	b1b0      	cbz	r0, 8003b44 <_svfiprintf_r+0x110>
 8003b16:	9207      	str	r2, [sp, #28]
 8003b18:	e014      	b.n	8003b44 <_svfiprintf_r+0x110>
 8003b1a:	eba0 0308 	sub.w	r3, r0, r8
 8003b1e:	fa09 f303 	lsl.w	r3, r9, r3
 8003b22:	4313      	orrs	r3, r2
 8003b24:	46a2      	mov	sl, r4
 8003b26:	9304      	str	r3, [sp, #16]
 8003b28:	e7d2      	b.n	8003ad0 <_svfiprintf_r+0x9c>
 8003b2a:	9b03      	ldr	r3, [sp, #12]
 8003b2c:	1d19      	adds	r1, r3, #4
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	9103      	str	r1, [sp, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	bfbb      	ittet	lt
 8003b36:	425b      	neglt	r3, r3
 8003b38:	f042 0202 	orrlt.w	r2, r2, #2
 8003b3c:	9307      	strge	r3, [sp, #28]
 8003b3e:	9307      	strlt	r3, [sp, #28]
 8003b40:	bfb8      	it	lt
 8003b42:	9204      	strlt	r2, [sp, #16]
 8003b44:	7823      	ldrb	r3, [r4, #0]
 8003b46:	2b2e      	cmp	r3, #46	; 0x2e
 8003b48:	d10c      	bne.n	8003b64 <_svfiprintf_r+0x130>
 8003b4a:	7863      	ldrb	r3, [r4, #1]
 8003b4c:	2b2a      	cmp	r3, #42	; 0x2a
 8003b4e:	d135      	bne.n	8003bbc <_svfiprintf_r+0x188>
 8003b50:	9b03      	ldr	r3, [sp, #12]
 8003b52:	3402      	adds	r4, #2
 8003b54:	1d1a      	adds	r2, r3, #4
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	9203      	str	r2, [sp, #12]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	bfb8      	it	lt
 8003b5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b62:	9305      	str	r3, [sp, #20]
 8003b64:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003c24 <_svfiprintf_r+0x1f0>
 8003b68:	2203      	movs	r2, #3
 8003b6a:	4650      	mov	r0, sl
 8003b6c:	7821      	ldrb	r1, [r4, #0]
 8003b6e:	f001 f95f 	bl	8004e30 <memchr>
 8003b72:	b140      	cbz	r0, 8003b86 <_svfiprintf_r+0x152>
 8003b74:	2340      	movs	r3, #64	; 0x40
 8003b76:	eba0 000a 	sub.w	r0, r0, sl
 8003b7a:	fa03 f000 	lsl.w	r0, r3, r0
 8003b7e:	9b04      	ldr	r3, [sp, #16]
 8003b80:	3401      	adds	r4, #1
 8003b82:	4303      	orrs	r3, r0
 8003b84:	9304      	str	r3, [sp, #16]
 8003b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b8a:	2206      	movs	r2, #6
 8003b8c:	4826      	ldr	r0, [pc, #152]	; (8003c28 <_svfiprintf_r+0x1f4>)
 8003b8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b92:	f001 f94d 	bl	8004e30 <memchr>
 8003b96:	2800      	cmp	r0, #0
 8003b98:	d038      	beq.n	8003c0c <_svfiprintf_r+0x1d8>
 8003b9a:	4b24      	ldr	r3, [pc, #144]	; (8003c2c <_svfiprintf_r+0x1f8>)
 8003b9c:	bb1b      	cbnz	r3, 8003be6 <_svfiprintf_r+0x1b2>
 8003b9e:	9b03      	ldr	r3, [sp, #12]
 8003ba0:	3307      	adds	r3, #7
 8003ba2:	f023 0307 	bic.w	r3, r3, #7
 8003ba6:	3308      	adds	r3, #8
 8003ba8:	9303      	str	r3, [sp, #12]
 8003baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bac:	4433      	add	r3, r6
 8003bae:	9309      	str	r3, [sp, #36]	; 0x24
 8003bb0:	e767      	b.n	8003a82 <_svfiprintf_r+0x4e>
 8003bb2:	460c      	mov	r4, r1
 8003bb4:	2001      	movs	r0, #1
 8003bb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bba:	e7a5      	b.n	8003b08 <_svfiprintf_r+0xd4>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f04f 0c0a 	mov.w	ip, #10
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	3401      	adds	r4, #1
 8003bc6:	9305      	str	r3, [sp, #20]
 8003bc8:	4620      	mov	r0, r4
 8003bca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bce:	3a30      	subs	r2, #48	; 0x30
 8003bd0:	2a09      	cmp	r2, #9
 8003bd2:	d903      	bls.n	8003bdc <_svfiprintf_r+0x1a8>
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0c5      	beq.n	8003b64 <_svfiprintf_r+0x130>
 8003bd8:	9105      	str	r1, [sp, #20]
 8003bda:	e7c3      	b.n	8003b64 <_svfiprintf_r+0x130>
 8003bdc:	4604      	mov	r4, r0
 8003bde:	2301      	movs	r3, #1
 8003be0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003be4:	e7f0      	b.n	8003bc8 <_svfiprintf_r+0x194>
 8003be6:	ab03      	add	r3, sp, #12
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	462a      	mov	r2, r5
 8003bec:	4638      	mov	r0, r7
 8003bee:	4b10      	ldr	r3, [pc, #64]	; (8003c30 <_svfiprintf_r+0x1fc>)
 8003bf0:	a904      	add	r1, sp, #16
 8003bf2:	f3af 8000 	nop.w
 8003bf6:	1c42      	adds	r2, r0, #1
 8003bf8:	4606      	mov	r6, r0
 8003bfa:	d1d6      	bne.n	8003baa <_svfiprintf_r+0x176>
 8003bfc:	89ab      	ldrh	r3, [r5, #12]
 8003bfe:	065b      	lsls	r3, r3, #25
 8003c00:	f53f af2c 	bmi.w	8003a5c <_svfiprintf_r+0x28>
 8003c04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c06:	b01d      	add	sp, #116	; 0x74
 8003c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c0c:	ab03      	add	r3, sp, #12
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	462a      	mov	r2, r5
 8003c12:	4638      	mov	r0, r7
 8003c14:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <_svfiprintf_r+0x1fc>)
 8003c16:	a904      	add	r1, sp, #16
 8003c18:	f000 f9d4 	bl	8003fc4 <_printf_i>
 8003c1c:	e7eb      	b.n	8003bf6 <_svfiprintf_r+0x1c2>
 8003c1e:	bf00      	nop
 8003c20:	08005594 	.word	0x08005594
 8003c24:	0800559a 	.word	0x0800559a
 8003c28:	0800559e 	.word	0x0800559e
 8003c2c:	00000000 	.word	0x00000000
 8003c30:	0800397d 	.word	0x0800397d

08003c34 <__sfputc_r>:
 8003c34:	6893      	ldr	r3, [r2, #8]
 8003c36:	b410      	push	{r4}
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	6093      	str	r3, [r2, #8]
 8003c3e:	da07      	bge.n	8003c50 <__sfputc_r+0x1c>
 8003c40:	6994      	ldr	r4, [r2, #24]
 8003c42:	42a3      	cmp	r3, r4
 8003c44:	db01      	blt.n	8003c4a <__sfputc_r+0x16>
 8003c46:	290a      	cmp	r1, #10
 8003c48:	d102      	bne.n	8003c50 <__sfputc_r+0x1c>
 8003c4a:	bc10      	pop	{r4}
 8003c4c:	f7ff bce8 	b.w	8003620 <__swbuf_r>
 8003c50:	6813      	ldr	r3, [r2, #0]
 8003c52:	1c58      	adds	r0, r3, #1
 8003c54:	6010      	str	r0, [r2, #0]
 8003c56:	7019      	strb	r1, [r3, #0]
 8003c58:	4608      	mov	r0, r1
 8003c5a:	bc10      	pop	{r4}
 8003c5c:	4770      	bx	lr

08003c5e <__sfputs_r>:
 8003c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c60:	4606      	mov	r6, r0
 8003c62:	460f      	mov	r7, r1
 8003c64:	4614      	mov	r4, r2
 8003c66:	18d5      	adds	r5, r2, r3
 8003c68:	42ac      	cmp	r4, r5
 8003c6a:	d101      	bne.n	8003c70 <__sfputs_r+0x12>
 8003c6c:	2000      	movs	r0, #0
 8003c6e:	e007      	b.n	8003c80 <__sfputs_r+0x22>
 8003c70:	463a      	mov	r2, r7
 8003c72:	4630      	mov	r0, r6
 8003c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c78:	f7ff ffdc 	bl	8003c34 <__sfputc_r>
 8003c7c:	1c43      	adds	r3, r0, #1
 8003c7e:	d1f3      	bne.n	8003c68 <__sfputs_r+0xa>
 8003c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c84 <_vfiprintf_r>:
 8003c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c88:	460d      	mov	r5, r1
 8003c8a:	4614      	mov	r4, r2
 8003c8c:	4698      	mov	r8, r3
 8003c8e:	4606      	mov	r6, r0
 8003c90:	b09d      	sub	sp, #116	; 0x74
 8003c92:	b118      	cbz	r0, 8003c9c <_vfiprintf_r+0x18>
 8003c94:	6983      	ldr	r3, [r0, #24]
 8003c96:	b90b      	cbnz	r3, 8003c9c <_vfiprintf_r+0x18>
 8003c98:	f7ff f8f6 	bl	8002e88 <__sinit>
 8003c9c:	4b89      	ldr	r3, [pc, #548]	; (8003ec4 <_vfiprintf_r+0x240>)
 8003c9e:	429d      	cmp	r5, r3
 8003ca0:	d11b      	bne.n	8003cda <_vfiprintf_r+0x56>
 8003ca2:	6875      	ldr	r5, [r6, #4]
 8003ca4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ca6:	07d9      	lsls	r1, r3, #31
 8003ca8:	d405      	bmi.n	8003cb6 <_vfiprintf_r+0x32>
 8003caa:	89ab      	ldrh	r3, [r5, #12]
 8003cac:	059a      	lsls	r2, r3, #22
 8003cae:	d402      	bmi.n	8003cb6 <_vfiprintf_r+0x32>
 8003cb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cb2:	f7ff f9da 	bl	800306a <__retarget_lock_acquire_recursive>
 8003cb6:	89ab      	ldrh	r3, [r5, #12]
 8003cb8:	071b      	lsls	r3, r3, #28
 8003cba:	d501      	bpl.n	8003cc0 <_vfiprintf_r+0x3c>
 8003cbc:	692b      	ldr	r3, [r5, #16]
 8003cbe:	b9eb      	cbnz	r3, 8003cfc <_vfiprintf_r+0x78>
 8003cc0:	4629      	mov	r1, r5
 8003cc2:	4630      	mov	r0, r6
 8003cc4:	f7ff fd10 	bl	80036e8 <__swsetup_r>
 8003cc8:	b1c0      	cbz	r0, 8003cfc <_vfiprintf_r+0x78>
 8003cca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ccc:	07dc      	lsls	r4, r3, #31
 8003cce:	d50e      	bpl.n	8003cee <_vfiprintf_r+0x6a>
 8003cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd4:	b01d      	add	sp, #116	; 0x74
 8003cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cda:	4b7b      	ldr	r3, [pc, #492]	; (8003ec8 <_vfiprintf_r+0x244>)
 8003cdc:	429d      	cmp	r5, r3
 8003cde:	d101      	bne.n	8003ce4 <_vfiprintf_r+0x60>
 8003ce0:	68b5      	ldr	r5, [r6, #8]
 8003ce2:	e7df      	b.n	8003ca4 <_vfiprintf_r+0x20>
 8003ce4:	4b79      	ldr	r3, [pc, #484]	; (8003ecc <_vfiprintf_r+0x248>)
 8003ce6:	429d      	cmp	r5, r3
 8003ce8:	bf08      	it	eq
 8003cea:	68f5      	ldreq	r5, [r6, #12]
 8003cec:	e7da      	b.n	8003ca4 <_vfiprintf_r+0x20>
 8003cee:	89ab      	ldrh	r3, [r5, #12]
 8003cf0:	0598      	lsls	r0, r3, #22
 8003cf2:	d4ed      	bmi.n	8003cd0 <_vfiprintf_r+0x4c>
 8003cf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cf6:	f7ff f9b9 	bl	800306c <__retarget_lock_release_recursive>
 8003cfa:	e7e9      	b.n	8003cd0 <_vfiprintf_r+0x4c>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8003d00:	2320      	movs	r3, #32
 8003d02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d06:	2330      	movs	r3, #48	; 0x30
 8003d08:	f04f 0901 	mov.w	r9, #1
 8003d0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d10:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003ed0 <_vfiprintf_r+0x24c>
 8003d14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d18:	4623      	mov	r3, r4
 8003d1a:	469a      	mov	sl, r3
 8003d1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d20:	b10a      	cbz	r2, 8003d26 <_vfiprintf_r+0xa2>
 8003d22:	2a25      	cmp	r2, #37	; 0x25
 8003d24:	d1f9      	bne.n	8003d1a <_vfiprintf_r+0x96>
 8003d26:	ebba 0b04 	subs.w	fp, sl, r4
 8003d2a:	d00b      	beq.n	8003d44 <_vfiprintf_r+0xc0>
 8003d2c:	465b      	mov	r3, fp
 8003d2e:	4622      	mov	r2, r4
 8003d30:	4629      	mov	r1, r5
 8003d32:	4630      	mov	r0, r6
 8003d34:	f7ff ff93 	bl	8003c5e <__sfputs_r>
 8003d38:	3001      	adds	r0, #1
 8003d3a:	f000 80aa 	beq.w	8003e92 <_vfiprintf_r+0x20e>
 8003d3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d40:	445a      	add	r2, fp
 8003d42:	9209      	str	r2, [sp, #36]	; 0x24
 8003d44:	f89a 3000 	ldrb.w	r3, [sl]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 80a2 	beq.w	8003e92 <_vfiprintf_r+0x20e>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	f04f 32ff 	mov.w	r2, #4294967295
 8003d54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d58:	f10a 0a01 	add.w	sl, sl, #1
 8003d5c:	9304      	str	r3, [sp, #16]
 8003d5e:	9307      	str	r3, [sp, #28]
 8003d60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d64:	931a      	str	r3, [sp, #104]	; 0x68
 8003d66:	4654      	mov	r4, sl
 8003d68:	2205      	movs	r2, #5
 8003d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d6e:	4858      	ldr	r0, [pc, #352]	; (8003ed0 <_vfiprintf_r+0x24c>)
 8003d70:	f001 f85e 	bl	8004e30 <memchr>
 8003d74:	9a04      	ldr	r2, [sp, #16]
 8003d76:	b9d8      	cbnz	r0, 8003db0 <_vfiprintf_r+0x12c>
 8003d78:	06d1      	lsls	r1, r2, #27
 8003d7a:	bf44      	itt	mi
 8003d7c:	2320      	movmi	r3, #32
 8003d7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d82:	0713      	lsls	r3, r2, #28
 8003d84:	bf44      	itt	mi
 8003d86:	232b      	movmi	r3, #43	; 0x2b
 8003d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8003d90:	2b2a      	cmp	r3, #42	; 0x2a
 8003d92:	d015      	beq.n	8003dc0 <_vfiprintf_r+0x13c>
 8003d94:	4654      	mov	r4, sl
 8003d96:	2000      	movs	r0, #0
 8003d98:	f04f 0c0a 	mov.w	ip, #10
 8003d9c:	9a07      	ldr	r2, [sp, #28]
 8003d9e:	4621      	mov	r1, r4
 8003da0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003da4:	3b30      	subs	r3, #48	; 0x30
 8003da6:	2b09      	cmp	r3, #9
 8003da8:	d94e      	bls.n	8003e48 <_vfiprintf_r+0x1c4>
 8003daa:	b1b0      	cbz	r0, 8003dda <_vfiprintf_r+0x156>
 8003dac:	9207      	str	r2, [sp, #28]
 8003dae:	e014      	b.n	8003dda <_vfiprintf_r+0x156>
 8003db0:	eba0 0308 	sub.w	r3, r0, r8
 8003db4:	fa09 f303 	lsl.w	r3, r9, r3
 8003db8:	4313      	orrs	r3, r2
 8003dba:	46a2      	mov	sl, r4
 8003dbc:	9304      	str	r3, [sp, #16]
 8003dbe:	e7d2      	b.n	8003d66 <_vfiprintf_r+0xe2>
 8003dc0:	9b03      	ldr	r3, [sp, #12]
 8003dc2:	1d19      	adds	r1, r3, #4
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	9103      	str	r1, [sp, #12]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	bfbb      	ittet	lt
 8003dcc:	425b      	neglt	r3, r3
 8003dce:	f042 0202 	orrlt.w	r2, r2, #2
 8003dd2:	9307      	strge	r3, [sp, #28]
 8003dd4:	9307      	strlt	r3, [sp, #28]
 8003dd6:	bfb8      	it	lt
 8003dd8:	9204      	strlt	r2, [sp, #16]
 8003dda:	7823      	ldrb	r3, [r4, #0]
 8003ddc:	2b2e      	cmp	r3, #46	; 0x2e
 8003dde:	d10c      	bne.n	8003dfa <_vfiprintf_r+0x176>
 8003de0:	7863      	ldrb	r3, [r4, #1]
 8003de2:	2b2a      	cmp	r3, #42	; 0x2a
 8003de4:	d135      	bne.n	8003e52 <_vfiprintf_r+0x1ce>
 8003de6:	9b03      	ldr	r3, [sp, #12]
 8003de8:	3402      	adds	r4, #2
 8003dea:	1d1a      	adds	r2, r3, #4
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	9203      	str	r2, [sp, #12]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	bfb8      	it	lt
 8003df4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003df8:	9305      	str	r3, [sp, #20]
 8003dfa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003ed4 <_vfiprintf_r+0x250>
 8003dfe:	2203      	movs	r2, #3
 8003e00:	4650      	mov	r0, sl
 8003e02:	7821      	ldrb	r1, [r4, #0]
 8003e04:	f001 f814 	bl	8004e30 <memchr>
 8003e08:	b140      	cbz	r0, 8003e1c <_vfiprintf_r+0x198>
 8003e0a:	2340      	movs	r3, #64	; 0x40
 8003e0c:	eba0 000a 	sub.w	r0, r0, sl
 8003e10:	fa03 f000 	lsl.w	r0, r3, r0
 8003e14:	9b04      	ldr	r3, [sp, #16]
 8003e16:	3401      	adds	r4, #1
 8003e18:	4303      	orrs	r3, r0
 8003e1a:	9304      	str	r3, [sp, #16]
 8003e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e20:	2206      	movs	r2, #6
 8003e22:	482d      	ldr	r0, [pc, #180]	; (8003ed8 <_vfiprintf_r+0x254>)
 8003e24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e28:	f001 f802 	bl	8004e30 <memchr>
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	d03f      	beq.n	8003eb0 <_vfiprintf_r+0x22c>
 8003e30:	4b2a      	ldr	r3, [pc, #168]	; (8003edc <_vfiprintf_r+0x258>)
 8003e32:	bb1b      	cbnz	r3, 8003e7c <_vfiprintf_r+0x1f8>
 8003e34:	9b03      	ldr	r3, [sp, #12]
 8003e36:	3307      	adds	r3, #7
 8003e38:	f023 0307 	bic.w	r3, r3, #7
 8003e3c:	3308      	adds	r3, #8
 8003e3e:	9303      	str	r3, [sp, #12]
 8003e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e42:	443b      	add	r3, r7
 8003e44:	9309      	str	r3, [sp, #36]	; 0x24
 8003e46:	e767      	b.n	8003d18 <_vfiprintf_r+0x94>
 8003e48:	460c      	mov	r4, r1
 8003e4a:	2001      	movs	r0, #1
 8003e4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e50:	e7a5      	b.n	8003d9e <_vfiprintf_r+0x11a>
 8003e52:	2300      	movs	r3, #0
 8003e54:	f04f 0c0a 	mov.w	ip, #10
 8003e58:	4619      	mov	r1, r3
 8003e5a:	3401      	adds	r4, #1
 8003e5c:	9305      	str	r3, [sp, #20]
 8003e5e:	4620      	mov	r0, r4
 8003e60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e64:	3a30      	subs	r2, #48	; 0x30
 8003e66:	2a09      	cmp	r2, #9
 8003e68:	d903      	bls.n	8003e72 <_vfiprintf_r+0x1ee>
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0c5      	beq.n	8003dfa <_vfiprintf_r+0x176>
 8003e6e:	9105      	str	r1, [sp, #20]
 8003e70:	e7c3      	b.n	8003dfa <_vfiprintf_r+0x176>
 8003e72:	4604      	mov	r4, r0
 8003e74:	2301      	movs	r3, #1
 8003e76:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e7a:	e7f0      	b.n	8003e5e <_vfiprintf_r+0x1da>
 8003e7c:	ab03      	add	r3, sp, #12
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	462a      	mov	r2, r5
 8003e82:	4630      	mov	r0, r6
 8003e84:	4b16      	ldr	r3, [pc, #88]	; (8003ee0 <_vfiprintf_r+0x25c>)
 8003e86:	a904      	add	r1, sp, #16
 8003e88:	f3af 8000 	nop.w
 8003e8c:	4607      	mov	r7, r0
 8003e8e:	1c78      	adds	r0, r7, #1
 8003e90:	d1d6      	bne.n	8003e40 <_vfiprintf_r+0x1bc>
 8003e92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e94:	07d9      	lsls	r1, r3, #31
 8003e96:	d405      	bmi.n	8003ea4 <_vfiprintf_r+0x220>
 8003e98:	89ab      	ldrh	r3, [r5, #12]
 8003e9a:	059a      	lsls	r2, r3, #22
 8003e9c:	d402      	bmi.n	8003ea4 <_vfiprintf_r+0x220>
 8003e9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ea0:	f7ff f8e4 	bl	800306c <__retarget_lock_release_recursive>
 8003ea4:	89ab      	ldrh	r3, [r5, #12]
 8003ea6:	065b      	lsls	r3, r3, #25
 8003ea8:	f53f af12 	bmi.w	8003cd0 <_vfiprintf_r+0x4c>
 8003eac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003eae:	e711      	b.n	8003cd4 <_vfiprintf_r+0x50>
 8003eb0:	ab03      	add	r3, sp, #12
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	462a      	mov	r2, r5
 8003eb6:	4630      	mov	r0, r6
 8003eb8:	4b09      	ldr	r3, [pc, #36]	; (8003ee0 <_vfiprintf_r+0x25c>)
 8003eba:	a904      	add	r1, sp, #16
 8003ebc:	f000 f882 	bl	8003fc4 <_printf_i>
 8003ec0:	e7e4      	b.n	8003e8c <_vfiprintf_r+0x208>
 8003ec2:	bf00      	nop
 8003ec4:	08005550 	.word	0x08005550
 8003ec8:	08005570 	.word	0x08005570
 8003ecc:	08005530 	.word	0x08005530
 8003ed0:	08005594 	.word	0x08005594
 8003ed4:	0800559a 	.word	0x0800559a
 8003ed8:	0800559e 	.word	0x0800559e
 8003edc:	00000000 	.word	0x00000000
 8003ee0:	08003c5f 	.word	0x08003c5f

08003ee4 <_printf_common>:
 8003ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee8:	4616      	mov	r6, r2
 8003eea:	4699      	mov	r9, r3
 8003eec:	688a      	ldr	r2, [r1, #8]
 8003eee:	690b      	ldr	r3, [r1, #16]
 8003ef0:	4607      	mov	r7, r0
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	bfb8      	it	lt
 8003ef6:	4613      	movlt	r3, r2
 8003ef8:	6033      	str	r3, [r6, #0]
 8003efa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003efe:	460c      	mov	r4, r1
 8003f00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f04:	b10a      	cbz	r2, 8003f0a <_printf_common+0x26>
 8003f06:	3301      	adds	r3, #1
 8003f08:	6033      	str	r3, [r6, #0]
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	0699      	lsls	r1, r3, #26
 8003f0e:	bf42      	ittt	mi
 8003f10:	6833      	ldrmi	r3, [r6, #0]
 8003f12:	3302      	addmi	r3, #2
 8003f14:	6033      	strmi	r3, [r6, #0]
 8003f16:	6825      	ldr	r5, [r4, #0]
 8003f18:	f015 0506 	ands.w	r5, r5, #6
 8003f1c:	d106      	bne.n	8003f2c <_printf_common+0x48>
 8003f1e:	f104 0a19 	add.w	sl, r4, #25
 8003f22:	68e3      	ldr	r3, [r4, #12]
 8003f24:	6832      	ldr	r2, [r6, #0]
 8003f26:	1a9b      	subs	r3, r3, r2
 8003f28:	42ab      	cmp	r3, r5
 8003f2a:	dc28      	bgt.n	8003f7e <_printf_common+0x9a>
 8003f2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f30:	1e13      	subs	r3, r2, #0
 8003f32:	6822      	ldr	r2, [r4, #0]
 8003f34:	bf18      	it	ne
 8003f36:	2301      	movne	r3, #1
 8003f38:	0692      	lsls	r2, r2, #26
 8003f3a:	d42d      	bmi.n	8003f98 <_printf_common+0xb4>
 8003f3c:	4649      	mov	r1, r9
 8003f3e:	4638      	mov	r0, r7
 8003f40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f44:	47c0      	blx	r8
 8003f46:	3001      	adds	r0, #1
 8003f48:	d020      	beq.n	8003f8c <_printf_common+0xa8>
 8003f4a:	6823      	ldr	r3, [r4, #0]
 8003f4c:	68e5      	ldr	r5, [r4, #12]
 8003f4e:	f003 0306 	and.w	r3, r3, #6
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	bf18      	it	ne
 8003f56:	2500      	movne	r5, #0
 8003f58:	6832      	ldr	r2, [r6, #0]
 8003f5a:	f04f 0600 	mov.w	r6, #0
 8003f5e:	68a3      	ldr	r3, [r4, #8]
 8003f60:	bf08      	it	eq
 8003f62:	1aad      	subeq	r5, r5, r2
 8003f64:	6922      	ldr	r2, [r4, #16]
 8003f66:	bf08      	it	eq
 8003f68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	bfc4      	itt	gt
 8003f70:	1a9b      	subgt	r3, r3, r2
 8003f72:	18ed      	addgt	r5, r5, r3
 8003f74:	341a      	adds	r4, #26
 8003f76:	42b5      	cmp	r5, r6
 8003f78:	d11a      	bne.n	8003fb0 <_printf_common+0xcc>
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	e008      	b.n	8003f90 <_printf_common+0xac>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	4652      	mov	r2, sl
 8003f82:	4649      	mov	r1, r9
 8003f84:	4638      	mov	r0, r7
 8003f86:	47c0      	blx	r8
 8003f88:	3001      	adds	r0, #1
 8003f8a:	d103      	bne.n	8003f94 <_printf_common+0xb0>
 8003f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f94:	3501      	adds	r5, #1
 8003f96:	e7c4      	b.n	8003f22 <_printf_common+0x3e>
 8003f98:	2030      	movs	r0, #48	; 0x30
 8003f9a:	18e1      	adds	r1, r4, r3
 8003f9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fa6:	4422      	add	r2, r4
 8003fa8:	3302      	adds	r3, #2
 8003faa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fae:	e7c5      	b.n	8003f3c <_printf_common+0x58>
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	4622      	mov	r2, r4
 8003fb4:	4649      	mov	r1, r9
 8003fb6:	4638      	mov	r0, r7
 8003fb8:	47c0      	blx	r8
 8003fba:	3001      	adds	r0, #1
 8003fbc:	d0e6      	beq.n	8003f8c <_printf_common+0xa8>
 8003fbe:	3601      	adds	r6, #1
 8003fc0:	e7d9      	b.n	8003f76 <_printf_common+0x92>
	...

08003fc4 <_printf_i>:
 8003fc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fc8:	7e0f      	ldrb	r7, [r1, #24]
 8003fca:	4691      	mov	r9, r2
 8003fcc:	2f78      	cmp	r7, #120	; 0x78
 8003fce:	4680      	mov	r8, r0
 8003fd0:	460c      	mov	r4, r1
 8003fd2:	469a      	mov	sl, r3
 8003fd4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003fda:	d807      	bhi.n	8003fec <_printf_i+0x28>
 8003fdc:	2f62      	cmp	r7, #98	; 0x62
 8003fde:	d80a      	bhi.n	8003ff6 <_printf_i+0x32>
 8003fe0:	2f00      	cmp	r7, #0
 8003fe2:	f000 80d9 	beq.w	8004198 <_printf_i+0x1d4>
 8003fe6:	2f58      	cmp	r7, #88	; 0x58
 8003fe8:	f000 80a4 	beq.w	8004134 <_printf_i+0x170>
 8003fec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ff0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ff4:	e03a      	b.n	800406c <_printf_i+0xa8>
 8003ff6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ffa:	2b15      	cmp	r3, #21
 8003ffc:	d8f6      	bhi.n	8003fec <_printf_i+0x28>
 8003ffe:	a101      	add	r1, pc, #4	; (adr r1, 8004004 <_printf_i+0x40>)
 8004000:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004004:	0800405d 	.word	0x0800405d
 8004008:	08004071 	.word	0x08004071
 800400c:	08003fed 	.word	0x08003fed
 8004010:	08003fed 	.word	0x08003fed
 8004014:	08003fed 	.word	0x08003fed
 8004018:	08003fed 	.word	0x08003fed
 800401c:	08004071 	.word	0x08004071
 8004020:	08003fed 	.word	0x08003fed
 8004024:	08003fed 	.word	0x08003fed
 8004028:	08003fed 	.word	0x08003fed
 800402c:	08003fed 	.word	0x08003fed
 8004030:	0800417f 	.word	0x0800417f
 8004034:	080040a1 	.word	0x080040a1
 8004038:	08004161 	.word	0x08004161
 800403c:	08003fed 	.word	0x08003fed
 8004040:	08003fed 	.word	0x08003fed
 8004044:	080041a1 	.word	0x080041a1
 8004048:	08003fed 	.word	0x08003fed
 800404c:	080040a1 	.word	0x080040a1
 8004050:	08003fed 	.word	0x08003fed
 8004054:	08003fed 	.word	0x08003fed
 8004058:	08004169 	.word	0x08004169
 800405c:	682b      	ldr	r3, [r5, #0]
 800405e:	1d1a      	adds	r2, r3, #4
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	602a      	str	r2, [r5, #0]
 8004064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004068:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800406c:	2301      	movs	r3, #1
 800406e:	e0a4      	b.n	80041ba <_printf_i+0x1f6>
 8004070:	6820      	ldr	r0, [r4, #0]
 8004072:	6829      	ldr	r1, [r5, #0]
 8004074:	0606      	lsls	r6, r0, #24
 8004076:	f101 0304 	add.w	r3, r1, #4
 800407a:	d50a      	bpl.n	8004092 <_printf_i+0xce>
 800407c:	680e      	ldr	r6, [r1, #0]
 800407e:	602b      	str	r3, [r5, #0]
 8004080:	2e00      	cmp	r6, #0
 8004082:	da03      	bge.n	800408c <_printf_i+0xc8>
 8004084:	232d      	movs	r3, #45	; 0x2d
 8004086:	4276      	negs	r6, r6
 8004088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800408c:	230a      	movs	r3, #10
 800408e:	485e      	ldr	r0, [pc, #376]	; (8004208 <_printf_i+0x244>)
 8004090:	e019      	b.n	80040c6 <_printf_i+0x102>
 8004092:	680e      	ldr	r6, [r1, #0]
 8004094:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004098:	602b      	str	r3, [r5, #0]
 800409a:	bf18      	it	ne
 800409c:	b236      	sxthne	r6, r6
 800409e:	e7ef      	b.n	8004080 <_printf_i+0xbc>
 80040a0:	682b      	ldr	r3, [r5, #0]
 80040a2:	6820      	ldr	r0, [r4, #0]
 80040a4:	1d19      	adds	r1, r3, #4
 80040a6:	6029      	str	r1, [r5, #0]
 80040a8:	0601      	lsls	r1, r0, #24
 80040aa:	d501      	bpl.n	80040b0 <_printf_i+0xec>
 80040ac:	681e      	ldr	r6, [r3, #0]
 80040ae:	e002      	b.n	80040b6 <_printf_i+0xf2>
 80040b0:	0646      	lsls	r6, r0, #25
 80040b2:	d5fb      	bpl.n	80040ac <_printf_i+0xe8>
 80040b4:	881e      	ldrh	r6, [r3, #0]
 80040b6:	2f6f      	cmp	r7, #111	; 0x6f
 80040b8:	bf0c      	ite	eq
 80040ba:	2308      	moveq	r3, #8
 80040bc:	230a      	movne	r3, #10
 80040be:	4852      	ldr	r0, [pc, #328]	; (8004208 <_printf_i+0x244>)
 80040c0:	2100      	movs	r1, #0
 80040c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040c6:	6865      	ldr	r5, [r4, #4]
 80040c8:	2d00      	cmp	r5, #0
 80040ca:	bfa8      	it	ge
 80040cc:	6821      	ldrge	r1, [r4, #0]
 80040ce:	60a5      	str	r5, [r4, #8]
 80040d0:	bfa4      	itt	ge
 80040d2:	f021 0104 	bicge.w	r1, r1, #4
 80040d6:	6021      	strge	r1, [r4, #0]
 80040d8:	b90e      	cbnz	r6, 80040de <_printf_i+0x11a>
 80040da:	2d00      	cmp	r5, #0
 80040dc:	d04d      	beq.n	800417a <_printf_i+0x1b6>
 80040de:	4615      	mov	r5, r2
 80040e0:	fbb6 f1f3 	udiv	r1, r6, r3
 80040e4:	fb03 6711 	mls	r7, r3, r1, r6
 80040e8:	5dc7      	ldrb	r7, [r0, r7]
 80040ea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040ee:	4637      	mov	r7, r6
 80040f0:	42bb      	cmp	r3, r7
 80040f2:	460e      	mov	r6, r1
 80040f4:	d9f4      	bls.n	80040e0 <_printf_i+0x11c>
 80040f6:	2b08      	cmp	r3, #8
 80040f8:	d10b      	bne.n	8004112 <_printf_i+0x14e>
 80040fa:	6823      	ldr	r3, [r4, #0]
 80040fc:	07de      	lsls	r6, r3, #31
 80040fe:	d508      	bpl.n	8004112 <_printf_i+0x14e>
 8004100:	6923      	ldr	r3, [r4, #16]
 8004102:	6861      	ldr	r1, [r4, #4]
 8004104:	4299      	cmp	r1, r3
 8004106:	bfde      	ittt	le
 8004108:	2330      	movle	r3, #48	; 0x30
 800410a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800410e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004112:	1b52      	subs	r2, r2, r5
 8004114:	6122      	str	r2, [r4, #16]
 8004116:	464b      	mov	r3, r9
 8004118:	4621      	mov	r1, r4
 800411a:	4640      	mov	r0, r8
 800411c:	f8cd a000 	str.w	sl, [sp]
 8004120:	aa03      	add	r2, sp, #12
 8004122:	f7ff fedf 	bl	8003ee4 <_printf_common>
 8004126:	3001      	adds	r0, #1
 8004128:	d14c      	bne.n	80041c4 <_printf_i+0x200>
 800412a:	f04f 30ff 	mov.w	r0, #4294967295
 800412e:	b004      	add	sp, #16
 8004130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004134:	4834      	ldr	r0, [pc, #208]	; (8004208 <_printf_i+0x244>)
 8004136:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800413a:	6829      	ldr	r1, [r5, #0]
 800413c:	6823      	ldr	r3, [r4, #0]
 800413e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004142:	6029      	str	r1, [r5, #0]
 8004144:	061d      	lsls	r5, r3, #24
 8004146:	d514      	bpl.n	8004172 <_printf_i+0x1ae>
 8004148:	07df      	lsls	r7, r3, #31
 800414a:	bf44      	itt	mi
 800414c:	f043 0320 	orrmi.w	r3, r3, #32
 8004150:	6023      	strmi	r3, [r4, #0]
 8004152:	b91e      	cbnz	r6, 800415c <_printf_i+0x198>
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	f023 0320 	bic.w	r3, r3, #32
 800415a:	6023      	str	r3, [r4, #0]
 800415c:	2310      	movs	r3, #16
 800415e:	e7af      	b.n	80040c0 <_printf_i+0xfc>
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	f043 0320 	orr.w	r3, r3, #32
 8004166:	6023      	str	r3, [r4, #0]
 8004168:	2378      	movs	r3, #120	; 0x78
 800416a:	4828      	ldr	r0, [pc, #160]	; (800420c <_printf_i+0x248>)
 800416c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004170:	e7e3      	b.n	800413a <_printf_i+0x176>
 8004172:	0659      	lsls	r1, r3, #25
 8004174:	bf48      	it	mi
 8004176:	b2b6      	uxthmi	r6, r6
 8004178:	e7e6      	b.n	8004148 <_printf_i+0x184>
 800417a:	4615      	mov	r5, r2
 800417c:	e7bb      	b.n	80040f6 <_printf_i+0x132>
 800417e:	682b      	ldr	r3, [r5, #0]
 8004180:	6826      	ldr	r6, [r4, #0]
 8004182:	1d18      	adds	r0, r3, #4
 8004184:	6961      	ldr	r1, [r4, #20]
 8004186:	6028      	str	r0, [r5, #0]
 8004188:	0635      	lsls	r5, r6, #24
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	d501      	bpl.n	8004192 <_printf_i+0x1ce>
 800418e:	6019      	str	r1, [r3, #0]
 8004190:	e002      	b.n	8004198 <_printf_i+0x1d4>
 8004192:	0670      	lsls	r0, r6, #25
 8004194:	d5fb      	bpl.n	800418e <_printf_i+0x1ca>
 8004196:	8019      	strh	r1, [r3, #0]
 8004198:	2300      	movs	r3, #0
 800419a:	4615      	mov	r5, r2
 800419c:	6123      	str	r3, [r4, #16]
 800419e:	e7ba      	b.n	8004116 <_printf_i+0x152>
 80041a0:	682b      	ldr	r3, [r5, #0]
 80041a2:	2100      	movs	r1, #0
 80041a4:	1d1a      	adds	r2, r3, #4
 80041a6:	602a      	str	r2, [r5, #0]
 80041a8:	681d      	ldr	r5, [r3, #0]
 80041aa:	6862      	ldr	r2, [r4, #4]
 80041ac:	4628      	mov	r0, r5
 80041ae:	f000 fe3f 	bl	8004e30 <memchr>
 80041b2:	b108      	cbz	r0, 80041b8 <_printf_i+0x1f4>
 80041b4:	1b40      	subs	r0, r0, r5
 80041b6:	6060      	str	r0, [r4, #4]
 80041b8:	6863      	ldr	r3, [r4, #4]
 80041ba:	6123      	str	r3, [r4, #16]
 80041bc:	2300      	movs	r3, #0
 80041be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041c2:	e7a8      	b.n	8004116 <_printf_i+0x152>
 80041c4:	462a      	mov	r2, r5
 80041c6:	4649      	mov	r1, r9
 80041c8:	4640      	mov	r0, r8
 80041ca:	6923      	ldr	r3, [r4, #16]
 80041cc:	47d0      	blx	sl
 80041ce:	3001      	adds	r0, #1
 80041d0:	d0ab      	beq.n	800412a <_printf_i+0x166>
 80041d2:	6823      	ldr	r3, [r4, #0]
 80041d4:	079b      	lsls	r3, r3, #30
 80041d6:	d413      	bmi.n	8004200 <_printf_i+0x23c>
 80041d8:	68e0      	ldr	r0, [r4, #12]
 80041da:	9b03      	ldr	r3, [sp, #12]
 80041dc:	4298      	cmp	r0, r3
 80041de:	bfb8      	it	lt
 80041e0:	4618      	movlt	r0, r3
 80041e2:	e7a4      	b.n	800412e <_printf_i+0x16a>
 80041e4:	2301      	movs	r3, #1
 80041e6:	4632      	mov	r2, r6
 80041e8:	4649      	mov	r1, r9
 80041ea:	4640      	mov	r0, r8
 80041ec:	47d0      	blx	sl
 80041ee:	3001      	adds	r0, #1
 80041f0:	d09b      	beq.n	800412a <_printf_i+0x166>
 80041f2:	3501      	adds	r5, #1
 80041f4:	68e3      	ldr	r3, [r4, #12]
 80041f6:	9903      	ldr	r1, [sp, #12]
 80041f8:	1a5b      	subs	r3, r3, r1
 80041fa:	42ab      	cmp	r3, r5
 80041fc:	dcf2      	bgt.n	80041e4 <_printf_i+0x220>
 80041fe:	e7eb      	b.n	80041d8 <_printf_i+0x214>
 8004200:	2500      	movs	r5, #0
 8004202:	f104 0619 	add.w	r6, r4, #25
 8004206:	e7f5      	b.n	80041f4 <_printf_i+0x230>
 8004208:	080055a5 	.word	0x080055a5
 800420c:	080055b6 	.word	0x080055b6

08004210 <__svfiscanf_r>:
 8004210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004214:	461d      	mov	r5, r3
 8004216:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8004218:	4606      	mov	r6, r0
 800421a:	07df      	lsls	r7, r3, #31
 800421c:	460c      	mov	r4, r1
 800421e:	4692      	mov	sl, r2
 8004220:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8004224:	d405      	bmi.n	8004232 <__svfiscanf_r+0x22>
 8004226:	898b      	ldrh	r3, [r1, #12]
 8004228:	0598      	lsls	r0, r3, #22
 800422a:	d402      	bmi.n	8004232 <__svfiscanf_r+0x22>
 800422c:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800422e:	f7fe ff1c 	bl	800306a <__retarget_lock_acquire_recursive>
 8004232:	2300      	movs	r3, #0
 8004234:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8004238:	4ba6      	ldr	r3, [pc, #664]	; (80044d4 <__svfiscanf_r+0x2c4>)
 800423a:	f10d 0804 	add.w	r8, sp, #4
 800423e:	93a0      	str	r3, [sp, #640]	; 0x280
 8004240:	4ba5      	ldr	r3, [pc, #660]	; (80044d8 <__svfiscanf_r+0x2c8>)
 8004242:	4fa6      	ldr	r7, [pc, #664]	; (80044dc <__svfiscanf_r+0x2cc>)
 8004244:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80044e0 <__svfiscanf_r+0x2d0>
 8004248:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800424c:	93a1      	str	r3, [sp, #644]	; 0x284
 800424e:	9500      	str	r5, [sp, #0]
 8004250:	f89a 3000 	ldrb.w	r3, [sl]
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 8173 	beq.w	8004540 <__svfiscanf_r+0x330>
 800425a:	5dd9      	ldrb	r1, [r3, r7]
 800425c:	f10a 0501 	add.w	r5, sl, #1
 8004260:	f011 0108 	ands.w	r1, r1, #8
 8004264:	d019      	beq.n	800429a <__svfiscanf_r+0x8a>
 8004266:	6863      	ldr	r3, [r4, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	dd0f      	ble.n	800428c <__svfiscanf_r+0x7c>
 800426c:	6823      	ldr	r3, [r4, #0]
 800426e:	781a      	ldrb	r2, [r3, #0]
 8004270:	5cba      	ldrb	r2, [r7, r2]
 8004272:	0711      	lsls	r1, r2, #28
 8004274:	d401      	bmi.n	800427a <__svfiscanf_r+0x6a>
 8004276:	46aa      	mov	sl, r5
 8004278:	e7ea      	b.n	8004250 <__svfiscanf_r+0x40>
 800427a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800427c:	3301      	adds	r3, #1
 800427e:	3201      	adds	r2, #1
 8004280:	9245      	str	r2, [sp, #276]	; 0x114
 8004282:	6862      	ldr	r2, [r4, #4]
 8004284:	6023      	str	r3, [r4, #0]
 8004286:	3a01      	subs	r2, #1
 8004288:	6062      	str	r2, [r4, #4]
 800428a:	e7ec      	b.n	8004266 <__svfiscanf_r+0x56>
 800428c:	4621      	mov	r1, r4
 800428e:	4630      	mov	r0, r6
 8004290:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004292:	4798      	blx	r3
 8004294:	2800      	cmp	r0, #0
 8004296:	d0e9      	beq.n	800426c <__svfiscanf_r+0x5c>
 8004298:	e7ed      	b.n	8004276 <__svfiscanf_r+0x66>
 800429a:	2b25      	cmp	r3, #37	; 0x25
 800429c:	d012      	beq.n	80042c4 <__svfiscanf_r+0xb4>
 800429e:	469a      	mov	sl, r3
 80042a0:	6863      	ldr	r3, [r4, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f340 8095 	ble.w	80043d2 <__svfiscanf_r+0x1c2>
 80042a8:	6822      	ldr	r2, [r4, #0]
 80042aa:	7813      	ldrb	r3, [r2, #0]
 80042ac:	4553      	cmp	r3, sl
 80042ae:	f040 8147 	bne.w	8004540 <__svfiscanf_r+0x330>
 80042b2:	6863      	ldr	r3, [r4, #4]
 80042b4:	3201      	adds	r2, #1
 80042b6:	3b01      	subs	r3, #1
 80042b8:	6063      	str	r3, [r4, #4]
 80042ba:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80042bc:	6022      	str	r2, [r4, #0]
 80042be:	3301      	adds	r3, #1
 80042c0:	9345      	str	r3, [sp, #276]	; 0x114
 80042c2:	e7d8      	b.n	8004276 <__svfiscanf_r+0x66>
 80042c4:	9141      	str	r1, [sp, #260]	; 0x104
 80042c6:	9143      	str	r1, [sp, #268]	; 0x10c
 80042c8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80042cc:	220a      	movs	r2, #10
 80042ce:	2b2a      	cmp	r3, #42	; 0x2a
 80042d0:	bf02      	ittt	eq
 80042d2:	2310      	moveq	r3, #16
 80042d4:	f10a 0502 	addeq.w	r5, sl, #2
 80042d8:	9341      	streq	r3, [sp, #260]	; 0x104
 80042da:	46aa      	mov	sl, r5
 80042dc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80042e0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80042e4:	2b09      	cmp	r3, #9
 80042e6:	d91e      	bls.n	8004326 <__svfiscanf_r+0x116>
 80042e8:	2203      	movs	r2, #3
 80042ea:	487d      	ldr	r0, [pc, #500]	; (80044e0 <__svfiscanf_r+0x2d0>)
 80042ec:	f000 fda0 	bl	8004e30 <memchr>
 80042f0:	b140      	cbz	r0, 8004304 <__svfiscanf_r+0xf4>
 80042f2:	2301      	movs	r3, #1
 80042f4:	4655      	mov	r5, sl
 80042f6:	eba0 0009 	sub.w	r0, r0, r9
 80042fa:	fa03 f000 	lsl.w	r0, r3, r0
 80042fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004300:	4318      	orrs	r0, r3
 8004302:	9041      	str	r0, [sp, #260]	; 0x104
 8004304:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004308:	2b78      	cmp	r3, #120	; 0x78
 800430a:	d807      	bhi.n	800431c <__svfiscanf_r+0x10c>
 800430c:	2b57      	cmp	r3, #87	; 0x57
 800430e:	d811      	bhi.n	8004334 <__svfiscanf_r+0x124>
 8004310:	2b25      	cmp	r3, #37	; 0x25
 8004312:	d0c4      	beq.n	800429e <__svfiscanf_r+0x8e>
 8004314:	d858      	bhi.n	80043c8 <__svfiscanf_r+0x1b8>
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 80c8 	beq.w	80044ac <__svfiscanf_r+0x29c>
 800431c:	2303      	movs	r3, #3
 800431e:	9347      	str	r3, [sp, #284]	; 0x11c
 8004320:	230a      	movs	r3, #10
 8004322:	9342      	str	r3, [sp, #264]	; 0x108
 8004324:	e07c      	b.n	8004420 <__svfiscanf_r+0x210>
 8004326:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004328:	4655      	mov	r5, sl
 800432a:	fb02 1103 	mla	r1, r2, r3, r1
 800432e:	3930      	subs	r1, #48	; 0x30
 8004330:	9143      	str	r1, [sp, #268]	; 0x10c
 8004332:	e7d2      	b.n	80042da <__svfiscanf_r+0xca>
 8004334:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8004338:	2a20      	cmp	r2, #32
 800433a:	d8ef      	bhi.n	800431c <__svfiscanf_r+0x10c>
 800433c:	a101      	add	r1, pc, #4	; (adr r1, 8004344 <__svfiscanf_r+0x134>)
 800433e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004342:	bf00      	nop
 8004344:	0800440b 	.word	0x0800440b
 8004348:	0800431d 	.word	0x0800431d
 800434c:	0800431d 	.word	0x0800431d
 8004350:	08004469 	.word	0x08004469
 8004354:	0800431d 	.word	0x0800431d
 8004358:	0800431d 	.word	0x0800431d
 800435c:	0800431d 	.word	0x0800431d
 8004360:	0800431d 	.word	0x0800431d
 8004364:	0800431d 	.word	0x0800431d
 8004368:	0800431d 	.word	0x0800431d
 800436c:	0800431d 	.word	0x0800431d
 8004370:	0800447f 	.word	0x0800447f
 8004374:	08004455 	.word	0x08004455
 8004378:	080043cf 	.word	0x080043cf
 800437c:	080043cf 	.word	0x080043cf
 8004380:	080043cf 	.word	0x080043cf
 8004384:	0800431d 	.word	0x0800431d
 8004388:	08004459 	.word	0x08004459
 800438c:	0800431d 	.word	0x0800431d
 8004390:	0800431d 	.word	0x0800431d
 8004394:	0800431d 	.word	0x0800431d
 8004398:	0800431d 	.word	0x0800431d
 800439c:	0800448f 	.word	0x0800448f
 80043a0:	08004461 	.word	0x08004461
 80043a4:	08004403 	.word	0x08004403
 80043a8:	0800431d 	.word	0x0800431d
 80043ac:	0800431d 	.word	0x0800431d
 80043b0:	0800448b 	.word	0x0800448b
 80043b4:	0800431d 	.word	0x0800431d
 80043b8:	08004455 	.word	0x08004455
 80043bc:	0800431d 	.word	0x0800431d
 80043c0:	0800431d 	.word	0x0800431d
 80043c4:	0800440b 	.word	0x0800440b
 80043c8:	3b45      	subs	r3, #69	; 0x45
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d8a6      	bhi.n	800431c <__svfiscanf_r+0x10c>
 80043ce:	2305      	movs	r3, #5
 80043d0:	e025      	b.n	800441e <__svfiscanf_r+0x20e>
 80043d2:	4621      	mov	r1, r4
 80043d4:	4630      	mov	r0, r6
 80043d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80043d8:	4798      	blx	r3
 80043da:	2800      	cmp	r0, #0
 80043dc:	f43f af64 	beq.w	80042a8 <__svfiscanf_r+0x98>
 80043e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043e2:	07da      	lsls	r2, r3, #31
 80043e4:	f140 80a4 	bpl.w	8004530 <__svfiscanf_r+0x320>
 80043e8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80043ea:	2800      	cmp	r0, #0
 80043ec:	d067      	beq.n	80044be <__svfiscanf_r+0x2ae>
 80043ee:	89a3      	ldrh	r3, [r4, #12]
 80043f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80043f4:	bf18      	it	ne
 80043f6:	f04f 30ff 	movne.w	r0, #4294967295
 80043fa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80043fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004402:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004404:	f042 0220 	orr.w	r2, r2, #32
 8004408:	9241      	str	r2, [sp, #260]	; 0x104
 800440a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800440c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004410:	9241      	str	r2, [sp, #260]	; 0x104
 8004412:	2210      	movs	r2, #16
 8004414:	2b6f      	cmp	r3, #111	; 0x6f
 8004416:	bf34      	ite	cc
 8004418:	2303      	movcc	r3, #3
 800441a:	2304      	movcs	r3, #4
 800441c:	9242      	str	r2, [sp, #264]	; 0x108
 800441e:	9347      	str	r3, [sp, #284]	; 0x11c
 8004420:	6863      	ldr	r3, [r4, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	dd4e      	ble.n	80044c4 <__svfiscanf_r+0x2b4>
 8004426:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004428:	065b      	lsls	r3, r3, #25
 800442a:	d404      	bmi.n	8004436 <__svfiscanf_r+0x226>
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	781a      	ldrb	r2, [r3, #0]
 8004430:	5cba      	ldrb	r2, [r7, r2]
 8004432:	0710      	lsls	r0, r2, #28
 8004434:	d456      	bmi.n	80044e4 <__svfiscanf_r+0x2d4>
 8004436:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004438:	2b02      	cmp	r3, #2
 800443a:	dc65      	bgt.n	8004508 <__svfiscanf_r+0x2f8>
 800443c:	466b      	mov	r3, sp
 800443e:	4622      	mov	r2, r4
 8004440:	4630      	mov	r0, r6
 8004442:	a941      	add	r1, sp, #260	; 0x104
 8004444:	f000 f8b2 	bl	80045ac <_scanf_chars>
 8004448:	2801      	cmp	r0, #1
 800444a:	d079      	beq.n	8004540 <__svfiscanf_r+0x330>
 800444c:	2802      	cmp	r0, #2
 800444e:	f47f af12 	bne.w	8004276 <__svfiscanf_r+0x66>
 8004452:	e7c5      	b.n	80043e0 <__svfiscanf_r+0x1d0>
 8004454:	220a      	movs	r2, #10
 8004456:	e7dd      	b.n	8004414 <__svfiscanf_r+0x204>
 8004458:	2300      	movs	r3, #0
 800445a:	9342      	str	r3, [sp, #264]	; 0x108
 800445c:	2303      	movs	r3, #3
 800445e:	e7de      	b.n	800441e <__svfiscanf_r+0x20e>
 8004460:	2308      	movs	r3, #8
 8004462:	9342      	str	r3, [sp, #264]	; 0x108
 8004464:	2304      	movs	r3, #4
 8004466:	e7da      	b.n	800441e <__svfiscanf_r+0x20e>
 8004468:	4629      	mov	r1, r5
 800446a:	4640      	mov	r0, r8
 800446c:	f000 fac4 	bl	80049f8 <__sccl>
 8004470:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004472:	4605      	mov	r5, r0
 8004474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004478:	9341      	str	r3, [sp, #260]	; 0x104
 800447a:	2301      	movs	r3, #1
 800447c:	e7cf      	b.n	800441e <__svfiscanf_r+0x20e>
 800447e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004484:	9341      	str	r3, [sp, #260]	; 0x104
 8004486:	2300      	movs	r3, #0
 8004488:	e7c9      	b.n	800441e <__svfiscanf_r+0x20e>
 800448a:	2302      	movs	r3, #2
 800448c:	e7c7      	b.n	800441e <__svfiscanf_r+0x20e>
 800448e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004490:	06c3      	lsls	r3, r0, #27
 8004492:	f53f aef0 	bmi.w	8004276 <__svfiscanf_r+0x66>
 8004496:	9b00      	ldr	r3, [sp, #0]
 8004498:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800449a:	1d19      	adds	r1, r3, #4
 800449c:	9100      	str	r1, [sp, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f010 0f01 	tst.w	r0, #1
 80044a4:	bf14      	ite	ne
 80044a6:	801a      	strhne	r2, [r3, #0]
 80044a8:	601a      	streq	r2, [r3, #0]
 80044aa:	e6e4      	b.n	8004276 <__svfiscanf_r+0x66>
 80044ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044ae:	07d8      	lsls	r0, r3, #31
 80044b0:	d405      	bmi.n	80044be <__svfiscanf_r+0x2ae>
 80044b2:	89a3      	ldrh	r3, [r4, #12]
 80044b4:	0599      	lsls	r1, r3, #22
 80044b6:	d402      	bmi.n	80044be <__svfiscanf_r+0x2ae>
 80044b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044ba:	f7fe fdd7 	bl	800306c <__retarget_lock_release_recursive>
 80044be:	f04f 30ff 	mov.w	r0, #4294967295
 80044c2:	e79a      	b.n	80043fa <__svfiscanf_r+0x1ea>
 80044c4:	4621      	mov	r1, r4
 80044c6:	4630      	mov	r0, r6
 80044c8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80044ca:	4798      	blx	r3
 80044cc:	2800      	cmp	r0, #0
 80044ce:	d0aa      	beq.n	8004426 <__svfiscanf_r+0x216>
 80044d0:	e786      	b.n	80043e0 <__svfiscanf_r+0x1d0>
 80044d2:	bf00      	nop
 80044d4:	08004cbd 	.word	0x08004cbd
 80044d8:	08004889 	.word	0x08004889
 80044dc:	080055e3 	.word	0x080055e3
 80044e0:	0800559a 	.word	0x0800559a
 80044e4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80044e6:	3201      	adds	r2, #1
 80044e8:	9245      	str	r2, [sp, #276]	; 0x114
 80044ea:	6862      	ldr	r2, [r4, #4]
 80044ec:	3a01      	subs	r2, #1
 80044ee:	2a00      	cmp	r2, #0
 80044f0:	6062      	str	r2, [r4, #4]
 80044f2:	dd02      	ble.n	80044fa <__svfiscanf_r+0x2ea>
 80044f4:	3301      	adds	r3, #1
 80044f6:	6023      	str	r3, [r4, #0]
 80044f8:	e798      	b.n	800442c <__svfiscanf_r+0x21c>
 80044fa:	4621      	mov	r1, r4
 80044fc:	4630      	mov	r0, r6
 80044fe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004500:	4798      	blx	r3
 8004502:	2800      	cmp	r0, #0
 8004504:	d092      	beq.n	800442c <__svfiscanf_r+0x21c>
 8004506:	e76b      	b.n	80043e0 <__svfiscanf_r+0x1d0>
 8004508:	2b04      	cmp	r3, #4
 800450a:	dc06      	bgt.n	800451a <__svfiscanf_r+0x30a>
 800450c:	466b      	mov	r3, sp
 800450e:	4622      	mov	r2, r4
 8004510:	4630      	mov	r0, r6
 8004512:	a941      	add	r1, sp, #260	; 0x104
 8004514:	f000 f8a4 	bl	8004660 <_scanf_i>
 8004518:	e796      	b.n	8004448 <__svfiscanf_r+0x238>
 800451a:	4b0f      	ldr	r3, [pc, #60]	; (8004558 <__svfiscanf_r+0x348>)
 800451c:	2b00      	cmp	r3, #0
 800451e:	f43f aeaa 	beq.w	8004276 <__svfiscanf_r+0x66>
 8004522:	466b      	mov	r3, sp
 8004524:	4622      	mov	r2, r4
 8004526:	4630      	mov	r0, r6
 8004528:	a941      	add	r1, sp, #260	; 0x104
 800452a:	f3af 8000 	nop.w
 800452e:	e78b      	b.n	8004448 <__svfiscanf_r+0x238>
 8004530:	89a3      	ldrh	r3, [r4, #12]
 8004532:	0599      	lsls	r1, r3, #22
 8004534:	f53f af58 	bmi.w	80043e8 <__svfiscanf_r+0x1d8>
 8004538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800453a:	f7fe fd97 	bl	800306c <__retarget_lock_release_recursive>
 800453e:	e753      	b.n	80043e8 <__svfiscanf_r+0x1d8>
 8004540:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004542:	07da      	lsls	r2, r3, #31
 8004544:	d405      	bmi.n	8004552 <__svfiscanf_r+0x342>
 8004546:	89a3      	ldrh	r3, [r4, #12]
 8004548:	059b      	lsls	r3, r3, #22
 800454a:	d402      	bmi.n	8004552 <__svfiscanf_r+0x342>
 800454c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800454e:	f7fe fd8d 	bl	800306c <__retarget_lock_release_recursive>
 8004552:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004554:	e751      	b.n	80043fa <__svfiscanf_r+0x1ea>
 8004556:	bf00      	nop
 8004558:	00000000 	.word	0x00000000

0800455c <_vfiscanf_r>:
 800455c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004560:	460c      	mov	r4, r1
 8004562:	4616      	mov	r6, r2
 8004564:	461f      	mov	r7, r3
 8004566:	4605      	mov	r5, r0
 8004568:	b118      	cbz	r0, 8004572 <_vfiscanf_r+0x16>
 800456a:	6983      	ldr	r3, [r0, #24]
 800456c:	b90b      	cbnz	r3, 8004572 <_vfiscanf_r+0x16>
 800456e:	f7fe fc8b 	bl	8002e88 <__sinit>
 8004572:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <_vfiscanf_r+0x44>)
 8004574:	429c      	cmp	r4, r3
 8004576:	d108      	bne.n	800458a <_vfiscanf_r+0x2e>
 8004578:	686c      	ldr	r4, [r5, #4]
 800457a:	463b      	mov	r3, r7
 800457c:	4632      	mov	r2, r6
 800457e:	4621      	mov	r1, r4
 8004580:	4628      	mov	r0, r5
 8004582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004586:	f7ff be43 	b.w	8004210 <__svfiscanf_r>
 800458a:	4b06      	ldr	r3, [pc, #24]	; (80045a4 <_vfiscanf_r+0x48>)
 800458c:	429c      	cmp	r4, r3
 800458e:	d101      	bne.n	8004594 <_vfiscanf_r+0x38>
 8004590:	68ac      	ldr	r4, [r5, #8]
 8004592:	e7f2      	b.n	800457a <_vfiscanf_r+0x1e>
 8004594:	4b04      	ldr	r3, [pc, #16]	; (80045a8 <_vfiscanf_r+0x4c>)
 8004596:	429c      	cmp	r4, r3
 8004598:	bf08      	it	eq
 800459a:	68ec      	ldreq	r4, [r5, #12]
 800459c:	e7ed      	b.n	800457a <_vfiscanf_r+0x1e>
 800459e:	bf00      	nop
 80045a0:	08005550 	.word	0x08005550
 80045a4:	08005570 	.word	0x08005570
 80045a8:	08005530 	.word	0x08005530

080045ac <_scanf_chars>:
 80045ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045b0:	4615      	mov	r5, r2
 80045b2:	688a      	ldr	r2, [r1, #8]
 80045b4:	4680      	mov	r8, r0
 80045b6:	460c      	mov	r4, r1
 80045b8:	b932      	cbnz	r2, 80045c8 <_scanf_chars+0x1c>
 80045ba:	698a      	ldr	r2, [r1, #24]
 80045bc:	2a00      	cmp	r2, #0
 80045be:	bf0c      	ite	eq
 80045c0:	2201      	moveq	r2, #1
 80045c2:	f04f 32ff 	movne.w	r2, #4294967295
 80045c6:	608a      	str	r2, [r1, #8]
 80045c8:	2700      	movs	r7, #0
 80045ca:	6822      	ldr	r2, [r4, #0]
 80045cc:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800465c <_scanf_chars+0xb0>
 80045d0:	06d1      	lsls	r1, r2, #27
 80045d2:	bf5f      	itttt	pl
 80045d4:	681a      	ldrpl	r2, [r3, #0]
 80045d6:	1d11      	addpl	r1, r2, #4
 80045d8:	6019      	strpl	r1, [r3, #0]
 80045da:	6816      	ldrpl	r6, [r2, #0]
 80045dc:	69a0      	ldr	r0, [r4, #24]
 80045de:	b188      	cbz	r0, 8004604 <_scanf_chars+0x58>
 80045e0:	2801      	cmp	r0, #1
 80045e2:	d107      	bne.n	80045f4 <_scanf_chars+0x48>
 80045e4:	682b      	ldr	r3, [r5, #0]
 80045e6:	781a      	ldrb	r2, [r3, #0]
 80045e8:	6963      	ldr	r3, [r4, #20]
 80045ea:	5c9b      	ldrb	r3, [r3, r2]
 80045ec:	b953      	cbnz	r3, 8004604 <_scanf_chars+0x58>
 80045ee:	2f00      	cmp	r7, #0
 80045f0:	d031      	beq.n	8004656 <_scanf_chars+0xaa>
 80045f2:	e022      	b.n	800463a <_scanf_chars+0x8e>
 80045f4:	2802      	cmp	r0, #2
 80045f6:	d120      	bne.n	800463a <_scanf_chars+0x8e>
 80045f8:	682b      	ldr	r3, [r5, #0]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	f813 3009 	ldrb.w	r3, [r3, r9]
 8004600:	071b      	lsls	r3, r3, #28
 8004602:	d41a      	bmi.n	800463a <_scanf_chars+0x8e>
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	3701      	adds	r7, #1
 8004608:	06da      	lsls	r2, r3, #27
 800460a:	bf5e      	ittt	pl
 800460c:	682b      	ldrpl	r3, [r5, #0]
 800460e:	781b      	ldrbpl	r3, [r3, #0]
 8004610:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004614:	682a      	ldr	r2, [r5, #0]
 8004616:	686b      	ldr	r3, [r5, #4]
 8004618:	3201      	adds	r2, #1
 800461a:	602a      	str	r2, [r5, #0]
 800461c:	68a2      	ldr	r2, [r4, #8]
 800461e:	3b01      	subs	r3, #1
 8004620:	3a01      	subs	r2, #1
 8004622:	606b      	str	r3, [r5, #4]
 8004624:	60a2      	str	r2, [r4, #8]
 8004626:	b142      	cbz	r2, 800463a <_scanf_chars+0x8e>
 8004628:	2b00      	cmp	r3, #0
 800462a:	dcd7      	bgt.n	80045dc <_scanf_chars+0x30>
 800462c:	4629      	mov	r1, r5
 800462e:	4640      	mov	r0, r8
 8004630:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004634:	4798      	blx	r3
 8004636:	2800      	cmp	r0, #0
 8004638:	d0d0      	beq.n	80045dc <_scanf_chars+0x30>
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	f013 0310 	ands.w	r3, r3, #16
 8004640:	d105      	bne.n	800464e <_scanf_chars+0xa2>
 8004642:	68e2      	ldr	r2, [r4, #12]
 8004644:	3201      	adds	r2, #1
 8004646:	60e2      	str	r2, [r4, #12]
 8004648:	69a2      	ldr	r2, [r4, #24]
 800464a:	b102      	cbz	r2, 800464e <_scanf_chars+0xa2>
 800464c:	7033      	strb	r3, [r6, #0]
 800464e:	2000      	movs	r0, #0
 8004650:	6923      	ldr	r3, [r4, #16]
 8004652:	443b      	add	r3, r7
 8004654:	6123      	str	r3, [r4, #16]
 8004656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800465a:	bf00      	nop
 800465c:	080055e3 	.word	0x080055e3

08004660 <_scanf_i>:
 8004660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004664:	460c      	mov	r4, r1
 8004666:	4698      	mov	r8, r3
 8004668:	4b75      	ldr	r3, [pc, #468]	; (8004840 <_scanf_i+0x1e0>)
 800466a:	b087      	sub	sp, #28
 800466c:	4682      	mov	sl, r0
 800466e:	4616      	mov	r6, r2
 8004670:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004674:	ab03      	add	r3, sp, #12
 8004676:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800467a:	4b72      	ldr	r3, [pc, #456]	; (8004844 <_scanf_i+0x1e4>)
 800467c:	69a1      	ldr	r1, [r4, #24]
 800467e:	4a72      	ldr	r2, [pc, #456]	; (8004848 <_scanf_i+0x1e8>)
 8004680:	4627      	mov	r7, r4
 8004682:	2903      	cmp	r1, #3
 8004684:	bf18      	it	ne
 8004686:	461a      	movne	r2, r3
 8004688:	68a3      	ldr	r3, [r4, #8]
 800468a:	9201      	str	r2, [sp, #4]
 800468c:	1e5a      	subs	r2, r3, #1
 800468e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004692:	bf81      	itttt	hi
 8004694:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004698:	eb03 0905 	addhi.w	r9, r3, r5
 800469c:	f240 135d 	movwhi	r3, #349	; 0x15d
 80046a0:	60a3      	strhi	r3, [r4, #8]
 80046a2:	f857 3b1c 	ldr.w	r3, [r7], #28
 80046a6:	bf98      	it	ls
 80046a8:	f04f 0900 	movls.w	r9, #0
 80046ac:	463d      	mov	r5, r7
 80046ae:	f04f 0b00 	mov.w	fp, #0
 80046b2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80046b6:	6023      	str	r3, [r4, #0]
 80046b8:	6831      	ldr	r1, [r6, #0]
 80046ba:	ab03      	add	r3, sp, #12
 80046bc:	2202      	movs	r2, #2
 80046be:	7809      	ldrb	r1, [r1, #0]
 80046c0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80046c4:	f000 fbb4 	bl	8004e30 <memchr>
 80046c8:	b328      	cbz	r0, 8004716 <_scanf_i+0xb6>
 80046ca:	f1bb 0f01 	cmp.w	fp, #1
 80046ce:	d159      	bne.n	8004784 <_scanf_i+0x124>
 80046d0:	6862      	ldr	r2, [r4, #4]
 80046d2:	b92a      	cbnz	r2, 80046e0 <_scanf_i+0x80>
 80046d4:	2308      	movs	r3, #8
 80046d6:	6822      	ldr	r2, [r4, #0]
 80046d8:	6063      	str	r3, [r4, #4]
 80046da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046de:	6022      	str	r2, [r4, #0]
 80046e0:	6822      	ldr	r2, [r4, #0]
 80046e2:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80046e6:	6022      	str	r2, [r4, #0]
 80046e8:	68a2      	ldr	r2, [r4, #8]
 80046ea:	1e51      	subs	r1, r2, #1
 80046ec:	60a1      	str	r1, [r4, #8]
 80046ee:	b192      	cbz	r2, 8004716 <_scanf_i+0xb6>
 80046f0:	6832      	ldr	r2, [r6, #0]
 80046f2:	1c51      	adds	r1, r2, #1
 80046f4:	6031      	str	r1, [r6, #0]
 80046f6:	7812      	ldrb	r2, [r2, #0]
 80046f8:	f805 2b01 	strb.w	r2, [r5], #1
 80046fc:	6872      	ldr	r2, [r6, #4]
 80046fe:	3a01      	subs	r2, #1
 8004700:	2a00      	cmp	r2, #0
 8004702:	6072      	str	r2, [r6, #4]
 8004704:	dc07      	bgt.n	8004716 <_scanf_i+0xb6>
 8004706:	4631      	mov	r1, r6
 8004708:	4650      	mov	r0, sl
 800470a:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800470e:	4790      	blx	r2
 8004710:	2800      	cmp	r0, #0
 8004712:	f040 8085 	bne.w	8004820 <_scanf_i+0x1c0>
 8004716:	f10b 0b01 	add.w	fp, fp, #1
 800471a:	f1bb 0f03 	cmp.w	fp, #3
 800471e:	d1cb      	bne.n	80046b8 <_scanf_i+0x58>
 8004720:	6863      	ldr	r3, [r4, #4]
 8004722:	b90b      	cbnz	r3, 8004728 <_scanf_i+0xc8>
 8004724:	230a      	movs	r3, #10
 8004726:	6063      	str	r3, [r4, #4]
 8004728:	6863      	ldr	r3, [r4, #4]
 800472a:	4948      	ldr	r1, [pc, #288]	; (800484c <_scanf_i+0x1ec>)
 800472c:	6960      	ldr	r0, [r4, #20]
 800472e:	1ac9      	subs	r1, r1, r3
 8004730:	f000 f962 	bl	80049f8 <__sccl>
 8004734:	f04f 0b00 	mov.w	fp, #0
 8004738:	68a3      	ldr	r3, [r4, #8]
 800473a:	6822      	ldr	r2, [r4, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d03d      	beq.n	80047bc <_scanf_i+0x15c>
 8004740:	6831      	ldr	r1, [r6, #0]
 8004742:	6960      	ldr	r0, [r4, #20]
 8004744:	f891 c000 	ldrb.w	ip, [r1]
 8004748:	f810 000c 	ldrb.w	r0, [r0, ip]
 800474c:	2800      	cmp	r0, #0
 800474e:	d035      	beq.n	80047bc <_scanf_i+0x15c>
 8004750:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004754:	d124      	bne.n	80047a0 <_scanf_i+0x140>
 8004756:	0510      	lsls	r0, r2, #20
 8004758:	d522      	bpl.n	80047a0 <_scanf_i+0x140>
 800475a:	f10b 0b01 	add.w	fp, fp, #1
 800475e:	f1b9 0f00 	cmp.w	r9, #0
 8004762:	d003      	beq.n	800476c <_scanf_i+0x10c>
 8004764:	3301      	adds	r3, #1
 8004766:	f109 39ff 	add.w	r9, r9, #4294967295
 800476a:	60a3      	str	r3, [r4, #8]
 800476c:	6873      	ldr	r3, [r6, #4]
 800476e:	3b01      	subs	r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	6073      	str	r3, [r6, #4]
 8004774:	dd1b      	ble.n	80047ae <_scanf_i+0x14e>
 8004776:	6833      	ldr	r3, [r6, #0]
 8004778:	3301      	adds	r3, #1
 800477a:	6033      	str	r3, [r6, #0]
 800477c:	68a3      	ldr	r3, [r4, #8]
 800477e:	3b01      	subs	r3, #1
 8004780:	60a3      	str	r3, [r4, #8]
 8004782:	e7d9      	b.n	8004738 <_scanf_i+0xd8>
 8004784:	f1bb 0f02 	cmp.w	fp, #2
 8004788:	d1ae      	bne.n	80046e8 <_scanf_i+0x88>
 800478a:	6822      	ldr	r2, [r4, #0]
 800478c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004790:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004794:	d1bf      	bne.n	8004716 <_scanf_i+0xb6>
 8004796:	2310      	movs	r3, #16
 8004798:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800479c:	6063      	str	r3, [r4, #4]
 800479e:	e7a2      	b.n	80046e6 <_scanf_i+0x86>
 80047a0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80047a4:	6022      	str	r2, [r4, #0]
 80047a6:	780b      	ldrb	r3, [r1, #0]
 80047a8:	f805 3b01 	strb.w	r3, [r5], #1
 80047ac:	e7de      	b.n	800476c <_scanf_i+0x10c>
 80047ae:	4631      	mov	r1, r6
 80047b0:	4650      	mov	r0, sl
 80047b2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80047b6:	4798      	blx	r3
 80047b8:	2800      	cmp	r0, #0
 80047ba:	d0df      	beq.n	800477c <_scanf_i+0x11c>
 80047bc:	6823      	ldr	r3, [r4, #0]
 80047be:	05db      	lsls	r3, r3, #23
 80047c0:	d50d      	bpl.n	80047de <_scanf_i+0x17e>
 80047c2:	42bd      	cmp	r5, r7
 80047c4:	d909      	bls.n	80047da <_scanf_i+0x17a>
 80047c6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80047ca:	4632      	mov	r2, r6
 80047cc:	4650      	mov	r0, sl
 80047ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80047d2:	f105 39ff 	add.w	r9, r5, #4294967295
 80047d6:	4798      	blx	r3
 80047d8:	464d      	mov	r5, r9
 80047da:	42bd      	cmp	r5, r7
 80047dc:	d02d      	beq.n	800483a <_scanf_i+0x1da>
 80047de:	6822      	ldr	r2, [r4, #0]
 80047e0:	f012 0210 	ands.w	r2, r2, #16
 80047e4:	d113      	bne.n	800480e <_scanf_i+0x1ae>
 80047e6:	702a      	strb	r2, [r5, #0]
 80047e8:	4639      	mov	r1, r7
 80047ea:	6863      	ldr	r3, [r4, #4]
 80047ec:	4650      	mov	r0, sl
 80047ee:	9e01      	ldr	r6, [sp, #4]
 80047f0:	47b0      	blx	r6
 80047f2:	6821      	ldr	r1, [r4, #0]
 80047f4:	f8d8 3000 	ldr.w	r3, [r8]
 80047f8:	f011 0f20 	tst.w	r1, #32
 80047fc:	d013      	beq.n	8004826 <_scanf_i+0x1c6>
 80047fe:	1d1a      	adds	r2, r3, #4
 8004800:	f8c8 2000 	str.w	r2, [r8]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6018      	str	r0, [r3, #0]
 8004808:	68e3      	ldr	r3, [r4, #12]
 800480a:	3301      	adds	r3, #1
 800480c:	60e3      	str	r3, [r4, #12]
 800480e:	2000      	movs	r0, #0
 8004810:	1bed      	subs	r5, r5, r7
 8004812:	44ab      	add	fp, r5
 8004814:	6925      	ldr	r5, [r4, #16]
 8004816:	445d      	add	r5, fp
 8004818:	6125      	str	r5, [r4, #16]
 800481a:	b007      	add	sp, #28
 800481c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004820:	f04f 0b00 	mov.w	fp, #0
 8004824:	e7ca      	b.n	80047bc <_scanf_i+0x15c>
 8004826:	1d1a      	adds	r2, r3, #4
 8004828:	f8c8 2000 	str.w	r2, [r8]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f011 0f01 	tst.w	r1, #1
 8004832:	bf14      	ite	ne
 8004834:	8018      	strhne	r0, [r3, #0]
 8004836:	6018      	streq	r0, [r3, #0]
 8004838:	e7e6      	b.n	8004808 <_scanf_i+0x1a8>
 800483a:	2001      	movs	r0, #1
 800483c:	e7ed      	b.n	800481a <_scanf_i+0x1ba>
 800483e:	bf00      	nop
 8004840:	0800550c 	.word	0x0800550c
 8004844:	08004c49 	.word	0x08004c49
 8004848:	08004b61 	.word	0x08004b61
 800484c:	080055e0 	.word	0x080055e0

08004850 <_read_r>:
 8004850:	b538      	push	{r3, r4, r5, lr}
 8004852:	4604      	mov	r4, r0
 8004854:	4608      	mov	r0, r1
 8004856:	4611      	mov	r1, r2
 8004858:	2200      	movs	r2, #0
 800485a:	4d05      	ldr	r5, [pc, #20]	; (8004870 <_read_r+0x20>)
 800485c:	602a      	str	r2, [r5, #0]
 800485e:	461a      	mov	r2, r3
 8004860:	f7fc fb8a 	bl	8000f78 <_read>
 8004864:	1c43      	adds	r3, r0, #1
 8004866:	d102      	bne.n	800486e <_read_r+0x1e>
 8004868:	682b      	ldr	r3, [r5, #0]
 800486a:	b103      	cbz	r3, 800486e <_read_r+0x1e>
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	bd38      	pop	{r3, r4, r5, pc}
 8004870:	20000128 	.word	0x20000128

08004874 <lflush>:
 8004874:	8983      	ldrh	r3, [r0, #12]
 8004876:	f003 0309 	and.w	r3, r3, #9
 800487a:	2b09      	cmp	r3, #9
 800487c:	d101      	bne.n	8004882 <lflush+0xe>
 800487e:	f7fe ba99 	b.w	8002db4 <fflush>
 8004882:	2000      	movs	r0, #0
 8004884:	4770      	bx	lr
	...

08004888 <__srefill_r>:
 8004888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800488a:	460c      	mov	r4, r1
 800488c:	4605      	mov	r5, r0
 800488e:	b118      	cbz	r0, 8004898 <__srefill_r+0x10>
 8004890:	6983      	ldr	r3, [r0, #24]
 8004892:	b90b      	cbnz	r3, 8004898 <__srefill_r+0x10>
 8004894:	f7fe faf8 	bl	8002e88 <__sinit>
 8004898:	4b3c      	ldr	r3, [pc, #240]	; (800498c <__srefill_r+0x104>)
 800489a:	429c      	cmp	r4, r3
 800489c:	d10a      	bne.n	80048b4 <__srefill_r+0x2c>
 800489e:	686c      	ldr	r4, [r5, #4]
 80048a0:	2300      	movs	r3, #0
 80048a2:	6063      	str	r3, [r4, #4]
 80048a4:	89a3      	ldrh	r3, [r4, #12]
 80048a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048aa:	069e      	lsls	r6, r3, #26
 80048ac:	d50c      	bpl.n	80048c8 <__srefill_r+0x40>
 80048ae:	f04f 30ff 	mov.w	r0, #4294967295
 80048b2:	e067      	b.n	8004984 <__srefill_r+0xfc>
 80048b4:	4b36      	ldr	r3, [pc, #216]	; (8004990 <__srefill_r+0x108>)
 80048b6:	429c      	cmp	r4, r3
 80048b8:	d101      	bne.n	80048be <__srefill_r+0x36>
 80048ba:	68ac      	ldr	r4, [r5, #8]
 80048bc:	e7f0      	b.n	80048a0 <__srefill_r+0x18>
 80048be:	4b35      	ldr	r3, [pc, #212]	; (8004994 <__srefill_r+0x10c>)
 80048c0:	429c      	cmp	r4, r3
 80048c2:	bf08      	it	eq
 80048c4:	68ec      	ldreq	r4, [r5, #12]
 80048c6:	e7eb      	b.n	80048a0 <__srefill_r+0x18>
 80048c8:	0758      	lsls	r0, r3, #29
 80048ca:	d449      	bmi.n	8004960 <__srefill_r+0xd8>
 80048cc:	06d9      	lsls	r1, r3, #27
 80048ce:	d405      	bmi.n	80048dc <__srefill_r+0x54>
 80048d0:	2309      	movs	r3, #9
 80048d2:	602b      	str	r3, [r5, #0]
 80048d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80048d8:	81a3      	strh	r3, [r4, #12]
 80048da:	e7e8      	b.n	80048ae <__srefill_r+0x26>
 80048dc:	071a      	lsls	r2, r3, #28
 80048de:	d50b      	bpl.n	80048f8 <__srefill_r+0x70>
 80048e0:	4621      	mov	r1, r4
 80048e2:	4628      	mov	r0, r5
 80048e4:	f7fe fa2a 	bl	8002d3c <_fflush_r>
 80048e8:	2800      	cmp	r0, #0
 80048ea:	d1e0      	bne.n	80048ae <__srefill_r+0x26>
 80048ec:	89a3      	ldrh	r3, [r4, #12]
 80048ee:	60a0      	str	r0, [r4, #8]
 80048f0:	f023 0308 	bic.w	r3, r3, #8
 80048f4:	81a3      	strh	r3, [r4, #12]
 80048f6:	61a0      	str	r0, [r4, #24]
 80048f8:	89a3      	ldrh	r3, [r4, #12]
 80048fa:	f043 0304 	orr.w	r3, r3, #4
 80048fe:	81a3      	strh	r3, [r4, #12]
 8004900:	6923      	ldr	r3, [r4, #16]
 8004902:	b91b      	cbnz	r3, 800490c <__srefill_r+0x84>
 8004904:	4621      	mov	r1, r4
 8004906:	4628      	mov	r0, r5
 8004908:	f7fe ffe4 	bl	80038d4 <__smakebuf_r>
 800490c:	89a6      	ldrh	r6, [r4, #12]
 800490e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8004912:	07b3      	lsls	r3, r6, #30
 8004914:	d00f      	beq.n	8004936 <__srefill_r+0xae>
 8004916:	2301      	movs	r3, #1
 8004918:	81a3      	strh	r3, [r4, #12]
 800491a:	4b1f      	ldr	r3, [pc, #124]	; (8004998 <__srefill_r+0x110>)
 800491c:	491f      	ldr	r1, [pc, #124]	; (800499c <__srefill_r+0x114>)
 800491e:	6818      	ldr	r0, [r3, #0]
 8004920:	f006 0609 	and.w	r6, r6, #9
 8004924:	f7fe fb2e 	bl	8002f84 <_fwalk>
 8004928:	2e09      	cmp	r6, #9
 800492a:	81a7      	strh	r7, [r4, #12]
 800492c:	d103      	bne.n	8004936 <__srefill_r+0xae>
 800492e:	4621      	mov	r1, r4
 8004930:	4628      	mov	r0, r5
 8004932:	f7fe f981 	bl	8002c38 <__sflush_r>
 8004936:	6922      	ldr	r2, [r4, #16]
 8004938:	4628      	mov	r0, r5
 800493a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800493c:	6963      	ldr	r3, [r4, #20]
 800493e:	6a21      	ldr	r1, [r4, #32]
 8004940:	6022      	str	r2, [r4, #0]
 8004942:	47b0      	blx	r6
 8004944:	2800      	cmp	r0, #0
 8004946:	6060      	str	r0, [r4, #4]
 8004948:	dc1d      	bgt.n	8004986 <__srefill_r+0xfe>
 800494a:	bf18      	it	ne
 800494c:	2200      	movne	r2, #0
 800494e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004952:	bf16      	itet	ne
 8004954:	6062      	strne	r2, [r4, #4]
 8004956:	f043 0320 	orreq.w	r3, r3, #32
 800495a:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800495e:	e7bb      	b.n	80048d8 <__srefill_r+0x50>
 8004960:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004962:	2900      	cmp	r1, #0
 8004964:	d0cc      	beq.n	8004900 <__srefill_r+0x78>
 8004966:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800496a:	4299      	cmp	r1, r3
 800496c:	d002      	beq.n	8004974 <__srefill_r+0xec>
 800496e:	4628      	mov	r0, r5
 8004970:	f7fe fb86 	bl	8003080 <_free_r>
 8004974:	2000      	movs	r0, #0
 8004976:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004978:	6360      	str	r0, [r4, #52]	; 0x34
 800497a:	6063      	str	r3, [r4, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d0bf      	beq.n	8004900 <__srefill_r+0x78>
 8004980:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004982:	6023      	str	r3, [r4, #0]
 8004984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004986:	2000      	movs	r0, #0
 8004988:	e7fc      	b.n	8004984 <__srefill_r+0xfc>
 800498a:	bf00      	nop
 800498c:	08005550 	.word	0x08005550
 8004990:	08005570 	.word	0x08005570
 8004994:	08005530 	.word	0x08005530
 8004998:	08005590 	.word	0x08005590
 800499c:	08004875 	.word	0x08004875

080049a0 <__srget_r>:
 80049a0:	b538      	push	{r3, r4, r5, lr}
 80049a2:	460c      	mov	r4, r1
 80049a4:	4605      	mov	r5, r0
 80049a6:	b118      	cbz	r0, 80049b0 <__srget_r+0x10>
 80049a8:	6983      	ldr	r3, [r0, #24]
 80049aa:	b90b      	cbnz	r3, 80049b0 <__srget_r+0x10>
 80049ac:	f7fe fa6c 	bl	8002e88 <__sinit>
 80049b0:	4b0e      	ldr	r3, [pc, #56]	; (80049ec <__srget_r+0x4c>)
 80049b2:	429c      	cmp	r4, r3
 80049b4:	d10d      	bne.n	80049d2 <__srget_r+0x32>
 80049b6:	686c      	ldr	r4, [r5, #4]
 80049b8:	4621      	mov	r1, r4
 80049ba:	4628      	mov	r0, r5
 80049bc:	f7ff ff64 	bl	8004888 <__srefill_r>
 80049c0:	b988      	cbnz	r0, 80049e6 <__srget_r+0x46>
 80049c2:	6863      	ldr	r3, [r4, #4]
 80049c4:	3b01      	subs	r3, #1
 80049c6:	6063      	str	r3, [r4, #4]
 80049c8:	6823      	ldr	r3, [r4, #0]
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	6022      	str	r2, [r4, #0]
 80049ce:	7818      	ldrb	r0, [r3, #0]
 80049d0:	bd38      	pop	{r3, r4, r5, pc}
 80049d2:	4b07      	ldr	r3, [pc, #28]	; (80049f0 <__srget_r+0x50>)
 80049d4:	429c      	cmp	r4, r3
 80049d6:	d101      	bne.n	80049dc <__srget_r+0x3c>
 80049d8:	68ac      	ldr	r4, [r5, #8]
 80049da:	e7ed      	b.n	80049b8 <__srget_r+0x18>
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <__srget_r+0x54>)
 80049de:	429c      	cmp	r4, r3
 80049e0:	bf08      	it	eq
 80049e2:	68ec      	ldreq	r4, [r5, #12]
 80049e4:	e7e8      	b.n	80049b8 <__srget_r+0x18>
 80049e6:	f04f 30ff 	mov.w	r0, #4294967295
 80049ea:	e7f1      	b.n	80049d0 <__srget_r+0x30>
 80049ec:	08005550 	.word	0x08005550
 80049f0:	08005570 	.word	0x08005570
 80049f4:	08005530 	.word	0x08005530

080049f8 <__sccl>:
 80049f8:	b570      	push	{r4, r5, r6, lr}
 80049fa:	780b      	ldrb	r3, [r1, #0]
 80049fc:	4604      	mov	r4, r0
 80049fe:	2b5e      	cmp	r3, #94	; 0x5e
 8004a00:	bf13      	iteet	ne
 8004a02:	2200      	movne	r2, #0
 8004a04:	2201      	moveq	r2, #1
 8004a06:	784b      	ldrbeq	r3, [r1, #1]
 8004a08:	1c48      	addne	r0, r1, #1
 8004a0a:	bf08      	it	eq
 8004a0c:	1c88      	addeq	r0, r1, #2
 8004a0e:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004a12:	1e61      	subs	r1, r4, #1
 8004a14:	f801 2f01 	strb.w	r2, [r1, #1]!
 8004a18:	42a9      	cmp	r1, r5
 8004a1a:	d1fb      	bne.n	8004a14 <__sccl+0x1c>
 8004a1c:	b90b      	cbnz	r3, 8004a22 <__sccl+0x2a>
 8004a1e:	3801      	subs	r0, #1
 8004a20:	bd70      	pop	{r4, r5, r6, pc}
 8004a22:	f082 0201 	eor.w	r2, r2, #1
 8004a26:	4605      	mov	r5, r0
 8004a28:	54e2      	strb	r2, [r4, r3]
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8004a30:	292d      	cmp	r1, #45	; 0x2d
 8004a32:	d006      	beq.n	8004a42 <__sccl+0x4a>
 8004a34:	295d      	cmp	r1, #93	; 0x5d
 8004a36:	d0f3      	beq.n	8004a20 <__sccl+0x28>
 8004a38:	b909      	cbnz	r1, 8004a3e <__sccl+0x46>
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	e7f0      	b.n	8004a20 <__sccl+0x28>
 8004a3e:	460b      	mov	r3, r1
 8004a40:	e7f1      	b.n	8004a26 <__sccl+0x2e>
 8004a42:	786e      	ldrb	r6, [r5, #1]
 8004a44:	2e5d      	cmp	r6, #93	; 0x5d
 8004a46:	d0fa      	beq.n	8004a3e <__sccl+0x46>
 8004a48:	42b3      	cmp	r3, r6
 8004a4a:	dcf8      	bgt.n	8004a3e <__sccl+0x46>
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	3502      	adds	r5, #2
 8004a50:	3101      	adds	r1, #1
 8004a52:	428e      	cmp	r6, r1
 8004a54:	5462      	strb	r2, [r4, r1]
 8004a56:	dcfb      	bgt.n	8004a50 <__sccl+0x58>
 8004a58:	1af1      	subs	r1, r6, r3
 8004a5a:	3901      	subs	r1, #1
 8004a5c:	42b3      	cmp	r3, r6
 8004a5e:	bfa8      	it	ge
 8004a60:	2100      	movge	r1, #0
 8004a62:	1c58      	adds	r0, r3, #1
 8004a64:	1843      	adds	r3, r0, r1
 8004a66:	e7e0      	b.n	8004a2a <__sccl+0x32>

08004a68 <_strtol_l.constprop.0>:
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a6e:	4680      	mov	r8, r0
 8004a70:	d001      	beq.n	8004a76 <_strtol_l.constprop.0+0xe>
 8004a72:	2b24      	cmp	r3, #36	; 0x24
 8004a74:	d906      	bls.n	8004a84 <_strtol_l.constprop.0+0x1c>
 8004a76:	f7fe f8d9 	bl	8002c2c <__errno>
 8004a7a:	2316      	movs	r3, #22
 8004a7c:	6003      	str	r3, [r0, #0]
 8004a7e:	2000      	movs	r0, #0
 8004a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a84:	460d      	mov	r5, r1
 8004a86:	4f35      	ldr	r7, [pc, #212]	; (8004b5c <_strtol_l.constprop.0+0xf4>)
 8004a88:	4628      	mov	r0, r5
 8004a8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004a8e:	5de6      	ldrb	r6, [r4, r7]
 8004a90:	f016 0608 	ands.w	r6, r6, #8
 8004a94:	d1f8      	bne.n	8004a88 <_strtol_l.constprop.0+0x20>
 8004a96:	2c2d      	cmp	r4, #45	; 0x2d
 8004a98:	d12f      	bne.n	8004afa <_strtol_l.constprop.0+0x92>
 8004a9a:	2601      	movs	r6, #1
 8004a9c:	782c      	ldrb	r4, [r5, #0]
 8004a9e:	1c85      	adds	r5, r0, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d057      	beq.n	8004b54 <_strtol_l.constprop.0+0xec>
 8004aa4:	2b10      	cmp	r3, #16
 8004aa6:	d109      	bne.n	8004abc <_strtol_l.constprop.0+0x54>
 8004aa8:	2c30      	cmp	r4, #48	; 0x30
 8004aaa:	d107      	bne.n	8004abc <_strtol_l.constprop.0+0x54>
 8004aac:	7828      	ldrb	r0, [r5, #0]
 8004aae:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004ab2:	2858      	cmp	r0, #88	; 0x58
 8004ab4:	d149      	bne.n	8004b4a <_strtol_l.constprop.0+0xe2>
 8004ab6:	2310      	movs	r3, #16
 8004ab8:	786c      	ldrb	r4, [r5, #1]
 8004aba:	3502      	adds	r5, #2
 8004abc:	2700      	movs	r7, #0
 8004abe:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8004ac2:	f10e 3eff 	add.w	lr, lr, #4294967295
 8004ac6:	fbbe f9f3 	udiv	r9, lr, r3
 8004aca:	4638      	mov	r0, r7
 8004acc:	fb03 ea19 	mls	sl, r3, r9, lr
 8004ad0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004ad4:	f1bc 0f09 	cmp.w	ip, #9
 8004ad8:	d814      	bhi.n	8004b04 <_strtol_l.constprop.0+0x9c>
 8004ada:	4664      	mov	r4, ip
 8004adc:	42a3      	cmp	r3, r4
 8004ade:	dd22      	ble.n	8004b26 <_strtol_l.constprop.0+0xbe>
 8004ae0:	2f00      	cmp	r7, #0
 8004ae2:	db1d      	blt.n	8004b20 <_strtol_l.constprop.0+0xb8>
 8004ae4:	4581      	cmp	r9, r0
 8004ae6:	d31b      	bcc.n	8004b20 <_strtol_l.constprop.0+0xb8>
 8004ae8:	d101      	bne.n	8004aee <_strtol_l.constprop.0+0x86>
 8004aea:	45a2      	cmp	sl, r4
 8004aec:	db18      	blt.n	8004b20 <_strtol_l.constprop.0+0xb8>
 8004aee:	2701      	movs	r7, #1
 8004af0:	fb00 4003 	mla	r0, r0, r3, r4
 8004af4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004af8:	e7ea      	b.n	8004ad0 <_strtol_l.constprop.0+0x68>
 8004afa:	2c2b      	cmp	r4, #43	; 0x2b
 8004afc:	bf04      	itt	eq
 8004afe:	782c      	ldrbeq	r4, [r5, #0]
 8004b00:	1c85      	addeq	r5, r0, #2
 8004b02:	e7cd      	b.n	8004aa0 <_strtol_l.constprop.0+0x38>
 8004b04:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004b08:	f1bc 0f19 	cmp.w	ip, #25
 8004b0c:	d801      	bhi.n	8004b12 <_strtol_l.constprop.0+0xaa>
 8004b0e:	3c37      	subs	r4, #55	; 0x37
 8004b10:	e7e4      	b.n	8004adc <_strtol_l.constprop.0+0x74>
 8004b12:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004b16:	f1bc 0f19 	cmp.w	ip, #25
 8004b1a:	d804      	bhi.n	8004b26 <_strtol_l.constprop.0+0xbe>
 8004b1c:	3c57      	subs	r4, #87	; 0x57
 8004b1e:	e7dd      	b.n	8004adc <_strtol_l.constprop.0+0x74>
 8004b20:	f04f 37ff 	mov.w	r7, #4294967295
 8004b24:	e7e6      	b.n	8004af4 <_strtol_l.constprop.0+0x8c>
 8004b26:	2f00      	cmp	r7, #0
 8004b28:	da07      	bge.n	8004b3a <_strtol_l.constprop.0+0xd2>
 8004b2a:	2322      	movs	r3, #34	; 0x22
 8004b2c:	4670      	mov	r0, lr
 8004b2e:	f8c8 3000 	str.w	r3, [r8]
 8004b32:	2a00      	cmp	r2, #0
 8004b34:	d0a4      	beq.n	8004a80 <_strtol_l.constprop.0+0x18>
 8004b36:	1e69      	subs	r1, r5, #1
 8004b38:	e005      	b.n	8004b46 <_strtol_l.constprop.0+0xde>
 8004b3a:	b106      	cbz	r6, 8004b3e <_strtol_l.constprop.0+0xd6>
 8004b3c:	4240      	negs	r0, r0
 8004b3e:	2a00      	cmp	r2, #0
 8004b40:	d09e      	beq.n	8004a80 <_strtol_l.constprop.0+0x18>
 8004b42:	2f00      	cmp	r7, #0
 8004b44:	d1f7      	bne.n	8004b36 <_strtol_l.constprop.0+0xce>
 8004b46:	6011      	str	r1, [r2, #0]
 8004b48:	e79a      	b.n	8004a80 <_strtol_l.constprop.0+0x18>
 8004b4a:	2430      	movs	r4, #48	; 0x30
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1b5      	bne.n	8004abc <_strtol_l.constprop.0+0x54>
 8004b50:	2308      	movs	r3, #8
 8004b52:	e7b3      	b.n	8004abc <_strtol_l.constprop.0+0x54>
 8004b54:	2c30      	cmp	r4, #48	; 0x30
 8004b56:	d0a9      	beq.n	8004aac <_strtol_l.constprop.0+0x44>
 8004b58:	230a      	movs	r3, #10
 8004b5a:	e7af      	b.n	8004abc <_strtol_l.constprop.0+0x54>
 8004b5c:	080055e3 	.word	0x080055e3

08004b60 <_strtol_r>:
 8004b60:	f7ff bf82 	b.w	8004a68 <_strtol_l.constprop.0>

08004b64 <_strtoul_l.constprop.0>:
 8004b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b68:	4686      	mov	lr, r0
 8004b6a:	460d      	mov	r5, r1
 8004b6c:	4f35      	ldr	r7, [pc, #212]	; (8004c44 <_strtoul_l.constprop.0+0xe0>)
 8004b6e:	4628      	mov	r0, r5
 8004b70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b74:	5de6      	ldrb	r6, [r4, r7]
 8004b76:	f016 0608 	ands.w	r6, r6, #8
 8004b7a:	d1f8      	bne.n	8004b6e <_strtoul_l.constprop.0+0xa>
 8004b7c:	2c2d      	cmp	r4, #45	; 0x2d
 8004b7e:	d12f      	bne.n	8004be0 <_strtoul_l.constprop.0+0x7c>
 8004b80:	2601      	movs	r6, #1
 8004b82:	782c      	ldrb	r4, [r5, #0]
 8004b84:	1c85      	adds	r5, r0, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d057      	beq.n	8004c3a <_strtoul_l.constprop.0+0xd6>
 8004b8a:	2b10      	cmp	r3, #16
 8004b8c:	d109      	bne.n	8004ba2 <_strtoul_l.constprop.0+0x3e>
 8004b8e:	2c30      	cmp	r4, #48	; 0x30
 8004b90:	d107      	bne.n	8004ba2 <_strtoul_l.constprop.0+0x3e>
 8004b92:	7828      	ldrb	r0, [r5, #0]
 8004b94:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004b98:	2858      	cmp	r0, #88	; 0x58
 8004b9a:	d149      	bne.n	8004c30 <_strtoul_l.constprop.0+0xcc>
 8004b9c:	2310      	movs	r3, #16
 8004b9e:	786c      	ldrb	r4, [r5, #1]
 8004ba0:	3502      	adds	r5, #2
 8004ba2:	f04f 38ff 	mov.w	r8, #4294967295
 8004ba6:	fbb8 f8f3 	udiv	r8, r8, r3
 8004baa:	2700      	movs	r7, #0
 8004bac:	fb03 f908 	mul.w	r9, r3, r8
 8004bb0:	4638      	mov	r0, r7
 8004bb2:	ea6f 0909 	mvn.w	r9, r9
 8004bb6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004bba:	f1bc 0f09 	cmp.w	ip, #9
 8004bbe:	d814      	bhi.n	8004bea <_strtoul_l.constprop.0+0x86>
 8004bc0:	4664      	mov	r4, ip
 8004bc2:	42a3      	cmp	r3, r4
 8004bc4:	dd22      	ble.n	8004c0c <_strtoul_l.constprop.0+0xa8>
 8004bc6:	2f00      	cmp	r7, #0
 8004bc8:	db1d      	blt.n	8004c06 <_strtoul_l.constprop.0+0xa2>
 8004bca:	4580      	cmp	r8, r0
 8004bcc:	d31b      	bcc.n	8004c06 <_strtoul_l.constprop.0+0xa2>
 8004bce:	d101      	bne.n	8004bd4 <_strtoul_l.constprop.0+0x70>
 8004bd0:	45a1      	cmp	r9, r4
 8004bd2:	db18      	blt.n	8004c06 <_strtoul_l.constprop.0+0xa2>
 8004bd4:	2701      	movs	r7, #1
 8004bd6:	fb00 4003 	mla	r0, r0, r3, r4
 8004bda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004bde:	e7ea      	b.n	8004bb6 <_strtoul_l.constprop.0+0x52>
 8004be0:	2c2b      	cmp	r4, #43	; 0x2b
 8004be2:	bf04      	itt	eq
 8004be4:	782c      	ldrbeq	r4, [r5, #0]
 8004be6:	1c85      	addeq	r5, r0, #2
 8004be8:	e7cd      	b.n	8004b86 <_strtoul_l.constprop.0+0x22>
 8004bea:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004bee:	f1bc 0f19 	cmp.w	ip, #25
 8004bf2:	d801      	bhi.n	8004bf8 <_strtoul_l.constprop.0+0x94>
 8004bf4:	3c37      	subs	r4, #55	; 0x37
 8004bf6:	e7e4      	b.n	8004bc2 <_strtoul_l.constprop.0+0x5e>
 8004bf8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004bfc:	f1bc 0f19 	cmp.w	ip, #25
 8004c00:	d804      	bhi.n	8004c0c <_strtoul_l.constprop.0+0xa8>
 8004c02:	3c57      	subs	r4, #87	; 0x57
 8004c04:	e7dd      	b.n	8004bc2 <_strtoul_l.constprop.0+0x5e>
 8004c06:	f04f 37ff 	mov.w	r7, #4294967295
 8004c0a:	e7e6      	b.n	8004bda <_strtoul_l.constprop.0+0x76>
 8004c0c:	2f00      	cmp	r7, #0
 8004c0e:	da07      	bge.n	8004c20 <_strtoul_l.constprop.0+0xbc>
 8004c10:	2322      	movs	r3, #34	; 0x22
 8004c12:	f04f 30ff 	mov.w	r0, #4294967295
 8004c16:	f8ce 3000 	str.w	r3, [lr]
 8004c1a:	b932      	cbnz	r2, 8004c2a <_strtoul_l.constprop.0+0xc6>
 8004c1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c20:	b106      	cbz	r6, 8004c24 <_strtoul_l.constprop.0+0xc0>
 8004c22:	4240      	negs	r0, r0
 8004c24:	2a00      	cmp	r2, #0
 8004c26:	d0f9      	beq.n	8004c1c <_strtoul_l.constprop.0+0xb8>
 8004c28:	b107      	cbz	r7, 8004c2c <_strtoul_l.constprop.0+0xc8>
 8004c2a:	1e69      	subs	r1, r5, #1
 8004c2c:	6011      	str	r1, [r2, #0]
 8004c2e:	e7f5      	b.n	8004c1c <_strtoul_l.constprop.0+0xb8>
 8004c30:	2430      	movs	r4, #48	; 0x30
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1b5      	bne.n	8004ba2 <_strtoul_l.constprop.0+0x3e>
 8004c36:	2308      	movs	r3, #8
 8004c38:	e7b3      	b.n	8004ba2 <_strtoul_l.constprop.0+0x3e>
 8004c3a:	2c30      	cmp	r4, #48	; 0x30
 8004c3c:	d0a9      	beq.n	8004b92 <_strtoul_l.constprop.0+0x2e>
 8004c3e:	230a      	movs	r3, #10
 8004c40:	e7af      	b.n	8004ba2 <_strtoul_l.constprop.0+0x3e>
 8004c42:	bf00      	nop
 8004c44:	080055e3 	.word	0x080055e3

08004c48 <_strtoul_r>:
 8004c48:	f7ff bf8c 	b.w	8004b64 <_strtoul_l.constprop.0>

08004c4c <__submore>:
 8004c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c50:	460c      	mov	r4, r1
 8004c52:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004c54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c58:	4299      	cmp	r1, r3
 8004c5a:	d11b      	bne.n	8004c94 <__submore+0x48>
 8004c5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c60:	f7fe fa76 	bl	8003150 <_malloc_r>
 8004c64:	b918      	cbnz	r0, 8004c6e <__submore+0x22>
 8004c66:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c72:	63a3      	str	r3, [r4, #56]	; 0x38
 8004c74:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004c78:	6360      	str	r0, [r4, #52]	; 0x34
 8004c7a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004c7e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004c82:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004c86:	7043      	strb	r3, [r0, #1]
 8004c88:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004c8c:	7003      	strb	r3, [r0, #0]
 8004c8e:	6020      	str	r0, [r4, #0]
 8004c90:	2000      	movs	r0, #0
 8004c92:	e7ea      	b.n	8004c6a <__submore+0x1e>
 8004c94:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004c96:	0077      	lsls	r7, r6, #1
 8004c98:	463a      	mov	r2, r7
 8004c9a:	f000 f8ff 	bl	8004e9c <_realloc_r>
 8004c9e:	4605      	mov	r5, r0
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	d0e0      	beq.n	8004c66 <__submore+0x1a>
 8004ca4:	eb00 0806 	add.w	r8, r0, r6
 8004ca8:	4601      	mov	r1, r0
 8004caa:	4632      	mov	r2, r6
 8004cac:	4640      	mov	r0, r8
 8004cae:	f000 f8cd 	bl	8004e4c <memcpy>
 8004cb2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004cb6:	f8c4 8000 	str.w	r8, [r4]
 8004cba:	e7e9      	b.n	8004c90 <__submore+0x44>

08004cbc <_ungetc_r>:
 8004cbc:	b570      	push	{r4, r5, r6, lr}
 8004cbe:	4614      	mov	r4, r2
 8004cc0:	1c4a      	adds	r2, r1, #1
 8004cc2:	4606      	mov	r6, r0
 8004cc4:	460d      	mov	r5, r1
 8004cc6:	d103      	bne.n	8004cd0 <_ungetc_r+0x14>
 8004cc8:	f04f 35ff 	mov.w	r5, #4294967295
 8004ccc:	4628      	mov	r0, r5
 8004cce:	bd70      	pop	{r4, r5, r6, pc}
 8004cd0:	b118      	cbz	r0, 8004cda <_ungetc_r+0x1e>
 8004cd2:	6983      	ldr	r3, [r0, #24]
 8004cd4:	b90b      	cbnz	r3, 8004cda <_ungetc_r+0x1e>
 8004cd6:	f7fe f8d7 	bl	8002e88 <__sinit>
 8004cda:	4b41      	ldr	r3, [pc, #260]	; (8004de0 <_ungetc_r+0x124>)
 8004cdc:	429c      	cmp	r4, r3
 8004cde:	d11d      	bne.n	8004d1c <_ungetc_r+0x60>
 8004ce0:	6874      	ldr	r4, [r6, #4]
 8004ce2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ce4:	07db      	lsls	r3, r3, #31
 8004ce6:	d405      	bmi.n	8004cf4 <_ungetc_r+0x38>
 8004ce8:	89a3      	ldrh	r3, [r4, #12]
 8004cea:	0598      	lsls	r0, r3, #22
 8004cec:	d402      	bmi.n	8004cf4 <_ungetc_r+0x38>
 8004cee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cf0:	f7fe f9bb 	bl	800306a <__retarget_lock_acquire_recursive>
 8004cf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cf8:	f023 0320 	bic.w	r3, r3, #32
 8004cfc:	0759      	lsls	r1, r3, #29
 8004cfe:	81a3      	strh	r3, [r4, #12]
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	d42d      	bmi.n	8004d60 <_ungetc_r+0xa4>
 8004d04:	06d3      	lsls	r3, r2, #27
 8004d06:	d413      	bmi.n	8004d30 <_ungetc_r+0x74>
 8004d08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d0a:	07dd      	lsls	r5, r3, #31
 8004d0c:	d4dc      	bmi.n	8004cc8 <_ungetc_r+0xc>
 8004d0e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004d12:	d1d9      	bne.n	8004cc8 <_ungetc_r+0xc>
 8004d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d16:	f7fe f9a9 	bl	800306c <__retarget_lock_release_recursive>
 8004d1a:	e7d5      	b.n	8004cc8 <_ungetc_r+0xc>
 8004d1c:	4b31      	ldr	r3, [pc, #196]	; (8004de4 <_ungetc_r+0x128>)
 8004d1e:	429c      	cmp	r4, r3
 8004d20:	d101      	bne.n	8004d26 <_ungetc_r+0x6a>
 8004d22:	68b4      	ldr	r4, [r6, #8]
 8004d24:	e7dd      	b.n	8004ce2 <_ungetc_r+0x26>
 8004d26:	4b30      	ldr	r3, [pc, #192]	; (8004de8 <_ungetc_r+0x12c>)
 8004d28:	429c      	cmp	r4, r3
 8004d2a:	bf08      	it	eq
 8004d2c:	68f4      	ldreq	r4, [r6, #12]
 8004d2e:	e7d8      	b.n	8004ce2 <_ungetc_r+0x26>
 8004d30:	0710      	lsls	r0, r2, #28
 8004d32:	d511      	bpl.n	8004d58 <_ungetc_r+0x9c>
 8004d34:	4621      	mov	r1, r4
 8004d36:	4630      	mov	r0, r6
 8004d38:	f7fe f800 	bl	8002d3c <_fflush_r>
 8004d3c:	b130      	cbz	r0, 8004d4c <_ungetc_r+0x90>
 8004d3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d40:	07d9      	lsls	r1, r3, #31
 8004d42:	d4c1      	bmi.n	8004cc8 <_ungetc_r+0xc>
 8004d44:	89a3      	ldrh	r3, [r4, #12]
 8004d46:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004d4a:	e7e2      	b.n	8004d12 <_ungetc_r+0x56>
 8004d4c:	89a3      	ldrh	r3, [r4, #12]
 8004d4e:	60a0      	str	r0, [r4, #8]
 8004d50:	f023 0308 	bic.w	r3, r3, #8
 8004d54:	81a3      	strh	r3, [r4, #12]
 8004d56:	61a0      	str	r0, [r4, #24]
 8004d58:	89a3      	ldrh	r3, [r4, #12]
 8004d5a:	f043 0304 	orr.w	r3, r3, #4
 8004d5e:	81a3      	strh	r3, [r4, #12]
 8004d60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d62:	6862      	ldr	r2, [r4, #4]
 8004d64:	b2ed      	uxtb	r5, r5
 8004d66:	b1d3      	cbz	r3, 8004d9e <_ungetc_r+0xe2>
 8004d68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	dc05      	bgt.n	8004d7a <_ungetc_r+0xbe>
 8004d6e:	4621      	mov	r1, r4
 8004d70:	4630      	mov	r0, r6
 8004d72:	f7ff ff6b 	bl	8004c4c <__submore>
 8004d76:	2800      	cmp	r0, #0
 8004d78:	d1e1      	bne.n	8004d3e <_ungetc_r+0x82>
 8004d7a:	6823      	ldr	r3, [r4, #0]
 8004d7c:	1e5a      	subs	r2, r3, #1
 8004d7e:	6022      	str	r2, [r4, #0]
 8004d80:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004d84:	6863      	ldr	r3, [r4, #4]
 8004d86:	3301      	adds	r3, #1
 8004d88:	6063      	str	r3, [r4, #4]
 8004d8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d8c:	07da      	lsls	r2, r3, #31
 8004d8e:	d49d      	bmi.n	8004ccc <_ungetc_r+0x10>
 8004d90:	89a3      	ldrh	r3, [r4, #12]
 8004d92:	059b      	lsls	r3, r3, #22
 8004d94:	d49a      	bmi.n	8004ccc <_ungetc_r+0x10>
 8004d96:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d98:	f7fe f968 	bl	800306c <__retarget_lock_release_recursive>
 8004d9c:	e796      	b.n	8004ccc <_ungetc_r+0x10>
 8004d9e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004da0:	6920      	ldr	r0, [r4, #16]
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	f001 0101 	and.w	r1, r1, #1
 8004da8:	b160      	cbz	r0, 8004dc4 <_ungetc_r+0x108>
 8004daa:	4298      	cmp	r0, r3
 8004dac:	d20a      	bcs.n	8004dc4 <_ungetc_r+0x108>
 8004dae:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8004db2:	42a8      	cmp	r0, r5
 8004db4:	d106      	bne.n	8004dc4 <_ungetc_r+0x108>
 8004db6:	3b01      	subs	r3, #1
 8004db8:	3201      	adds	r2, #1
 8004dba:	6023      	str	r3, [r4, #0]
 8004dbc:	6062      	str	r2, [r4, #4]
 8004dbe:	2900      	cmp	r1, #0
 8004dc0:	d184      	bne.n	8004ccc <_ungetc_r+0x10>
 8004dc2:	e7e5      	b.n	8004d90 <_ungetc_r+0xd4>
 8004dc4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004dc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004dcc:	6363      	str	r3, [r4, #52]	; 0x34
 8004dce:	2303      	movs	r3, #3
 8004dd0:	63a3      	str	r3, [r4, #56]	; 0x38
 8004dd2:	4623      	mov	r3, r4
 8004dd4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004dd8:	6023      	str	r3, [r4, #0]
 8004dda:	2301      	movs	r3, #1
 8004ddc:	6063      	str	r3, [r4, #4]
 8004dde:	e7ee      	b.n	8004dbe <_ungetc_r+0x102>
 8004de0:	08005550 	.word	0x08005550
 8004de4:	08005570 	.word	0x08005570
 8004de8:	08005530 	.word	0x08005530

08004dec <_fstat_r>:
 8004dec:	b538      	push	{r3, r4, r5, lr}
 8004dee:	2300      	movs	r3, #0
 8004df0:	4d06      	ldr	r5, [pc, #24]	; (8004e0c <_fstat_r+0x20>)
 8004df2:	4604      	mov	r4, r0
 8004df4:	4608      	mov	r0, r1
 8004df6:	4611      	mov	r1, r2
 8004df8:	602b      	str	r3, [r5, #0]
 8004dfa:	f7fc f901 	bl	8001000 <_fstat>
 8004dfe:	1c43      	adds	r3, r0, #1
 8004e00:	d102      	bne.n	8004e08 <_fstat_r+0x1c>
 8004e02:	682b      	ldr	r3, [r5, #0]
 8004e04:	b103      	cbz	r3, 8004e08 <_fstat_r+0x1c>
 8004e06:	6023      	str	r3, [r4, #0]
 8004e08:	bd38      	pop	{r3, r4, r5, pc}
 8004e0a:	bf00      	nop
 8004e0c:	20000128 	.word	0x20000128

08004e10 <_isatty_r>:
 8004e10:	b538      	push	{r3, r4, r5, lr}
 8004e12:	2300      	movs	r3, #0
 8004e14:	4d05      	ldr	r5, [pc, #20]	; (8004e2c <_isatty_r+0x1c>)
 8004e16:	4604      	mov	r4, r0
 8004e18:	4608      	mov	r0, r1
 8004e1a:	602b      	str	r3, [r5, #0]
 8004e1c:	f7fc f8ff 	bl	800101e <_isatty>
 8004e20:	1c43      	adds	r3, r0, #1
 8004e22:	d102      	bne.n	8004e2a <_isatty_r+0x1a>
 8004e24:	682b      	ldr	r3, [r5, #0]
 8004e26:	b103      	cbz	r3, 8004e2a <_isatty_r+0x1a>
 8004e28:	6023      	str	r3, [r4, #0]
 8004e2a:	bd38      	pop	{r3, r4, r5, pc}
 8004e2c:	20000128 	.word	0x20000128

08004e30 <memchr>:
 8004e30:	4603      	mov	r3, r0
 8004e32:	b510      	push	{r4, lr}
 8004e34:	b2c9      	uxtb	r1, r1
 8004e36:	4402      	add	r2, r0
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	d101      	bne.n	8004e42 <memchr+0x12>
 8004e3e:	2000      	movs	r0, #0
 8004e40:	e003      	b.n	8004e4a <memchr+0x1a>
 8004e42:	7804      	ldrb	r4, [r0, #0]
 8004e44:	3301      	adds	r3, #1
 8004e46:	428c      	cmp	r4, r1
 8004e48:	d1f6      	bne.n	8004e38 <memchr+0x8>
 8004e4a:	bd10      	pop	{r4, pc}

08004e4c <memcpy>:
 8004e4c:	440a      	add	r2, r1
 8004e4e:	4291      	cmp	r1, r2
 8004e50:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e54:	d100      	bne.n	8004e58 <memcpy+0xc>
 8004e56:	4770      	bx	lr
 8004e58:	b510      	push	{r4, lr}
 8004e5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e5e:	4291      	cmp	r1, r2
 8004e60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e64:	d1f9      	bne.n	8004e5a <memcpy+0xe>
 8004e66:	bd10      	pop	{r4, pc}

08004e68 <memmove>:
 8004e68:	4288      	cmp	r0, r1
 8004e6a:	b510      	push	{r4, lr}
 8004e6c:	eb01 0402 	add.w	r4, r1, r2
 8004e70:	d902      	bls.n	8004e78 <memmove+0x10>
 8004e72:	4284      	cmp	r4, r0
 8004e74:	4623      	mov	r3, r4
 8004e76:	d807      	bhi.n	8004e88 <memmove+0x20>
 8004e78:	1e43      	subs	r3, r0, #1
 8004e7a:	42a1      	cmp	r1, r4
 8004e7c:	d008      	beq.n	8004e90 <memmove+0x28>
 8004e7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e86:	e7f8      	b.n	8004e7a <memmove+0x12>
 8004e88:	4601      	mov	r1, r0
 8004e8a:	4402      	add	r2, r0
 8004e8c:	428a      	cmp	r2, r1
 8004e8e:	d100      	bne.n	8004e92 <memmove+0x2a>
 8004e90:	bd10      	pop	{r4, pc}
 8004e92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e9a:	e7f7      	b.n	8004e8c <memmove+0x24>

08004e9c <_realloc_r>:
 8004e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea0:	4680      	mov	r8, r0
 8004ea2:	4614      	mov	r4, r2
 8004ea4:	460e      	mov	r6, r1
 8004ea6:	b921      	cbnz	r1, 8004eb2 <_realloc_r+0x16>
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eae:	f7fe b94f 	b.w	8003150 <_malloc_r>
 8004eb2:	b92a      	cbnz	r2, 8004ec0 <_realloc_r+0x24>
 8004eb4:	f7fe f8e4 	bl	8003080 <_free_r>
 8004eb8:	4625      	mov	r5, r4
 8004eba:	4628      	mov	r0, r5
 8004ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ec0:	f000 f81b 	bl	8004efa <_malloc_usable_size_r>
 8004ec4:	4284      	cmp	r4, r0
 8004ec6:	4607      	mov	r7, r0
 8004ec8:	d802      	bhi.n	8004ed0 <_realloc_r+0x34>
 8004eca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004ece:	d812      	bhi.n	8004ef6 <_realloc_r+0x5a>
 8004ed0:	4621      	mov	r1, r4
 8004ed2:	4640      	mov	r0, r8
 8004ed4:	f7fe f93c 	bl	8003150 <_malloc_r>
 8004ed8:	4605      	mov	r5, r0
 8004eda:	2800      	cmp	r0, #0
 8004edc:	d0ed      	beq.n	8004eba <_realloc_r+0x1e>
 8004ede:	42bc      	cmp	r4, r7
 8004ee0:	4622      	mov	r2, r4
 8004ee2:	4631      	mov	r1, r6
 8004ee4:	bf28      	it	cs
 8004ee6:	463a      	movcs	r2, r7
 8004ee8:	f7ff ffb0 	bl	8004e4c <memcpy>
 8004eec:	4631      	mov	r1, r6
 8004eee:	4640      	mov	r0, r8
 8004ef0:	f7fe f8c6 	bl	8003080 <_free_r>
 8004ef4:	e7e1      	b.n	8004eba <_realloc_r+0x1e>
 8004ef6:	4635      	mov	r5, r6
 8004ef8:	e7df      	b.n	8004eba <_realloc_r+0x1e>

08004efa <_malloc_usable_size_r>:
 8004efa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004efe:	1f18      	subs	r0, r3, #4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	bfbc      	itt	lt
 8004f04:	580b      	ldrlt	r3, [r1, r0]
 8004f06:	18c0      	addlt	r0, r0, r3
 8004f08:	4770      	bx	lr
	...

08004f0c <_init>:
 8004f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0e:	bf00      	nop
 8004f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f12:	bc08      	pop	{r3}
 8004f14:	469e      	mov	lr, r3
 8004f16:	4770      	bx	lr

08004f18 <_fini>:
 8004f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1a:	bf00      	nop
 8004f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f1e:	bc08      	pop	{r3}
 8004f20:	469e      	mov	lr, r3
 8004f22:	4770      	bx	lr
