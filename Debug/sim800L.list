
sim800L.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f20  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a20  0800502c  0800502c  0001502c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a4c  08005a4c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005a4c  08005a4c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a4c  08005a4c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a4c  08005a4c  00015a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a50  08005a50  00015a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000070  08005ac4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08005ac4  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007bd4  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a74  00000000  00000000  00027c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  000296e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000798  00000000  00000000  00029f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c2b  00000000  00000000  0002a6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008b18  00000000  00000000  000422eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083d45  00000000  00000000  0004ae03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ceb48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002db8  00000000  00000000  000ceb98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08005014 	.word	0x08005014

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08005014 	.word	0x08005014

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000164:	1d39      	adds	r1, r7, #4
 8000166:	f04f 33ff 	mov.w	r3, #4294967295
 800016a:	2201      	movs	r2, #1
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <__io_putchar+0x20>)
 800016e:	f002 f91c 	bl	80023aa <HAL_UART_Transmit>
  return ch;
 8000172:	687b      	ldr	r3, [r7, #4]
}
 8000174:	4618      	mov	r0, r3
 8000176:	3708      	adds	r7, #8
 8000178:	46bd      	mov	sp, r7
 800017a:	bd80      	pop	{r7, pc}
 800017c:	2000008c 	.word	0x2000008c

08000180 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8000186:	2300      	movs	r3, #0
 8000188:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart1);
 800018a:	2300      	movs	r3, #0
 800018c:	603b      	str	r3, [r7, #0]
 800018e:	4b0e      	ldr	r3, [pc, #56]	; (80001c8 <__io_getchar+0x48>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	603b      	str	r3, [r7, #0]
 8000196:	4b0c      	ldr	r3, [pc, #48]	; (80001c8 <__io_getchar+0x48>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	603b      	str	r3, [r7, #0]
 800019e:	683b      	ldr	r3, [r7, #0]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80001a0:	1df9      	adds	r1, r7, #7
 80001a2:	f04f 33ff 	mov.w	r3, #4294967295
 80001a6:	2201      	movs	r2, #1
 80001a8:	4807      	ldr	r0, [pc, #28]	; (80001c8 <__io_getchar+0x48>)
 80001aa:	f002 f990 	bl	80024ce <HAL_UART_Receive>
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80001ae:	1df9      	adds	r1, r7, #7
 80001b0:	f04f 33ff 	mov.w	r3, #4294967295
 80001b4:	2201      	movs	r2, #1
 80001b6:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__io_getchar+0x48>)
 80001b8:	f002 f8f7 	bl	80023aa <HAL_UART_Transmit>

  return ch;
 80001bc:	79fb      	ldrb	r3, [r7, #7]
}
 80001be:	4618      	mov	r0, r3
 80001c0:	3708      	adds	r7, #8
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bd80      	pop	{r7, pc}
 80001c6:	bf00      	nop
 80001c8:	2000008c 	.word	0x2000008c

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b5b0      	push	{r4, r5, r7, lr}
 80001ce:	f5ad 6d2b 	sub.w	sp, sp, #2736	; 0xab0
 80001d2:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f001 f888 	bl	80012e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f9bc 	bl	8000554 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  setvbuf(stdin, NULL, _IONBF, 0);	// Esto es necesario para que scanf ande bien
 80001dc:	4bbc      	ldr	r3, [pc, #752]	; (80004d0 <main+0x304>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	6858      	ldr	r0, [r3, #4]
 80001e2:	2300      	movs	r3, #0
 80001e4:	2202      	movs	r2, #2
 80001e6:	2100      	movs	r1, #0
 80001e8:	f003 f9c4 	bl	8003574 <setvbuf>
  	  	  	  	  	  	  	  	    // con esto y lo de arriba ya anda el scanf :)

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ec:	f000 fa42 	bl	8000674 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001f0:	f000 f9ec 	bl	80005cc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80001f4:	f000 fa14 	bl	8000620 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */

  printf("Test de comandos AT... \r\n");
 80001f8:	48b6      	ldr	r0, [pc, #728]	; (80004d4 <main+0x308>)
 80001fa:	f003 f98b 	bl	8003514 <puts>

  // Inicializacion de la clase con la que manejo el sim800L

  SIM800 sim800;
  InitSIM(&sim800,&huart2,1);
 80001fe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000202:	2201      	movs	r2, #1
 8000204:	49b4      	ldr	r1, [pc, #720]	; (80004d8 <main+0x30c>)
 8000206:	4618      	mov	r0, r3
 8000208:	f000 fa8e 	bl	8000728 <InitSIM>

  EnviarAT(&sim800);
 800020c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000210:	4618      	mov	r0, r3
 8000212:	f000 fbb9 	bl	8000988 <EnviarAT>
  ConsultarEstadoSIM(&sim800);
 8000216:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800021a:	4618      	mov	r0, r3
 800021c:	f000 fbd4 	bl	80009c8 <ConsultarEstadoSIM>

  int bypass_conection = 0;
 8000220:	2300      	movs	r3, #0
 8000222:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4

  printf("Conectando a la red...(Presione alguna tecla para diagnosticar)\r\n");
 8000226:	48ad      	ldr	r0, [pc, #692]	; (80004dc <main+0x310>)
 8000228:	f003 f974 	bl	8003514 <puts>


  while( ( isConnected(&sim800,0) != 1 ) && (bypass_conection == 0) )
 800022c:	e04d      	b.n	80002ca <main+0xfe>
  {
	  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE) == SET)
 800022e:	4bac      	ldr	r3, [pc, #688]	; (80004e0 <main+0x314>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	f003 0320 	and.w	r3, r3, #32
 8000238:	2b20      	cmp	r3, #32
 800023a:	d146      	bne.n	80002ca <main+0xfe>
	  {
		  {
			  printf("Todavia no se ha podido establecer la conexion.\r\n");
 800023c:	48a9      	ldr	r0, [pc, #676]	; (80004e4 <main+0x318>)
 800023e:	f003 f969 	bl	8003514 <puts>
		  	  printf("1) Reintentar\r\n");
 8000242:	48a9      	ldr	r0, [pc, #676]	; (80004e8 <main+0x31c>)
 8000244:	f003 f966 	bl	8003514 <puts>
		  	  printf("2) Diagnosticar\r\n");
 8000248:	48a8      	ldr	r0, [pc, #672]	; (80004ec <main+0x320>)
 800024a:	f003 f963 	bl	8003514 <puts>
		  	  printf("3) Serial Debug\r\n");
 800024e:	48a8      	ldr	r0, [pc, #672]	; (80004f0 <main+0x324>)
 8000250:	f003 f960 	bl	8003514 <puts>
		  	  printf("4) Continuar sin conexion\r\n");
 8000254:	48a7      	ldr	r0, [pc, #668]	; (80004f4 <main+0x328>)
 8000256:	f003 f95d 	bl	8003514 <puts>

		  	  int opcion;
		  	  scanf("%d",&opcion);
 800025a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800025e:	4619      	mov	r1, r3
 8000260:	48a5      	ldr	r0, [pc, #660]	; (80004f8 <main+0x32c>)
 8000262:	f003 f96f 	bl	8003544 <iscanf>
		  	  switch(opcion)
 8000266:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800026a:	f6a3 2338 	subw	r3, r3, #2616	; 0xa38
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	3b01      	subs	r3, #1
 8000272:	2b03      	cmp	r3, #3
 8000274:	d826      	bhi.n	80002c4 <main+0xf8>
 8000276:	a201      	add	r2, pc, #4	; (adr r2, 800027c <main+0xb0>)
 8000278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800027c:	080002c5 	.word	0x080002c5
 8000280:	0800028d 	.word	0x0800028d
 8000284:	080002ab 	.word	0x080002ab
 8000288:	080002bd 	.word	0x080002bd
		  	  {
		  	  case 1:
		  		  break;
		  	  case 2:
		  		  ConsultarSignal(&sim800);
 800028c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000290:	4618      	mov	r0, r3
 8000292:	f000 fb89 	bl	80009a8 <ConsultarSignal>
		  		  HAL_Delay(1000);
 8000296:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800029a:	f001 f887 	bl	80013ac <HAL_Delay>
		  		  ListarRedesDisponibles(&sim800);
 800029e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 fbee 	bl	8000a84 <ListarRedesDisponibles>
		  		  break;
 80002a8:	e00c      	b.n	80002c4 <main+0xf8>
		  	  case 3:
		  		  printf("Modo de Serial Debug. Ingrese ctr+z para salir\r\n");
 80002aa:	4894      	ldr	r0, [pc, #592]	; (80004fc <main+0x330>)
 80002ac:	f003 f932 	bl	8003514 <puts>
		  		  SerialDebug(&huart1,&huart2,26);
 80002b0:	221a      	movs	r2, #26
 80002b2:	4989      	ldr	r1, [pc, #548]	; (80004d8 <main+0x30c>)
 80002b4:	488a      	ldr	r0, [pc, #552]	; (80004e0 <main+0x314>)
 80002b6:	f000 fb2f 	bl	8000918 <SerialDebug>
		  		  break;
 80002ba:	e003      	b.n	80002c4 <main+0xf8>

		  	  case 4:
		  		  bypass_conection=1;
 80002bc:	2301      	movs	r3, #1
 80002be:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
		  		  break;
 80002c2:	bf00      	nop
		  	  }

		    }
		  printf("Conectando a la red...(Presione alguna tecla para diagnosticar)\r\n");
 80002c4:	4885      	ldr	r0, [pc, #532]	; (80004dc <main+0x310>)
 80002c6:	f003 f925 	bl	8003514 <puts>
  while( ( isConnected(&sim800,0) != 1 ) && (bypass_conection == 0) )
 80002ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80002ce:	2100      	movs	r1, #0
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 fbeb 	bl	8000aac <isConnected>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d003      	beq.n	80002e4 <main+0x118>
 80002dc:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d0a4      	beq.n	800022e <main+0x62>
	  }
  }
  printf("Conectado con exito\r\n");
 80002e4:	4886      	ldr	r0, [pc, #536]	; (8000500 <main+0x334>)
 80002e6:	f003 f915 	bl	8003514 <puts>

  ConsultarBateria(&sim800);
 80002ea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 fb7a 	bl	80009e8 <ConsultarBateria>
  InitGPRS(&sim800,1);
 80002f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80002f8:	2101      	movs	r1, #1
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 fa4a 	bl	8000794 <InitGPRS>
  BorrarAllSMS(&sim800, 1);
 8000300:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000304:	2101      	movs	r1, #1
 8000306:	4618      	mov	r0, r3
 8000308:	f000 fd54 	bl	8000db4 <BorrarAllSMS>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	printf("Bienvenido al Test de SIM800L\r\n");
 800030c:	487d      	ldr	r0, [pc, #500]	; (8000504 <main+0x338>)
 800030e:	f003 f901 	bl	8003514 <puts>
	printf("1) Serial Debug\r\n");
 8000312:	487d      	ldr	r0, [pc, #500]	; (8000508 <main+0x33c>)
 8000314:	f003 f8fe 	bl	8003514 <puts>
	printf("2) Recibir msj SMS \r\n");
 8000318:	487c      	ldr	r0, [pc, #496]	; (800050c <main+0x340>)
 800031a:	f003 f8fb 	bl	8003514 <puts>
	printf("3) Enviar msj SMS \r\n");
 800031e:	487c      	ldr	r0, [pc, #496]	; (8000510 <main+0x344>)
 8000320:	f003 f8f8 	bl	8003514 <puts>
	printf("4) Testear el modo GPRS\r\n");
 8000324:	487b      	ldr	r0, [pc, #492]	; (8000514 <main+0x348>)
 8000326:	f003 f8f5 	bl	8003514 <puts>
	printf("5) Enviar un msj TCP\r\n");
 800032a:	487b      	ldr	r0, [pc, #492]	; (8000518 <main+0x34c>)
 800032c:	f003 f8f2 	bl	8003514 <puts>
	printf("6) Enviar un msj largo (500 bytes) por TCP\r\n");
 8000330:	487a      	ldr	r0, [pc, #488]	; (800051c <main+0x350>)
 8000332:	f003 f8ef 	bl	8003514 <puts>

	int opcion1;
	char opcion2;
	fflush(stdin);scanf("%d",&opcion1);
 8000336:	4b66      	ldr	r3, [pc, #408]	; (80004d0 <main+0x304>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	685b      	ldr	r3, [r3, #4]
 800033c:	4618      	mov	r0, r3
 800033e:	f002 fe25 	bl	8002f8c <fflush>
 8000342:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000346:	4619      	mov	r1, r3
 8000348:	486b      	ldr	r0, [pc, #428]	; (80004f8 <main+0x32c>)
 800034a:	f003 f8fb 	bl	8003544 <iscanf>

	char IP [50] = "181.231.229.4";
 800034e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8000352:	f6a3 25a4 	subw	r5, r3, #2724	; 0xaa4
 8000356:	4b72      	ldr	r3, [pc, #456]	; (8000520 <main+0x354>)
 8000358:	462c      	mov	r4, r5
 800035a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800035c:	c407      	stmia	r4!, {r0, r1, r2}
 800035e:	8023      	strh	r3, [r4, #0]
 8000360:	f105 030e 	add.w	r3, r5, #14
 8000364:	2224      	movs	r2, #36	; 0x24
 8000366:	2100      	movs	r1, #0
 8000368:	4618      	mov	r0, r3
 800036a:	f002 ff68 	bl	800323e <memset>
	int puerto = 1150;
 800036e:	f240 437e 	movw	r3, #1150	; 0x47e
 8000372:	f8c7 3aa0 	str.w	r3, [r7, #2720]	; 0xaa0

	switch(opcion1)
 8000376:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800037a:	f6a3 233c 	subw	r3, r3, #2620	; 0xa3c
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	3b01      	subs	r3, #1
 8000382:	2b05      	cmp	r3, #5
 8000384:	d8c2      	bhi.n	800030c <main+0x140>
 8000386:	a201      	add	r2, pc, #4	; (adr r2, 800038c <main+0x1c0>)
 8000388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800038c:	080003a5 	.word	0x080003a5
 8000390:	080003b9 	.word	0x080003b9
 8000394:	08000463 	.word	0x08000463
 8000398:	08000473 	.word	0x08000473
 800039c:	08000487 	.word	0x08000487
 80003a0:	080004a7 	.word	0x080004a7
	{
	case 1:
		printf("Modo de Serial Debug. Ingrese ctr+z para salir\r\n");
 80003a4:	4855      	ldr	r0, [pc, #340]	; (80004fc <main+0x330>)
 80003a6:	f003 f8b5 	bl	8003514 <puts>
		SerialDebug(&huart1,&huart2,26);
 80003aa:	221a      	movs	r2, #26
 80003ac:	494a      	ldr	r1, [pc, #296]	; (80004d8 <main+0x30c>)
 80003ae:	484c      	ldr	r0, [pc, #304]	; (80004e0 <main+0x314>)
 80003b0:	f000 fab2 	bl	8000918 <SerialDebug>
		break;
 80003b4:	e08a      	b.n	80004cc <main+0x300>
	case 2:
 80003b6:	bf00      	nop
			do{
				printf("Esperando por SMS (Presione ctrl+z para abortar)...\r\n");
 80003b8:	485a      	ldr	r0, [pc, #360]	; (8000524 <main+0x358>)
 80003ba:	f003 f8ab 	bl	8003514 <puts>
				char comando1 [LEN_CMD] = "\r\nLED_TOGGLE\r\n";
 80003be:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80003c2:	f5a3 6527 	sub.w	r5, r3, #2672	; 0xa70
 80003c6:	4b58      	ldr	r3, [pc, #352]	; (8000528 <main+0x35c>)
 80003c8:	462c      	mov	r4, r5
 80003ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003cc:	c407      	stmia	r4!, {r0, r1, r2}
 80003ce:	8023      	strh	r3, [r4, #0]
 80003d0:	3402      	adds	r4, #2
 80003d2:	0c1b      	lsrs	r3, r3, #16
 80003d4:	7023      	strb	r3, [r4, #0]
 80003d6:	f105 030f 	add.w	r3, r5, #15
 80003da:	2223      	movs	r2, #35	; 0x23
 80003dc:	2100      	movs	r1, #0
 80003de:	4618      	mov	r0, r3
 80003e0:	f002 ff2d 	bl	800323e <memset>

				if (ListenSMS(&sim800,&huart1) == 1)
 80003e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80003e8:	493d      	ldr	r1, [pc, #244]	; (80004e0 <main+0x314>)
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 fd0c 	bl	8000e08 <ListenSMS>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d11e      	bne.n	8000434 <main+0x268>
				{
					printf("Texto del mensaje: %s",sim800.txt_last_sms);
 80003f6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80003fa:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 80003fe:	4619      	mov	r1, r3
 8000400:	484a      	ldr	r0, [pc, #296]	; (800052c <main+0x360>)
 8000402:	f003 f801 	bl	8003408 <iprintf>
					if(strncmp((sim800.txt_last_sms),comando1,strlen(comando1)) == 0)
 8000406:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800040a:	4618      	mov	r0, r3
 800040c:	f7ff fe9e 	bl	800014c <strlen>
 8000410:	4602      	mov	r2, r0
 8000412:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000416:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800041a:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 800041e:	4618      	mov	r0, r3
 8000420:	f003 f9d1 	bl	80037c6 <strncmp>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d104      	bne.n	8000434 <main+0x268>
					{
						HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800042a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800042e:	4840      	ldr	r0, [pc, #256]	; (8000530 <main+0x364>)
 8000430:	f001 fb3a 	bl	8001aa8 <HAL_GPIO_TogglePin>
					}
				}


				printf("Desea esperar por otro SMS? (s/n) \r\n");
 8000434:	483f      	ldr	r0, [pc, #252]	; (8000534 <main+0x368>)
 8000436:	f003 f86d 	bl	8003514 <puts>
				fflush(stdin);
 800043a:	4b25      	ldr	r3, [pc, #148]	; (80004d0 <main+0x304>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	685b      	ldr	r3, [r3, #4]
 8000440:	4618      	mov	r0, r3
 8000442:	f002 fda3 	bl	8002f8c <fflush>
				scanf("%c",&opcion2);
 8000446:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800044a:	4619      	mov	r1, r3
 800044c:	483a      	ldr	r0, [pc, #232]	; (8000538 <main+0x36c>)
 800044e:	f003 f879 	bl	8003544 <iscanf>
				}while( opcion2 == 's');
 8000452:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8000456:	f6a3 233d 	subw	r3, r3, #2621	; 0xa3d
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	2b73      	cmp	r3, #115	; 0x73
 800045e:	d0aa      	beq.n	80003b6 <main+0x1ea>

			break;
 8000460:	e034      	b.n	80004cc <main+0x300>

	case 3:
		EnviarSMS(&sim800,"+5492966544589","Hola desde el SIM800 por SMS",1);
 8000462:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8000466:	2301      	movs	r3, #1
 8000468:	4a34      	ldr	r2, [pc, #208]	; (800053c <main+0x370>)
 800046a:	4935      	ldr	r1, [pc, #212]	; (8000540 <main+0x374>)
 800046c:	f000 fc7c 	bl	8000d68 <EnviarSMS>
		break;
 8000470:	e02c      	b.n	80004cc <main+0x300>

	case 4:
		printf("Probando GPRS, recuperando algo de una pag web... \r\n");
 8000472:	4834      	ldr	r0, [pc, #208]	; (8000544 <main+0x378>)
 8000474:	f003 f84e 	bl	8003514 <puts>
		TestGPRS(&sim800,1);
 8000478:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800047c:	2101      	movs	r1, #1
 800047e:	4618      	mov	r0, r3
 8000480:	f000 fb74 	bl	8000b6c <TestGPRS>
		break;
 8000484:	e022      	b.n	80004cc <main+0x300>

	case 5:
		printf("Enviando un msj al IP: %s\r\n",IP);
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	4619      	mov	r1, r3
 800048a:	482f      	ldr	r0, [pc, #188]	; (8000548 <main+0x37c>)
 800048c:	f002 ffbc 	bl	8003408 <iprintf>
		SendTCPtoIP(&sim800, "Hola desde el SIM800L por protocolo TCP\r\n", IP, puerto,1);
 8000490:	1d3a      	adds	r2, r7, #4
 8000492:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8000496:	2301      	movs	r3, #1
 8000498:	9300      	str	r3, [sp, #0]
 800049a:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 800049e:	492b      	ldr	r1, [pc, #172]	; (800054c <main+0x380>)
 80004a0:	f000 fc0e 	bl	8000cc0 <SendTCPtoIP>
		break;
 80004a4:	e012      	b.n	80004cc <main+0x300>

	case 6:
		printf("Enviando un msj largo al IP: %s\r\n",IP);
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	4619      	mov	r1, r3
 80004aa:	4829      	ldr	r0, [pc, #164]	; (8000550 <main+0x384>)
 80004ac:	f002 ffac 	bl	8003408 <iprintf>
		SendTCPtoIP(&sim800, sim800.buffer_largo , IP, puerto,1);
 80004b0:	1d3a      	adds	r2, r7, #4
 80004b2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80004b6:	f603 0138 	addw	r1, r3, #2104	; 0x838
 80004ba:	f107 0074 	add.w	r0, r7, #116	; 0x74
 80004be:	2301      	movs	r3, #1
 80004c0:	9300      	str	r3, [sp, #0]
 80004c2:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 80004c6:	f000 fbfb 	bl	8000cc0 <SendTCPtoIP>
		break;
 80004ca:	bf00      	nop
  {
 80004cc:	e71e      	b.n	800030c <main+0x140>
 80004ce:	bf00      	nop
 80004d0:	2000000c 	.word	0x2000000c
 80004d4:	0800502c 	.word	0x0800502c
 80004d8:	200000d0 	.word	0x200000d0
 80004dc:	08005048 	.word	0x08005048
 80004e0:	2000008c 	.word	0x2000008c
 80004e4:	0800508c 	.word	0x0800508c
 80004e8:	080050c0 	.word	0x080050c0
 80004ec:	080050d0 	.word	0x080050d0
 80004f0:	080050e4 	.word	0x080050e4
 80004f4:	080050f8 	.word	0x080050f8
 80004f8:	08005114 	.word	0x08005114
 80004fc:	08005118 	.word	0x08005118
 8000500:	08005148 	.word	0x08005148
 8000504:	08005160 	.word	0x08005160
 8000508:	08005180 	.word	0x08005180
 800050c:	08005194 	.word	0x08005194
 8000510:	080051ac 	.word	0x080051ac
 8000514:	080051c0 	.word	0x080051c0
 8000518:	080051dc 	.word	0x080051dc
 800051c:	080051f4 	.word	0x080051f4
 8000520:	08005368 	.word	0x08005368
 8000524:	08005220 	.word	0x08005220
 8000528:	0800539c 	.word	0x0800539c
 800052c:	08005258 	.word	0x08005258
 8000530:	40011000 	.word	0x40011000
 8000534:	08005270 	.word	0x08005270
 8000538:	08005294 	.word	0x08005294
 800053c:	08005298 	.word	0x08005298
 8000540:	080052b8 	.word	0x080052b8
 8000544:	080052c8 	.word	0x080052c8
 8000548:	080052fc 	.word	0x080052fc
 800054c:	08005318 	.word	0x08005318
 8000550:	08005344 	.word	0x08005344

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b090      	sub	sp, #64	; 0x40
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0318 	add.w	r3, r7, #24
 800055e:	2228      	movs	r2, #40	; 0x28
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f002 fe6b 	bl	800323e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000576:	2302      	movs	r3, #2
 8000578:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057a:	2301      	movs	r3, #1
 800057c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057e:	2310      	movs	r3, #16
 8000580:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000582:	2300      	movs	r3, #0
 8000584:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000586:	f107 0318 	add.w	r3, r7, #24
 800058a:	4618      	mov	r0, r3
 800058c:	f001 faa6 	bl	8001adc <HAL_RCC_OscConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000596:	f000 f8c1 	bl	800071c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059a:	230f      	movs	r3, #15
 800059c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 fd14 	bl	8001fe0 <HAL_RCC_ClockConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005be:	f000 f8ad 	bl	800071c <Error_Handler>
  }
}
 80005c2:	bf00      	nop
 80005c4:	3740      	adds	r7, #64	; 0x40
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005d2:	4a12      	ldr	r2, [pc, #72]	; (800061c <MX_USART1_UART_Init+0x50>)
 80005d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005f0:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005f2:	220c      	movs	r2, #12
 80005f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000602:	4805      	ldr	r0, [pc, #20]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 8000604:	f001 fe84 	bl	8002310 <HAL_UART_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800060e:	f000 f885 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	2000008c 	.word	0x2000008c
 800061c:	40013800 	.word	0x40013800

08000620 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000624:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000626:	4a12      	ldr	r2, [pc, #72]	; (8000670 <MX_USART2_UART_Init+0x50>)
 8000628:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800062a:	4b10      	ldr	r3, [pc, #64]	; (800066c <MX_USART2_UART_Init+0x4c>)
 800062c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000630:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_USART2_UART_Init+0x4c>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000646:	220c      	movs	r2, #12
 8000648:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <MX_USART2_UART_Init+0x4c>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000658:	f001 fe5a 	bl	8002310 <HAL_UART_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000662:	f000 f85b 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	200000d0 	.word	0x200000d0
 8000670:	40004400 	.word	0x40004400

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 0308 	add.w	r3, r7, #8
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000688:	4b21      	ldr	r3, [pc, #132]	; (8000710 <MX_GPIO_Init+0x9c>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a20      	ldr	r2, [pc, #128]	; (8000710 <MX_GPIO_Init+0x9c>)
 800068e:	f043 0310 	orr.w	r3, r3, #16
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <MX_GPIO_Init+0x9c>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f003 0310 	and.w	r3, r3, #16
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <MX_GPIO_Init+0x9c>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4a1a      	ldr	r2, [pc, #104]	; (8000710 <MX_GPIO_Init+0x9c>)
 80006a6:	f043 0304 	orr.w	r3, r3, #4
 80006aa:	6193      	str	r3, [r2, #24]
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <MX_GPIO_Init+0x9c>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f003 0304 	and.w	r3, r3, #4
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006be:	4815      	ldr	r0, [pc, #84]	; (8000714 <MX_GPIO_Init+0xa0>)
 80006c0:	f001 f9da 	bl	8001a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_SIM_GPIO_Port, RST_SIM_Pin, GPIO_PIN_SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	2120      	movs	r1, #32
 80006c8:	4813      	ldr	r0, [pc, #76]	; (8000718 <MX_GPIO_Init+0xa4>)
 80006ca:	f001 f9d5 	bl	8001a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006d8:	2302      	movs	r3, #2
 80006da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2302      	movs	r3, #2
 80006de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 0308 	add.w	r3, r7, #8
 80006e4:	4619      	mov	r1, r3
 80006e6:	480b      	ldr	r0, [pc, #44]	; (8000714 <MX_GPIO_Init+0xa0>)
 80006e8:	f001 f842 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_SIM_Pin */
  GPIO_InitStruct.Pin = RST_SIM_Pin;
 80006ec:	2320      	movs	r3, #32
 80006ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	2301      	movs	r3, #1
 80006f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f8:	2302      	movs	r3, #2
 80006fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RST_SIM_GPIO_Port, &GPIO_InitStruct);
 80006fc:	f107 0308 	add.w	r3, r7, #8
 8000700:	4619      	mov	r1, r3
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_GPIO_Init+0xa4>)
 8000704:	f001 f834 	bl	8001770 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000708:	bf00      	nop
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40021000 	.word	0x40021000
 8000714:	40011000 	.word	0x40011000
 8000718:	40010800 	.word	0x40010800

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
}
 8000722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000724:	e7fe      	b.n	8000724 <Error_Handler+0x8>
	...

08000728 <InitSIM>:
/* ------------------------------------------------------------------------------*/
/* ------------------------ Funciones de Inicializacion ------------------------ */
/* ------------------------------------------------------------------------------*/

void InitSIM(SIM800* sim, UART_HandleTypeDef * huart,int print)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]

	sim-> huart = huart;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	68ba      	ldr	r2, [r7, #8]
 8000738:	601a      	str	r2, [r3, #0]
	memset(sim->response, 0, LENGTH);
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	3304      	adds	r3, #4
 800073e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f002 fd7a 	bl	800323e <memset>
	memset(sim->txt_last_sms, 0, LEN_TXT);
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 8000750:	2264      	movs	r2, #100	; 0x64
 8000752:	2100      	movs	r1, #0
 8000754:	4618      	mov	r0, r3
 8000756:	f002 fd72 	bl	800323e <memset>

	InitBufferLargo(sim);
 800075a:	68f8      	ldr	r0, [r7, #12]
 800075c:	f000 f840 	bl	80007e0 <InitBufferLargo>

	EnviarComandoAT(sim,"AT+CMGF=1\r\n",print); // Activa modo texto
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	4909      	ldr	r1, [pc, #36]	; (8000788 <InitSIM+0x60>)
 8000764:	68f8      	ldr	r0, [r7, #12]
 8000766:	f000 f851 	bl	800080c <EnviarComandoAT>
	EnviarComandoAT(sim,"AT+CNMI=2,1,0,0,0\r\n",print); // Configura recepcion de SMS
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	4907      	ldr	r1, [pc, #28]	; (800078c <InitSIM+0x64>)
 800076e:	68f8      	ldr	r0, [r7, #12]
 8000770:	f000 f84c 	bl	800080c <EnviarComandoAT>
												  // Esto es importante : Primer num: el 2 es para que guarde los msj en un buffer si la conexion Uart esta ocupada
												 // Segundo num: el 1 es para que guarde internamente los msj, despues para leerlos hay que usar CMGR. Si esto lo pones en 2 forwardea el msj directamente y no guarda nada

	EnviarComandoAT(sim, "AT+CFUN=1\r\n",print); // Esto me parece que es innecesario... (activa todas las funcionalidades pero creo que esta en 1 por defecto)
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	4906      	ldr	r1, [pc, #24]	; (8000790 <InitSIM+0x68>)
 8000778:	68f8      	ldr	r0, [r7, #12]
 800077a:	f000 f847 	bl	800080c <EnviarComandoAT>
}
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	080053d0 	.word	0x080053d0
 800078c:	080053dc 	.word	0x080053dc
 8000790:	080053f0 	.word	0x080053f0

08000794 <InitGPRS>:

void InitGPRS(SIM800 *sim,int print)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
	if(isConnectedGPRS(sim,print) == 0)
 800079e:	6839      	ldr	r1, [r7, #0]
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f000 f9b3 	bl	8000b0c <isConnectedGPRS>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d10e      	bne.n	80007ca <InitGPRS+0x36>
	{
		//EnviarComandoAT(sim,"AT+CSTT=\"igprs.claro.com.ar\",\"ctigprs\",\"ctigprs999\"\r\n",print);
		EnviarComandoAT(sim,"AT+CSTT=\"igprs.claro.com.ar\",\"\",\"\"\r\n",print);
 80007ac:	683a      	ldr	r2, [r7, #0]
 80007ae:	4909      	ldr	r1, [pc, #36]	; (80007d4 <InitGPRS+0x40>)
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f000 f82b 	bl	800080c <EnviarComandoAT>
			// Esto setea el APN contraseña y usuario de Claro. Sin esto se conecta igual a red celular pero no anda el GPRS

		EnviarComandoAT(sim,"AT+CIICR\r\n",print);	// Inicializa el GPRS
 80007b6:	683a      	ldr	r2, [r7, #0]
 80007b8:	4907      	ldr	r1, [pc, #28]	; (80007d8 <InitGPRS+0x44>)
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f000 f826 	bl	800080c <EnviarComandoAT>


		EnviarComandoAT(sim,"AT+CIFSR\r\n",print);	// Debería imprimir el IP
 80007c0:	683a      	ldr	r2, [r7, #0]
 80007c2:	4906      	ldr	r1, [pc, #24]	; (80007dc <InitGPRS+0x48>)
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f000 f821 	bl	800080c <EnviarComandoAT>
	}
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	080053fc 	.word	0x080053fc
 80007d8:	08005424 	.word	0x08005424
 80007dc:	08005430 	.word	0x08005430

080007e0 <InitBufferLargo>:

void InitBufferLargo(SIM800 *sim)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	strcpy(sim->buffer_largo,"En Argentina naci. Tierra del Diego y Lionel. De los pibes de Malvinas. Que jamas olvidare. No te lo puedo explicar. Porque no vas a entender. Las finales que perdimos. Cuantos anos la llore. Pero eso se termino. Porque en el Maracana. La final con los brazucas. La volvio a ganar papa. Muchachos. Ahora nos volvimos a ilusionar. Quiero ganar la tercera. Quiero ser campeon mundial. Y al Diego. Desde el cielo lo podemos ver. Con Don Diego y La Tota. Alentandolo a Lionel. ");
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f603 0338 	addw	r3, r3, #2104	; 0x838
 80007ee:	4a06      	ldr	r2, [pc, #24]	; (8000808 <InitBufferLargo+0x28>)
 80007f0:	4618      	mov	r0, r3
 80007f2:	4611      	mov	r1, r2
 80007f4:	f44f 73ed 	mov.w	r3, #474	; 0x1da
 80007f8:	461a      	mov	r2, r3
 80007fa:	f002 fd12 	bl	8003222 <memcpy>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	0800543c 	.word	0x0800543c

0800080c <EnviarComandoAT>:
/* ---------------------------- Funciones generales ---------------------------- */
/* ------------------------------------------------------------------------------*/


void EnviarComandoAT(SIM800* sim, char* comando, int print)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
	Enviar(sim,comando);
 8000818:	68b9      	ldr	r1, [r7, #8]
 800081a:	68f8      	ldr	r0, [r7, #12]
 800081c:	f000 f80b 	bl	8000836 <Enviar>
	WaitForAnswer(sim,print);
 8000820:	6879      	ldr	r1, [r7, #4]
 8000822:	68f8      	ldr	r0, [r7, #12]
 8000824:	f000 f83e 	bl	80008a4 <WaitForAnswer>
	HAL_Delay(100);
 8000828:	2064      	movs	r0, #100	; 0x64
 800082a:	f000 fdbf 	bl	80013ac <HAL_Delay>
}
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <Enviar>:

void Enviar(SIM800 *sim, char * cadena)
{
 8000836:	b590      	push	{r4, r7, lr}
 8000838:	b083      	sub	sp, #12
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
 800083e:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit (sim->huart, (uint8_t*) cadena, strlen(cadena),TIMEOUT);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681c      	ldr	r4, [r3, #0]
 8000844:	6838      	ldr	r0, [r7, #0]
 8000846:	f7ff fc81 	bl	800014c <strlen>
 800084a:	4603      	mov	r3, r0
 800084c:	b29a      	uxth	r2, r3
 800084e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000852:	6839      	ldr	r1, [r7, #0]
 8000854:	4620      	mov	r0, r4
 8000856:	f001 fda8 	bl	80023aa <HAL_UART_Transmit>
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	bd90      	pop	{r4, r7, pc}
	...

08000864 <Imprimir_respuesta>:

void Imprimir_respuesta(SIM800 *sim)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	printf("Respuesta: %s\r\n",sim->response);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3304      	adds	r3, #4
 8000870:	4619      	mov	r1, r3
 8000872:	4803      	ldr	r0, [pc, #12]	; (8000880 <Imprimir_respuesta+0x1c>)
 8000874:	f002 fdc8 	bl	8003408 <iprintf>
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	08005618 	.word	0x08005618

08000884 <Borrar_respuesta>:

void Borrar_respuesta(SIM800 *sim)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	memset(sim->response, 0, LENGTH);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3304      	adds	r3, #4
 8000890:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f002 fcd1 	bl	800323e <memset>
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <WaitForAnswer>:

int WaitForAnswer(SIM800* sim,int print)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
	int counter=0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
	Borrar_respuesta(sim);
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f7ff ffe6 	bl	8000884 <Borrar_respuesta>
	while((strlen(sim->response)==0) && (counter < WAIT_MAX / TIMEOUT) )
 80008b8:	e00c      	b.n	80008d4 <WaitForAnswer+0x30>
	{
		counter++;
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	3301      	adds	r3, #1
 80008be:	60fb      	str	r3, [r7, #12]
		HAL_UART_Receive (sim->huart, (uint8_t*) sim->response, LENGTH,TIMEOUT);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6818      	ldr	r0, [r3, #0]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	1d19      	adds	r1, r3, #4
 80008c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008cc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80008d0:	f001 fdfd 	bl	80024ce <HAL_UART_Receive>
	while((strlen(sim->response)==0) && (counter < WAIT_MAX / TIMEOUT) )
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3304      	adds	r3, #4
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d102      	bne.n	80008e4 <WaitForAnswer+0x40>
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	2b13      	cmp	r3, #19
 80008e2:	ddea      	ble.n	80008ba <WaitForAnswer+0x16>
	}
	if(print == 1)
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d109      	bne.n	80008fe <WaitForAnswer+0x5a>
	{
		if(counter ==  WAIT_MAX / TIMEOUT)
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	2b14      	cmp	r3, #20
 80008ee:	d103      	bne.n	80008f8 <WaitForAnswer+0x54>
		{
			printf("Tiempo de espera agotado\r\n");
 80008f0:	4808      	ldr	r0, [pc, #32]	; (8000914 <WaitForAnswer+0x70>)
 80008f2:	f002 fe0f 	bl	8003514 <puts>
 80008f6:	e002      	b.n	80008fe <WaitForAnswer+0x5a>
		}
		else
		{
			Imprimir_respuesta(sim);
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f7ff ffb3 	bl	8000864 <Imprimir_respuesta>
		}

	}
	return (counter ==  WAIT_MAX / TIMEOUT)? 0:1;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	2b14      	cmp	r3, #20
 8000902:	bf14      	ite	ne
 8000904:	2301      	movne	r3, #1
 8000906:	2300      	moveq	r3, #0
 8000908:	b2db      	uxtb	r3, r3
}
 800090a:	4618      	mov	r0, r3
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	08005628 	.word	0x08005628

08000918 <SerialDebug>:

void SerialDebug( UART_HandleTypeDef * huart1 , UART_HandleTypeDef * huart2 , char caracter_finalizacion )
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	4613      	mov	r3, r2
 8000924:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_byte = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	75fb      	strb	r3, [r7, #23]

	while(rx_byte != caracter_finalizacion)
 800092a:	e024      	b.n	8000976 <SerialDebug+0x5e>
	{
		while (HAL_UART_Receive(huart2, &rx_byte, 1, 0) == HAL_OK)
		{
		    HAL_UART_Transmit(huart1, &rx_byte, 1, 0xFFFF); // Forward received byte to UART1
 800092c:	f107 0117 	add.w	r1, r7, #23
 8000930:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000934:	2201      	movs	r2, #1
 8000936:	68f8      	ldr	r0, [r7, #12]
 8000938:	f001 fd37 	bl	80023aa <HAL_UART_Transmit>
		while (HAL_UART_Receive(huart2, &rx_byte, 1, 0) == HAL_OK)
 800093c:	f107 0117 	add.w	r1, r7, #23
 8000940:	2300      	movs	r3, #0
 8000942:	2201      	movs	r2, #1
 8000944:	68b8      	ldr	r0, [r7, #8]
 8000946:	f001 fdc2 	bl	80024ce <HAL_UART_Receive>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d0ed      	beq.n	800092c <SerialDebug+0x14>
		}
		while (HAL_UART_Receive(huart1, &rx_byte, 1, 0) == HAL_OK)
 8000950:	e007      	b.n	8000962 <SerialDebug+0x4a>
		{
		    HAL_UART_Transmit(huart2, &rx_byte, 1, 0xFFFF); // Forward received byte to UART2
 8000952:	f107 0117 	add.w	r1, r7, #23
 8000956:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800095a:	2201      	movs	r2, #1
 800095c:	68b8      	ldr	r0, [r7, #8]
 800095e:	f001 fd24 	bl	80023aa <HAL_UART_Transmit>
		while (HAL_UART_Receive(huart1, &rx_byte, 1, 0) == HAL_OK)
 8000962:	f107 0117 	add.w	r1, r7, #23
 8000966:	2300      	movs	r3, #0
 8000968:	2201      	movs	r2, #1
 800096a:	68f8      	ldr	r0, [r7, #12]
 800096c:	f001 fdaf 	bl	80024ce <HAL_UART_Receive>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d0ed      	beq.n	8000952 <SerialDebug+0x3a>
	while(rx_byte != caracter_finalizacion)
 8000976:	7dfb      	ldrb	r3, [r7, #23]
 8000978:	79fa      	ldrb	r2, [r7, #7]
 800097a:	429a      	cmp	r2, r3
 800097c:	d1de      	bne.n	800093c <SerialDebug+0x24>
		}


	}
}
 800097e:	bf00      	nop
 8000980:	bf00      	nop
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <EnviarAT>:
/* ------------------------------------------------------------------------------*/
/* ---------------------------- Funciones de status ---------------------------- */
/* ------------------------------------------------------------------------------*/

void EnviarAT(SIM800* sim)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	EnviarComandoAT(sim,"AT\r\n",1);
 8000990:	2201      	movs	r2, #1
 8000992:	4904      	ldr	r1, [pc, #16]	; (80009a4 <EnviarAT+0x1c>)
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff ff39 	bl	800080c <EnviarComandoAT>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	08005644 	.word	0x08005644

080009a8 <ConsultarSignal>:

void ConsultarSignal(SIM800* sim)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	EnviarComandoAT(sim,"AT+CSQ\r\n",1);
 80009b0:	2201      	movs	r2, #1
 80009b2:	4904      	ldr	r1, [pc, #16]	; (80009c4 <ConsultarSignal+0x1c>)
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff ff29 	bl	800080c <EnviarComandoAT>
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	0800564c 	.word	0x0800564c

080009c8 <ConsultarEstadoSIM>:

void ConsultarEstadoSIM(SIM800* sim)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	EnviarComandoAT(sim,"AT+CPIN?\r\n",1);
 80009d0:	2201      	movs	r2, #1
 80009d2:	4904      	ldr	r1, [pc, #16]	; (80009e4 <ConsultarEstadoSIM+0x1c>)
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff ff19 	bl	800080c <EnviarComandoAT>
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	08005658 	.word	0x08005658

080009e8 <ConsultarBateria>:

void ConsultarBateria(SIM800 *sim)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b087      	sub	sp, #28
 80009ec:	af02      	add	r7, sp, #8
 80009ee:	6078      	str	r0, [r7, #4]
	// Formato de la respuesta: CARGANDO?,PORCENTAJE,TENSION

	EnviarComandoAT(sim,"AT+CBC\r\n",0);
 80009f0:	2200      	movs	r2, #0
 80009f2:	4922      	ldr	r1, [pc, #136]	; (8000a7c <ConsultarBateria+0x94>)
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f7ff ff09 	bl	800080c <EnviarComandoAT>
	int cuenta_comas=0,i=0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
	while((*(sim->response+i)!='\0')&&(cuenta_comas<2)){
 8000a02:	e00c      	b.n	8000a1e <ConsultarBateria+0x36>
		if (*(sim->response+i)==','){cuenta_comas++;}
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	1d1a      	adds	r2, r3, #4
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	2b2c      	cmp	r3, #44	; 0x2c
 8000a10:	d102      	bne.n	8000a18 <ConsultarBateria+0x30>
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	3301      	adds	r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
		i++;
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	60bb      	str	r3, [r7, #8]
	while((*(sim->response+i)!='\0')&&(cuenta_comas<2)){
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	1d1a      	adds	r2, r3, #4
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	4413      	add	r3, r2
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d002      	beq.n	8000a32 <ConsultarBateria+0x4a>
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	dde8      	ble.n	8000a04 <ConsultarBateria+0x1c>
	}
	printf("Nivel de bateria: %c,%c%c%c V\r\n",*(sim->response+i),*(sim->response+i+1),*(sim->response+i+2),*(sim->response+i+3));
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	1d1a      	adds	r2, r3, #4
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	4413      	add	r3, r2
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	1d1a      	adds	r2, r3, #4
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	3301      	adds	r3, #1
 8000a46:	4413      	add	r3, r2
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	1d1a      	adds	r2, r3, #4
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	3302      	adds	r3, #2
 8000a54:	4413      	add	r3, r2
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	461c      	mov	r4, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	1d1a      	adds	r2, r3, #4
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	3303      	adds	r3, #3
 8000a62:	4413      	add	r3, r2
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	4623      	mov	r3, r4
 8000a6a:	4602      	mov	r2, r0
 8000a6c:	4804      	ldr	r0, [pc, #16]	; (8000a80 <ConsultarBateria+0x98>)
 8000a6e:	f002 fccb 	bl	8003408 <iprintf>

}
 8000a72:	bf00      	nop
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd90      	pop	{r4, r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	08005664 	.word	0x08005664
 8000a80:	08005670 	.word	0x08005670

08000a84 <ListarRedesDisponibles>:

void ListarRedesDisponibles(SIM800* sim)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	EnviarComandoAT(sim,"AT+COPS=?\r\n",1);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	4906      	ldr	r1, [pc, #24]	; (8000aa8 <ListarRedesDisponibles+0x24>)
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f7ff febb 	bl	800080c <EnviarComandoAT>
	WaitForAnswer(sim,1);
 8000a96:	2101      	movs	r1, #1
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff ff03 	bl	80008a4 <WaitForAnswer>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	08005690 	.word	0x08005690

08000aac <isConnected>:


int isConnected(SIM800 *sim,int print)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
	// Si esta conectado creg me devuelve 0,1. Espero a la coma y me fijo el siguiente caracter
	EnviarComandoAT(sim,"AT+CREG?\r\n",print);
 8000ab6:	683a      	ldr	r2, [r7, #0]
 8000ab8:	4913      	ldr	r1, [pc, #76]	; (8000b08 <isConnected+0x5c>)
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff fea6 	bl	800080c <EnviarComandoAT>

	int index = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
	while( (*(sim->response +index) != ',') && (*(sim->response+index) != '\0') )
 8000ac4:	e002      	b.n	8000acc <isConnected+0x20>
	{
		index++;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
	while( (*(sim->response +index) != ',') && (*(sim->response+index) != '\0') )
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	1d1a      	adds	r2, r3, #4
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b2c      	cmp	r3, #44	; 0x2c
 8000ad8:	d006      	beq.n	8000ae8 <isConnected+0x3c>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	1d1a      	adds	r2, r3, #4
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d1ee      	bne.n	8000ac6 <isConnected+0x1a>
	}

	return (*(sim->response+index+1) == '1' )?1:0;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	1d1a      	adds	r2, r3, #4
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	3301      	adds	r3, #1
 8000af0:	4413      	add	r3, r2
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b31      	cmp	r3, #49	; 0x31
 8000af6:	bf0c      	ite	eq
 8000af8:	2301      	moveq	r3, #1
 8000afa:	2300      	movne	r3, #0
 8000afc:	b2db      	uxtb	r3, r3
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	0800569c 	.word	0x0800569c

08000b0c <isConnectedGPRS>:

int isConnectedGPRS(SIM800 *sim,int print)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
	// Si esta conectado CIFSR me devuelve el IP, sino da error

	EnviarComandoAT(sim,"AT+CIFSR\r\n",print);	// Debería imprimir el IP
 8000b16:	683a      	ldr	r2, [r7, #0]
 8000b18:	4908      	ldr	r1, [pc, #32]	; (8000b3c <isConnectedGPRS+0x30>)
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff fe76 	bl	800080c <EnviarComandoAT>

	return (check_if_error(sim)==1 )? 0:1;
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f000 f80d 	bl	8000b40 <check_if_error>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	bf14      	ite	ne
 8000b2c:	2301      	movne	r3, #1
 8000b2e:	2300      	moveq	r3, #0
 8000b30:	b2db      	uxtb	r3, r3

}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	08005430 	.word	0x08005430

08000b40 <check_if_error>:

int check_if_error(SIM800 *sim)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	return (strstr(sim->response,"ERROR") != NULL )? 1 : 0;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3304      	adds	r3, #4
 8000b4c:	4906      	ldr	r1, [pc, #24]	; (8000b68 <check_if_error+0x28>)
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f002 fe4d 	bl	80037ee <strstr>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	bf14      	ite	ne
 8000b5a:	2301      	movne	r3, #1
 8000b5c:	2300      	moveq	r3, #0
 8000b5e:	b2db      	uxtb	r3, r3
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	080056a8 	.word	0x080056a8

08000b6c <TestGPRS>:
/* ------------------------------------------------------------------------------*/
/* ------------------------------ Funciones de gprs ----------------------------- */
/* ------------------------------------------------------------------------------*/

void TestGPRS(SIM800* sim,int print)
{
 8000b6c:	b5b0      	push	{r4, r5, r7, lr}
 8000b6e:	b0ce      	sub	sp, #312	; 0x138
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b76:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000b7a:	6018      	str	r0, [r3, #0]
 8000b7c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b80:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000b84:	6019      	str	r1, [r3, #0]
	InitGPRS(sim, 0);
 8000b86:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b8a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000b8e:	2100      	movs	r1, #0
 8000b90:	6818      	ldr	r0, [r3, #0]
 8000b92:	f7ff fdff 	bl	8000794 <InitGPRS>

	char cmd [LEN_TXT] = "AT+CIPSTART=\"TCP\",\"httpbin.org\",80\r\n";
 8000b96:	4b46      	ldr	r3, [pc, #280]	; (8000cb0 <TestGPRS+0x144>)
 8000b98:	f107 04d4 	add.w	r4, r7, #212	; 0xd4
 8000b9c:	461d      	mov	r5, r3
 8000b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000baa:	6020      	str	r0, [r4, #0]
 8000bac:	3404      	adds	r4, #4
 8000bae:	7021      	strb	r1, [r4, #0]
 8000bb0:	f107 03f9 	add.w	r3, r7, #249	; 0xf9
 8000bb4:	223f      	movs	r2, #63	; 0x3f
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f002 fb40 	bl	800323e <memset>
	EnviarComandoAT(sim,cmd,print);
 8000bbe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000bc2:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 8000bc6:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8000bca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000bce:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000bd2:	6812      	ldr	r2, [r2, #0]
 8000bd4:	6818      	ldr	r0, [r3, #0]
 8000bd6:	f7ff fe19 	bl	800080c <EnviarComandoAT>
	WaitForAnswer(sim, 1); // Aca espero dos veces porque primero va el OK y despues el connect OK
 8000bda:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000bde:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000be2:	2101      	movs	r1, #1
 8000be4:	6818      	ldr	r0, [r3, #0]
 8000be6:	f7ff fe5d 	bl	80008a4 <WaitForAnswer>

	// HTTP Request:
	char cmd2 [LEN_TXT] = "GET /get HTTP/1.1\r\nHost: httpbin.org\r\nAccept: */* \r\n\r\n";
 8000bea:	4b32      	ldr	r3, [pc, #200]	; (8000cb4 <TestGPRS+0x148>)
 8000bec:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000bf0:	461d      	mov	r5, r3
 8000bf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bfe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c02:	6020      	str	r0, [r4, #0]
 8000c04:	3404      	adds	r4, #4
 8000c06:	8021      	strh	r1, [r4, #0]
 8000c08:	3402      	adds	r4, #2
 8000c0a:	0c0b      	lsrs	r3, r1, #16
 8000c0c:	7023      	strb	r3, [r4, #0]
 8000c0e:	f107 03a7 	add.w	r3, r7, #167	; 0xa7
 8000c12:	222d      	movs	r2, #45	; 0x2d
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f002 fb11 	bl	800323e <memset>
	char cmd3 [LEN_TXT];
	sprintf(cmd3,"AT+CIPSEND=%d\r\n",strlen(cmd2));
 8000c1c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fa93 	bl	800014c <strlen>
 8000c26:	4602      	mov	r2, r0
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	4922      	ldr	r1, [pc, #136]	; (8000cb8 <TestGPRS+0x14c>)
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f002 fd66 	bl	8003700 <siprintf>
	EnviarComandoAT(sim,cmd3,print);
 8000c34:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000c38:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 8000c3c:	f107 010c 	add.w	r1, r7, #12
 8000c40:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000c44:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000c48:	6812      	ldr	r2, [r2, #0]
 8000c4a:	6818      	ldr	r0, [r3, #0]
 8000c4c:	f7ff fdde 	bl	800080c <EnviarComandoAT>

	EnviarComandoAT(sim,cmd2,print);
 8000c50:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000c54:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 8000c58:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000c5c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000c60:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000c64:	6812      	ldr	r2, [r2, #0]
 8000c66:	6818      	ldr	r0, [r3, #0]
 8000c68:	f7ff fdd0 	bl	800080c <EnviarComandoAT>

	// Esperamos la respuesta y despues cerramos
	WaitForAnswer(sim,1);
 8000c6c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000c70:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000c74:	2101      	movs	r1, #1
 8000c76:	6818      	ldr	r0, [r3, #0]
 8000c78:	f7ff fe14 	bl	80008a4 <WaitForAnswer>
	WaitForAnswer(sim,1);
 8000c7c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000c80:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000c84:	2101      	movs	r1, #1
 8000c86:	6818      	ldr	r0, [r3, #0]
 8000c88:	f7ff fe0c 	bl	80008a4 <WaitForAnswer>

	EnviarComandoAT(sim,"AT+CIPCLOSE\r\n",print);
 8000c8c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000c90:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 8000c94:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000c98:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000c9c:	6812      	ldr	r2, [r2, #0]
 8000c9e:	4907      	ldr	r1, [pc, #28]	; (8000cbc <TestGPRS+0x150>)
 8000ca0:	6818      	ldr	r0, [r3, #0]
 8000ca2:	f7ff fdb3 	bl	800080c <EnviarComandoAT>

}
 8000ca6:	bf00      	nop
 8000ca8:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bdb0      	pop	{r4, r5, r7, pc}
 8000cb0:	080056d0 	.word	0x080056d0
 8000cb4:	08005734 	.word	0x08005734
 8000cb8:	080056b0 	.word	0x080056b0
 8000cbc:	080056c0 	.word	0x080056c0

08000cc0 <SendTCPtoIP>:

// IMPORTANTE -> Esto anda hasta unos 500 bytes x msj!
void SendTCPtoIP(SIM800* sim, char * msj, char* IP, int port,int print)
{
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b0b7      	sub	sp, #220	; 0xdc
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
 8000ccc:	603b      	str	r3, [r7, #0]
	InitGPRS(sim, print);
 8000cce:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8000cd2:	68f8      	ldr	r0, [r7, #12]
 8000cd4:	f7ff fd5e 	bl	8000794 <InitGPRS>

	char cmd [LEN_TXT];
	sprintf(cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",IP,port);
 8000cd8:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	491d      	ldr	r1, [pc, #116]	; (8000d58 <SendTCPtoIP+0x98>)
 8000ce2:	f002 fd0d 	bl	8003700 <siprintf>
	EnviarComandoAT(sim,cmd,print);
 8000ce6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000cea:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000cee:	4619      	mov	r1, r3
 8000cf0:	68f8      	ldr	r0, [r7, #12]
 8000cf2:	f7ff fd8b 	bl	800080c <EnviarComandoAT>
	WaitForAnswer(sim, print); // Aca espero dos veces porque primero va el OK y despues el connect OK
 8000cf6:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8000cfa:	68f8      	ldr	r0, [r7, #12]
 8000cfc:	f7ff fdd2 	bl	80008a4 <WaitForAnswer>

	char cmd2 [LEN_TXT] = "AT+CIPSEND\r\n";
 8000d00:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <SendTCPtoIP+0x9c>)
 8000d02:	f107 0410 	add.w	r4, r7, #16
 8000d06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d08:	c407      	stmia	r4!, {r0, r1, r2}
 8000d0a:	7023      	strb	r3, [r4, #0]
 8000d0c:	f107 031d 	add.w	r3, r7, #29
 8000d10:	2257      	movs	r2, #87	; 0x57
 8000d12:	2100      	movs	r1, #0
 8000d14:	4618      	mov	r0, r3
 8000d16:	f002 fa92 	bl	800323e <memset>
	EnviarComandoAT(sim,cmd2,print);
 8000d1a:	f107 0310 	add.w	r3, r7, #16
 8000d1e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000d22:	4619      	mov	r1, r3
 8000d24:	68f8      	ldr	r0, [r7, #12]
 8000d26:	f7ff fd71 	bl	800080c <EnviarComandoAT>

	Enviar(sim,msj);
 8000d2a:	68b9      	ldr	r1, [r7, #8]
 8000d2c:	68f8      	ldr	r0, [r7, #12]
 8000d2e:	f7ff fd82 	bl	8000836 <Enviar>
	Enviar(sim,"\r\n\032");
 8000d32:	490b      	ldr	r1, [pc, #44]	; (8000d60 <SendTCPtoIP+0xa0>)
 8000d34:	68f8      	ldr	r0, [r7, #12]
 8000d36:	f7ff fd7e 	bl	8000836 <Enviar>
	WaitForAnswer(sim, print);
 8000d3a:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8000d3e:	68f8      	ldr	r0, [r7, #12]
 8000d40:	f7ff fdb0 	bl	80008a4 <WaitForAnswer>

	EnviarComandoAT(sim,"AT+CIPCLOSE\r\n",print);
 8000d44:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000d48:	4906      	ldr	r1, [pc, #24]	; (8000d64 <SendTCPtoIP+0xa4>)
 8000d4a:	68f8      	ldr	r0, [r7, #12]
 8000d4c:	f7ff fd5e 	bl	800080c <EnviarComandoAT>

}
 8000d50:	bf00      	nop
 8000d52:	37dc      	adds	r7, #220	; 0xdc
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd90      	pop	{r4, r7, pc}
 8000d58:	08005798 	.word	0x08005798
 8000d5c:	080057b8 	.word	0x080057b8
 8000d60:	080057b4 	.word	0x080057b4
 8000d64:	080056c0 	.word	0x080056c0

08000d68 <EnviarSMS>:
/* ------------------------------------------------------------------------------*/
/* ------------------------------ Funciones de sms ----------------------------- */
/* ------------------------------------------------------------------------------*/

void EnviarSMS(SIM800 * sim, char * numero, char* mensaje, int print )
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b092      	sub	sp, #72	; 0x48
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
 8000d74:	603b      	str	r3, [r7, #0]
	char cmd [LEN_CMD];

	sprintf(cmd,"AT+CMGS=\"%s\"\r\n",numero);
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	490b      	ldr	r1, [pc, #44]	; (8000dac <EnviarSMS+0x44>)
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f002 fcbe 	bl	8003700 <siprintf>

	EnviarComandoAT(sim,cmd,print);
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	68f8      	ldr	r0, [r7, #12]
 8000d8e:	f7ff fd3d 	bl	800080c <EnviarComandoAT>

	Enviar(sim,mensaje);
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	68f8      	ldr	r0, [r7, #12]
 8000d96:	f7ff fd4e 	bl	8000836 <Enviar>
	Enviar(sim,"\r\n\032");
 8000d9a:	4905      	ldr	r1, [pc, #20]	; (8000db0 <EnviarSMS+0x48>)
 8000d9c:	68f8      	ldr	r0, [r7, #12]
 8000d9e:	f7ff fd4a 	bl	8000836 <Enviar>

}
 8000da2:	bf00      	nop
 8000da4:	3748      	adds	r7, #72	; 0x48
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	0800581c 	.word	0x0800581c
 8000db0:	080057b4 	.word	0x080057b4

08000db4 <BorrarAllSMS>:

	EnviarComandoAT(sim,"AT+CMGL=\"ALL\"\r\n",1);
}

void BorrarAllSMS(SIM800 *sim, int print)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
	EnviarComandoAT(sim,"AT+CMGDA=\"DEL ALL\"\r\n",print);
 8000dbe:	683a      	ldr	r2, [r7, #0]
 8000dc0:	4903      	ldr	r1, [pc, #12]	; (8000dd0 <BorrarAllSMS+0x1c>)
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff fd22 	bl	800080c <EnviarComandoAT>
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	0800583c 	.word	0x0800583c

08000dd4 <LeerSMS_i>:

void LeerSMS_i(SIM800 *sim, int i, int print)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b092      	sub	sp, #72	; 0x48
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
	char msj [LEN_CMD];
	sprintf(msj,"AT+CMGR=%d\r\n",i);
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	68ba      	ldr	r2, [r7, #8]
 8000de6:	4907      	ldr	r1, [pc, #28]	; (8000e04 <LeerSMS_i+0x30>)
 8000de8:	4618      	mov	r0, r3
 8000dea:	f002 fc89 	bl	8003700 <siprintf>
	EnviarComandoAT(sim,msj,print);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	4619      	mov	r1, r3
 8000df6:	68f8      	ldr	r0, [r7, #12]
 8000df8:	f7ff fd08 	bl	800080c <EnviarComandoAT>
}
 8000dfc:	bf00      	nop
 8000dfe:	3748      	adds	r7, #72	; 0x48
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	08005854 	.word	0x08005854

08000e08 <ListenSMS>:


int ListenSMS(SIM800 * sim, UART_HandleTypeDef * huart1 )
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
	Borrar_respuesta(sim);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff fd36 	bl	8000884 <Borrar_respuesta>
	uint8_t rx_byte = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	72fb      	strb	r3, [r7, #11]

	while ( ( strlen(sim->response) == 0 ) )
 8000e1c:	e01d      	b.n	8000e5a <ListenSMS+0x52>
	{
		HAL_UART_Receive (sim->huart, (uint8_t*) sim->response, LENGTH,TIMEOUT);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6818      	ldr	r0, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	1d19      	adds	r1, r3, #4
 8000e26:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e2a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e2e:	f001 fb4e 	bl	80024ce <HAL_UART_Receive>

		if (__HAL_UART_GET_FLAG(huart1, UART_FLAG_RXNE) == SET)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f003 0320 	and.w	r3, r3, #32
 8000e3c:	2b20      	cmp	r3, #32
 8000e3e:	d10c      	bne.n	8000e5a <ListenSMS+0x52>
		{
		    HAL_UART_Receive (huart1, &rx_byte, 1,TIMEOUT); // Leer el dato recibido en UART1
 8000e40:	f107 010b 	add.w	r1, r7, #11
 8000e44:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e48:	2201      	movs	r2, #1
 8000e4a:	6838      	ldr	r0, [r7, #0]
 8000e4c:	f001 fb3f 	bl	80024ce <HAL_UART_Receive>
		    if(rx_byte==26)
 8000e50:	7afb      	ldrb	r3, [r7, #11]
 8000e52:	2b1a      	cmp	r3, #26
 8000e54:	d101      	bne.n	8000e5a <ListenSMS+0x52>
		    {
		    	return 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e013      	b.n	8000e82 <ListenSMS+0x7a>
	while ( ( strlen(sim->response) == 0 ) )
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d0dc      	beq.n	8000e1e <ListenSMS+0x16>
		    }
		}
	}

	int indice = ExtraerIndiceCMTI(sim->response);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3304      	adds	r3, #4
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 f80e 	bl	8000e8a <ExtraerIndiceCMTI>
 8000e6e:	60f8      	str	r0, [r7, #12]
	ExtraerTextoDeSMS(sim,indice,sim->txt_last_sms);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 8000e76:	461a      	mov	r2, r3
 8000e78:	68f9      	ldr	r1, [r7, #12]
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f000 f820 	bl	8000ec0 <ExtraerTextoDeSMS>
	return 1;
 8000e80:	2301      	movs	r3, #1

}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <ExtraerIndiceCMTI>:


int ExtraerIndiceCMTI(char * codigo)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b085      	sub	sp, #20
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
	// Forma del codigo -> +CMTI: "SM",5

	int i = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
	while(*(codigo+i) !=',' ){i++;}
 8000e96:	e002      	b.n	8000e9e <ExtraerIndiceCMTI+0x14>
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b2c      	cmp	r3, #44	; 0x2c
 8000ea8:	d1f6      	bne.n	8000e98 <ExtraerIndiceCMTI+0xe>

	return *(codigo+i+1)-48;	// Para pasarlo a entero
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	3301      	adds	r3, #1
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	3b30      	subs	r3, #48	; 0x30
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <ExtraerTextoDeSMS>:

void ExtraerTextoDeSMS(SIM800 *sim, int indice, char * texto)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
	LeerSMS_i(sim,indice,0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	68b9      	ldr	r1, [r7, #8]
 8000ed0:	68f8      	ldr	r0, [r7, #12]
 8000ed2:	f7ff ff7f 	bl	8000dd4 <LeerSMS_i>
	// Extrae el texto del SMS guardado en la posicion i
	// Formato del codigo -> 3,"READ/UNREAD","NUM","","FECHA" MSJ
	// Voy a contar comillas, serían 8

	int comillas = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
	int tam_header = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
	while(comillas < 8)
 8000ede:	e00c      	b.n	8000efa <ExtraerTextoDeSMS+0x3a>
	{
		if(*(sim->response + tam_header) == '"') { comillas++; }
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	1d1a      	adds	r2, r3, #4
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b22      	cmp	r3, #34	; 0x22
 8000eec:	d102      	bne.n	8000ef4 <ExtraerTextoDeSMS+0x34>
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	61fb      	str	r3, [r7, #28]
		tam_header++;
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	61bb      	str	r3, [r7, #24]
	while(comillas < 8)
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	2b07      	cmp	r3, #7
 8000efe:	ddef      	ble.n	8000ee0 <ExtraerTextoDeSMS+0x20>
	}

	int j;

	for (j = 0; j<strlen(sim->response)-tam_header;j++)
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	e00d      	b.n	8000f22 <ExtraerTextoDeSMS+0x62>
	{
		*(texto+j) = *(sim->response + tam_header + j);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	1d1a      	adds	r2, r3, #4
 8000f0a:	69b9      	ldr	r1, [r7, #24]
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	440b      	add	r3, r1
 8000f10:	441a      	add	r2, r3
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	6879      	ldr	r1, [r7, #4]
 8000f16:	440b      	add	r3, r1
 8000f18:	7812      	ldrb	r2, [r2, #0]
 8000f1a:	701a      	strb	r2, [r3, #0]
	for (j = 0; j<strlen(sim->response)-tam_header;j++)
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	3304      	adds	r3, #4
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff f910 	bl	800014c <strlen>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	1ad2      	subs	r2, r2, r3
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d8e6      	bhi.n	8000f06 <ExtraerTextoDeSMS+0x46>
	}
	*(texto+j+1)='\0';
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	4413      	add	r3, r2
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
}
 8000f44:	bf00      	nop
 8000f46:	3720      	adds	r7, #32
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	4a14      	ldr	r2, [pc, #80]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6193      	str	r3, [r2, #24]
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f74:	61d3      	str	r3, [r2, #28]
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <HAL_MspInit+0x60>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <HAL_MspInit+0x60>)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40010000 	.word	0x40010000

08000fb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0318 	add.w	r3, r7, #24
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a3f      	ldr	r2, [pc, #252]	; (80010c8 <HAL_UART_MspInit+0x118>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d13a      	bne.n	8001046 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fd0:	4b3e      	ldr	r3, [pc, #248]	; (80010cc <HAL_UART_MspInit+0x11c>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	4a3d      	ldr	r2, [pc, #244]	; (80010cc <HAL_UART_MspInit+0x11c>)
 8000fd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fda:	6193      	str	r3, [r2, #24]
 8000fdc:	4b3b      	ldr	r3, [pc, #236]	; (80010cc <HAL_UART_MspInit+0x11c>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe8:	4b38      	ldr	r3, [pc, #224]	; (80010cc <HAL_UART_MspInit+0x11c>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	4a37      	ldr	r2, [pc, #220]	; (80010cc <HAL_UART_MspInit+0x11c>)
 8000fee:	f043 0304 	orr.w	r3, r3, #4
 8000ff2:	6193      	str	r3, [r2, #24]
 8000ff4:	4b35      	ldr	r3, [pc, #212]	; (80010cc <HAL_UART_MspInit+0x11c>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f003 0304 	and.w	r3, r3, #4
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001000:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800100a:	2303      	movs	r3, #3
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100e:	f107 0318 	add.w	r3, r7, #24
 8001012:	4619      	mov	r1, r3
 8001014:	482e      	ldr	r0, [pc, #184]	; (80010d0 <HAL_UART_MspInit+0x120>)
 8001016:	f000 fbab 	bl	8001770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800101a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800101e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001028:	f107 0318 	add.w	r3, r7, #24
 800102c:	4619      	mov	r1, r3
 800102e:	4828      	ldr	r0, [pc, #160]	; (80010d0 <HAL_UART_MspInit+0x120>)
 8001030:	f000 fb9e 	bl	8001770 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	2100      	movs	r1, #0
 8001038:	2025      	movs	r0, #37	; 0x25
 800103a:	f000 fab2 	bl	80015a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800103e:	2025      	movs	r0, #37	; 0x25
 8001040:	f000 facb 	bl	80015da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001044:	e03c      	b.n	80010c0 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a22      	ldr	r2, [pc, #136]	; (80010d4 <HAL_UART_MspInit+0x124>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d137      	bne.n	80010c0 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001050:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <HAL_UART_MspInit+0x11c>)
 8001052:	69db      	ldr	r3, [r3, #28]
 8001054:	4a1d      	ldr	r2, [pc, #116]	; (80010cc <HAL_UART_MspInit+0x11c>)
 8001056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800105a:	61d3      	str	r3, [r2, #28]
 800105c:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <HAL_UART_MspInit+0x11c>)
 800105e:	69db      	ldr	r3, [r3, #28]
 8001060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001068:	4b18      	ldr	r3, [pc, #96]	; (80010cc <HAL_UART_MspInit+0x11c>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	4a17      	ldr	r2, [pc, #92]	; (80010cc <HAL_UART_MspInit+0x11c>)
 800106e:	f043 0304 	orr.w	r3, r3, #4
 8001072:	6193      	str	r3, [r2, #24]
 8001074:	4b15      	ldr	r3, [pc, #84]	; (80010cc <HAL_UART_MspInit+0x11c>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	f003 0304 	and.w	r3, r3, #4
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001080:	2304      	movs	r3, #4
 8001082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001088:	2303      	movs	r3, #3
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108c:	f107 0318 	add.w	r3, r7, #24
 8001090:	4619      	mov	r1, r3
 8001092:	480f      	ldr	r0, [pc, #60]	; (80010d0 <HAL_UART_MspInit+0x120>)
 8001094:	f000 fb6c 	bl	8001770 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001098:	2308      	movs	r3, #8
 800109a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a4:	f107 0318 	add.w	r3, r7, #24
 80010a8:	4619      	mov	r1, r3
 80010aa:	4809      	ldr	r0, [pc, #36]	; (80010d0 <HAL_UART_MspInit+0x120>)
 80010ac:	f000 fb60 	bl	8001770 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2100      	movs	r1, #0
 80010b4:	2026      	movs	r0, #38	; 0x26
 80010b6:	f000 fa74 	bl	80015a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010ba:	2026      	movs	r0, #38	; 0x26
 80010bc:	f000 fa8d 	bl	80015da <HAL_NVIC_EnableIRQ>
}
 80010c0:	bf00      	nop
 80010c2:	3728      	adds	r7, #40	; 0x28
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40013800 	.word	0x40013800
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40010800 	.word	0x40010800
 80010d4:	40004400 	.word	0x40004400

080010d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <NMI_Handler+0x4>

080010de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <HardFault_Handler+0x4>

080010e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <MemManage_Handler+0x4>

080010ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <BusFault_Handler+0x4>

080010f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <UsageFault_Handler+0x4>

080010f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr

08001102 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr

0800110e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr

0800111a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800111e:	f000 f929 	bl	8001374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <USART1_IRQHandler+0x10>)
 800112e:	f001 fa71 	bl	8002614 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2000008c 	.word	0x2000008c

0800113c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <USART2_IRQHandler+0x10>)
 8001142:	f001 fa67 	bl	8002614 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200000d0 	.word	0x200000d0

08001150 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	e00a      	b.n	8001178 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001162:	f7ff f80d 	bl	8000180 <__io_getchar>
 8001166:	4601      	mov	r1, r0
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	1c5a      	adds	r2, r3, #1
 800116c:	60ba      	str	r2, [r7, #8]
 800116e:	b2ca      	uxtb	r2, r1
 8001170:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	3301      	adds	r3, #1
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	429a      	cmp	r2, r3
 800117e:	dbf0      	blt.n	8001162 <_read+0x12>
  }

  return len;
 8001180:	687b      	ldr	r3, [r7, #4]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	60f8      	str	r0, [r7, #12]
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	e009      	b.n	80011b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	60ba      	str	r2, [r7, #8]
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7fe ffd9 	bl	800015c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	3301      	adds	r3, #1
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	dbf1      	blt.n	800119c <_write+0x12>
  }
  return len;
 80011b8:	687b      	ldr	r3, [r7, #4]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <_close>:

int _close(int file)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr

080011d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011e8:	605a      	str	r2, [r3, #4]
  return 0;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr

080011f6 <_isatty>:

int _isatty(int file)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011fe:	2301      	movs	r3, #1
}
 8001200:	4618      	mov	r0, r3
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr

0800120a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800120a:	b480      	push	{r7}
 800120c:	b085      	sub	sp, #20
 800120e:	af00      	add	r7, sp, #0
 8001210:	60f8      	str	r0, [r7, #12]
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
	...

08001224 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800122c:	4a14      	ldr	r2, [pc, #80]	; (8001280 <_sbrk+0x5c>)
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <_sbrk+0x60>)
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001238:	4b13      	ldr	r3, [pc, #76]	; (8001288 <_sbrk+0x64>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d102      	bne.n	8001246 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <_sbrk+0x64>)
 8001242:	4a12      	ldr	r2, [pc, #72]	; (800128c <_sbrk+0x68>)
 8001244:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <_sbrk+0x64>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4413      	add	r3, r2
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	429a      	cmp	r2, r3
 8001252:	d207      	bcs.n	8001264 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001254:	f001 fdd6 	bl	8002e04 <__errno>
 8001258:	4603      	mov	r3, r0
 800125a:	220c      	movs	r2, #12
 800125c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800125e:	f04f 33ff 	mov.w	r3, #4294967295
 8001262:	e009      	b.n	8001278 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001264:	4b08      	ldr	r3, [pc, #32]	; (8001288 <_sbrk+0x64>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800126a:	4b07      	ldr	r3, [pc, #28]	; (8001288 <_sbrk+0x64>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	4a05      	ldr	r2, [pc, #20]	; (8001288 <_sbrk+0x64>)
 8001274:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001276:	68fb      	ldr	r3, [r7, #12]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20005000 	.word	0x20005000
 8001284:	00000400 	.word	0x00000400
 8001288:	20000114 	.word	0x20000114
 800128c:	20000130 	.word	0x20000130

08001290 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr

0800129c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800129c:	480c      	ldr	r0, [pc, #48]	; (80012d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800129e:	490d      	ldr	r1, [pc, #52]	; (80012d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012a0:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a4:	e002      	b.n	80012ac <LoopCopyDataInit>

080012a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012aa:	3304      	adds	r3, #4

080012ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b0:	d3f9      	bcc.n	80012a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012b4:	4c0a      	ldr	r4, [pc, #40]	; (80012e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b8:	e001      	b.n	80012be <LoopFillZerobss>

080012ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012bc:	3204      	adds	r2, #4

080012be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c0:	d3fb      	bcc.n	80012ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012c2:	f7ff ffe5 	bl	8001290 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012c6:	f001 ff85 	bl	80031d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ca:	f7fe ff7f 	bl	80001cc <main>
  bx lr
 80012ce:	4770      	bx	lr
  ldr r0, =_sdata
 80012d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012d8:	08005a54 	.word	0x08005a54
  ldr r2, =_sbss
 80012dc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012e0:	2000012c 	.word	0x2000012c

080012e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012e4:	e7fe      	b.n	80012e4 <ADC1_2_IRQHandler>
	...

080012e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <HAL_Init+0x28>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a07      	ldr	r2, [pc, #28]	; (8001310 <HAL_Init+0x28>)
 80012f2:	f043 0310 	orr.w	r3, r3, #16
 80012f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f8:	2003      	movs	r0, #3
 80012fa:	f000 f947 	bl	800158c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fe:	200f      	movs	r0, #15
 8001300:	f000 f808 	bl	8001314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001304:	f7ff fe22 	bl	8000f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40022000 	.word	0x40022000

08001314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_InitTick+0x54>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_InitTick+0x58>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4619      	mov	r1, r3
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	fbb3 f3f1 	udiv	r3, r3, r1
 800132e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f95f 	bl	80015f6 <HAL_SYSTICK_Config>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e00e      	b.n	8001360 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b0f      	cmp	r3, #15
 8001346:	d80a      	bhi.n	800135e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001348:	2200      	movs	r2, #0
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	f04f 30ff 	mov.w	r0, #4294967295
 8001350:	f000 f927 	bl	80015a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001354:	4a06      	ldr	r2, [pc, #24]	; (8001370 <HAL_InitTick+0x5c>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	e000      	b.n	8001360 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000000 	.word	0x20000000
 800136c:	20000008 	.word	0x20000008
 8001370:	20000004 	.word	0x20000004

08001374 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <HAL_IncTick+0x1c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_IncTick+0x20>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4413      	add	r3, r2
 8001384:	4a03      	ldr	r2, [pc, #12]	; (8001394 <HAL_IncTick+0x20>)
 8001386:	6013      	str	r3, [r2, #0]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	20000008 	.word	0x20000008
 8001394:	20000118 	.word	0x20000118

08001398 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return uwTick;
 800139c:	4b02      	ldr	r3, [pc, #8]	; (80013a8 <HAL_GetTick+0x10>)
 800139e:	681b      	ldr	r3, [r3, #0]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	20000118 	.word	0x20000118

080013ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b4:	f7ff fff0 	bl	8001398 <HAL_GetTick>
 80013b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c4:	d005      	beq.n	80013d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <HAL_Delay+0x44>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4413      	add	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013d2:	bf00      	nop
 80013d4:	f7ff ffe0 	bl	8001398 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d8f7      	bhi.n	80013d4 <HAL_Delay+0x28>
  {
  }
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000008 	.word	0x20000008

080013f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001410:	4013      	ands	r3, r2
 8001412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800141c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001426:	4a04      	ldr	r2, [pc, #16]	; (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	60d3      	str	r3, [r2, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <__NVIC_GetPriorityGrouping+0x18>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	0a1b      	lsrs	r3, r3, #8
 8001446:	f003 0307 	and.w	r3, r3, #7
}
 800144a:	4618      	mov	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	2b00      	cmp	r3, #0
 8001468:	db0b      	blt.n	8001482 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	f003 021f 	and.w	r2, r3, #31
 8001470:	4906      	ldr	r1, [pc, #24]	; (800148c <__NVIC_EnableIRQ+0x34>)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	095b      	lsrs	r3, r3, #5
 8001478:	2001      	movs	r0, #1
 800147a:	fa00 f202 	lsl.w	r2, r0, r2
 800147e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	e000e100 	.word	0xe000e100

08001490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	6039      	str	r1, [r7, #0]
 800149a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	db0a      	blt.n	80014ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	490c      	ldr	r1, [pc, #48]	; (80014dc <__NVIC_SetPriority+0x4c>)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	0112      	lsls	r2, r2, #4
 80014b0:	b2d2      	uxtb	r2, r2
 80014b2:	440b      	add	r3, r1
 80014b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b8:	e00a      	b.n	80014d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4908      	ldr	r1, [pc, #32]	; (80014e0 <__NVIC_SetPriority+0x50>)
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	3b04      	subs	r3, #4
 80014c8:	0112      	lsls	r2, r2, #4
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	440b      	add	r3, r1
 80014ce:	761a      	strb	r2, [r3, #24]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000e100 	.word	0xe000e100
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b089      	sub	sp, #36	; 0x24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f1c3 0307 	rsb	r3, r3, #7
 80014fe:	2b04      	cmp	r3, #4
 8001500:	bf28      	it	cs
 8001502:	2304      	movcs	r3, #4
 8001504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3304      	adds	r3, #4
 800150a:	2b06      	cmp	r3, #6
 800150c:	d902      	bls.n	8001514 <NVIC_EncodePriority+0x30>
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3b03      	subs	r3, #3
 8001512:	e000      	b.n	8001516 <NVIC_EncodePriority+0x32>
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	f04f 32ff 	mov.w	r2, #4294967295
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43da      	mvns	r2, r3
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	401a      	ands	r2, r3
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800152c:	f04f 31ff 	mov.w	r1, #4294967295
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	fa01 f303 	lsl.w	r3, r1, r3
 8001536:	43d9      	mvns	r1, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	4313      	orrs	r3, r2
         );
}
 800153e:	4618      	mov	r0, r3
 8001540:	3724      	adds	r7, #36	; 0x24
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr

08001548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3b01      	subs	r3, #1
 8001554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001558:	d301      	bcc.n	800155e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800155a:	2301      	movs	r3, #1
 800155c:	e00f      	b.n	800157e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800155e:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <SysTick_Config+0x40>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3b01      	subs	r3, #1
 8001564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001566:	210f      	movs	r1, #15
 8001568:	f04f 30ff 	mov.w	r0, #4294967295
 800156c:	f7ff ff90 	bl	8001490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <SysTick_Config+0x40>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001576:	4b04      	ldr	r3, [pc, #16]	; (8001588 <SysTick_Config+0x40>)
 8001578:	2207      	movs	r2, #7
 800157a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	e000e010 	.word	0xe000e010

0800158c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ff2d 	bl	80013f4 <__NVIC_SetPriorityGrouping>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	4603      	mov	r3, r0
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
 80015ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b4:	f7ff ff42 	bl	800143c <__NVIC_GetPriorityGrouping>
 80015b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	68b9      	ldr	r1, [r7, #8]
 80015be:	6978      	ldr	r0, [r7, #20]
 80015c0:	f7ff ff90 	bl	80014e4 <NVIC_EncodePriority>
 80015c4:	4602      	mov	r2, r0
 80015c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ca:	4611      	mov	r1, r2
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff5f 	bl	8001490 <__NVIC_SetPriority>
}
 80015d2:	bf00      	nop
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff35 	bl	8001458 <__NVIC_EnableIRQ>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ffa2 	bl	8001548 <SysTick_Config>
 8001604:	4603      	mov	r3, r0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800160e:	b480      	push	{r7}
 8001610:	b085      	sub	sp, #20
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001620:	2b02      	cmp	r3, #2
 8001622:	d008      	beq.n	8001636 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2204      	movs	r2, #4
 8001628:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e020      	b.n	8001678 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 020e 	bic.w	r2, r2, #14
 8001644:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 0201 	bic.w	r2, r2, #1
 8001654:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800165e:	2101      	movs	r1, #1
 8001660:	fa01 f202 	lsl.w	r2, r1, r2
 8001664:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001676:	7bfb      	ldrb	r3, [r7, #15]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr
	...

08001684 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800168c:	2300      	movs	r3, #0
 800168e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001696:	2b02      	cmp	r3, #2
 8001698:	d005      	beq.n	80016a6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2204      	movs	r2, #4
 800169e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	73fb      	strb	r3, [r7, #15]
 80016a4:	e051      	b.n	800174a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 020e 	bic.w	r2, r2, #14
 80016b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0201 	bic.w	r2, r2, #1
 80016c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a22      	ldr	r2, [pc, #136]	; (8001754 <HAL_DMA_Abort_IT+0xd0>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d029      	beq.n	8001724 <HAL_DMA_Abort_IT+0xa0>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a20      	ldr	r2, [pc, #128]	; (8001758 <HAL_DMA_Abort_IT+0xd4>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d022      	beq.n	8001720 <HAL_DMA_Abort_IT+0x9c>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a1f      	ldr	r2, [pc, #124]	; (800175c <HAL_DMA_Abort_IT+0xd8>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d01a      	beq.n	800171a <HAL_DMA_Abort_IT+0x96>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a1d      	ldr	r2, [pc, #116]	; (8001760 <HAL_DMA_Abort_IT+0xdc>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d012      	beq.n	8001714 <HAL_DMA_Abort_IT+0x90>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a1c      	ldr	r2, [pc, #112]	; (8001764 <HAL_DMA_Abort_IT+0xe0>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d00a      	beq.n	800170e <HAL_DMA_Abort_IT+0x8a>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a1a      	ldr	r2, [pc, #104]	; (8001768 <HAL_DMA_Abort_IT+0xe4>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d102      	bne.n	8001708 <HAL_DMA_Abort_IT+0x84>
 8001702:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001706:	e00e      	b.n	8001726 <HAL_DMA_Abort_IT+0xa2>
 8001708:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800170c:	e00b      	b.n	8001726 <HAL_DMA_Abort_IT+0xa2>
 800170e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001712:	e008      	b.n	8001726 <HAL_DMA_Abort_IT+0xa2>
 8001714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001718:	e005      	b.n	8001726 <HAL_DMA_Abort_IT+0xa2>
 800171a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800171e:	e002      	b.n	8001726 <HAL_DMA_Abort_IT+0xa2>
 8001720:	2310      	movs	r3, #16
 8001722:	e000      	b.n	8001726 <HAL_DMA_Abort_IT+0xa2>
 8001724:	2301      	movs	r3, #1
 8001726:	4a11      	ldr	r2, [pc, #68]	; (800176c <HAL_DMA_Abort_IT+0xe8>)
 8001728:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	4798      	blx	r3
    } 
  }
  return status;
 800174a:	7bfb      	ldrb	r3, [r7, #15]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40020008 	.word	0x40020008
 8001758:	4002001c 	.word	0x4002001c
 800175c:	40020030 	.word	0x40020030
 8001760:	40020044 	.word	0x40020044
 8001764:	40020058 	.word	0x40020058
 8001768:	4002006c 	.word	0x4002006c
 800176c:	40020000 	.word	0x40020000

08001770 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001770:	b480      	push	{r7}
 8001772:	b08b      	sub	sp, #44	; 0x2c
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800177a:	2300      	movs	r3, #0
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001782:	e169      	b.n	8001a58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001784:	2201      	movs	r2, #1
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	69fa      	ldr	r2, [r7, #28]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	429a      	cmp	r2, r3
 800179e:	f040 8158 	bne.w	8001a52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	4a9a      	ldr	r2, [pc, #616]	; (8001a10 <HAL_GPIO_Init+0x2a0>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d05e      	beq.n	800186a <HAL_GPIO_Init+0xfa>
 80017ac:	4a98      	ldr	r2, [pc, #608]	; (8001a10 <HAL_GPIO_Init+0x2a0>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d875      	bhi.n	800189e <HAL_GPIO_Init+0x12e>
 80017b2:	4a98      	ldr	r2, [pc, #608]	; (8001a14 <HAL_GPIO_Init+0x2a4>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d058      	beq.n	800186a <HAL_GPIO_Init+0xfa>
 80017b8:	4a96      	ldr	r2, [pc, #600]	; (8001a14 <HAL_GPIO_Init+0x2a4>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d86f      	bhi.n	800189e <HAL_GPIO_Init+0x12e>
 80017be:	4a96      	ldr	r2, [pc, #600]	; (8001a18 <HAL_GPIO_Init+0x2a8>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d052      	beq.n	800186a <HAL_GPIO_Init+0xfa>
 80017c4:	4a94      	ldr	r2, [pc, #592]	; (8001a18 <HAL_GPIO_Init+0x2a8>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d869      	bhi.n	800189e <HAL_GPIO_Init+0x12e>
 80017ca:	4a94      	ldr	r2, [pc, #592]	; (8001a1c <HAL_GPIO_Init+0x2ac>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d04c      	beq.n	800186a <HAL_GPIO_Init+0xfa>
 80017d0:	4a92      	ldr	r2, [pc, #584]	; (8001a1c <HAL_GPIO_Init+0x2ac>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d863      	bhi.n	800189e <HAL_GPIO_Init+0x12e>
 80017d6:	4a92      	ldr	r2, [pc, #584]	; (8001a20 <HAL_GPIO_Init+0x2b0>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d046      	beq.n	800186a <HAL_GPIO_Init+0xfa>
 80017dc:	4a90      	ldr	r2, [pc, #576]	; (8001a20 <HAL_GPIO_Init+0x2b0>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d85d      	bhi.n	800189e <HAL_GPIO_Init+0x12e>
 80017e2:	2b12      	cmp	r3, #18
 80017e4:	d82a      	bhi.n	800183c <HAL_GPIO_Init+0xcc>
 80017e6:	2b12      	cmp	r3, #18
 80017e8:	d859      	bhi.n	800189e <HAL_GPIO_Init+0x12e>
 80017ea:	a201      	add	r2, pc, #4	; (adr r2, 80017f0 <HAL_GPIO_Init+0x80>)
 80017ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f0:	0800186b 	.word	0x0800186b
 80017f4:	08001845 	.word	0x08001845
 80017f8:	08001857 	.word	0x08001857
 80017fc:	08001899 	.word	0x08001899
 8001800:	0800189f 	.word	0x0800189f
 8001804:	0800189f 	.word	0x0800189f
 8001808:	0800189f 	.word	0x0800189f
 800180c:	0800189f 	.word	0x0800189f
 8001810:	0800189f 	.word	0x0800189f
 8001814:	0800189f 	.word	0x0800189f
 8001818:	0800189f 	.word	0x0800189f
 800181c:	0800189f 	.word	0x0800189f
 8001820:	0800189f 	.word	0x0800189f
 8001824:	0800189f 	.word	0x0800189f
 8001828:	0800189f 	.word	0x0800189f
 800182c:	0800189f 	.word	0x0800189f
 8001830:	0800189f 	.word	0x0800189f
 8001834:	0800184d 	.word	0x0800184d
 8001838:	08001861 	.word	0x08001861
 800183c:	4a79      	ldr	r2, [pc, #484]	; (8001a24 <HAL_GPIO_Init+0x2b4>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d013      	beq.n	800186a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001842:	e02c      	b.n	800189e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	623b      	str	r3, [r7, #32]
          break;
 800184a:	e029      	b.n	80018a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	3304      	adds	r3, #4
 8001852:	623b      	str	r3, [r7, #32]
          break;
 8001854:	e024      	b.n	80018a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	3308      	adds	r3, #8
 800185c:	623b      	str	r3, [r7, #32]
          break;
 800185e:	e01f      	b.n	80018a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	330c      	adds	r3, #12
 8001866:	623b      	str	r3, [r7, #32]
          break;
 8001868:	e01a      	b.n	80018a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d102      	bne.n	8001878 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001872:	2304      	movs	r3, #4
 8001874:	623b      	str	r3, [r7, #32]
          break;
 8001876:	e013      	b.n	80018a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d105      	bne.n	800188c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001880:	2308      	movs	r3, #8
 8001882:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	611a      	str	r2, [r3, #16]
          break;
 800188a:	e009      	b.n	80018a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800188c:	2308      	movs	r3, #8
 800188e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	615a      	str	r2, [r3, #20]
          break;
 8001896:	e003      	b.n	80018a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
          break;
 800189c:	e000      	b.n	80018a0 <HAL_GPIO_Init+0x130>
          break;
 800189e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2bff      	cmp	r3, #255	; 0xff
 80018a4:	d801      	bhi.n	80018aa <HAL_GPIO_Init+0x13a>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	e001      	b.n	80018ae <HAL_GPIO_Init+0x13e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3304      	adds	r3, #4
 80018ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	2bff      	cmp	r3, #255	; 0xff
 80018b4:	d802      	bhi.n	80018bc <HAL_GPIO_Init+0x14c>
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	e002      	b.n	80018c2 <HAL_GPIO_Init+0x152>
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	3b08      	subs	r3, #8
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	210f      	movs	r1, #15
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	fa01 f303 	lsl.w	r3, r1, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	401a      	ands	r2, r3
 80018d4:	6a39      	ldr	r1, [r7, #32]
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	fa01 f303 	lsl.w	r3, r1, r3
 80018dc:	431a      	orrs	r2, r3
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 80b1 	beq.w	8001a52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018f0:	4b4d      	ldr	r3, [pc, #308]	; (8001a28 <HAL_GPIO_Init+0x2b8>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	4a4c      	ldr	r2, [pc, #304]	; (8001a28 <HAL_GPIO_Init+0x2b8>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6193      	str	r3, [r2, #24]
 80018fc:	4b4a      	ldr	r3, [pc, #296]	; (8001a28 <HAL_GPIO_Init+0x2b8>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001908:	4a48      	ldr	r2, [pc, #288]	; (8001a2c <HAL_GPIO_Init+0x2bc>)
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	089b      	lsrs	r3, r3, #2
 800190e:	3302      	adds	r3, #2
 8001910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001914:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	220f      	movs	r2, #15
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	4013      	ands	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a40      	ldr	r2, [pc, #256]	; (8001a30 <HAL_GPIO_Init+0x2c0>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d013      	beq.n	800195c <HAL_GPIO_Init+0x1ec>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a3f      	ldr	r2, [pc, #252]	; (8001a34 <HAL_GPIO_Init+0x2c4>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d00d      	beq.n	8001958 <HAL_GPIO_Init+0x1e8>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a3e      	ldr	r2, [pc, #248]	; (8001a38 <HAL_GPIO_Init+0x2c8>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d007      	beq.n	8001954 <HAL_GPIO_Init+0x1e4>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a3d      	ldr	r2, [pc, #244]	; (8001a3c <HAL_GPIO_Init+0x2cc>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d101      	bne.n	8001950 <HAL_GPIO_Init+0x1e0>
 800194c:	2303      	movs	r3, #3
 800194e:	e006      	b.n	800195e <HAL_GPIO_Init+0x1ee>
 8001950:	2304      	movs	r3, #4
 8001952:	e004      	b.n	800195e <HAL_GPIO_Init+0x1ee>
 8001954:	2302      	movs	r3, #2
 8001956:	e002      	b.n	800195e <HAL_GPIO_Init+0x1ee>
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <HAL_GPIO_Init+0x1ee>
 800195c:	2300      	movs	r3, #0
 800195e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001960:	f002 0203 	and.w	r2, r2, #3
 8001964:	0092      	lsls	r2, r2, #2
 8001966:	4093      	lsls	r3, r2
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	4313      	orrs	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800196e:	492f      	ldr	r1, [pc, #188]	; (8001a2c <HAL_GPIO_Init+0x2bc>)
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	089b      	lsrs	r3, r3, #2
 8001974:	3302      	adds	r3, #2
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d006      	beq.n	8001996 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001988:	4b2d      	ldr	r3, [pc, #180]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	492c      	ldr	r1, [pc, #176]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	4313      	orrs	r3, r2
 8001992:	600b      	str	r3, [r1, #0]
 8001994:	e006      	b.n	80019a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001996:	4b2a      	ldr	r3, [pc, #168]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	43db      	mvns	r3, r3
 800199e:	4928      	ldr	r1, [pc, #160]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d006      	beq.n	80019be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019b0:	4b23      	ldr	r3, [pc, #140]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	4922      	ldr	r1, [pc, #136]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
 80019bc:	e006      	b.n	80019cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019be:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	43db      	mvns	r3, r3
 80019c6:	491e      	ldr	r1, [pc, #120]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d006      	beq.n	80019e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019d8:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	4918      	ldr	r1, [pc, #96]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	608b      	str	r3, [r1, #8]
 80019e4:	e006      	b.n	80019f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019e6:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	4914      	ldr	r1, [pc, #80]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d021      	beq.n	8001a44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a00:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	490e      	ldr	r1, [pc, #56]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	60cb      	str	r3, [r1, #12]
 8001a0c:	e021      	b.n	8001a52 <HAL_GPIO_Init+0x2e2>
 8001a0e:	bf00      	nop
 8001a10:	10320000 	.word	0x10320000
 8001a14:	10310000 	.word	0x10310000
 8001a18:	10220000 	.word	0x10220000
 8001a1c:	10210000 	.word	0x10210000
 8001a20:	10120000 	.word	0x10120000
 8001a24:	10110000 	.word	0x10110000
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40010000 	.word	0x40010000
 8001a30:	40010800 	.word	0x40010800
 8001a34:	40010c00 	.word	0x40010c00
 8001a38:	40011000 	.word	0x40011000
 8001a3c:	40011400 	.word	0x40011400
 8001a40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <HAL_GPIO_Init+0x304>)
 8001a46:	68da      	ldr	r2, [r3, #12]
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	4909      	ldr	r1, [pc, #36]	; (8001a74 <HAL_GPIO_Init+0x304>)
 8001a4e:	4013      	ands	r3, r2
 8001a50:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	3301      	adds	r3, #1
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f47f ae8e 	bne.w	8001784 <HAL_GPIO_Init+0x14>
  }
}
 8001a68:	bf00      	nop
 8001a6a:	bf00      	nop
 8001a6c:	372c      	adds	r7, #44	; 0x2c
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	40010400 	.word	0x40010400

08001a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	807b      	strh	r3, [r7, #2]
 8001a84:	4613      	mov	r3, r2
 8001a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a88:	787b      	ldrb	r3, [r7, #1]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a8e:	887a      	ldrh	r2, [r7, #2]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a94:	e003      	b.n	8001a9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a96:	887b      	ldrh	r3, [r7, #2]
 8001a98:	041a      	lsls	r2, r3, #16
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	611a      	str	r2, [r3, #16]
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aba:	887a      	ldrh	r2, [r7, #2]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	041a      	lsls	r2, r3, #16
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	43d9      	mvns	r1, r3
 8001ac6:	887b      	ldrh	r3, [r7, #2]
 8001ac8:	400b      	ands	r3, r1
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	611a      	str	r2, [r3, #16]
}
 8001ad0:	bf00      	nop
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr
	...

08001adc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e272      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 8087 	beq.w	8001c0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001afc:	4b92      	ldr	r3, [pc, #584]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 030c 	and.w	r3, r3, #12
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	d00c      	beq.n	8001b22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b08:	4b8f      	ldr	r3, [pc, #572]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d112      	bne.n	8001b3a <HAL_RCC_OscConfig+0x5e>
 8001b14:	4b8c      	ldr	r3, [pc, #560]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b20:	d10b      	bne.n	8001b3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b22:	4b89      	ldr	r3, [pc, #548]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d06c      	beq.n	8001c08 <HAL_RCC_OscConfig+0x12c>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d168      	bne.n	8001c08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e24c      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b42:	d106      	bne.n	8001b52 <HAL_RCC_OscConfig+0x76>
 8001b44:	4b80      	ldr	r3, [pc, #512]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a7f      	ldr	r2, [pc, #508]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	e02e      	b.n	8001bb0 <HAL_RCC_OscConfig+0xd4>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x98>
 8001b5a:	4b7b      	ldr	r3, [pc, #492]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a7a      	ldr	r2, [pc, #488]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	4b78      	ldr	r3, [pc, #480]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a77      	ldr	r2, [pc, #476]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	e01d      	b.n	8001bb0 <HAL_RCC_OscConfig+0xd4>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b7c:	d10c      	bne.n	8001b98 <HAL_RCC_OscConfig+0xbc>
 8001b7e:	4b72      	ldr	r3, [pc, #456]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a71      	ldr	r2, [pc, #452]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	4b6f      	ldr	r3, [pc, #444]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a6e      	ldr	r2, [pc, #440]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e00b      	b.n	8001bb0 <HAL_RCC_OscConfig+0xd4>
 8001b98:	4b6b      	ldr	r3, [pc, #428]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a6a      	ldr	r2, [pc, #424]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	4b68      	ldr	r3, [pc, #416]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a67      	ldr	r2, [pc, #412]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d013      	beq.n	8001be0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb8:	f7ff fbee 	bl	8001398 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc0:	f7ff fbea 	bl	8001398 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b64      	cmp	r3, #100	; 0x64
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e200      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd2:	4b5d      	ldr	r3, [pc, #372]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0xe4>
 8001bde:	e014      	b.n	8001c0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7ff fbda 	bl	8001398 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be8:	f7ff fbd6 	bl	8001398 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b64      	cmp	r3, #100	; 0x64
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e1ec      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfa:	4b53      	ldr	r3, [pc, #332]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0x10c>
 8001c06:	e000      	b.n	8001c0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d063      	beq.n	8001cde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c16:	4b4c      	ldr	r3, [pc, #304]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00b      	beq.n	8001c3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c22:	4b49      	ldr	r3, [pc, #292]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	d11c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x18c>
 8001c2e:	4b46      	ldr	r3, [pc, #280]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d116      	bne.n	8001c68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3a:	4b43      	ldr	r3, [pc, #268]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d005      	beq.n	8001c52 <HAL_RCC_OscConfig+0x176>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d001      	beq.n	8001c52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e1c0      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c52:	4b3d      	ldr	r3, [pc, #244]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4939      	ldr	r1, [pc, #228]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c66:	e03a      	b.n	8001cde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d020      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c70:	4b36      	ldr	r3, [pc, #216]	; (8001d4c <HAL_RCC_OscConfig+0x270>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c76:	f7ff fb8f 	bl	8001398 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7e:	f7ff fb8b 	bl	8001398 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e1a1      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c90:	4b2d      	ldr	r3, [pc, #180]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9c:	4b2a      	ldr	r3, [pc, #168]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4927      	ldr	r1, [pc, #156]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	600b      	str	r3, [r1, #0]
 8001cb0:	e015      	b.n	8001cde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cb2:	4b26      	ldr	r3, [pc, #152]	; (8001d4c <HAL_RCC_OscConfig+0x270>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb8:	f7ff fb6e 	bl	8001398 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc0:	f7ff fb6a 	bl	8001398 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e180      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd2:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d03a      	beq.n	8001d60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d019      	beq.n	8001d26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cf2:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <HAL_RCC_OscConfig+0x274>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf8:	f7ff fb4e 	bl	8001398 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d00:	f7ff fb4a 	bl	8001398 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e160      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d12:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d1e:	2001      	movs	r0, #1
 8001d20:	f000 fad8 	bl	80022d4 <RCC_Delay>
 8001d24:	e01c      	b.n	8001d60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <HAL_RCC_OscConfig+0x274>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2c:	f7ff fb34 	bl	8001398 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d32:	e00f      	b.n	8001d54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d34:	f7ff fb30 	bl	8001398 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d908      	bls.n	8001d54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e146      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4f8>
 8001d46:	bf00      	nop
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	42420000 	.word	0x42420000
 8001d50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d54:	4b92      	ldr	r3, [pc, #584]	; (8001fa0 <HAL_RCC_OscConfig+0x4c4>)
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1e9      	bne.n	8001d34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 80a6 	beq.w	8001eba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d72:	4b8b      	ldr	r3, [pc, #556]	; (8001fa0 <HAL_RCC_OscConfig+0x4c4>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10d      	bne.n	8001d9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d7e:	4b88      	ldr	r3, [pc, #544]	; (8001fa0 <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	4a87      	ldr	r2, [pc, #540]	; (8001fa0 <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d88:	61d3      	str	r3, [r2, #28]
 8001d8a:	4b85      	ldr	r3, [pc, #532]	; (8001fa0 <HAL_RCC_OscConfig+0x4c4>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d96:	2301      	movs	r3, #1
 8001d98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9a:	4b82      	ldr	r3, [pc, #520]	; (8001fa4 <HAL_RCC_OscConfig+0x4c8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d118      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001da6:	4b7f      	ldr	r3, [pc, #508]	; (8001fa4 <HAL_RCC_OscConfig+0x4c8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a7e      	ldr	r2, [pc, #504]	; (8001fa4 <HAL_RCC_OscConfig+0x4c8>)
 8001dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001db2:	f7ff faf1 	bl	8001398 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dba:	f7ff faed 	bl	8001398 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b64      	cmp	r3, #100	; 0x64
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e103      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dcc:	4b75      	ldr	r3, [pc, #468]	; (8001fa4 <HAL_RCC_OscConfig+0x4c8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0f0      	beq.n	8001dba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d106      	bne.n	8001dee <HAL_RCC_OscConfig+0x312>
 8001de0:	4b6f      	ldr	r3, [pc, #444]	; (8001fa0 <HAL_RCC_OscConfig+0x4c4>)
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	4a6e      	ldr	r2, [pc, #440]	; (8001fa0 <HAL_RCC_OscConfig+0x4c4>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6213      	str	r3, [r2, #32]
 8001dec:	e02d      	b.n	8001e4a <HAL_RCC_OscConfig+0x36e>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10c      	bne.n	8001e10 <HAL_RCC_OscConfig+0x334>
 8001df6:	4b6a      	ldr	r3, [pc, #424]	; (8001fa0 <HAL_RCC_OscConfig+0x4c4>)
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	4a69      	ldr	r2, [pc, #420]	; (8001fa0 <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	f023 0301 	bic.w	r3, r3, #1
 8001e00:	6213      	str	r3, [r2, #32]
 8001e02:	4b67      	ldr	r3, [pc, #412]	; (8001fa0 <HAL_RCC_OscConfig+0x4c4>)
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	4a66      	ldr	r2, [pc, #408]	; (8001fa0 <HAL_RCC_OscConfig+0x4c4>)
 8001e08:	f023 0304 	bic.w	r3, r3, #4
 8001e0c:	6213      	str	r3, [r2, #32]
 8001e0e:	e01c      	b.n	8001e4a <HAL_RCC_OscConfig+0x36e>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	2b05      	cmp	r3, #5
 8001e16:	d10c      	bne.n	8001e32 <HAL_RCC_OscConfig+0x356>
 8001e18:	4b61      	ldr	r3, [pc, #388]	; (8001fa0 <HAL_RCC_OscConfig+0x4c4>)
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	4a60      	ldr	r2, [pc, #384]	; (8001fa0 <HAL_RCC_OscConfig+0x4c4>)
 8001e1e:	f043 0304 	orr.w	r3, r3, #4
 8001e22:	6213      	str	r3, [r2, #32]
 8001e24:	4b5e      	ldr	r3, [pc, #376]	; (8001fa0 <HAL_RCC_OscConfig+0x4c4>)
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	4a5d      	ldr	r2, [pc, #372]	; (8001fa0 <HAL_RCC_OscConfig+0x4c4>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	6213      	str	r3, [r2, #32]
 8001e30:	e00b      	b.n	8001e4a <HAL_RCC_OscConfig+0x36e>
 8001e32:	4b5b      	ldr	r3, [pc, #364]	; (8001fa0 <HAL_RCC_OscConfig+0x4c4>)
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	4a5a      	ldr	r2, [pc, #360]	; (8001fa0 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	f023 0301 	bic.w	r3, r3, #1
 8001e3c:	6213      	str	r3, [r2, #32]
 8001e3e:	4b58      	ldr	r3, [pc, #352]	; (8001fa0 <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	4a57      	ldr	r2, [pc, #348]	; (8001fa0 <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	f023 0304 	bic.w	r3, r3, #4
 8001e48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d015      	beq.n	8001e7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e52:	f7ff faa1 	bl	8001398 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e58:	e00a      	b.n	8001e70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5a:	f7ff fa9d 	bl	8001398 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e0b1      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e70:	4b4b      	ldr	r3, [pc, #300]	; (8001fa0 <HAL_RCC_OscConfig+0x4c4>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0ee      	beq.n	8001e5a <HAL_RCC_OscConfig+0x37e>
 8001e7c:	e014      	b.n	8001ea8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7e:	f7ff fa8b 	bl	8001398 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e84:	e00a      	b.n	8001e9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e86:	f7ff fa87 	bl	8001398 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e09b      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e9c:	4b40      	ldr	r3, [pc, #256]	; (8001fa0 <HAL_RCC_OscConfig+0x4c4>)
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1ee      	bne.n	8001e86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ea8:	7dfb      	ldrb	r3, [r7, #23]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d105      	bne.n	8001eba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eae:	4b3c      	ldr	r3, [pc, #240]	; (8001fa0 <HAL_RCC_OscConfig+0x4c4>)
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	4a3b      	ldr	r2, [pc, #236]	; (8001fa0 <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 8087 	beq.w	8001fd2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ec4:	4b36      	ldr	r3, [pc, #216]	; (8001fa0 <HAL_RCC_OscConfig+0x4c4>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 030c 	and.w	r3, r3, #12
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d061      	beq.n	8001f94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d146      	bne.n	8001f66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed8:	4b33      	ldr	r3, [pc, #204]	; (8001fa8 <HAL_RCC_OscConfig+0x4cc>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ede:	f7ff fa5b 	bl	8001398 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee6:	f7ff fa57 	bl	8001398 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e06d      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef8:	4b29      	ldr	r3, [pc, #164]	; (8001fa0 <HAL_RCC_OscConfig+0x4c4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1f0      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f0c:	d108      	bne.n	8001f20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f0e:	4b24      	ldr	r3, [pc, #144]	; (8001fa0 <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	4921      	ldr	r1, [pc, #132]	; (8001fa0 <HAL_RCC_OscConfig+0x4c4>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f20:	4b1f      	ldr	r3, [pc, #124]	; (8001fa0 <HAL_RCC_OscConfig+0x4c4>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a19      	ldr	r1, [r3, #32]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	430b      	orrs	r3, r1
 8001f32:	491b      	ldr	r1, [pc, #108]	; (8001fa0 <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f38:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <HAL_RCC_OscConfig+0x4cc>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3e:	f7ff fa2b 	bl	8001398 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f46:	f7ff fa27 	bl	8001398 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e03d      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f58:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <HAL_RCC_OscConfig+0x4c4>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f0      	beq.n	8001f46 <HAL_RCC_OscConfig+0x46a>
 8001f64:	e035      	b.n	8001fd2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f66:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <HAL_RCC_OscConfig+0x4cc>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6c:	f7ff fa14 	bl	8001398 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f74:	f7ff fa10 	bl	8001398 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e026      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f86:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_RCC_OscConfig+0x4c4>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f0      	bne.n	8001f74 <HAL_RCC_OscConfig+0x498>
 8001f92:	e01e      	b.n	8001fd2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d107      	bne.n	8001fac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e019      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4f8>
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40007000 	.word	0x40007000
 8001fa8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fac:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <HAL_RCC_OscConfig+0x500>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d106      	bne.n	8001fce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d001      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40021000 	.word	0x40021000

08001fe0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0d0      	b.n	8002196 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff4:	4b6a      	ldr	r3, [pc, #424]	; (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d910      	bls.n	8002024 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002002:	4b67      	ldr	r3, [pc, #412]	; (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f023 0207 	bic.w	r2, r3, #7
 800200a:	4965      	ldr	r1, [pc, #404]	; (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	4313      	orrs	r3, r2
 8002010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002012:	4b63      	ldr	r3, [pc, #396]	; (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d001      	beq.n	8002024 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e0b8      	b.n	8002196 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d020      	beq.n	8002072 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b00      	cmp	r3, #0
 800203a:	d005      	beq.n	8002048 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800203c:	4b59      	ldr	r3, [pc, #356]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	4a58      	ldr	r2, [pc, #352]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002046:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0308 	and.w	r3, r3, #8
 8002050:	2b00      	cmp	r3, #0
 8002052:	d005      	beq.n	8002060 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002054:	4b53      	ldr	r3, [pc, #332]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	4a52      	ldr	r2, [pc, #328]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 800205a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800205e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002060:	4b50      	ldr	r3, [pc, #320]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	494d      	ldr	r1, [pc, #308]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	4313      	orrs	r3, r2
 8002070:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d040      	beq.n	8002100 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d107      	bne.n	8002096 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002086:	4b47      	ldr	r3, [pc, #284]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d115      	bne.n	80020be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e07f      	b.n	8002196 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b02      	cmp	r3, #2
 800209c:	d107      	bne.n	80020ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209e:	4b41      	ldr	r3, [pc, #260]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d109      	bne.n	80020be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e073      	b.n	8002196 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ae:	4b3d      	ldr	r3, [pc, #244]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e06b      	b.n	8002196 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020be:	4b39      	ldr	r3, [pc, #228]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f023 0203 	bic.w	r2, r3, #3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	4936      	ldr	r1, [pc, #216]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020d0:	f7ff f962 	bl	8001398 <HAL_GetTick>
 80020d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d6:	e00a      	b.n	80020ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d8:	f7ff f95e 	bl	8001398 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e053      	b.n	8002196 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ee:	4b2d      	ldr	r3, [pc, #180]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f003 020c 	and.w	r2, r3, #12
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d1eb      	bne.n	80020d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002100:	4b27      	ldr	r3, [pc, #156]	; (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d210      	bcs.n	8002130 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210e:	4b24      	ldr	r3, [pc, #144]	; (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 0207 	bic.w	r2, r3, #7
 8002116:	4922      	ldr	r1, [pc, #136]	; (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	4b20      	ldr	r3, [pc, #128]	; (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d001      	beq.n	8002130 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e032      	b.n	8002196 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b00      	cmp	r3, #0
 800213a:	d008      	beq.n	800214e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800213c:	4b19      	ldr	r3, [pc, #100]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	4916      	ldr	r1, [pc, #88]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	4313      	orrs	r3, r2
 800214c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b00      	cmp	r3, #0
 8002158:	d009      	beq.n	800216e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800215a:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	490e      	ldr	r1, [pc, #56]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	4313      	orrs	r3, r2
 800216c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800216e:	f000 f821 	bl	80021b4 <HAL_RCC_GetSysClockFreq>
 8002172:	4602      	mov	r2, r0
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	091b      	lsrs	r3, r3, #4
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	490a      	ldr	r1, [pc, #40]	; (80021a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002180:	5ccb      	ldrb	r3, [r1, r3]
 8002182:	fa22 f303 	lsr.w	r3, r2, r3
 8002186:	4a09      	ldr	r2, [pc, #36]	; (80021ac <HAL_RCC_ClockConfig+0x1cc>)
 8002188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800218a:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <HAL_RCC_ClockConfig+0x1d0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff f8c0 	bl	8001314 <HAL_InitTick>

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40022000 	.word	0x40022000
 80021a4:	40021000 	.word	0x40021000
 80021a8:	08005880 	.word	0x08005880
 80021ac:	20000000 	.word	0x20000000
 80021b0:	20000004 	.word	0x20000004

080021b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b4:	b490      	push	{r4, r7}
 80021b6:	b08a      	sub	sp, #40	; 0x28
 80021b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021ba:	4b29      	ldr	r3, [pc, #164]	; (8002260 <HAL_RCC_GetSysClockFreq+0xac>)
 80021bc:	1d3c      	adds	r4, r7, #4
 80021be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021c4:	f240 2301 	movw	r3, #513	; 0x201
 80021c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
 80021ce:	2300      	movs	r3, #0
 80021d0:	61bb      	str	r3, [r7, #24]
 80021d2:	2300      	movs	r3, #0
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021de:	4b21      	ldr	r3, [pc, #132]	; (8002264 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f003 030c 	and.w	r3, r3, #12
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d002      	beq.n	80021f4 <HAL_RCC_GetSysClockFreq+0x40>
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d003      	beq.n	80021fa <HAL_RCC_GetSysClockFreq+0x46>
 80021f2:	e02b      	b.n	800224c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021f4:	4b1c      	ldr	r3, [pc, #112]	; (8002268 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021f6:	623b      	str	r3, [r7, #32]
      break;
 80021f8:	e02b      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	0c9b      	lsrs	r3, r3, #18
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	3328      	adds	r3, #40	; 0x28
 8002204:	443b      	add	r3, r7
 8002206:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800220a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d012      	beq.n	800223c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002216:	4b13      	ldr	r3, [pc, #76]	; (8002264 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	0c5b      	lsrs	r3, r3, #17
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	3328      	adds	r3, #40	; 0x28
 8002222:	443b      	add	r3, r7
 8002224:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002228:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	4a0e      	ldr	r2, [pc, #56]	; (8002268 <HAL_RCC_GetSysClockFreq+0xb4>)
 800222e:	fb03 f202 	mul.w	r2, r3, r2
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	fbb2 f3f3 	udiv	r3, r2, r3
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
 800223a:	e004      	b.n	8002246 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	4a0b      	ldr	r2, [pc, #44]	; (800226c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002240:	fb02 f303 	mul.w	r3, r2, r3
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	623b      	str	r3, [r7, #32]
      break;
 800224a:	e002      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_RCC_GetSysClockFreq+0xb4>)
 800224e:	623b      	str	r3, [r7, #32]
      break;
 8002250:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002252:	6a3b      	ldr	r3, [r7, #32]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3728      	adds	r7, #40	; 0x28
 8002258:	46bd      	mov	sp, r7
 800225a:	bc90      	pop	{r4, r7}
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	08005864 	.word	0x08005864
 8002264:	40021000 	.word	0x40021000
 8002268:	007a1200 	.word	0x007a1200
 800226c:	003d0900 	.word	0x003d0900

08002270 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002274:	4b02      	ldr	r3, [pc, #8]	; (8002280 <HAL_RCC_GetHCLKFreq+0x10>)
 8002276:	681b      	ldr	r3, [r3, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr
 8002280:	20000000 	.word	0x20000000

08002284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002288:	f7ff fff2 	bl	8002270 <HAL_RCC_GetHCLKFreq>
 800228c:	4602      	mov	r2, r0
 800228e:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	0a1b      	lsrs	r3, r3, #8
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	4903      	ldr	r1, [pc, #12]	; (80022a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800229a:	5ccb      	ldrb	r3, [r1, r3]
 800229c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40021000 	.word	0x40021000
 80022a8:	08005890 	.word	0x08005890

080022ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022b0:	f7ff ffde 	bl	8002270 <HAL_RCC_GetHCLKFreq>
 80022b4:	4602      	mov	r2, r0
 80022b6:	4b05      	ldr	r3, [pc, #20]	; (80022cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	0adb      	lsrs	r3, r3, #11
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	4903      	ldr	r1, [pc, #12]	; (80022d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022c2:	5ccb      	ldrb	r3, [r1, r3]
 80022c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40021000 	.word	0x40021000
 80022d0:	08005890 	.word	0x08005890

080022d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022dc:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <RCC_Delay+0x34>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a0a      	ldr	r2, [pc, #40]	; (800230c <RCC_Delay+0x38>)
 80022e2:	fba2 2303 	umull	r2, r3, r2, r3
 80022e6:	0a5b      	lsrs	r3, r3, #9
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	fb02 f303 	mul.w	r3, r2, r3
 80022ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022f0:	bf00      	nop
  }
  while (Delay --);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1e5a      	subs	r2, r3, #1
 80022f6:	60fa      	str	r2, [r7, #12]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1f9      	bne.n	80022f0 <RCC_Delay+0x1c>
}
 80022fc:	bf00      	nop
 80022fe:	bf00      	nop
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr
 8002308:	20000000 	.word	0x20000000
 800230c:	10624dd3 	.word	0x10624dd3

08002310 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e03f      	b.n	80023a2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d106      	bne.n	800233c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7fe fe3a 	bl	8000fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2224      	movs	r2, #36	; 0x24
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002352:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 fcc7 	bl	8002ce8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	691a      	ldr	r2, [r3, #16]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002368:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	695a      	ldr	r2, [r3, #20]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002378:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002388:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2220      	movs	r2, #32
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2220      	movs	r2, #32
 800239c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b08a      	sub	sp, #40	; 0x28
 80023ae:	af02      	add	r7, sp, #8
 80023b0:	60f8      	str	r0, [r7, #12]
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	603b      	str	r3, [r7, #0]
 80023b6:	4613      	mov	r3, r2
 80023b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b20      	cmp	r3, #32
 80023c8:	d17c      	bne.n	80024c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d002      	beq.n	80023d6 <HAL_UART_Transmit+0x2c>
 80023d0:	88fb      	ldrh	r3, [r7, #6]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e075      	b.n	80024c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d101      	bne.n	80023e8 <HAL_UART_Transmit+0x3e>
 80023e4:	2302      	movs	r3, #2
 80023e6:	e06e      	b.n	80024c6 <HAL_UART_Transmit+0x11c>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2221      	movs	r2, #33	; 0x21
 80023fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023fe:	f7fe ffcb 	bl	8001398 <HAL_GetTick>
 8002402:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	88fa      	ldrh	r2, [r7, #6]
 8002408:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	88fa      	ldrh	r2, [r7, #6]
 800240e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002418:	d108      	bne.n	800242c <HAL_UART_Transmit+0x82>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d104      	bne.n	800242c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	61bb      	str	r3, [r7, #24]
 800242a:	e003      	b.n	8002434 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002430:	2300      	movs	r3, #0
 8002432:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800243c:	e02a      	b.n	8002494 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2200      	movs	r2, #0
 8002446:	2180      	movs	r1, #128	; 0x80
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 fab3 	bl	80029b4 <UART_WaitOnFlagUntilTimeout>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e036      	b.n	80024c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10b      	bne.n	8002476 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800246c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	3302      	adds	r3, #2
 8002472:	61bb      	str	r3, [r7, #24]
 8002474:	e007      	b.n	8002486 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	781a      	ldrb	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	3301      	adds	r3, #1
 8002484:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800248a:	b29b      	uxth	r3, r3
 800248c:	3b01      	subs	r3, #1
 800248e:	b29a      	uxth	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002498:	b29b      	uxth	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1cf      	bne.n	800243e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	2200      	movs	r2, #0
 80024a6:	2140      	movs	r1, #64	; 0x40
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 fa83 	bl	80029b4 <UART_WaitOnFlagUntilTimeout>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e006      	b.n	80024c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2220      	movs	r2, #32
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	e000      	b.n	80024c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024c4:	2302      	movs	r3, #2
  }
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3720      	adds	r7, #32
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b08a      	sub	sp, #40	; 0x28
 80024d2:	af02      	add	r7, sp, #8
 80024d4:	60f8      	str	r0, [r7, #12]
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	603b      	str	r3, [r7, #0]
 80024da:	4613      	mov	r3, r2
 80024dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b20      	cmp	r3, #32
 80024ec:	f040 808c 	bne.w	8002608 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <HAL_UART_Receive+0x2e>
 80024f6:	88fb      	ldrh	r3, [r7, #6]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e084      	b.n	800260a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002506:	2b01      	cmp	r3, #1
 8002508:	d101      	bne.n	800250e <HAL_UART_Receive+0x40>
 800250a:	2302      	movs	r3, #2
 800250c:	e07d      	b.n	800260a <HAL_UART_Receive+0x13c>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2222      	movs	r2, #34	; 0x22
 8002520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800252a:	f7fe ff35 	bl	8001398 <HAL_GetTick>
 800252e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	88fa      	ldrh	r2, [r7, #6]
 8002534:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	88fa      	ldrh	r2, [r7, #6]
 800253a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002544:	d108      	bne.n	8002558 <HAL_UART_Receive+0x8a>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d104      	bne.n	8002558 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	61bb      	str	r3, [r7, #24]
 8002556:	e003      	b.n	8002560 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800255c:	2300      	movs	r3, #0
 800255e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002568:	e043      	b.n	80025f2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2200      	movs	r2, #0
 8002572:	2120      	movs	r1, #32
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 fa1d 	bl	80029b4 <UART_WaitOnFlagUntilTimeout>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e042      	b.n	800260a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10c      	bne.n	80025a4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	b29b      	uxth	r3, r3
 8002592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002596:	b29a      	uxth	r2, r3
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	3302      	adds	r3, #2
 80025a0:	61bb      	str	r3, [r7, #24]
 80025a2:	e01f      	b.n	80025e4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ac:	d007      	beq.n	80025be <HAL_UART_Receive+0xf0>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10a      	bne.n	80025cc <HAL_UART_Receive+0xfe>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d106      	bne.n	80025cc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	701a      	strb	r2, [r3, #0]
 80025ca:	e008      	b.n	80025de <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3301      	adds	r3, #1
 80025e2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1b6      	bne.n	800256a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2220      	movs	r2, #32
 8002600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	e000      	b.n	800260a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002608:	2302      	movs	r3, #2
  }
}
 800260a:	4618      	mov	r0, r3
 800260c:	3720      	adds	r7, #32
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08a      	sub	sp, #40	; 0x28
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002634:	2300      	movs	r3, #0
 8002636:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10d      	bne.n	8002666 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_UART_IRQHandler+0x52>
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	f003 0320 	and.w	r3, r3, #32
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 fa99 	bl	8002b96 <UART_Receive_IT>
      return;
 8002664:	e17b      	b.n	800295e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 80b1 	beq.w	80027d0 <HAL_UART_IRQHandler+0x1bc>
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b00      	cmp	r3, #0
 8002676:	d105      	bne.n	8002684 <HAL_UART_IRQHandler+0x70>
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 80a6 	beq.w	80027d0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00a      	beq.n	80026a4 <HAL_UART_IRQHandler+0x90>
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	f043 0201 	orr.w	r2, r3, #1
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00a      	beq.n	80026c4 <HAL_UART_IRQHandler+0xb0>
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	f043 0202 	orr.w	r2, r3, #2
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00a      	beq.n	80026e4 <HAL_UART_IRQHandler+0xd0>
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	f043 0204 	orr.w	r2, r3, #4
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00f      	beq.n	800270e <HAL_UART_IRQHandler+0xfa>
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	f003 0320 	and.w	r3, r3, #32
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d104      	bne.n	8002702 <HAL_UART_IRQHandler+0xee>
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d005      	beq.n	800270e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f043 0208 	orr.w	r2, r3, #8
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 811e 	beq.w	8002954 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	f003 0320 	and.w	r3, r3, #32
 800271e:	2b00      	cmp	r3, #0
 8002720:	d007      	beq.n	8002732 <HAL_UART_IRQHandler+0x11e>
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	f003 0320 	and.w	r3, r3, #32
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 fa32 	bl	8002b96 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273c:	2b00      	cmp	r3, #0
 800273e:	bf14      	ite	ne
 8002740:	2301      	movne	r3, #1
 8002742:	2300      	moveq	r3, #0
 8002744:	b2db      	uxtb	r3, r3
 8002746:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	f003 0308 	and.w	r3, r3, #8
 8002750:	2b00      	cmp	r3, #0
 8002752:	d102      	bne.n	800275a <HAL_UART_IRQHandler+0x146>
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d031      	beq.n	80027be <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f974 	bl	8002a48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276a:	2b00      	cmp	r3, #0
 800276c:	d023      	beq.n	80027b6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695a      	ldr	r2, [r3, #20]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800277c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002782:	2b00      	cmp	r3, #0
 8002784:	d013      	beq.n	80027ae <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278a:	4a76      	ldr	r2, [pc, #472]	; (8002964 <HAL_UART_IRQHandler+0x350>)
 800278c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe ff76 	bl	8001684 <HAL_DMA_Abort_IT>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d016      	beq.n	80027cc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027a8:	4610      	mov	r0, r2
 80027aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ac:	e00e      	b.n	80027cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f8ec 	bl	800298c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027b4:	e00a      	b.n	80027cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f8e8 	bl	800298c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027bc:	e006      	b.n	80027cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f8e4 	bl	800298c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80027ca:	e0c3      	b.n	8002954 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027cc:	bf00      	nop
    return;
 80027ce:	e0c1      	b.n	8002954 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	f040 80a1 	bne.w	800291c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 809b 	beq.w	800291c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	f003 0310 	and.w	r3, r3, #16
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 8095 	beq.w	800291c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002812:	2b00      	cmp	r3, #0
 8002814:	d04e      	beq.n	80028b4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002820:	8a3b      	ldrh	r3, [r7, #16]
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 8098 	beq.w	8002958 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800282c:	8a3a      	ldrh	r2, [r7, #16]
 800282e:	429a      	cmp	r2, r3
 8002830:	f080 8092 	bcs.w	8002958 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	8a3a      	ldrh	r2, [r7, #16]
 8002838:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	2b20      	cmp	r3, #32
 8002842:	d02b      	beq.n	800289c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68da      	ldr	r2, [r3, #12]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002852:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695a      	ldr	r2, [r3, #20]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0201 	bic.w	r2, r2, #1
 8002862:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	695a      	ldr	r2, [r3, #20]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002872:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0210 	bic.w	r2, r2, #16
 8002890:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002896:	4618      	mov	r0, r3
 8002898:	f7fe feb9 	bl	800160e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	4619      	mov	r1, r3
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f876 	bl	800299e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80028b2:	e051      	b.n	8002958 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028bc:	b29b      	uxth	r3, r3
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d047      	beq.n	800295c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80028cc:	8a7b      	ldrh	r3, [r7, #18]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d044      	beq.n	800295c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80028e0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695a      	ldr	r2, [r3, #20]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0201 	bic.w	r2, r2, #1
 80028f0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2220      	movs	r2, #32
 80028f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0210 	bic.w	r2, r2, #16
 800290e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002910:	8a7b      	ldrh	r3, [r7, #18]
 8002912:	4619      	mov	r1, r3
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 f842 	bl	800299e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800291a:	e01f      	b.n	800295c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002922:	2b00      	cmp	r3, #0
 8002924:	d008      	beq.n	8002938 <HAL_UART_IRQHandler+0x324>
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f8c9 	bl	8002ac8 <UART_Transmit_IT>
    return;
 8002936:	e012      	b.n	800295e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00d      	beq.n	800295e <HAL_UART_IRQHandler+0x34a>
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002948:	2b00      	cmp	r3, #0
 800294a:	d008      	beq.n	800295e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f90a 	bl	8002b66 <UART_EndTransmit_IT>
    return;
 8002952:	e004      	b.n	800295e <HAL_UART_IRQHandler+0x34a>
    return;
 8002954:	bf00      	nop
 8002956:	e002      	b.n	800295e <HAL_UART_IRQHandler+0x34a>
      return;
 8002958:	bf00      	nop
 800295a:	e000      	b.n	800295e <HAL_UART_IRQHandler+0x34a>
      return;
 800295c:	bf00      	nop
  }
}
 800295e:	3728      	adds	r7, #40	; 0x28
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	08002aa1 	.word	0x08002aa1

08002968 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr

0800297a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr

0800299e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	460b      	mov	r3, r1
 80029a8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr

080029b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	4613      	mov	r3, r2
 80029c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029c4:	e02c      	b.n	8002a20 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029cc:	d028      	beq.n	8002a20 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d007      	beq.n	80029e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80029d4:	f7fe fce0 	bl	8001398 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d21d      	bcs.n	8002a20 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80029f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695a      	ldr	r2, [r3, #20]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0201 	bic.w	r2, r2, #1
 8002a02:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2220      	movs	r2, #32
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e00f      	b.n	8002a40 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	bf0c      	ite	eq
 8002a30:	2301      	moveq	r3, #1
 8002a32:	2300      	movne	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	461a      	mov	r2, r3
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d0c3      	beq.n	80029c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002a5e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695a      	ldr	r2, [r3, #20]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0201 	bic.w	r2, r2, #1
 8002a6e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d107      	bne.n	8002a88 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0210 	bic.w	r2, r2, #16
 8002a86:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr

08002aa0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f7ff ff66 	bl	800298c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ac0:	bf00      	nop
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b21      	cmp	r3, #33	; 0x21
 8002ada:	d13e      	bne.n	8002b5a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae4:	d114      	bne.n	8002b10 <UART_Transmit_IT+0x48>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d110      	bne.n	8002b10 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	461a      	mov	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b02:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	1c9a      	adds	r2, r3, #2
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	621a      	str	r2, [r3, #32]
 8002b0e:	e008      	b.n	8002b22 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	1c59      	adds	r1, r3, #1
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6211      	str	r1, [r2, #32]
 8002b1a:	781a      	ldrb	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	4619      	mov	r1, r3
 8002b30:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10f      	bne.n	8002b56 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b44:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68da      	ldr	r2, [r3, #12]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b54:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	e000      	b.n	8002b5c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b5a:	2302      	movs	r3, #2
  }
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr

08002b66 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68da      	ldr	r2, [r3, #12]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b7c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2220      	movs	r2, #32
 8002b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7ff feee 	bl	8002968 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b086      	sub	sp, #24
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b22      	cmp	r3, #34	; 0x22
 8002ba8:	f040 8099 	bne.w	8002cde <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb4:	d117      	bne.n	8002be6 <UART_Receive_IT+0x50>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d113      	bne.n	8002be6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bde:	1c9a      	adds	r2, r3, #2
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	629a      	str	r2, [r3, #40]	; 0x28
 8002be4:	e026      	b.n	8002c34 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bea:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bf8:	d007      	beq.n	8002c0a <UART_Receive_IT+0x74>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10a      	bne.n	8002c18 <UART_Receive_IT+0x82>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d106      	bne.n	8002c18 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	701a      	strb	r2, [r3, #0]
 8002c16:	e008      	b.n	8002c2a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	4619      	mov	r1, r3
 8002c42:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d148      	bne.n	8002cda <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0220 	bic.w	r2, r2, #32
 8002c56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695a      	ldr	r2, [r3, #20]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0201 	bic.w	r2, r2, #1
 8002c76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d123      	bne.n	8002cd0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0210 	bic.w	r2, r2, #16
 8002c9c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	2b10      	cmp	r3, #16
 8002caa:	d10a      	bne.n	8002cc2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cac:	2300      	movs	r3, #0
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff fe68 	bl	800299e <HAL_UARTEx_RxEventCallback>
 8002cce:	e002      	b.n	8002cd6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff fe52 	bl	800297a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	e002      	b.n	8002ce0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	e000      	b.n	8002ce0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002cde:	2302      	movs	r3, #2
  }
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d22:	f023 030c 	bic.w	r3, r3, #12
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6812      	ldr	r2, [r2, #0]
 8002d2a:	68b9      	ldr	r1, [r7, #8]
 8002d2c:	430b      	orrs	r3, r1
 8002d2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699a      	ldr	r2, [r3, #24]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a2c      	ldr	r2, [pc, #176]	; (8002dfc <UART_SetConfig+0x114>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d103      	bne.n	8002d58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d50:	f7ff faac 	bl	80022ac <HAL_RCC_GetPCLK2Freq>
 8002d54:	60f8      	str	r0, [r7, #12]
 8002d56:	e002      	b.n	8002d5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d58:	f7ff fa94 	bl	8002284 <HAL_RCC_GetPCLK1Freq>
 8002d5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	009a      	lsls	r2, r3, #2
 8002d68:	441a      	add	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d74:	4a22      	ldr	r2, [pc, #136]	; (8002e00 <UART_SetConfig+0x118>)
 8002d76:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7a:	095b      	lsrs	r3, r3, #5
 8002d7c:	0119      	lsls	r1, r3, #4
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	009a      	lsls	r2, r3, #2
 8002d88:	441a      	add	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d94:	4b1a      	ldr	r3, [pc, #104]	; (8002e00 <UART_SetConfig+0x118>)
 8002d96:	fba3 0302 	umull	r0, r3, r3, r2
 8002d9a:	095b      	lsrs	r3, r3, #5
 8002d9c:	2064      	movs	r0, #100	; 0x64
 8002d9e:	fb00 f303 	mul.w	r3, r0, r3
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	3332      	adds	r3, #50	; 0x32
 8002da8:	4a15      	ldr	r2, [pc, #84]	; (8002e00 <UART_SetConfig+0x118>)
 8002daa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002db4:	4419      	add	r1, r3
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009a      	lsls	r2, r3, #2
 8002dc0:	441a      	add	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <UART_SetConfig+0x118>)
 8002dce:	fba3 0302 	umull	r0, r3, r3, r2
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	2064      	movs	r0, #100	; 0x64
 8002dd6:	fb00 f303 	mul.w	r3, r0, r3
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	3332      	adds	r3, #50	; 0x32
 8002de0:	4a07      	ldr	r2, [pc, #28]	; (8002e00 <UART_SetConfig+0x118>)
 8002de2:	fba2 2303 	umull	r2, r3, r2, r3
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	f003 020f 	and.w	r2, r3, #15
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	440a      	add	r2, r1
 8002df2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002df4:	bf00      	nop
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40013800 	.word	0x40013800
 8002e00:	51eb851f 	.word	0x51eb851f

08002e04 <__errno>:
 8002e04:	4b01      	ldr	r3, [pc, #4]	; (8002e0c <__errno+0x8>)
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	2000000c 	.word	0x2000000c

08002e10 <__sflush_r>:
 8002e10:	898a      	ldrh	r2, [r1, #12]
 8002e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e14:	4605      	mov	r5, r0
 8002e16:	0710      	lsls	r0, r2, #28
 8002e18:	460c      	mov	r4, r1
 8002e1a:	d457      	bmi.n	8002ecc <__sflush_r+0xbc>
 8002e1c:	684b      	ldr	r3, [r1, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	dc04      	bgt.n	8002e2c <__sflush_r+0x1c>
 8002e22:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	dc01      	bgt.n	8002e2c <__sflush_r+0x1c>
 8002e28:	2000      	movs	r0, #0
 8002e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e2e:	2e00      	cmp	r6, #0
 8002e30:	d0fa      	beq.n	8002e28 <__sflush_r+0x18>
 8002e32:	2300      	movs	r3, #0
 8002e34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002e38:	682f      	ldr	r7, [r5, #0]
 8002e3a:	602b      	str	r3, [r5, #0]
 8002e3c:	d032      	beq.n	8002ea4 <__sflush_r+0x94>
 8002e3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e40:	89a3      	ldrh	r3, [r4, #12]
 8002e42:	075a      	lsls	r2, r3, #29
 8002e44:	d505      	bpl.n	8002e52 <__sflush_r+0x42>
 8002e46:	6863      	ldr	r3, [r4, #4]
 8002e48:	1ac0      	subs	r0, r0, r3
 8002e4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e4c:	b10b      	cbz	r3, 8002e52 <__sflush_r+0x42>
 8002e4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e50:	1ac0      	subs	r0, r0, r3
 8002e52:	2300      	movs	r3, #0
 8002e54:	4602      	mov	r2, r0
 8002e56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e58:	4628      	mov	r0, r5
 8002e5a:	6a21      	ldr	r1, [r4, #32]
 8002e5c:	47b0      	blx	r6
 8002e5e:	1c43      	adds	r3, r0, #1
 8002e60:	89a3      	ldrh	r3, [r4, #12]
 8002e62:	d106      	bne.n	8002e72 <__sflush_r+0x62>
 8002e64:	6829      	ldr	r1, [r5, #0]
 8002e66:	291d      	cmp	r1, #29
 8002e68:	d82c      	bhi.n	8002ec4 <__sflush_r+0xb4>
 8002e6a:	4a29      	ldr	r2, [pc, #164]	; (8002f10 <__sflush_r+0x100>)
 8002e6c:	40ca      	lsrs	r2, r1
 8002e6e:	07d6      	lsls	r6, r2, #31
 8002e70:	d528      	bpl.n	8002ec4 <__sflush_r+0xb4>
 8002e72:	2200      	movs	r2, #0
 8002e74:	6062      	str	r2, [r4, #4]
 8002e76:	6922      	ldr	r2, [r4, #16]
 8002e78:	04d9      	lsls	r1, r3, #19
 8002e7a:	6022      	str	r2, [r4, #0]
 8002e7c:	d504      	bpl.n	8002e88 <__sflush_r+0x78>
 8002e7e:	1c42      	adds	r2, r0, #1
 8002e80:	d101      	bne.n	8002e86 <__sflush_r+0x76>
 8002e82:	682b      	ldr	r3, [r5, #0]
 8002e84:	b903      	cbnz	r3, 8002e88 <__sflush_r+0x78>
 8002e86:	6560      	str	r0, [r4, #84]	; 0x54
 8002e88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e8a:	602f      	str	r7, [r5, #0]
 8002e8c:	2900      	cmp	r1, #0
 8002e8e:	d0cb      	beq.n	8002e28 <__sflush_r+0x18>
 8002e90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e94:	4299      	cmp	r1, r3
 8002e96:	d002      	beq.n	8002e9e <__sflush_r+0x8e>
 8002e98:	4628      	mov	r0, r5
 8002e9a:	f000 f9d9 	bl	8003250 <_free_r>
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	6360      	str	r0, [r4, #52]	; 0x34
 8002ea2:	e7c2      	b.n	8002e2a <__sflush_r+0x1a>
 8002ea4:	6a21      	ldr	r1, [r4, #32]
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	4628      	mov	r0, r5
 8002eaa:	47b0      	blx	r6
 8002eac:	1c41      	adds	r1, r0, #1
 8002eae:	d1c7      	bne.n	8002e40 <__sflush_r+0x30>
 8002eb0:	682b      	ldr	r3, [r5, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0c4      	beq.n	8002e40 <__sflush_r+0x30>
 8002eb6:	2b1d      	cmp	r3, #29
 8002eb8:	d001      	beq.n	8002ebe <__sflush_r+0xae>
 8002eba:	2b16      	cmp	r3, #22
 8002ebc:	d101      	bne.n	8002ec2 <__sflush_r+0xb2>
 8002ebe:	602f      	str	r7, [r5, #0]
 8002ec0:	e7b2      	b.n	8002e28 <__sflush_r+0x18>
 8002ec2:	89a3      	ldrh	r3, [r4, #12]
 8002ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ec8:	81a3      	strh	r3, [r4, #12]
 8002eca:	e7ae      	b.n	8002e2a <__sflush_r+0x1a>
 8002ecc:	690f      	ldr	r7, [r1, #16]
 8002ece:	2f00      	cmp	r7, #0
 8002ed0:	d0aa      	beq.n	8002e28 <__sflush_r+0x18>
 8002ed2:	0793      	lsls	r3, r2, #30
 8002ed4:	bf18      	it	ne
 8002ed6:	2300      	movne	r3, #0
 8002ed8:	680e      	ldr	r6, [r1, #0]
 8002eda:	bf08      	it	eq
 8002edc:	694b      	ldreq	r3, [r1, #20]
 8002ede:	1bf6      	subs	r6, r6, r7
 8002ee0:	600f      	str	r7, [r1, #0]
 8002ee2:	608b      	str	r3, [r1, #8]
 8002ee4:	2e00      	cmp	r6, #0
 8002ee6:	dd9f      	ble.n	8002e28 <__sflush_r+0x18>
 8002ee8:	4633      	mov	r3, r6
 8002eea:	463a      	mov	r2, r7
 8002eec:	4628      	mov	r0, r5
 8002eee:	6a21      	ldr	r1, [r4, #32]
 8002ef0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002ef4:	47e0      	blx	ip
 8002ef6:	2800      	cmp	r0, #0
 8002ef8:	dc06      	bgt.n	8002f08 <__sflush_r+0xf8>
 8002efa:	89a3      	ldrh	r3, [r4, #12]
 8002efc:	f04f 30ff 	mov.w	r0, #4294967295
 8002f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f04:	81a3      	strh	r3, [r4, #12]
 8002f06:	e790      	b.n	8002e2a <__sflush_r+0x1a>
 8002f08:	4407      	add	r7, r0
 8002f0a:	1a36      	subs	r6, r6, r0
 8002f0c:	e7ea      	b.n	8002ee4 <__sflush_r+0xd4>
 8002f0e:	bf00      	nop
 8002f10:	20400001 	.word	0x20400001

08002f14 <_fflush_r>:
 8002f14:	b538      	push	{r3, r4, r5, lr}
 8002f16:	690b      	ldr	r3, [r1, #16]
 8002f18:	4605      	mov	r5, r0
 8002f1a:	460c      	mov	r4, r1
 8002f1c:	b913      	cbnz	r3, 8002f24 <_fflush_r+0x10>
 8002f1e:	2500      	movs	r5, #0
 8002f20:	4628      	mov	r0, r5
 8002f22:	bd38      	pop	{r3, r4, r5, pc}
 8002f24:	b118      	cbz	r0, 8002f2e <_fflush_r+0x1a>
 8002f26:	6983      	ldr	r3, [r0, #24]
 8002f28:	b90b      	cbnz	r3, 8002f2e <_fflush_r+0x1a>
 8002f2a:	f000 f899 	bl	8003060 <__sinit>
 8002f2e:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <_fflush_r+0x6c>)
 8002f30:	429c      	cmp	r4, r3
 8002f32:	d11b      	bne.n	8002f6c <_fflush_r+0x58>
 8002f34:	686c      	ldr	r4, [r5, #4]
 8002f36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0ef      	beq.n	8002f1e <_fflush_r+0xa>
 8002f3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002f40:	07d0      	lsls	r0, r2, #31
 8002f42:	d404      	bmi.n	8002f4e <_fflush_r+0x3a>
 8002f44:	0599      	lsls	r1, r3, #22
 8002f46:	d402      	bmi.n	8002f4e <_fflush_r+0x3a>
 8002f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f4a:	f000 f968 	bl	800321e <__retarget_lock_acquire_recursive>
 8002f4e:	4628      	mov	r0, r5
 8002f50:	4621      	mov	r1, r4
 8002f52:	f7ff ff5d 	bl	8002e10 <__sflush_r>
 8002f56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f58:	4605      	mov	r5, r0
 8002f5a:	07da      	lsls	r2, r3, #31
 8002f5c:	d4e0      	bmi.n	8002f20 <_fflush_r+0xc>
 8002f5e:	89a3      	ldrh	r3, [r4, #12]
 8002f60:	059b      	lsls	r3, r3, #22
 8002f62:	d4dd      	bmi.n	8002f20 <_fflush_r+0xc>
 8002f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f66:	f000 f95b 	bl	8003220 <__retarget_lock_release_recursive>
 8002f6a:	e7d9      	b.n	8002f20 <_fflush_r+0xc>
 8002f6c:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <_fflush_r+0x70>)
 8002f6e:	429c      	cmp	r4, r3
 8002f70:	d101      	bne.n	8002f76 <_fflush_r+0x62>
 8002f72:	68ac      	ldr	r4, [r5, #8]
 8002f74:	e7df      	b.n	8002f36 <_fflush_r+0x22>
 8002f76:	4b04      	ldr	r3, [pc, #16]	; (8002f88 <_fflush_r+0x74>)
 8002f78:	429c      	cmp	r4, r3
 8002f7a:	bf08      	it	eq
 8002f7c:	68ec      	ldreq	r4, [r5, #12]
 8002f7e:	e7da      	b.n	8002f36 <_fflush_r+0x22>
 8002f80:	080058b8 	.word	0x080058b8
 8002f84:	080058d8 	.word	0x080058d8
 8002f88:	08005898 	.word	0x08005898

08002f8c <fflush>:
 8002f8c:	4601      	mov	r1, r0
 8002f8e:	b920      	cbnz	r0, 8002f9a <fflush+0xe>
 8002f90:	4b04      	ldr	r3, [pc, #16]	; (8002fa4 <fflush+0x18>)
 8002f92:	4905      	ldr	r1, [pc, #20]	; (8002fa8 <fflush+0x1c>)
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	f000 b8fe 	b.w	8003196 <_fwalk_reent>
 8002f9a:	4b04      	ldr	r3, [pc, #16]	; (8002fac <fflush+0x20>)
 8002f9c:	6818      	ldr	r0, [r3, #0]
 8002f9e:	f7ff bfb9 	b.w	8002f14 <_fflush_r>
 8002fa2:	bf00      	nop
 8002fa4:	080058f8 	.word	0x080058f8
 8002fa8:	08002f15 	.word	0x08002f15
 8002fac:	2000000c 	.word	0x2000000c

08002fb0 <std>:
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	b510      	push	{r4, lr}
 8002fb4:	4604      	mov	r4, r0
 8002fb6:	e9c0 3300 	strd	r3, r3, [r0]
 8002fba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002fbe:	6083      	str	r3, [r0, #8]
 8002fc0:	8181      	strh	r1, [r0, #12]
 8002fc2:	6643      	str	r3, [r0, #100]	; 0x64
 8002fc4:	81c2      	strh	r2, [r0, #14]
 8002fc6:	6183      	str	r3, [r0, #24]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	2208      	movs	r2, #8
 8002fcc:	305c      	adds	r0, #92	; 0x5c
 8002fce:	f000 f936 	bl	800323e <memset>
 8002fd2:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <std+0x38>)
 8002fd4:	6224      	str	r4, [r4, #32]
 8002fd6:	6263      	str	r3, [r4, #36]	; 0x24
 8002fd8:	4b04      	ldr	r3, [pc, #16]	; (8002fec <std+0x3c>)
 8002fda:	62a3      	str	r3, [r4, #40]	; 0x28
 8002fdc:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <std+0x40>)
 8002fde:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002fe0:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <std+0x44>)
 8002fe2:	6323      	str	r3, [r4, #48]	; 0x30
 8002fe4:	bd10      	pop	{r4, pc}
 8002fe6:	bf00      	nop
 8002fe8:	08003741 	.word	0x08003741
 8002fec:	08003763 	.word	0x08003763
 8002ff0:	0800379b 	.word	0x0800379b
 8002ff4:	080037bf 	.word	0x080037bf

08002ff8 <_cleanup_r>:
 8002ff8:	4901      	ldr	r1, [pc, #4]	; (8003000 <_cleanup_r+0x8>)
 8002ffa:	f000 b8cc 	b.w	8003196 <_fwalk_reent>
 8002ffe:	bf00      	nop
 8003000:	08002f15 	.word	0x08002f15

08003004 <__sfmoreglue>:
 8003004:	2268      	movs	r2, #104	; 0x68
 8003006:	b570      	push	{r4, r5, r6, lr}
 8003008:	1e4d      	subs	r5, r1, #1
 800300a:	4355      	muls	r5, r2
 800300c:	460e      	mov	r6, r1
 800300e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003012:	f000 f985 	bl	8003320 <_malloc_r>
 8003016:	4604      	mov	r4, r0
 8003018:	b140      	cbz	r0, 800302c <__sfmoreglue+0x28>
 800301a:	2100      	movs	r1, #0
 800301c:	e9c0 1600 	strd	r1, r6, [r0]
 8003020:	300c      	adds	r0, #12
 8003022:	60a0      	str	r0, [r4, #8]
 8003024:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003028:	f000 f909 	bl	800323e <memset>
 800302c:	4620      	mov	r0, r4
 800302e:	bd70      	pop	{r4, r5, r6, pc}

08003030 <__sfp_lock_acquire>:
 8003030:	4801      	ldr	r0, [pc, #4]	; (8003038 <__sfp_lock_acquire+0x8>)
 8003032:	f000 b8f4 	b.w	800321e <__retarget_lock_acquire_recursive>
 8003036:	bf00      	nop
 8003038:	2000011d 	.word	0x2000011d

0800303c <__sfp_lock_release>:
 800303c:	4801      	ldr	r0, [pc, #4]	; (8003044 <__sfp_lock_release+0x8>)
 800303e:	f000 b8ef 	b.w	8003220 <__retarget_lock_release_recursive>
 8003042:	bf00      	nop
 8003044:	2000011d 	.word	0x2000011d

08003048 <__sinit_lock_acquire>:
 8003048:	4801      	ldr	r0, [pc, #4]	; (8003050 <__sinit_lock_acquire+0x8>)
 800304a:	f000 b8e8 	b.w	800321e <__retarget_lock_acquire_recursive>
 800304e:	bf00      	nop
 8003050:	2000011e 	.word	0x2000011e

08003054 <__sinit_lock_release>:
 8003054:	4801      	ldr	r0, [pc, #4]	; (800305c <__sinit_lock_release+0x8>)
 8003056:	f000 b8e3 	b.w	8003220 <__retarget_lock_release_recursive>
 800305a:	bf00      	nop
 800305c:	2000011e 	.word	0x2000011e

08003060 <__sinit>:
 8003060:	b510      	push	{r4, lr}
 8003062:	4604      	mov	r4, r0
 8003064:	f7ff fff0 	bl	8003048 <__sinit_lock_acquire>
 8003068:	69a3      	ldr	r3, [r4, #24]
 800306a:	b11b      	cbz	r3, 8003074 <__sinit+0x14>
 800306c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003070:	f7ff bff0 	b.w	8003054 <__sinit_lock_release>
 8003074:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003078:	6523      	str	r3, [r4, #80]	; 0x50
 800307a:	4b13      	ldr	r3, [pc, #76]	; (80030c8 <__sinit+0x68>)
 800307c:	4a13      	ldr	r2, [pc, #76]	; (80030cc <__sinit+0x6c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	62a2      	str	r2, [r4, #40]	; 0x28
 8003082:	42a3      	cmp	r3, r4
 8003084:	bf08      	it	eq
 8003086:	2301      	moveq	r3, #1
 8003088:	4620      	mov	r0, r4
 800308a:	bf08      	it	eq
 800308c:	61a3      	streq	r3, [r4, #24]
 800308e:	f000 f81f 	bl	80030d0 <__sfp>
 8003092:	6060      	str	r0, [r4, #4]
 8003094:	4620      	mov	r0, r4
 8003096:	f000 f81b 	bl	80030d0 <__sfp>
 800309a:	60a0      	str	r0, [r4, #8]
 800309c:	4620      	mov	r0, r4
 800309e:	f000 f817 	bl	80030d0 <__sfp>
 80030a2:	2200      	movs	r2, #0
 80030a4:	2104      	movs	r1, #4
 80030a6:	60e0      	str	r0, [r4, #12]
 80030a8:	6860      	ldr	r0, [r4, #4]
 80030aa:	f7ff ff81 	bl	8002fb0 <std>
 80030ae:	2201      	movs	r2, #1
 80030b0:	2109      	movs	r1, #9
 80030b2:	68a0      	ldr	r0, [r4, #8]
 80030b4:	f7ff ff7c 	bl	8002fb0 <std>
 80030b8:	2202      	movs	r2, #2
 80030ba:	2112      	movs	r1, #18
 80030bc:	68e0      	ldr	r0, [r4, #12]
 80030be:	f7ff ff77 	bl	8002fb0 <std>
 80030c2:	2301      	movs	r3, #1
 80030c4:	61a3      	str	r3, [r4, #24]
 80030c6:	e7d1      	b.n	800306c <__sinit+0xc>
 80030c8:	080058f8 	.word	0x080058f8
 80030cc:	08002ff9 	.word	0x08002ff9

080030d0 <__sfp>:
 80030d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d2:	4607      	mov	r7, r0
 80030d4:	f7ff ffac 	bl	8003030 <__sfp_lock_acquire>
 80030d8:	4b1e      	ldr	r3, [pc, #120]	; (8003154 <__sfp+0x84>)
 80030da:	681e      	ldr	r6, [r3, #0]
 80030dc:	69b3      	ldr	r3, [r6, #24]
 80030de:	b913      	cbnz	r3, 80030e6 <__sfp+0x16>
 80030e0:	4630      	mov	r0, r6
 80030e2:	f7ff ffbd 	bl	8003060 <__sinit>
 80030e6:	3648      	adds	r6, #72	; 0x48
 80030e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80030ec:	3b01      	subs	r3, #1
 80030ee:	d503      	bpl.n	80030f8 <__sfp+0x28>
 80030f0:	6833      	ldr	r3, [r6, #0]
 80030f2:	b30b      	cbz	r3, 8003138 <__sfp+0x68>
 80030f4:	6836      	ldr	r6, [r6, #0]
 80030f6:	e7f7      	b.n	80030e8 <__sfp+0x18>
 80030f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80030fc:	b9d5      	cbnz	r5, 8003134 <__sfp+0x64>
 80030fe:	4b16      	ldr	r3, [pc, #88]	; (8003158 <__sfp+0x88>)
 8003100:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003104:	60e3      	str	r3, [r4, #12]
 8003106:	6665      	str	r5, [r4, #100]	; 0x64
 8003108:	f000 f888 	bl	800321c <__retarget_lock_init_recursive>
 800310c:	f7ff ff96 	bl	800303c <__sfp_lock_release>
 8003110:	2208      	movs	r2, #8
 8003112:	4629      	mov	r1, r5
 8003114:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003118:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800311c:	6025      	str	r5, [r4, #0]
 800311e:	61a5      	str	r5, [r4, #24]
 8003120:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003124:	f000 f88b 	bl	800323e <memset>
 8003128:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800312c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003130:	4620      	mov	r0, r4
 8003132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003134:	3468      	adds	r4, #104	; 0x68
 8003136:	e7d9      	b.n	80030ec <__sfp+0x1c>
 8003138:	2104      	movs	r1, #4
 800313a:	4638      	mov	r0, r7
 800313c:	f7ff ff62 	bl	8003004 <__sfmoreglue>
 8003140:	4604      	mov	r4, r0
 8003142:	6030      	str	r0, [r6, #0]
 8003144:	2800      	cmp	r0, #0
 8003146:	d1d5      	bne.n	80030f4 <__sfp+0x24>
 8003148:	f7ff ff78 	bl	800303c <__sfp_lock_release>
 800314c:	230c      	movs	r3, #12
 800314e:	603b      	str	r3, [r7, #0]
 8003150:	e7ee      	b.n	8003130 <__sfp+0x60>
 8003152:	bf00      	nop
 8003154:	080058f8 	.word	0x080058f8
 8003158:	ffff0001 	.word	0xffff0001

0800315c <_fwalk>:
 800315c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003160:	460f      	mov	r7, r1
 8003162:	2600      	movs	r6, #0
 8003164:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003168:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800316c:	f1b8 0801 	subs.w	r8, r8, #1
 8003170:	d505      	bpl.n	800317e <_fwalk+0x22>
 8003172:	6824      	ldr	r4, [r4, #0]
 8003174:	2c00      	cmp	r4, #0
 8003176:	d1f7      	bne.n	8003168 <_fwalk+0xc>
 8003178:	4630      	mov	r0, r6
 800317a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800317e:	89ab      	ldrh	r3, [r5, #12]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d906      	bls.n	8003192 <_fwalk+0x36>
 8003184:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003188:	3301      	adds	r3, #1
 800318a:	d002      	beq.n	8003192 <_fwalk+0x36>
 800318c:	4628      	mov	r0, r5
 800318e:	47b8      	blx	r7
 8003190:	4306      	orrs	r6, r0
 8003192:	3568      	adds	r5, #104	; 0x68
 8003194:	e7ea      	b.n	800316c <_fwalk+0x10>

08003196 <_fwalk_reent>:
 8003196:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800319a:	4606      	mov	r6, r0
 800319c:	4688      	mov	r8, r1
 800319e:	2700      	movs	r7, #0
 80031a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80031a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80031a8:	f1b9 0901 	subs.w	r9, r9, #1
 80031ac:	d505      	bpl.n	80031ba <_fwalk_reent+0x24>
 80031ae:	6824      	ldr	r4, [r4, #0]
 80031b0:	2c00      	cmp	r4, #0
 80031b2:	d1f7      	bne.n	80031a4 <_fwalk_reent+0xe>
 80031b4:	4638      	mov	r0, r7
 80031b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031ba:	89ab      	ldrh	r3, [r5, #12]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d907      	bls.n	80031d0 <_fwalk_reent+0x3a>
 80031c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80031c4:	3301      	adds	r3, #1
 80031c6:	d003      	beq.n	80031d0 <_fwalk_reent+0x3a>
 80031c8:	4629      	mov	r1, r5
 80031ca:	4630      	mov	r0, r6
 80031cc:	47c0      	blx	r8
 80031ce:	4307      	orrs	r7, r0
 80031d0:	3568      	adds	r5, #104	; 0x68
 80031d2:	e7e9      	b.n	80031a8 <_fwalk_reent+0x12>

080031d4 <__libc_init_array>:
 80031d4:	b570      	push	{r4, r5, r6, lr}
 80031d6:	2600      	movs	r6, #0
 80031d8:	4d0c      	ldr	r5, [pc, #48]	; (800320c <__libc_init_array+0x38>)
 80031da:	4c0d      	ldr	r4, [pc, #52]	; (8003210 <__libc_init_array+0x3c>)
 80031dc:	1b64      	subs	r4, r4, r5
 80031de:	10a4      	asrs	r4, r4, #2
 80031e0:	42a6      	cmp	r6, r4
 80031e2:	d109      	bne.n	80031f8 <__libc_init_array+0x24>
 80031e4:	f001 ff16 	bl	8005014 <_init>
 80031e8:	2600      	movs	r6, #0
 80031ea:	4d0a      	ldr	r5, [pc, #40]	; (8003214 <__libc_init_array+0x40>)
 80031ec:	4c0a      	ldr	r4, [pc, #40]	; (8003218 <__libc_init_array+0x44>)
 80031ee:	1b64      	subs	r4, r4, r5
 80031f0:	10a4      	asrs	r4, r4, #2
 80031f2:	42a6      	cmp	r6, r4
 80031f4:	d105      	bne.n	8003202 <__libc_init_array+0x2e>
 80031f6:	bd70      	pop	{r4, r5, r6, pc}
 80031f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80031fc:	4798      	blx	r3
 80031fe:	3601      	adds	r6, #1
 8003200:	e7ee      	b.n	80031e0 <__libc_init_array+0xc>
 8003202:	f855 3b04 	ldr.w	r3, [r5], #4
 8003206:	4798      	blx	r3
 8003208:	3601      	adds	r6, #1
 800320a:	e7f2      	b.n	80031f2 <__libc_init_array+0x1e>
 800320c:	08005a4c 	.word	0x08005a4c
 8003210:	08005a4c 	.word	0x08005a4c
 8003214:	08005a4c 	.word	0x08005a4c
 8003218:	08005a50 	.word	0x08005a50

0800321c <__retarget_lock_init_recursive>:
 800321c:	4770      	bx	lr

0800321e <__retarget_lock_acquire_recursive>:
 800321e:	4770      	bx	lr

08003220 <__retarget_lock_release_recursive>:
 8003220:	4770      	bx	lr

08003222 <memcpy>:
 8003222:	440a      	add	r2, r1
 8003224:	4291      	cmp	r1, r2
 8003226:	f100 33ff 	add.w	r3, r0, #4294967295
 800322a:	d100      	bne.n	800322e <memcpy+0xc>
 800322c:	4770      	bx	lr
 800322e:	b510      	push	{r4, lr}
 8003230:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003234:	4291      	cmp	r1, r2
 8003236:	f803 4f01 	strb.w	r4, [r3, #1]!
 800323a:	d1f9      	bne.n	8003230 <memcpy+0xe>
 800323c:	bd10      	pop	{r4, pc}

0800323e <memset>:
 800323e:	4603      	mov	r3, r0
 8003240:	4402      	add	r2, r0
 8003242:	4293      	cmp	r3, r2
 8003244:	d100      	bne.n	8003248 <memset+0xa>
 8003246:	4770      	bx	lr
 8003248:	f803 1b01 	strb.w	r1, [r3], #1
 800324c:	e7f9      	b.n	8003242 <memset+0x4>
	...

08003250 <_free_r>:
 8003250:	b538      	push	{r3, r4, r5, lr}
 8003252:	4605      	mov	r5, r0
 8003254:	2900      	cmp	r1, #0
 8003256:	d040      	beq.n	80032da <_free_r+0x8a>
 8003258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800325c:	1f0c      	subs	r4, r1, #4
 800325e:	2b00      	cmp	r3, #0
 8003260:	bfb8      	it	lt
 8003262:	18e4      	addlt	r4, r4, r3
 8003264:	f000 fc3c 	bl	8003ae0 <__malloc_lock>
 8003268:	4a1c      	ldr	r2, [pc, #112]	; (80032dc <_free_r+0x8c>)
 800326a:	6813      	ldr	r3, [r2, #0]
 800326c:	b933      	cbnz	r3, 800327c <_free_r+0x2c>
 800326e:	6063      	str	r3, [r4, #4]
 8003270:	6014      	str	r4, [r2, #0]
 8003272:	4628      	mov	r0, r5
 8003274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003278:	f000 bc38 	b.w	8003aec <__malloc_unlock>
 800327c:	42a3      	cmp	r3, r4
 800327e:	d908      	bls.n	8003292 <_free_r+0x42>
 8003280:	6820      	ldr	r0, [r4, #0]
 8003282:	1821      	adds	r1, r4, r0
 8003284:	428b      	cmp	r3, r1
 8003286:	bf01      	itttt	eq
 8003288:	6819      	ldreq	r1, [r3, #0]
 800328a:	685b      	ldreq	r3, [r3, #4]
 800328c:	1809      	addeq	r1, r1, r0
 800328e:	6021      	streq	r1, [r4, #0]
 8003290:	e7ed      	b.n	800326e <_free_r+0x1e>
 8003292:	461a      	mov	r2, r3
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	b10b      	cbz	r3, 800329c <_free_r+0x4c>
 8003298:	42a3      	cmp	r3, r4
 800329a:	d9fa      	bls.n	8003292 <_free_r+0x42>
 800329c:	6811      	ldr	r1, [r2, #0]
 800329e:	1850      	adds	r0, r2, r1
 80032a0:	42a0      	cmp	r0, r4
 80032a2:	d10b      	bne.n	80032bc <_free_r+0x6c>
 80032a4:	6820      	ldr	r0, [r4, #0]
 80032a6:	4401      	add	r1, r0
 80032a8:	1850      	adds	r0, r2, r1
 80032aa:	4283      	cmp	r3, r0
 80032ac:	6011      	str	r1, [r2, #0]
 80032ae:	d1e0      	bne.n	8003272 <_free_r+0x22>
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	4401      	add	r1, r0
 80032b6:	6011      	str	r1, [r2, #0]
 80032b8:	6053      	str	r3, [r2, #4]
 80032ba:	e7da      	b.n	8003272 <_free_r+0x22>
 80032bc:	d902      	bls.n	80032c4 <_free_r+0x74>
 80032be:	230c      	movs	r3, #12
 80032c0:	602b      	str	r3, [r5, #0]
 80032c2:	e7d6      	b.n	8003272 <_free_r+0x22>
 80032c4:	6820      	ldr	r0, [r4, #0]
 80032c6:	1821      	adds	r1, r4, r0
 80032c8:	428b      	cmp	r3, r1
 80032ca:	bf01      	itttt	eq
 80032cc:	6819      	ldreq	r1, [r3, #0]
 80032ce:	685b      	ldreq	r3, [r3, #4]
 80032d0:	1809      	addeq	r1, r1, r0
 80032d2:	6021      	streq	r1, [r4, #0]
 80032d4:	6063      	str	r3, [r4, #4]
 80032d6:	6054      	str	r4, [r2, #4]
 80032d8:	e7cb      	b.n	8003272 <_free_r+0x22>
 80032da:	bd38      	pop	{r3, r4, r5, pc}
 80032dc:	20000120 	.word	0x20000120

080032e0 <sbrk_aligned>:
 80032e0:	b570      	push	{r4, r5, r6, lr}
 80032e2:	4e0e      	ldr	r6, [pc, #56]	; (800331c <sbrk_aligned+0x3c>)
 80032e4:	460c      	mov	r4, r1
 80032e6:	6831      	ldr	r1, [r6, #0]
 80032e8:	4605      	mov	r5, r0
 80032ea:	b911      	cbnz	r1, 80032f2 <sbrk_aligned+0x12>
 80032ec:	f000 f91a 	bl	8003524 <_sbrk_r>
 80032f0:	6030      	str	r0, [r6, #0]
 80032f2:	4621      	mov	r1, r4
 80032f4:	4628      	mov	r0, r5
 80032f6:	f000 f915 	bl	8003524 <_sbrk_r>
 80032fa:	1c43      	adds	r3, r0, #1
 80032fc:	d00a      	beq.n	8003314 <sbrk_aligned+0x34>
 80032fe:	1cc4      	adds	r4, r0, #3
 8003300:	f024 0403 	bic.w	r4, r4, #3
 8003304:	42a0      	cmp	r0, r4
 8003306:	d007      	beq.n	8003318 <sbrk_aligned+0x38>
 8003308:	1a21      	subs	r1, r4, r0
 800330a:	4628      	mov	r0, r5
 800330c:	f000 f90a 	bl	8003524 <_sbrk_r>
 8003310:	3001      	adds	r0, #1
 8003312:	d101      	bne.n	8003318 <sbrk_aligned+0x38>
 8003314:	f04f 34ff 	mov.w	r4, #4294967295
 8003318:	4620      	mov	r0, r4
 800331a:	bd70      	pop	{r4, r5, r6, pc}
 800331c:	20000124 	.word	0x20000124

08003320 <_malloc_r>:
 8003320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003324:	1ccd      	adds	r5, r1, #3
 8003326:	f025 0503 	bic.w	r5, r5, #3
 800332a:	3508      	adds	r5, #8
 800332c:	2d0c      	cmp	r5, #12
 800332e:	bf38      	it	cc
 8003330:	250c      	movcc	r5, #12
 8003332:	2d00      	cmp	r5, #0
 8003334:	4607      	mov	r7, r0
 8003336:	db01      	blt.n	800333c <_malloc_r+0x1c>
 8003338:	42a9      	cmp	r1, r5
 800333a:	d905      	bls.n	8003348 <_malloc_r+0x28>
 800333c:	230c      	movs	r3, #12
 800333e:	2600      	movs	r6, #0
 8003340:	603b      	str	r3, [r7, #0]
 8003342:	4630      	mov	r0, r6
 8003344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003348:	4e2e      	ldr	r6, [pc, #184]	; (8003404 <_malloc_r+0xe4>)
 800334a:	f000 fbc9 	bl	8003ae0 <__malloc_lock>
 800334e:	6833      	ldr	r3, [r6, #0]
 8003350:	461c      	mov	r4, r3
 8003352:	bb34      	cbnz	r4, 80033a2 <_malloc_r+0x82>
 8003354:	4629      	mov	r1, r5
 8003356:	4638      	mov	r0, r7
 8003358:	f7ff ffc2 	bl	80032e0 <sbrk_aligned>
 800335c:	1c43      	adds	r3, r0, #1
 800335e:	4604      	mov	r4, r0
 8003360:	d14d      	bne.n	80033fe <_malloc_r+0xde>
 8003362:	6834      	ldr	r4, [r6, #0]
 8003364:	4626      	mov	r6, r4
 8003366:	2e00      	cmp	r6, #0
 8003368:	d140      	bne.n	80033ec <_malloc_r+0xcc>
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	4631      	mov	r1, r6
 800336e:	4638      	mov	r0, r7
 8003370:	eb04 0803 	add.w	r8, r4, r3
 8003374:	f000 f8d6 	bl	8003524 <_sbrk_r>
 8003378:	4580      	cmp	r8, r0
 800337a:	d13a      	bne.n	80033f2 <_malloc_r+0xd2>
 800337c:	6821      	ldr	r1, [r4, #0]
 800337e:	3503      	adds	r5, #3
 8003380:	1a6d      	subs	r5, r5, r1
 8003382:	f025 0503 	bic.w	r5, r5, #3
 8003386:	3508      	adds	r5, #8
 8003388:	2d0c      	cmp	r5, #12
 800338a:	bf38      	it	cc
 800338c:	250c      	movcc	r5, #12
 800338e:	4638      	mov	r0, r7
 8003390:	4629      	mov	r1, r5
 8003392:	f7ff ffa5 	bl	80032e0 <sbrk_aligned>
 8003396:	3001      	adds	r0, #1
 8003398:	d02b      	beq.n	80033f2 <_malloc_r+0xd2>
 800339a:	6823      	ldr	r3, [r4, #0]
 800339c:	442b      	add	r3, r5
 800339e:	6023      	str	r3, [r4, #0]
 80033a0:	e00e      	b.n	80033c0 <_malloc_r+0xa0>
 80033a2:	6822      	ldr	r2, [r4, #0]
 80033a4:	1b52      	subs	r2, r2, r5
 80033a6:	d41e      	bmi.n	80033e6 <_malloc_r+0xc6>
 80033a8:	2a0b      	cmp	r2, #11
 80033aa:	d916      	bls.n	80033da <_malloc_r+0xba>
 80033ac:	1961      	adds	r1, r4, r5
 80033ae:	42a3      	cmp	r3, r4
 80033b0:	6025      	str	r5, [r4, #0]
 80033b2:	bf18      	it	ne
 80033b4:	6059      	strne	r1, [r3, #4]
 80033b6:	6863      	ldr	r3, [r4, #4]
 80033b8:	bf08      	it	eq
 80033ba:	6031      	streq	r1, [r6, #0]
 80033bc:	5162      	str	r2, [r4, r5]
 80033be:	604b      	str	r3, [r1, #4]
 80033c0:	4638      	mov	r0, r7
 80033c2:	f104 060b 	add.w	r6, r4, #11
 80033c6:	f000 fb91 	bl	8003aec <__malloc_unlock>
 80033ca:	f026 0607 	bic.w	r6, r6, #7
 80033ce:	1d23      	adds	r3, r4, #4
 80033d0:	1af2      	subs	r2, r6, r3
 80033d2:	d0b6      	beq.n	8003342 <_malloc_r+0x22>
 80033d4:	1b9b      	subs	r3, r3, r6
 80033d6:	50a3      	str	r3, [r4, r2]
 80033d8:	e7b3      	b.n	8003342 <_malloc_r+0x22>
 80033da:	6862      	ldr	r2, [r4, #4]
 80033dc:	42a3      	cmp	r3, r4
 80033de:	bf0c      	ite	eq
 80033e0:	6032      	streq	r2, [r6, #0]
 80033e2:	605a      	strne	r2, [r3, #4]
 80033e4:	e7ec      	b.n	80033c0 <_malloc_r+0xa0>
 80033e6:	4623      	mov	r3, r4
 80033e8:	6864      	ldr	r4, [r4, #4]
 80033ea:	e7b2      	b.n	8003352 <_malloc_r+0x32>
 80033ec:	4634      	mov	r4, r6
 80033ee:	6876      	ldr	r6, [r6, #4]
 80033f0:	e7b9      	b.n	8003366 <_malloc_r+0x46>
 80033f2:	230c      	movs	r3, #12
 80033f4:	4638      	mov	r0, r7
 80033f6:	603b      	str	r3, [r7, #0]
 80033f8:	f000 fb78 	bl	8003aec <__malloc_unlock>
 80033fc:	e7a1      	b.n	8003342 <_malloc_r+0x22>
 80033fe:	6025      	str	r5, [r4, #0]
 8003400:	e7de      	b.n	80033c0 <_malloc_r+0xa0>
 8003402:	bf00      	nop
 8003404:	20000120 	.word	0x20000120

08003408 <iprintf>:
 8003408:	b40f      	push	{r0, r1, r2, r3}
 800340a:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <iprintf+0x2c>)
 800340c:	b513      	push	{r0, r1, r4, lr}
 800340e:	681c      	ldr	r4, [r3, #0]
 8003410:	b124      	cbz	r4, 800341c <iprintf+0x14>
 8003412:	69a3      	ldr	r3, [r4, #24]
 8003414:	b913      	cbnz	r3, 800341c <iprintf+0x14>
 8003416:	4620      	mov	r0, r4
 8003418:	f7ff fe22 	bl	8003060 <__sinit>
 800341c:	ab05      	add	r3, sp, #20
 800341e:	4620      	mov	r0, r4
 8003420:	9a04      	ldr	r2, [sp, #16]
 8003422:	68a1      	ldr	r1, [r4, #8]
 8003424:	9301      	str	r3, [sp, #4]
 8003426:	f000 fceb 	bl	8003e00 <_vfiprintf_r>
 800342a:	b002      	add	sp, #8
 800342c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003430:	b004      	add	sp, #16
 8003432:	4770      	bx	lr
 8003434:	2000000c 	.word	0x2000000c

08003438 <_puts_r>:
 8003438:	b570      	push	{r4, r5, r6, lr}
 800343a:	460e      	mov	r6, r1
 800343c:	4605      	mov	r5, r0
 800343e:	b118      	cbz	r0, 8003448 <_puts_r+0x10>
 8003440:	6983      	ldr	r3, [r0, #24]
 8003442:	b90b      	cbnz	r3, 8003448 <_puts_r+0x10>
 8003444:	f7ff fe0c 	bl	8003060 <__sinit>
 8003448:	69ab      	ldr	r3, [r5, #24]
 800344a:	68ac      	ldr	r4, [r5, #8]
 800344c:	b913      	cbnz	r3, 8003454 <_puts_r+0x1c>
 800344e:	4628      	mov	r0, r5
 8003450:	f7ff fe06 	bl	8003060 <__sinit>
 8003454:	4b2c      	ldr	r3, [pc, #176]	; (8003508 <_puts_r+0xd0>)
 8003456:	429c      	cmp	r4, r3
 8003458:	d120      	bne.n	800349c <_puts_r+0x64>
 800345a:	686c      	ldr	r4, [r5, #4]
 800345c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800345e:	07db      	lsls	r3, r3, #31
 8003460:	d405      	bmi.n	800346e <_puts_r+0x36>
 8003462:	89a3      	ldrh	r3, [r4, #12]
 8003464:	0598      	lsls	r0, r3, #22
 8003466:	d402      	bmi.n	800346e <_puts_r+0x36>
 8003468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800346a:	f7ff fed8 	bl	800321e <__retarget_lock_acquire_recursive>
 800346e:	89a3      	ldrh	r3, [r4, #12]
 8003470:	0719      	lsls	r1, r3, #28
 8003472:	d51d      	bpl.n	80034b0 <_puts_r+0x78>
 8003474:	6923      	ldr	r3, [r4, #16]
 8003476:	b1db      	cbz	r3, 80034b0 <_puts_r+0x78>
 8003478:	3e01      	subs	r6, #1
 800347a:	68a3      	ldr	r3, [r4, #8]
 800347c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003480:	3b01      	subs	r3, #1
 8003482:	60a3      	str	r3, [r4, #8]
 8003484:	bb39      	cbnz	r1, 80034d6 <_puts_r+0x9e>
 8003486:	2b00      	cmp	r3, #0
 8003488:	da38      	bge.n	80034fc <_puts_r+0xc4>
 800348a:	4622      	mov	r2, r4
 800348c:	210a      	movs	r1, #10
 800348e:	4628      	mov	r0, r5
 8003490:	f000 f9c4 	bl	800381c <__swbuf_r>
 8003494:	3001      	adds	r0, #1
 8003496:	d011      	beq.n	80034bc <_puts_r+0x84>
 8003498:	250a      	movs	r5, #10
 800349a:	e011      	b.n	80034c0 <_puts_r+0x88>
 800349c:	4b1b      	ldr	r3, [pc, #108]	; (800350c <_puts_r+0xd4>)
 800349e:	429c      	cmp	r4, r3
 80034a0:	d101      	bne.n	80034a6 <_puts_r+0x6e>
 80034a2:	68ac      	ldr	r4, [r5, #8]
 80034a4:	e7da      	b.n	800345c <_puts_r+0x24>
 80034a6:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <_puts_r+0xd8>)
 80034a8:	429c      	cmp	r4, r3
 80034aa:	bf08      	it	eq
 80034ac:	68ec      	ldreq	r4, [r5, #12]
 80034ae:	e7d5      	b.n	800345c <_puts_r+0x24>
 80034b0:	4621      	mov	r1, r4
 80034b2:	4628      	mov	r0, r5
 80034b4:	f000 fa16 	bl	80038e4 <__swsetup_r>
 80034b8:	2800      	cmp	r0, #0
 80034ba:	d0dd      	beq.n	8003478 <_puts_r+0x40>
 80034bc:	f04f 35ff 	mov.w	r5, #4294967295
 80034c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034c2:	07da      	lsls	r2, r3, #31
 80034c4:	d405      	bmi.n	80034d2 <_puts_r+0x9a>
 80034c6:	89a3      	ldrh	r3, [r4, #12]
 80034c8:	059b      	lsls	r3, r3, #22
 80034ca:	d402      	bmi.n	80034d2 <_puts_r+0x9a>
 80034cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034ce:	f7ff fea7 	bl	8003220 <__retarget_lock_release_recursive>
 80034d2:	4628      	mov	r0, r5
 80034d4:	bd70      	pop	{r4, r5, r6, pc}
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	da04      	bge.n	80034e4 <_puts_r+0xac>
 80034da:	69a2      	ldr	r2, [r4, #24]
 80034dc:	429a      	cmp	r2, r3
 80034de:	dc06      	bgt.n	80034ee <_puts_r+0xb6>
 80034e0:	290a      	cmp	r1, #10
 80034e2:	d004      	beq.n	80034ee <_puts_r+0xb6>
 80034e4:	6823      	ldr	r3, [r4, #0]
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	6022      	str	r2, [r4, #0]
 80034ea:	7019      	strb	r1, [r3, #0]
 80034ec:	e7c5      	b.n	800347a <_puts_r+0x42>
 80034ee:	4622      	mov	r2, r4
 80034f0:	4628      	mov	r0, r5
 80034f2:	f000 f993 	bl	800381c <__swbuf_r>
 80034f6:	3001      	adds	r0, #1
 80034f8:	d1bf      	bne.n	800347a <_puts_r+0x42>
 80034fa:	e7df      	b.n	80034bc <_puts_r+0x84>
 80034fc:	250a      	movs	r5, #10
 80034fe:	6823      	ldr	r3, [r4, #0]
 8003500:	1c5a      	adds	r2, r3, #1
 8003502:	6022      	str	r2, [r4, #0]
 8003504:	701d      	strb	r5, [r3, #0]
 8003506:	e7db      	b.n	80034c0 <_puts_r+0x88>
 8003508:	080058b8 	.word	0x080058b8
 800350c:	080058d8 	.word	0x080058d8
 8003510:	08005898 	.word	0x08005898

08003514 <puts>:
 8003514:	4b02      	ldr	r3, [pc, #8]	; (8003520 <puts+0xc>)
 8003516:	4601      	mov	r1, r0
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	f7ff bf8d 	b.w	8003438 <_puts_r>
 800351e:	bf00      	nop
 8003520:	2000000c 	.word	0x2000000c

08003524 <_sbrk_r>:
 8003524:	b538      	push	{r3, r4, r5, lr}
 8003526:	2300      	movs	r3, #0
 8003528:	4d05      	ldr	r5, [pc, #20]	; (8003540 <_sbrk_r+0x1c>)
 800352a:	4604      	mov	r4, r0
 800352c:	4608      	mov	r0, r1
 800352e:	602b      	str	r3, [r5, #0]
 8003530:	f7fd fe78 	bl	8001224 <_sbrk>
 8003534:	1c43      	adds	r3, r0, #1
 8003536:	d102      	bne.n	800353e <_sbrk_r+0x1a>
 8003538:	682b      	ldr	r3, [r5, #0]
 800353a:	b103      	cbz	r3, 800353e <_sbrk_r+0x1a>
 800353c:	6023      	str	r3, [r4, #0]
 800353e:	bd38      	pop	{r3, r4, r5, pc}
 8003540:	20000128 	.word	0x20000128

08003544 <iscanf>:
 8003544:	b40f      	push	{r0, r1, r2, r3}
 8003546:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <iscanf+0x2c>)
 8003548:	b513      	push	{r0, r1, r4, lr}
 800354a:	681c      	ldr	r4, [r3, #0]
 800354c:	b124      	cbz	r4, 8003558 <iscanf+0x14>
 800354e:	69a3      	ldr	r3, [r4, #24]
 8003550:	b913      	cbnz	r3, 8003558 <iscanf+0x14>
 8003552:	4620      	mov	r0, r4
 8003554:	f7ff fd84 	bl	8003060 <__sinit>
 8003558:	ab05      	add	r3, sp, #20
 800355a:	4620      	mov	r0, r4
 800355c:	9a04      	ldr	r2, [sp, #16]
 800355e:	6861      	ldr	r1, [r4, #4]
 8003560:	9301      	str	r3, [sp, #4]
 8003562:	f001 f8b9 	bl	80046d8 <_vfiscanf_r>
 8003566:	b002      	add	sp, #8
 8003568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800356c:	b004      	add	sp, #16
 800356e:	4770      	bx	lr
 8003570:	2000000c 	.word	0x2000000c

08003574 <setvbuf>:
 8003574:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003578:	461d      	mov	r5, r3
 800357a:	4b5d      	ldr	r3, [pc, #372]	; (80036f0 <setvbuf+0x17c>)
 800357c:	4604      	mov	r4, r0
 800357e:	681f      	ldr	r7, [r3, #0]
 8003580:	460e      	mov	r6, r1
 8003582:	4690      	mov	r8, r2
 8003584:	b127      	cbz	r7, 8003590 <setvbuf+0x1c>
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	b913      	cbnz	r3, 8003590 <setvbuf+0x1c>
 800358a:	4638      	mov	r0, r7
 800358c:	f7ff fd68 	bl	8003060 <__sinit>
 8003590:	4b58      	ldr	r3, [pc, #352]	; (80036f4 <setvbuf+0x180>)
 8003592:	429c      	cmp	r4, r3
 8003594:	d167      	bne.n	8003666 <setvbuf+0xf2>
 8003596:	687c      	ldr	r4, [r7, #4]
 8003598:	f1b8 0f02 	cmp.w	r8, #2
 800359c:	d006      	beq.n	80035ac <setvbuf+0x38>
 800359e:	f1b8 0f01 	cmp.w	r8, #1
 80035a2:	f200 809f 	bhi.w	80036e4 <setvbuf+0x170>
 80035a6:	2d00      	cmp	r5, #0
 80035a8:	f2c0 809c 	blt.w	80036e4 <setvbuf+0x170>
 80035ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035ae:	07db      	lsls	r3, r3, #31
 80035b0:	d405      	bmi.n	80035be <setvbuf+0x4a>
 80035b2:	89a3      	ldrh	r3, [r4, #12]
 80035b4:	0598      	lsls	r0, r3, #22
 80035b6:	d402      	bmi.n	80035be <setvbuf+0x4a>
 80035b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035ba:	f7ff fe30 	bl	800321e <__retarget_lock_acquire_recursive>
 80035be:	4621      	mov	r1, r4
 80035c0:	4638      	mov	r0, r7
 80035c2:	f7ff fca7 	bl	8002f14 <_fflush_r>
 80035c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035c8:	b141      	cbz	r1, 80035dc <setvbuf+0x68>
 80035ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035ce:	4299      	cmp	r1, r3
 80035d0:	d002      	beq.n	80035d8 <setvbuf+0x64>
 80035d2:	4638      	mov	r0, r7
 80035d4:	f7ff fe3c 	bl	8003250 <_free_r>
 80035d8:	2300      	movs	r3, #0
 80035da:	6363      	str	r3, [r4, #52]	; 0x34
 80035dc:	2300      	movs	r3, #0
 80035de:	61a3      	str	r3, [r4, #24]
 80035e0:	6063      	str	r3, [r4, #4]
 80035e2:	89a3      	ldrh	r3, [r4, #12]
 80035e4:	0619      	lsls	r1, r3, #24
 80035e6:	d503      	bpl.n	80035f0 <setvbuf+0x7c>
 80035e8:	4638      	mov	r0, r7
 80035ea:	6921      	ldr	r1, [r4, #16]
 80035ec:	f7ff fe30 	bl	8003250 <_free_r>
 80035f0:	89a3      	ldrh	r3, [r4, #12]
 80035f2:	f1b8 0f02 	cmp.w	r8, #2
 80035f6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80035fa:	f023 0303 	bic.w	r3, r3, #3
 80035fe:	81a3      	strh	r3, [r4, #12]
 8003600:	d06c      	beq.n	80036dc <setvbuf+0x168>
 8003602:	ab01      	add	r3, sp, #4
 8003604:	466a      	mov	r2, sp
 8003606:	4621      	mov	r1, r4
 8003608:	4638      	mov	r0, r7
 800360a:	f000 f9fb 	bl	8003a04 <__swhatbuf_r>
 800360e:	89a3      	ldrh	r3, [r4, #12]
 8003610:	4318      	orrs	r0, r3
 8003612:	81a0      	strh	r0, [r4, #12]
 8003614:	2d00      	cmp	r5, #0
 8003616:	d130      	bne.n	800367a <setvbuf+0x106>
 8003618:	9d00      	ldr	r5, [sp, #0]
 800361a:	4628      	mov	r0, r5
 800361c:	f000 fa58 	bl	8003ad0 <malloc>
 8003620:	4606      	mov	r6, r0
 8003622:	2800      	cmp	r0, #0
 8003624:	d155      	bne.n	80036d2 <setvbuf+0x15e>
 8003626:	f8dd 9000 	ldr.w	r9, [sp]
 800362a:	45a9      	cmp	r9, r5
 800362c:	d14a      	bne.n	80036c4 <setvbuf+0x150>
 800362e:	f04f 35ff 	mov.w	r5, #4294967295
 8003632:	2200      	movs	r2, #0
 8003634:	60a2      	str	r2, [r4, #8]
 8003636:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800363a:	6022      	str	r2, [r4, #0]
 800363c:	6122      	str	r2, [r4, #16]
 800363e:	2201      	movs	r2, #1
 8003640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003644:	6162      	str	r2, [r4, #20]
 8003646:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003648:	f043 0302 	orr.w	r3, r3, #2
 800364c:	07d2      	lsls	r2, r2, #31
 800364e:	81a3      	strh	r3, [r4, #12]
 8003650:	d405      	bmi.n	800365e <setvbuf+0xea>
 8003652:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003656:	d102      	bne.n	800365e <setvbuf+0xea>
 8003658:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800365a:	f7ff fde1 	bl	8003220 <__retarget_lock_release_recursive>
 800365e:	4628      	mov	r0, r5
 8003660:	b003      	add	sp, #12
 8003662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003666:	4b24      	ldr	r3, [pc, #144]	; (80036f8 <setvbuf+0x184>)
 8003668:	429c      	cmp	r4, r3
 800366a:	d101      	bne.n	8003670 <setvbuf+0xfc>
 800366c:	68bc      	ldr	r4, [r7, #8]
 800366e:	e793      	b.n	8003598 <setvbuf+0x24>
 8003670:	4b22      	ldr	r3, [pc, #136]	; (80036fc <setvbuf+0x188>)
 8003672:	429c      	cmp	r4, r3
 8003674:	bf08      	it	eq
 8003676:	68fc      	ldreq	r4, [r7, #12]
 8003678:	e78e      	b.n	8003598 <setvbuf+0x24>
 800367a:	2e00      	cmp	r6, #0
 800367c:	d0cd      	beq.n	800361a <setvbuf+0xa6>
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	b913      	cbnz	r3, 8003688 <setvbuf+0x114>
 8003682:	4638      	mov	r0, r7
 8003684:	f7ff fcec 	bl	8003060 <__sinit>
 8003688:	f1b8 0f01 	cmp.w	r8, #1
 800368c:	bf08      	it	eq
 800368e:	89a3      	ldrheq	r3, [r4, #12]
 8003690:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003694:	bf04      	itt	eq
 8003696:	f043 0301 	orreq.w	r3, r3, #1
 800369a:	81a3      	strheq	r3, [r4, #12]
 800369c:	89a2      	ldrh	r2, [r4, #12]
 800369e:	6026      	str	r6, [r4, #0]
 80036a0:	f012 0308 	ands.w	r3, r2, #8
 80036a4:	d01c      	beq.n	80036e0 <setvbuf+0x16c>
 80036a6:	07d3      	lsls	r3, r2, #31
 80036a8:	bf41      	itttt	mi
 80036aa:	2300      	movmi	r3, #0
 80036ac:	426d      	negmi	r5, r5
 80036ae:	60a3      	strmi	r3, [r4, #8]
 80036b0:	61a5      	strmi	r5, [r4, #24]
 80036b2:	bf58      	it	pl
 80036b4:	60a5      	strpl	r5, [r4, #8]
 80036b6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80036b8:	f015 0501 	ands.w	r5, r5, #1
 80036bc:	d115      	bne.n	80036ea <setvbuf+0x176>
 80036be:	f412 7f00 	tst.w	r2, #512	; 0x200
 80036c2:	e7c8      	b.n	8003656 <setvbuf+0xe2>
 80036c4:	4648      	mov	r0, r9
 80036c6:	f000 fa03 	bl	8003ad0 <malloc>
 80036ca:	4606      	mov	r6, r0
 80036cc:	2800      	cmp	r0, #0
 80036ce:	d0ae      	beq.n	800362e <setvbuf+0xba>
 80036d0:	464d      	mov	r5, r9
 80036d2:	89a3      	ldrh	r3, [r4, #12]
 80036d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036d8:	81a3      	strh	r3, [r4, #12]
 80036da:	e7d0      	b.n	800367e <setvbuf+0x10a>
 80036dc:	2500      	movs	r5, #0
 80036de:	e7a8      	b.n	8003632 <setvbuf+0xbe>
 80036e0:	60a3      	str	r3, [r4, #8]
 80036e2:	e7e8      	b.n	80036b6 <setvbuf+0x142>
 80036e4:	f04f 35ff 	mov.w	r5, #4294967295
 80036e8:	e7b9      	b.n	800365e <setvbuf+0xea>
 80036ea:	2500      	movs	r5, #0
 80036ec:	e7b7      	b.n	800365e <setvbuf+0xea>
 80036ee:	bf00      	nop
 80036f0:	2000000c 	.word	0x2000000c
 80036f4:	080058b8 	.word	0x080058b8
 80036f8:	080058d8 	.word	0x080058d8
 80036fc:	08005898 	.word	0x08005898

08003700 <siprintf>:
 8003700:	b40e      	push	{r1, r2, r3}
 8003702:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003706:	b500      	push	{lr}
 8003708:	b09c      	sub	sp, #112	; 0x70
 800370a:	ab1d      	add	r3, sp, #116	; 0x74
 800370c:	9002      	str	r0, [sp, #8]
 800370e:	9006      	str	r0, [sp, #24]
 8003710:	9107      	str	r1, [sp, #28]
 8003712:	9104      	str	r1, [sp, #16]
 8003714:	4808      	ldr	r0, [pc, #32]	; (8003738 <siprintf+0x38>)
 8003716:	4909      	ldr	r1, [pc, #36]	; (800373c <siprintf+0x3c>)
 8003718:	f853 2b04 	ldr.w	r2, [r3], #4
 800371c:	9105      	str	r1, [sp, #20]
 800371e:	6800      	ldr	r0, [r0, #0]
 8003720:	a902      	add	r1, sp, #8
 8003722:	9301      	str	r3, [sp, #4]
 8003724:	f000 fa44 	bl	8003bb0 <_svfiprintf_r>
 8003728:	2200      	movs	r2, #0
 800372a:	9b02      	ldr	r3, [sp, #8]
 800372c:	701a      	strb	r2, [r3, #0]
 800372e:	b01c      	add	sp, #112	; 0x70
 8003730:	f85d eb04 	ldr.w	lr, [sp], #4
 8003734:	b003      	add	sp, #12
 8003736:	4770      	bx	lr
 8003738:	2000000c 	.word	0x2000000c
 800373c:	ffff0208 	.word	0xffff0208

08003740 <__sread>:
 8003740:	b510      	push	{r4, lr}
 8003742:	460c      	mov	r4, r1
 8003744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003748:	f001 f940 	bl	80049cc <_read_r>
 800374c:	2800      	cmp	r0, #0
 800374e:	bfab      	itete	ge
 8003750:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003752:	89a3      	ldrhlt	r3, [r4, #12]
 8003754:	181b      	addge	r3, r3, r0
 8003756:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800375a:	bfac      	ite	ge
 800375c:	6563      	strge	r3, [r4, #84]	; 0x54
 800375e:	81a3      	strhlt	r3, [r4, #12]
 8003760:	bd10      	pop	{r4, pc}

08003762 <__swrite>:
 8003762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003766:	461f      	mov	r7, r3
 8003768:	898b      	ldrh	r3, [r1, #12]
 800376a:	4605      	mov	r5, r0
 800376c:	05db      	lsls	r3, r3, #23
 800376e:	460c      	mov	r4, r1
 8003770:	4616      	mov	r6, r2
 8003772:	d505      	bpl.n	8003780 <__swrite+0x1e>
 8003774:	2302      	movs	r3, #2
 8003776:	2200      	movs	r2, #0
 8003778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800377c:	f000 f930 	bl	80039e0 <_lseek_r>
 8003780:	89a3      	ldrh	r3, [r4, #12]
 8003782:	4632      	mov	r2, r6
 8003784:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003788:	81a3      	strh	r3, [r4, #12]
 800378a:	4628      	mov	r0, r5
 800378c:	463b      	mov	r3, r7
 800378e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003796:	f000 b893 	b.w	80038c0 <_write_r>

0800379a <__sseek>:
 800379a:	b510      	push	{r4, lr}
 800379c:	460c      	mov	r4, r1
 800379e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037a2:	f000 f91d 	bl	80039e0 <_lseek_r>
 80037a6:	1c43      	adds	r3, r0, #1
 80037a8:	89a3      	ldrh	r3, [r4, #12]
 80037aa:	bf15      	itete	ne
 80037ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80037ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80037b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80037b6:	81a3      	strheq	r3, [r4, #12]
 80037b8:	bf18      	it	ne
 80037ba:	81a3      	strhne	r3, [r4, #12]
 80037bc:	bd10      	pop	{r4, pc}

080037be <__sclose>:
 80037be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037c2:	f000 b8fd 	b.w	80039c0 <_close_r>

080037c6 <strncmp>:
 80037c6:	4603      	mov	r3, r0
 80037c8:	b510      	push	{r4, lr}
 80037ca:	b172      	cbz	r2, 80037ea <strncmp+0x24>
 80037cc:	3901      	subs	r1, #1
 80037ce:	1884      	adds	r4, r0, r2
 80037d0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80037d4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80037d8:	4290      	cmp	r0, r2
 80037da:	d101      	bne.n	80037e0 <strncmp+0x1a>
 80037dc:	42a3      	cmp	r3, r4
 80037de:	d101      	bne.n	80037e4 <strncmp+0x1e>
 80037e0:	1a80      	subs	r0, r0, r2
 80037e2:	bd10      	pop	{r4, pc}
 80037e4:	2800      	cmp	r0, #0
 80037e6:	d1f3      	bne.n	80037d0 <strncmp+0xa>
 80037e8:	e7fa      	b.n	80037e0 <strncmp+0x1a>
 80037ea:	4610      	mov	r0, r2
 80037ec:	e7f9      	b.n	80037e2 <strncmp+0x1c>

080037ee <strstr>:
 80037ee:	780a      	ldrb	r2, [r1, #0]
 80037f0:	b570      	push	{r4, r5, r6, lr}
 80037f2:	b96a      	cbnz	r2, 8003810 <strstr+0x22>
 80037f4:	bd70      	pop	{r4, r5, r6, pc}
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d109      	bne.n	800380e <strstr+0x20>
 80037fa:	460c      	mov	r4, r1
 80037fc:	4605      	mov	r5, r0
 80037fe:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0f6      	beq.n	80037f4 <strstr+0x6>
 8003806:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800380a:	429e      	cmp	r6, r3
 800380c:	d0f7      	beq.n	80037fe <strstr+0x10>
 800380e:	3001      	adds	r0, #1
 8003810:	7803      	ldrb	r3, [r0, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1ef      	bne.n	80037f6 <strstr+0x8>
 8003816:	4618      	mov	r0, r3
 8003818:	e7ec      	b.n	80037f4 <strstr+0x6>
	...

0800381c <__swbuf_r>:
 800381c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381e:	460e      	mov	r6, r1
 8003820:	4614      	mov	r4, r2
 8003822:	4605      	mov	r5, r0
 8003824:	b118      	cbz	r0, 800382e <__swbuf_r+0x12>
 8003826:	6983      	ldr	r3, [r0, #24]
 8003828:	b90b      	cbnz	r3, 800382e <__swbuf_r+0x12>
 800382a:	f7ff fc19 	bl	8003060 <__sinit>
 800382e:	4b21      	ldr	r3, [pc, #132]	; (80038b4 <__swbuf_r+0x98>)
 8003830:	429c      	cmp	r4, r3
 8003832:	d12b      	bne.n	800388c <__swbuf_r+0x70>
 8003834:	686c      	ldr	r4, [r5, #4]
 8003836:	69a3      	ldr	r3, [r4, #24]
 8003838:	60a3      	str	r3, [r4, #8]
 800383a:	89a3      	ldrh	r3, [r4, #12]
 800383c:	071a      	lsls	r2, r3, #28
 800383e:	d52f      	bpl.n	80038a0 <__swbuf_r+0x84>
 8003840:	6923      	ldr	r3, [r4, #16]
 8003842:	b36b      	cbz	r3, 80038a0 <__swbuf_r+0x84>
 8003844:	6923      	ldr	r3, [r4, #16]
 8003846:	6820      	ldr	r0, [r4, #0]
 8003848:	b2f6      	uxtb	r6, r6
 800384a:	1ac0      	subs	r0, r0, r3
 800384c:	6963      	ldr	r3, [r4, #20]
 800384e:	4637      	mov	r7, r6
 8003850:	4283      	cmp	r3, r0
 8003852:	dc04      	bgt.n	800385e <__swbuf_r+0x42>
 8003854:	4621      	mov	r1, r4
 8003856:	4628      	mov	r0, r5
 8003858:	f7ff fb5c 	bl	8002f14 <_fflush_r>
 800385c:	bb30      	cbnz	r0, 80038ac <__swbuf_r+0x90>
 800385e:	68a3      	ldr	r3, [r4, #8]
 8003860:	3001      	adds	r0, #1
 8003862:	3b01      	subs	r3, #1
 8003864:	60a3      	str	r3, [r4, #8]
 8003866:	6823      	ldr	r3, [r4, #0]
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	6022      	str	r2, [r4, #0]
 800386c:	701e      	strb	r6, [r3, #0]
 800386e:	6963      	ldr	r3, [r4, #20]
 8003870:	4283      	cmp	r3, r0
 8003872:	d004      	beq.n	800387e <__swbuf_r+0x62>
 8003874:	89a3      	ldrh	r3, [r4, #12]
 8003876:	07db      	lsls	r3, r3, #31
 8003878:	d506      	bpl.n	8003888 <__swbuf_r+0x6c>
 800387a:	2e0a      	cmp	r6, #10
 800387c:	d104      	bne.n	8003888 <__swbuf_r+0x6c>
 800387e:	4621      	mov	r1, r4
 8003880:	4628      	mov	r0, r5
 8003882:	f7ff fb47 	bl	8002f14 <_fflush_r>
 8003886:	b988      	cbnz	r0, 80038ac <__swbuf_r+0x90>
 8003888:	4638      	mov	r0, r7
 800388a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800388c:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <__swbuf_r+0x9c>)
 800388e:	429c      	cmp	r4, r3
 8003890:	d101      	bne.n	8003896 <__swbuf_r+0x7a>
 8003892:	68ac      	ldr	r4, [r5, #8]
 8003894:	e7cf      	b.n	8003836 <__swbuf_r+0x1a>
 8003896:	4b09      	ldr	r3, [pc, #36]	; (80038bc <__swbuf_r+0xa0>)
 8003898:	429c      	cmp	r4, r3
 800389a:	bf08      	it	eq
 800389c:	68ec      	ldreq	r4, [r5, #12]
 800389e:	e7ca      	b.n	8003836 <__swbuf_r+0x1a>
 80038a0:	4621      	mov	r1, r4
 80038a2:	4628      	mov	r0, r5
 80038a4:	f000 f81e 	bl	80038e4 <__swsetup_r>
 80038a8:	2800      	cmp	r0, #0
 80038aa:	d0cb      	beq.n	8003844 <__swbuf_r+0x28>
 80038ac:	f04f 37ff 	mov.w	r7, #4294967295
 80038b0:	e7ea      	b.n	8003888 <__swbuf_r+0x6c>
 80038b2:	bf00      	nop
 80038b4:	080058b8 	.word	0x080058b8
 80038b8:	080058d8 	.word	0x080058d8
 80038bc:	08005898 	.word	0x08005898

080038c0 <_write_r>:
 80038c0:	b538      	push	{r3, r4, r5, lr}
 80038c2:	4604      	mov	r4, r0
 80038c4:	4608      	mov	r0, r1
 80038c6:	4611      	mov	r1, r2
 80038c8:	2200      	movs	r2, #0
 80038ca:	4d05      	ldr	r5, [pc, #20]	; (80038e0 <_write_r+0x20>)
 80038cc:	602a      	str	r2, [r5, #0]
 80038ce:	461a      	mov	r2, r3
 80038d0:	f7fd fc5b 	bl	800118a <_write>
 80038d4:	1c43      	adds	r3, r0, #1
 80038d6:	d102      	bne.n	80038de <_write_r+0x1e>
 80038d8:	682b      	ldr	r3, [r5, #0]
 80038da:	b103      	cbz	r3, 80038de <_write_r+0x1e>
 80038dc:	6023      	str	r3, [r4, #0]
 80038de:	bd38      	pop	{r3, r4, r5, pc}
 80038e0:	20000128 	.word	0x20000128

080038e4 <__swsetup_r>:
 80038e4:	4b32      	ldr	r3, [pc, #200]	; (80039b0 <__swsetup_r+0xcc>)
 80038e6:	b570      	push	{r4, r5, r6, lr}
 80038e8:	681d      	ldr	r5, [r3, #0]
 80038ea:	4606      	mov	r6, r0
 80038ec:	460c      	mov	r4, r1
 80038ee:	b125      	cbz	r5, 80038fa <__swsetup_r+0x16>
 80038f0:	69ab      	ldr	r3, [r5, #24]
 80038f2:	b913      	cbnz	r3, 80038fa <__swsetup_r+0x16>
 80038f4:	4628      	mov	r0, r5
 80038f6:	f7ff fbb3 	bl	8003060 <__sinit>
 80038fa:	4b2e      	ldr	r3, [pc, #184]	; (80039b4 <__swsetup_r+0xd0>)
 80038fc:	429c      	cmp	r4, r3
 80038fe:	d10f      	bne.n	8003920 <__swsetup_r+0x3c>
 8003900:	686c      	ldr	r4, [r5, #4]
 8003902:	89a3      	ldrh	r3, [r4, #12]
 8003904:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003908:	0719      	lsls	r1, r3, #28
 800390a:	d42c      	bmi.n	8003966 <__swsetup_r+0x82>
 800390c:	06dd      	lsls	r5, r3, #27
 800390e:	d411      	bmi.n	8003934 <__swsetup_r+0x50>
 8003910:	2309      	movs	r3, #9
 8003912:	6033      	str	r3, [r6, #0]
 8003914:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003918:	f04f 30ff 	mov.w	r0, #4294967295
 800391c:	81a3      	strh	r3, [r4, #12]
 800391e:	e03e      	b.n	800399e <__swsetup_r+0xba>
 8003920:	4b25      	ldr	r3, [pc, #148]	; (80039b8 <__swsetup_r+0xd4>)
 8003922:	429c      	cmp	r4, r3
 8003924:	d101      	bne.n	800392a <__swsetup_r+0x46>
 8003926:	68ac      	ldr	r4, [r5, #8]
 8003928:	e7eb      	b.n	8003902 <__swsetup_r+0x1e>
 800392a:	4b24      	ldr	r3, [pc, #144]	; (80039bc <__swsetup_r+0xd8>)
 800392c:	429c      	cmp	r4, r3
 800392e:	bf08      	it	eq
 8003930:	68ec      	ldreq	r4, [r5, #12]
 8003932:	e7e6      	b.n	8003902 <__swsetup_r+0x1e>
 8003934:	0758      	lsls	r0, r3, #29
 8003936:	d512      	bpl.n	800395e <__swsetup_r+0x7a>
 8003938:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800393a:	b141      	cbz	r1, 800394e <__swsetup_r+0x6a>
 800393c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003940:	4299      	cmp	r1, r3
 8003942:	d002      	beq.n	800394a <__swsetup_r+0x66>
 8003944:	4630      	mov	r0, r6
 8003946:	f7ff fc83 	bl	8003250 <_free_r>
 800394a:	2300      	movs	r3, #0
 800394c:	6363      	str	r3, [r4, #52]	; 0x34
 800394e:	89a3      	ldrh	r3, [r4, #12]
 8003950:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003954:	81a3      	strh	r3, [r4, #12]
 8003956:	2300      	movs	r3, #0
 8003958:	6063      	str	r3, [r4, #4]
 800395a:	6923      	ldr	r3, [r4, #16]
 800395c:	6023      	str	r3, [r4, #0]
 800395e:	89a3      	ldrh	r3, [r4, #12]
 8003960:	f043 0308 	orr.w	r3, r3, #8
 8003964:	81a3      	strh	r3, [r4, #12]
 8003966:	6923      	ldr	r3, [r4, #16]
 8003968:	b94b      	cbnz	r3, 800397e <__swsetup_r+0x9a>
 800396a:	89a3      	ldrh	r3, [r4, #12]
 800396c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003974:	d003      	beq.n	800397e <__swsetup_r+0x9a>
 8003976:	4621      	mov	r1, r4
 8003978:	4630      	mov	r0, r6
 800397a:	f000 f869 	bl	8003a50 <__smakebuf_r>
 800397e:	89a0      	ldrh	r0, [r4, #12]
 8003980:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003984:	f010 0301 	ands.w	r3, r0, #1
 8003988:	d00a      	beq.n	80039a0 <__swsetup_r+0xbc>
 800398a:	2300      	movs	r3, #0
 800398c:	60a3      	str	r3, [r4, #8]
 800398e:	6963      	ldr	r3, [r4, #20]
 8003990:	425b      	negs	r3, r3
 8003992:	61a3      	str	r3, [r4, #24]
 8003994:	6923      	ldr	r3, [r4, #16]
 8003996:	b943      	cbnz	r3, 80039aa <__swsetup_r+0xc6>
 8003998:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800399c:	d1ba      	bne.n	8003914 <__swsetup_r+0x30>
 800399e:	bd70      	pop	{r4, r5, r6, pc}
 80039a0:	0781      	lsls	r1, r0, #30
 80039a2:	bf58      	it	pl
 80039a4:	6963      	ldrpl	r3, [r4, #20]
 80039a6:	60a3      	str	r3, [r4, #8]
 80039a8:	e7f4      	b.n	8003994 <__swsetup_r+0xb0>
 80039aa:	2000      	movs	r0, #0
 80039ac:	e7f7      	b.n	800399e <__swsetup_r+0xba>
 80039ae:	bf00      	nop
 80039b0:	2000000c 	.word	0x2000000c
 80039b4:	080058b8 	.word	0x080058b8
 80039b8:	080058d8 	.word	0x080058d8
 80039bc:	08005898 	.word	0x08005898

080039c0 <_close_r>:
 80039c0:	b538      	push	{r3, r4, r5, lr}
 80039c2:	2300      	movs	r3, #0
 80039c4:	4d05      	ldr	r5, [pc, #20]	; (80039dc <_close_r+0x1c>)
 80039c6:	4604      	mov	r4, r0
 80039c8:	4608      	mov	r0, r1
 80039ca:	602b      	str	r3, [r5, #0]
 80039cc:	f7fd fbf9 	bl	80011c2 <_close>
 80039d0:	1c43      	adds	r3, r0, #1
 80039d2:	d102      	bne.n	80039da <_close_r+0x1a>
 80039d4:	682b      	ldr	r3, [r5, #0]
 80039d6:	b103      	cbz	r3, 80039da <_close_r+0x1a>
 80039d8:	6023      	str	r3, [r4, #0]
 80039da:	bd38      	pop	{r3, r4, r5, pc}
 80039dc:	20000128 	.word	0x20000128

080039e0 <_lseek_r>:
 80039e0:	b538      	push	{r3, r4, r5, lr}
 80039e2:	4604      	mov	r4, r0
 80039e4:	4608      	mov	r0, r1
 80039e6:	4611      	mov	r1, r2
 80039e8:	2200      	movs	r2, #0
 80039ea:	4d05      	ldr	r5, [pc, #20]	; (8003a00 <_lseek_r+0x20>)
 80039ec:	602a      	str	r2, [r5, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	f7fd fc0b 	bl	800120a <_lseek>
 80039f4:	1c43      	adds	r3, r0, #1
 80039f6:	d102      	bne.n	80039fe <_lseek_r+0x1e>
 80039f8:	682b      	ldr	r3, [r5, #0]
 80039fa:	b103      	cbz	r3, 80039fe <_lseek_r+0x1e>
 80039fc:	6023      	str	r3, [r4, #0]
 80039fe:	bd38      	pop	{r3, r4, r5, pc}
 8003a00:	20000128 	.word	0x20000128

08003a04 <__swhatbuf_r>:
 8003a04:	b570      	push	{r4, r5, r6, lr}
 8003a06:	460e      	mov	r6, r1
 8003a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a0c:	4614      	mov	r4, r2
 8003a0e:	2900      	cmp	r1, #0
 8003a10:	461d      	mov	r5, r3
 8003a12:	b096      	sub	sp, #88	; 0x58
 8003a14:	da08      	bge.n	8003a28 <__swhatbuf_r+0x24>
 8003a16:	2200      	movs	r2, #0
 8003a18:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003a1c:	602a      	str	r2, [r5, #0]
 8003a1e:	061a      	lsls	r2, r3, #24
 8003a20:	d410      	bmi.n	8003a44 <__swhatbuf_r+0x40>
 8003a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a26:	e00e      	b.n	8003a46 <__swhatbuf_r+0x42>
 8003a28:	466a      	mov	r2, sp
 8003a2a:	f001 fa71 	bl	8004f10 <_fstat_r>
 8003a2e:	2800      	cmp	r0, #0
 8003a30:	dbf1      	blt.n	8003a16 <__swhatbuf_r+0x12>
 8003a32:	9a01      	ldr	r2, [sp, #4]
 8003a34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003a38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003a3c:	425a      	negs	r2, r3
 8003a3e:	415a      	adcs	r2, r3
 8003a40:	602a      	str	r2, [r5, #0]
 8003a42:	e7ee      	b.n	8003a22 <__swhatbuf_r+0x1e>
 8003a44:	2340      	movs	r3, #64	; 0x40
 8003a46:	2000      	movs	r0, #0
 8003a48:	6023      	str	r3, [r4, #0]
 8003a4a:	b016      	add	sp, #88	; 0x58
 8003a4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003a50 <__smakebuf_r>:
 8003a50:	898b      	ldrh	r3, [r1, #12]
 8003a52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a54:	079d      	lsls	r5, r3, #30
 8003a56:	4606      	mov	r6, r0
 8003a58:	460c      	mov	r4, r1
 8003a5a:	d507      	bpl.n	8003a6c <__smakebuf_r+0x1c>
 8003a5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003a60:	6023      	str	r3, [r4, #0]
 8003a62:	6123      	str	r3, [r4, #16]
 8003a64:	2301      	movs	r3, #1
 8003a66:	6163      	str	r3, [r4, #20]
 8003a68:	b002      	add	sp, #8
 8003a6a:	bd70      	pop	{r4, r5, r6, pc}
 8003a6c:	466a      	mov	r2, sp
 8003a6e:	ab01      	add	r3, sp, #4
 8003a70:	f7ff ffc8 	bl	8003a04 <__swhatbuf_r>
 8003a74:	9900      	ldr	r1, [sp, #0]
 8003a76:	4605      	mov	r5, r0
 8003a78:	4630      	mov	r0, r6
 8003a7a:	f7ff fc51 	bl	8003320 <_malloc_r>
 8003a7e:	b948      	cbnz	r0, 8003a94 <__smakebuf_r+0x44>
 8003a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a84:	059a      	lsls	r2, r3, #22
 8003a86:	d4ef      	bmi.n	8003a68 <__smakebuf_r+0x18>
 8003a88:	f023 0303 	bic.w	r3, r3, #3
 8003a8c:	f043 0302 	orr.w	r3, r3, #2
 8003a90:	81a3      	strh	r3, [r4, #12]
 8003a92:	e7e3      	b.n	8003a5c <__smakebuf_r+0xc>
 8003a94:	4b0d      	ldr	r3, [pc, #52]	; (8003acc <__smakebuf_r+0x7c>)
 8003a96:	62b3      	str	r3, [r6, #40]	; 0x28
 8003a98:	89a3      	ldrh	r3, [r4, #12]
 8003a9a:	6020      	str	r0, [r4, #0]
 8003a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aa0:	81a3      	strh	r3, [r4, #12]
 8003aa2:	9b00      	ldr	r3, [sp, #0]
 8003aa4:	6120      	str	r0, [r4, #16]
 8003aa6:	6163      	str	r3, [r4, #20]
 8003aa8:	9b01      	ldr	r3, [sp, #4]
 8003aaa:	b15b      	cbz	r3, 8003ac4 <__smakebuf_r+0x74>
 8003aac:	4630      	mov	r0, r6
 8003aae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ab2:	f001 fa3f 	bl	8004f34 <_isatty_r>
 8003ab6:	b128      	cbz	r0, 8003ac4 <__smakebuf_r+0x74>
 8003ab8:	89a3      	ldrh	r3, [r4, #12]
 8003aba:	f023 0303 	bic.w	r3, r3, #3
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	81a3      	strh	r3, [r4, #12]
 8003ac4:	89a0      	ldrh	r0, [r4, #12]
 8003ac6:	4305      	orrs	r5, r0
 8003ac8:	81a5      	strh	r5, [r4, #12]
 8003aca:	e7cd      	b.n	8003a68 <__smakebuf_r+0x18>
 8003acc:	08002ff9 	.word	0x08002ff9

08003ad0 <malloc>:
 8003ad0:	4b02      	ldr	r3, [pc, #8]	; (8003adc <malloc+0xc>)
 8003ad2:	4601      	mov	r1, r0
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	f7ff bc23 	b.w	8003320 <_malloc_r>
 8003ada:	bf00      	nop
 8003adc:	2000000c 	.word	0x2000000c

08003ae0 <__malloc_lock>:
 8003ae0:	4801      	ldr	r0, [pc, #4]	; (8003ae8 <__malloc_lock+0x8>)
 8003ae2:	f7ff bb9c 	b.w	800321e <__retarget_lock_acquire_recursive>
 8003ae6:	bf00      	nop
 8003ae8:	2000011c 	.word	0x2000011c

08003aec <__malloc_unlock>:
 8003aec:	4801      	ldr	r0, [pc, #4]	; (8003af4 <__malloc_unlock+0x8>)
 8003aee:	f7ff bb97 	b.w	8003220 <__retarget_lock_release_recursive>
 8003af2:	bf00      	nop
 8003af4:	2000011c 	.word	0x2000011c

08003af8 <__ssputs_r>:
 8003af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003afc:	688e      	ldr	r6, [r1, #8]
 8003afe:	4682      	mov	sl, r0
 8003b00:	429e      	cmp	r6, r3
 8003b02:	460c      	mov	r4, r1
 8003b04:	4690      	mov	r8, r2
 8003b06:	461f      	mov	r7, r3
 8003b08:	d838      	bhi.n	8003b7c <__ssputs_r+0x84>
 8003b0a:	898a      	ldrh	r2, [r1, #12]
 8003b0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b10:	d032      	beq.n	8003b78 <__ssputs_r+0x80>
 8003b12:	6825      	ldr	r5, [r4, #0]
 8003b14:	6909      	ldr	r1, [r1, #16]
 8003b16:	3301      	adds	r3, #1
 8003b18:	eba5 0901 	sub.w	r9, r5, r1
 8003b1c:	6965      	ldr	r5, [r4, #20]
 8003b1e:	444b      	add	r3, r9
 8003b20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b28:	106d      	asrs	r5, r5, #1
 8003b2a:	429d      	cmp	r5, r3
 8003b2c:	bf38      	it	cc
 8003b2e:	461d      	movcc	r5, r3
 8003b30:	0553      	lsls	r3, r2, #21
 8003b32:	d531      	bpl.n	8003b98 <__ssputs_r+0xa0>
 8003b34:	4629      	mov	r1, r5
 8003b36:	f7ff fbf3 	bl	8003320 <_malloc_r>
 8003b3a:	4606      	mov	r6, r0
 8003b3c:	b950      	cbnz	r0, 8003b54 <__ssputs_r+0x5c>
 8003b3e:	230c      	movs	r3, #12
 8003b40:	f04f 30ff 	mov.w	r0, #4294967295
 8003b44:	f8ca 3000 	str.w	r3, [sl]
 8003b48:	89a3      	ldrh	r3, [r4, #12]
 8003b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b4e:	81a3      	strh	r3, [r4, #12]
 8003b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b54:	464a      	mov	r2, r9
 8003b56:	6921      	ldr	r1, [r4, #16]
 8003b58:	f7ff fb63 	bl	8003222 <memcpy>
 8003b5c:	89a3      	ldrh	r3, [r4, #12]
 8003b5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b66:	81a3      	strh	r3, [r4, #12]
 8003b68:	6126      	str	r6, [r4, #16]
 8003b6a:	444e      	add	r6, r9
 8003b6c:	6026      	str	r6, [r4, #0]
 8003b6e:	463e      	mov	r6, r7
 8003b70:	6165      	str	r5, [r4, #20]
 8003b72:	eba5 0509 	sub.w	r5, r5, r9
 8003b76:	60a5      	str	r5, [r4, #8]
 8003b78:	42be      	cmp	r6, r7
 8003b7a:	d900      	bls.n	8003b7e <__ssputs_r+0x86>
 8003b7c:	463e      	mov	r6, r7
 8003b7e:	4632      	mov	r2, r6
 8003b80:	4641      	mov	r1, r8
 8003b82:	6820      	ldr	r0, [r4, #0]
 8003b84:	f001 f9f4 	bl	8004f70 <memmove>
 8003b88:	68a3      	ldr	r3, [r4, #8]
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	1b9b      	subs	r3, r3, r6
 8003b8e:	60a3      	str	r3, [r4, #8]
 8003b90:	6823      	ldr	r3, [r4, #0]
 8003b92:	4433      	add	r3, r6
 8003b94:	6023      	str	r3, [r4, #0]
 8003b96:	e7db      	b.n	8003b50 <__ssputs_r+0x58>
 8003b98:	462a      	mov	r2, r5
 8003b9a:	f001 fa03 	bl	8004fa4 <_realloc_r>
 8003b9e:	4606      	mov	r6, r0
 8003ba0:	2800      	cmp	r0, #0
 8003ba2:	d1e1      	bne.n	8003b68 <__ssputs_r+0x70>
 8003ba4:	4650      	mov	r0, sl
 8003ba6:	6921      	ldr	r1, [r4, #16]
 8003ba8:	f7ff fb52 	bl	8003250 <_free_r>
 8003bac:	e7c7      	b.n	8003b3e <__ssputs_r+0x46>
	...

08003bb0 <_svfiprintf_r>:
 8003bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb4:	4698      	mov	r8, r3
 8003bb6:	898b      	ldrh	r3, [r1, #12]
 8003bb8:	4607      	mov	r7, r0
 8003bba:	061b      	lsls	r3, r3, #24
 8003bbc:	460d      	mov	r5, r1
 8003bbe:	4614      	mov	r4, r2
 8003bc0:	b09d      	sub	sp, #116	; 0x74
 8003bc2:	d50e      	bpl.n	8003be2 <_svfiprintf_r+0x32>
 8003bc4:	690b      	ldr	r3, [r1, #16]
 8003bc6:	b963      	cbnz	r3, 8003be2 <_svfiprintf_r+0x32>
 8003bc8:	2140      	movs	r1, #64	; 0x40
 8003bca:	f7ff fba9 	bl	8003320 <_malloc_r>
 8003bce:	6028      	str	r0, [r5, #0]
 8003bd0:	6128      	str	r0, [r5, #16]
 8003bd2:	b920      	cbnz	r0, 8003bde <_svfiprintf_r+0x2e>
 8003bd4:	230c      	movs	r3, #12
 8003bd6:	603b      	str	r3, [r7, #0]
 8003bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bdc:	e0d1      	b.n	8003d82 <_svfiprintf_r+0x1d2>
 8003bde:	2340      	movs	r3, #64	; 0x40
 8003be0:	616b      	str	r3, [r5, #20]
 8003be2:	2300      	movs	r3, #0
 8003be4:	9309      	str	r3, [sp, #36]	; 0x24
 8003be6:	2320      	movs	r3, #32
 8003be8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bec:	2330      	movs	r3, #48	; 0x30
 8003bee:	f04f 0901 	mov.w	r9, #1
 8003bf2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bf6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003d9c <_svfiprintf_r+0x1ec>
 8003bfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bfe:	4623      	mov	r3, r4
 8003c00:	469a      	mov	sl, r3
 8003c02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c06:	b10a      	cbz	r2, 8003c0c <_svfiprintf_r+0x5c>
 8003c08:	2a25      	cmp	r2, #37	; 0x25
 8003c0a:	d1f9      	bne.n	8003c00 <_svfiprintf_r+0x50>
 8003c0c:	ebba 0b04 	subs.w	fp, sl, r4
 8003c10:	d00b      	beq.n	8003c2a <_svfiprintf_r+0x7a>
 8003c12:	465b      	mov	r3, fp
 8003c14:	4622      	mov	r2, r4
 8003c16:	4629      	mov	r1, r5
 8003c18:	4638      	mov	r0, r7
 8003c1a:	f7ff ff6d 	bl	8003af8 <__ssputs_r>
 8003c1e:	3001      	adds	r0, #1
 8003c20:	f000 80aa 	beq.w	8003d78 <_svfiprintf_r+0x1c8>
 8003c24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c26:	445a      	add	r2, fp
 8003c28:	9209      	str	r2, [sp, #36]	; 0x24
 8003c2a:	f89a 3000 	ldrb.w	r3, [sl]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 80a2 	beq.w	8003d78 <_svfiprintf_r+0x1c8>
 8003c34:	2300      	movs	r3, #0
 8003c36:	f04f 32ff 	mov.w	r2, #4294967295
 8003c3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c3e:	f10a 0a01 	add.w	sl, sl, #1
 8003c42:	9304      	str	r3, [sp, #16]
 8003c44:	9307      	str	r3, [sp, #28]
 8003c46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c4a:	931a      	str	r3, [sp, #104]	; 0x68
 8003c4c:	4654      	mov	r4, sl
 8003c4e:	2205      	movs	r2, #5
 8003c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c54:	4851      	ldr	r0, [pc, #324]	; (8003d9c <_svfiprintf_r+0x1ec>)
 8003c56:	f001 f97d 	bl	8004f54 <memchr>
 8003c5a:	9a04      	ldr	r2, [sp, #16]
 8003c5c:	b9d8      	cbnz	r0, 8003c96 <_svfiprintf_r+0xe6>
 8003c5e:	06d0      	lsls	r0, r2, #27
 8003c60:	bf44      	itt	mi
 8003c62:	2320      	movmi	r3, #32
 8003c64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c68:	0711      	lsls	r1, r2, #28
 8003c6a:	bf44      	itt	mi
 8003c6c:	232b      	movmi	r3, #43	; 0x2b
 8003c6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c72:	f89a 3000 	ldrb.w	r3, [sl]
 8003c76:	2b2a      	cmp	r3, #42	; 0x2a
 8003c78:	d015      	beq.n	8003ca6 <_svfiprintf_r+0xf6>
 8003c7a:	4654      	mov	r4, sl
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	f04f 0c0a 	mov.w	ip, #10
 8003c82:	9a07      	ldr	r2, [sp, #28]
 8003c84:	4621      	mov	r1, r4
 8003c86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c8a:	3b30      	subs	r3, #48	; 0x30
 8003c8c:	2b09      	cmp	r3, #9
 8003c8e:	d94e      	bls.n	8003d2e <_svfiprintf_r+0x17e>
 8003c90:	b1b0      	cbz	r0, 8003cc0 <_svfiprintf_r+0x110>
 8003c92:	9207      	str	r2, [sp, #28]
 8003c94:	e014      	b.n	8003cc0 <_svfiprintf_r+0x110>
 8003c96:	eba0 0308 	sub.w	r3, r0, r8
 8003c9a:	fa09 f303 	lsl.w	r3, r9, r3
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	46a2      	mov	sl, r4
 8003ca2:	9304      	str	r3, [sp, #16]
 8003ca4:	e7d2      	b.n	8003c4c <_svfiprintf_r+0x9c>
 8003ca6:	9b03      	ldr	r3, [sp, #12]
 8003ca8:	1d19      	adds	r1, r3, #4
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	9103      	str	r1, [sp, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	bfbb      	ittet	lt
 8003cb2:	425b      	neglt	r3, r3
 8003cb4:	f042 0202 	orrlt.w	r2, r2, #2
 8003cb8:	9307      	strge	r3, [sp, #28]
 8003cba:	9307      	strlt	r3, [sp, #28]
 8003cbc:	bfb8      	it	lt
 8003cbe:	9204      	strlt	r2, [sp, #16]
 8003cc0:	7823      	ldrb	r3, [r4, #0]
 8003cc2:	2b2e      	cmp	r3, #46	; 0x2e
 8003cc4:	d10c      	bne.n	8003ce0 <_svfiprintf_r+0x130>
 8003cc6:	7863      	ldrb	r3, [r4, #1]
 8003cc8:	2b2a      	cmp	r3, #42	; 0x2a
 8003cca:	d135      	bne.n	8003d38 <_svfiprintf_r+0x188>
 8003ccc:	9b03      	ldr	r3, [sp, #12]
 8003cce:	3402      	adds	r4, #2
 8003cd0:	1d1a      	adds	r2, r3, #4
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	9203      	str	r2, [sp, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	bfb8      	it	lt
 8003cda:	f04f 33ff 	movlt.w	r3, #4294967295
 8003cde:	9305      	str	r3, [sp, #20]
 8003ce0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003da0 <_svfiprintf_r+0x1f0>
 8003ce4:	2203      	movs	r2, #3
 8003ce6:	4650      	mov	r0, sl
 8003ce8:	7821      	ldrb	r1, [r4, #0]
 8003cea:	f001 f933 	bl	8004f54 <memchr>
 8003cee:	b140      	cbz	r0, 8003d02 <_svfiprintf_r+0x152>
 8003cf0:	2340      	movs	r3, #64	; 0x40
 8003cf2:	eba0 000a 	sub.w	r0, r0, sl
 8003cf6:	fa03 f000 	lsl.w	r0, r3, r0
 8003cfa:	9b04      	ldr	r3, [sp, #16]
 8003cfc:	3401      	adds	r4, #1
 8003cfe:	4303      	orrs	r3, r0
 8003d00:	9304      	str	r3, [sp, #16]
 8003d02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d06:	2206      	movs	r2, #6
 8003d08:	4826      	ldr	r0, [pc, #152]	; (8003da4 <_svfiprintf_r+0x1f4>)
 8003d0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d0e:	f001 f921 	bl	8004f54 <memchr>
 8003d12:	2800      	cmp	r0, #0
 8003d14:	d038      	beq.n	8003d88 <_svfiprintf_r+0x1d8>
 8003d16:	4b24      	ldr	r3, [pc, #144]	; (8003da8 <_svfiprintf_r+0x1f8>)
 8003d18:	bb1b      	cbnz	r3, 8003d62 <_svfiprintf_r+0x1b2>
 8003d1a:	9b03      	ldr	r3, [sp, #12]
 8003d1c:	3307      	adds	r3, #7
 8003d1e:	f023 0307 	bic.w	r3, r3, #7
 8003d22:	3308      	adds	r3, #8
 8003d24:	9303      	str	r3, [sp, #12]
 8003d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d28:	4433      	add	r3, r6
 8003d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8003d2c:	e767      	b.n	8003bfe <_svfiprintf_r+0x4e>
 8003d2e:	460c      	mov	r4, r1
 8003d30:	2001      	movs	r0, #1
 8003d32:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d36:	e7a5      	b.n	8003c84 <_svfiprintf_r+0xd4>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f04f 0c0a 	mov.w	ip, #10
 8003d3e:	4619      	mov	r1, r3
 8003d40:	3401      	adds	r4, #1
 8003d42:	9305      	str	r3, [sp, #20]
 8003d44:	4620      	mov	r0, r4
 8003d46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d4a:	3a30      	subs	r2, #48	; 0x30
 8003d4c:	2a09      	cmp	r2, #9
 8003d4e:	d903      	bls.n	8003d58 <_svfiprintf_r+0x1a8>
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0c5      	beq.n	8003ce0 <_svfiprintf_r+0x130>
 8003d54:	9105      	str	r1, [sp, #20]
 8003d56:	e7c3      	b.n	8003ce0 <_svfiprintf_r+0x130>
 8003d58:	4604      	mov	r4, r0
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d60:	e7f0      	b.n	8003d44 <_svfiprintf_r+0x194>
 8003d62:	ab03      	add	r3, sp, #12
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	462a      	mov	r2, r5
 8003d68:	4638      	mov	r0, r7
 8003d6a:	4b10      	ldr	r3, [pc, #64]	; (8003dac <_svfiprintf_r+0x1fc>)
 8003d6c:	a904      	add	r1, sp, #16
 8003d6e:	f3af 8000 	nop.w
 8003d72:	1c42      	adds	r2, r0, #1
 8003d74:	4606      	mov	r6, r0
 8003d76:	d1d6      	bne.n	8003d26 <_svfiprintf_r+0x176>
 8003d78:	89ab      	ldrh	r3, [r5, #12]
 8003d7a:	065b      	lsls	r3, r3, #25
 8003d7c:	f53f af2c 	bmi.w	8003bd8 <_svfiprintf_r+0x28>
 8003d80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d82:	b01d      	add	sp, #116	; 0x74
 8003d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d88:	ab03      	add	r3, sp, #12
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	462a      	mov	r2, r5
 8003d8e:	4638      	mov	r0, r7
 8003d90:	4b06      	ldr	r3, [pc, #24]	; (8003dac <_svfiprintf_r+0x1fc>)
 8003d92:	a904      	add	r1, sp, #16
 8003d94:	f000 f9d4 	bl	8004140 <_printf_i>
 8003d98:	e7eb      	b.n	8003d72 <_svfiprintf_r+0x1c2>
 8003d9a:	bf00      	nop
 8003d9c:	080058fc 	.word	0x080058fc
 8003da0:	08005902 	.word	0x08005902
 8003da4:	08005906 	.word	0x08005906
 8003da8:	00000000 	.word	0x00000000
 8003dac:	08003af9 	.word	0x08003af9

08003db0 <__sfputc_r>:
 8003db0:	6893      	ldr	r3, [r2, #8]
 8003db2:	b410      	push	{r4}
 8003db4:	3b01      	subs	r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	6093      	str	r3, [r2, #8]
 8003dba:	da07      	bge.n	8003dcc <__sfputc_r+0x1c>
 8003dbc:	6994      	ldr	r4, [r2, #24]
 8003dbe:	42a3      	cmp	r3, r4
 8003dc0:	db01      	blt.n	8003dc6 <__sfputc_r+0x16>
 8003dc2:	290a      	cmp	r1, #10
 8003dc4:	d102      	bne.n	8003dcc <__sfputc_r+0x1c>
 8003dc6:	bc10      	pop	{r4}
 8003dc8:	f7ff bd28 	b.w	800381c <__swbuf_r>
 8003dcc:	6813      	ldr	r3, [r2, #0]
 8003dce:	1c58      	adds	r0, r3, #1
 8003dd0:	6010      	str	r0, [r2, #0]
 8003dd2:	7019      	strb	r1, [r3, #0]
 8003dd4:	4608      	mov	r0, r1
 8003dd6:	bc10      	pop	{r4}
 8003dd8:	4770      	bx	lr

08003dda <__sfputs_r>:
 8003dda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ddc:	4606      	mov	r6, r0
 8003dde:	460f      	mov	r7, r1
 8003de0:	4614      	mov	r4, r2
 8003de2:	18d5      	adds	r5, r2, r3
 8003de4:	42ac      	cmp	r4, r5
 8003de6:	d101      	bne.n	8003dec <__sfputs_r+0x12>
 8003de8:	2000      	movs	r0, #0
 8003dea:	e007      	b.n	8003dfc <__sfputs_r+0x22>
 8003dec:	463a      	mov	r2, r7
 8003dee:	4630      	mov	r0, r6
 8003df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003df4:	f7ff ffdc 	bl	8003db0 <__sfputc_r>
 8003df8:	1c43      	adds	r3, r0, #1
 8003dfa:	d1f3      	bne.n	8003de4 <__sfputs_r+0xa>
 8003dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e00 <_vfiprintf_r>:
 8003e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e04:	460d      	mov	r5, r1
 8003e06:	4614      	mov	r4, r2
 8003e08:	4698      	mov	r8, r3
 8003e0a:	4606      	mov	r6, r0
 8003e0c:	b09d      	sub	sp, #116	; 0x74
 8003e0e:	b118      	cbz	r0, 8003e18 <_vfiprintf_r+0x18>
 8003e10:	6983      	ldr	r3, [r0, #24]
 8003e12:	b90b      	cbnz	r3, 8003e18 <_vfiprintf_r+0x18>
 8003e14:	f7ff f924 	bl	8003060 <__sinit>
 8003e18:	4b89      	ldr	r3, [pc, #548]	; (8004040 <_vfiprintf_r+0x240>)
 8003e1a:	429d      	cmp	r5, r3
 8003e1c:	d11b      	bne.n	8003e56 <_vfiprintf_r+0x56>
 8003e1e:	6875      	ldr	r5, [r6, #4]
 8003e20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e22:	07d9      	lsls	r1, r3, #31
 8003e24:	d405      	bmi.n	8003e32 <_vfiprintf_r+0x32>
 8003e26:	89ab      	ldrh	r3, [r5, #12]
 8003e28:	059a      	lsls	r2, r3, #22
 8003e2a:	d402      	bmi.n	8003e32 <_vfiprintf_r+0x32>
 8003e2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e2e:	f7ff f9f6 	bl	800321e <__retarget_lock_acquire_recursive>
 8003e32:	89ab      	ldrh	r3, [r5, #12]
 8003e34:	071b      	lsls	r3, r3, #28
 8003e36:	d501      	bpl.n	8003e3c <_vfiprintf_r+0x3c>
 8003e38:	692b      	ldr	r3, [r5, #16]
 8003e3a:	b9eb      	cbnz	r3, 8003e78 <_vfiprintf_r+0x78>
 8003e3c:	4629      	mov	r1, r5
 8003e3e:	4630      	mov	r0, r6
 8003e40:	f7ff fd50 	bl	80038e4 <__swsetup_r>
 8003e44:	b1c0      	cbz	r0, 8003e78 <_vfiprintf_r+0x78>
 8003e46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e48:	07dc      	lsls	r4, r3, #31
 8003e4a:	d50e      	bpl.n	8003e6a <_vfiprintf_r+0x6a>
 8003e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e50:	b01d      	add	sp, #116	; 0x74
 8003e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e56:	4b7b      	ldr	r3, [pc, #492]	; (8004044 <_vfiprintf_r+0x244>)
 8003e58:	429d      	cmp	r5, r3
 8003e5a:	d101      	bne.n	8003e60 <_vfiprintf_r+0x60>
 8003e5c:	68b5      	ldr	r5, [r6, #8]
 8003e5e:	e7df      	b.n	8003e20 <_vfiprintf_r+0x20>
 8003e60:	4b79      	ldr	r3, [pc, #484]	; (8004048 <_vfiprintf_r+0x248>)
 8003e62:	429d      	cmp	r5, r3
 8003e64:	bf08      	it	eq
 8003e66:	68f5      	ldreq	r5, [r6, #12]
 8003e68:	e7da      	b.n	8003e20 <_vfiprintf_r+0x20>
 8003e6a:	89ab      	ldrh	r3, [r5, #12]
 8003e6c:	0598      	lsls	r0, r3, #22
 8003e6e:	d4ed      	bmi.n	8003e4c <_vfiprintf_r+0x4c>
 8003e70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e72:	f7ff f9d5 	bl	8003220 <__retarget_lock_release_recursive>
 8003e76:	e7e9      	b.n	8003e4c <_vfiprintf_r+0x4c>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8003e7c:	2320      	movs	r3, #32
 8003e7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e82:	2330      	movs	r3, #48	; 0x30
 8003e84:	f04f 0901 	mov.w	r9, #1
 8003e88:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e8c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800404c <_vfiprintf_r+0x24c>
 8003e90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e94:	4623      	mov	r3, r4
 8003e96:	469a      	mov	sl, r3
 8003e98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e9c:	b10a      	cbz	r2, 8003ea2 <_vfiprintf_r+0xa2>
 8003e9e:	2a25      	cmp	r2, #37	; 0x25
 8003ea0:	d1f9      	bne.n	8003e96 <_vfiprintf_r+0x96>
 8003ea2:	ebba 0b04 	subs.w	fp, sl, r4
 8003ea6:	d00b      	beq.n	8003ec0 <_vfiprintf_r+0xc0>
 8003ea8:	465b      	mov	r3, fp
 8003eaa:	4622      	mov	r2, r4
 8003eac:	4629      	mov	r1, r5
 8003eae:	4630      	mov	r0, r6
 8003eb0:	f7ff ff93 	bl	8003dda <__sfputs_r>
 8003eb4:	3001      	adds	r0, #1
 8003eb6:	f000 80aa 	beq.w	800400e <_vfiprintf_r+0x20e>
 8003eba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ebc:	445a      	add	r2, fp
 8003ebe:	9209      	str	r2, [sp, #36]	; 0x24
 8003ec0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 80a2 	beq.w	800400e <_vfiprintf_r+0x20e>
 8003eca:	2300      	movs	r3, #0
 8003ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ed4:	f10a 0a01 	add.w	sl, sl, #1
 8003ed8:	9304      	str	r3, [sp, #16]
 8003eda:	9307      	str	r3, [sp, #28]
 8003edc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ee0:	931a      	str	r3, [sp, #104]	; 0x68
 8003ee2:	4654      	mov	r4, sl
 8003ee4:	2205      	movs	r2, #5
 8003ee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eea:	4858      	ldr	r0, [pc, #352]	; (800404c <_vfiprintf_r+0x24c>)
 8003eec:	f001 f832 	bl	8004f54 <memchr>
 8003ef0:	9a04      	ldr	r2, [sp, #16]
 8003ef2:	b9d8      	cbnz	r0, 8003f2c <_vfiprintf_r+0x12c>
 8003ef4:	06d1      	lsls	r1, r2, #27
 8003ef6:	bf44      	itt	mi
 8003ef8:	2320      	movmi	r3, #32
 8003efa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003efe:	0713      	lsls	r3, r2, #28
 8003f00:	bf44      	itt	mi
 8003f02:	232b      	movmi	r3, #43	; 0x2b
 8003f04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f08:	f89a 3000 	ldrb.w	r3, [sl]
 8003f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f0e:	d015      	beq.n	8003f3c <_vfiprintf_r+0x13c>
 8003f10:	4654      	mov	r4, sl
 8003f12:	2000      	movs	r0, #0
 8003f14:	f04f 0c0a 	mov.w	ip, #10
 8003f18:	9a07      	ldr	r2, [sp, #28]
 8003f1a:	4621      	mov	r1, r4
 8003f1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f20:	3b30      	subs	r3, #48	; 0x30
 8003f22:	2b09      	cmp	r3, #9
 8003f24:	d94e      	bls.n	8003fc4 <_vfiprintf_r+0x1c4>
 8003f26:	b1b0      	cbz	r0, 8003f56 <_vfiprintf_r+0x156>
 8003f28:	9207      	str	r2, [sp, #28]
 8003f2a:	e014      	b.n	8003f56 <_vfiprintf_r+0x156>
 8003f2c:	eba0 0308 	sub.w	r3, r0, r8
 8003f30:	fa09 f303 	lsl.w	r3, r9, r3
 8003f34:	4313      	orrs	r3, r2
 8003f36:	46a2      	mov	sl, r4
 8003f38:	9304      	str	r3, [sp, #16]
 8003f3a:	e7d2      	b.n	8003ee2 <_vfiprintf_r+0xe2>
 8003f3c:	9b03      	ldr	r3, [sp, #12]
 8003f3e:	1d19      	adds	r1, r3, #4
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	9103      	str	r1, [sp, #12]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	bfbb      	ittet	lt
 8003f48:	425b      	neglt	r3, r3
 8003f4a:	f042 0202 	orrlt.w	r2, r2, #2
 8003f4e:	9307      	strge	r3, [sp, #28]
 8003f50:	9307      	strlt	r3, [sp, #28]
 8003f52:	bfb8      	it	lt
 8003f54:	9204      	strlt	r2, [sp, #16]
 8003f56:	7823      	ldrb	r3, [r4, #0]
 8003f58:	2b2e      	cmp	r3, #46	; 0x2e
 8003f5a:	d10c      	bne.n	8003f76 <_vfiprintf_r+0x176>
 8003f5c:	7863      	ldrb	r3, [r4, #1]
 8003f5e:	2b2a      	cmp	r3, #42	; 0x2a
 8003f60:	d135      	bne.n	8003fce <_vfiprintf_r+0x1ce>
 8003f62:	9b03      	ldr	r3, [sp, #12]
 8003f64:	3402      	adds	r4, #2
 8003f66:	1d1a      	adds	r2, r3, #4
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	9203      	str	r2, [sp, #12]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	bfb8      	it	lt
 8003f70:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f74:	9305      	str	r3, [sp, #20]
 8003f76:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004050 <_vfiprintf_r+0x250>
 8003f7a:	2203      	movs	r2, #3
 8003f7c:	4650      	mov	r0, sl
 8003f7e:	7821      	ldrb	r1, [r4, #0]
 8003f80:	f000 ffe8 	bl	8004f54 <memchr>
 8003f84:	b140      	cbz	r0, 8003f98 <_vfiprintf_r+0x198>
 8003f86:	2340      	movs	r3, #64	; 0x40
 8003f88:	eba0 000a 	sub.w	r0, r0, sl
 8003f8c:	fa03 f000 	lsl.w	r0, r3, r0
 8003f90:	9b04      	ldr	r3, [sp, #16]
 8003f92:	3401      	adds	r4, #1
 8003f94:	4303      	orrs	r3, r0
 8003f96:	9304      	str	r3, [sp, #16]
 8003f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f9c:	2206      	movs	r2, #6
 8003f9e:	482d      	ldr	r0, [pc, #180]	; (8004054 <_vfiprintf_r+0x254>)
 8003fa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fa4:	f000 ffd6 	bl	8004f54 <memchr>
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	d03f      	beq.n	800402c <_vfiprintf_r+0x22c>
 8003fac:	4b2a      	ldr	r3, [pc, #168]	; (8004058 <_vfiprintf_r+0x258>)
 8003fae:	bb1b      	cbnz	r3, 8003ff8 <_vfiprintf_r+0x1f8>
 8003fb0:	9b03      	ldr	r3, [sp, #12]
 8003fb2:	3307      	adds	r3, #7
 8003fb4:	f023 0307 	bic.w	r3, r3, #7
 8003fb8:	3308      	adds	r3, #8
 8003fba:	9303      	str	r3, [sp, #12]
 8003fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fbe:	443b      	add	r3, r7
 8003fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8003fc2:	e767      	b.n	8003e94 <_vfiprintf_r+0x94>
 8003fc4:	460c      	mov	r4, r1
 8003fc6:	2001      	movs	r0, #1
 8003fc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fcc:	e7a5      	b.n	8003f1a <_vfiprintf_r+0x11a>
 8003fce:	2300      	movs	r3, #0
 8003fd0:	f04f 0c0a 	mov.w	ip, #10
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	3401      	adds	r4, #1
 8003fd8:	9305      	str	r3, [sp, #20]
 8003fda:	4620      	mov	r0, r4
 8003fdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fe0:	3a30      	subs	r2, #48	; 0x30
 8003fe2:	2a09      	cmp	r2, #9
 8003fe4:	d903      	bls.n	8003fee <_vfiprintf_r+0x1ee>
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0c5      	beq.n	8003f76 <_vfiprintf_r+0x176>
 8003fea:	9105      	str	r1, [sp, #20]
 8003fec:	e7c3      	b.n	8003f76 <_vfiprintf_r+0x176>
 8003fee:	4604      	mov	r4, r0
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ff6:	e7f0      	b.n	8003fda <_vfiprintf_r+0x1da>
 8003ff8:	ab03      	add	r3, sp, #12
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	462a      	mov	r2, r5
 8003ffe:	4630      	mov	r0, r6
 8004000:	4b16      	ldr	r3, [pc, #88]	; (800405c <_vfiprintf_r+0x25c>)
 8004002:	a904      	add	r1, sp, #16
 8004004:	f3af 8000 	nop.w
 8004008:	4607      	mov	r7, r0
 800400a:	1c78      	adds	r0, r7, #1
 800400c:	d1d6      	bne.n	8003fbc <_vfiprintf_r+0x1bc>
 800400e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004010:	07d9      	lsls	r1, r3, #31
 8004012:	d405      	bmi.n	8004020 <_vfiprintf_r+0x220>
 8004014:	89ab      	ldrh	r3, [r5, #12]
 8004016:	059a      	lsls	r2, r3, #22
 8004018:	d402      	bmi.n	8004020 <_vfiprintf_r+0x220>
 800401a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800401c:	f7ff f900 	bl	8003220 <__retarget_lock_release_recursive>
 8004020:	89ab      	ldrh	r3, [r5, #12]
 8004022:	065b      	lsls	r3, r3, #25
 8004024:	f53f af12 	bmi.w	8003e4c <_vfiprintf_r+0x4c>
 8004028:	9809      	ldr	r0, [sp, #36]	; 0x24
 800402a:	e711      	b.n	8003e50 <_vfiprintf_r+0x50>
 800402c:	ab03      	add	r3, sp, #12
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	462a      	mov	r2, r5
 8004032:	4630      	mov	r0, r6
 8004034:	4b09      	ldr	r3, [pc, #36]	; (800405c <_vfiprintf_r+0x25c>)
 8004036:	a904      	add	r1, sp, #16
 8004038:	f000 f882 	bl	8004140 <_printf_i>
 800403c:	e7e4      	b.n	8004008 <_vfiprintf_r+0x208>
 800403e:	bf00      	nop
 8004040:	080058b8 	.word	0x080058b8
 8004044:	080058d8 	.word	0x080058d8
 8004048:	08005898 	.word	0x08005898
 800404c:	080058fc 	.word	0x080058fc
 8004050:	08005902 	.word	0x08005902
 8004054:	08005906 	.word	0x08005906
 8004058:	00000000 	.word	0x00000000
 800405c:	08003ddb 	.word	0x08003ddb

08004060 <_printf_common>:
 8004060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004064:	4616      	mov	r6, r2
 8004066:	4699      	mov	r9, r3
 8004068:	688a      	ldr	r2, [r1, #8]
 800406a:	690b      	ldr	r3, [r1, #16]
 800406c:	4607      	mov	r7, r0
 800406e:	4293      	cmp	r3, r2
 8004070:	bfb8      	it	lt
 8004072:	4613      	movlt	r3, r2
 8004074:	6033      	str	r3, [r6, #0]
 8004076:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800407a:	460c      	mov	r4, r1
 800407c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004080:	b10a      	cbz	r2, 8004086 <_printf_common+0x26>
 8004082:	3301      	adds	r3, #1
 8004084:	6033      	str	r3, [r6, #0]
 8004086:	6823      	ldr	r3, [r4, #0]
 8004088:	0699      	lsls	r1, r3, #26
 800408a:	bf42      	ittt	mi
 800408c:	6833      	ldrmi	r3, [r6, #0]
 800408e:	3302      	addmi	r3, #2
 8004090:	6033      	strmi	r3, [r6, #0]
 8004092:	6825      	ldr	r5, [r4, #0]
 8004094:	f015 0506 	ands.w	r5, r5, #6
 8004098:	d106      	bne.n	80040a8 <_printf_common+0x48>
 800409a:	f104 0a19 	add.w	sl, r4, #25
 800409e:	68e3      	ldr	r3, [r4, #12]
 80040a0:	6832      	ldr	r2, [r6, #0]
 80040a2:	1a9b      	subs	r3, r3, r2
 80040a4:	42ab      	cmp	r3, r5
 80040a6:	dc28      	bgt.n	80040fa <_printf_common+0x9a>
 80040a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040ac:	1e13      	subs	r3, r2, #0
 80040ae:	6822      	ldr	r2, [r4, #0]
 80040b0:	bf18      	it	ne
 80040b2:	2301      	movne	r3, #1
 80040b4:	0692      	lsls	r2, r2, #26
 80040b6:	d42d      	bmi.n	8004114 <_printf_common+0xb4>
 80040b8:	4649      	mov	r1, r9
 80040ba:	4638      	mov	r0, r7
 80040bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040c0:	47c0      	blx	r8
 80040c2:	3001      	adds	r0, #1
 80040c4:	d020      	beq.n	8004108 <_printf_common+0xa8>
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	68e5      	ldr	r5, [r4, #12]
 80040ca:	f003 0306 	and.w	r3, r3, #6
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	bf18      	it	ne
 80040d2:	2500      	movne	r5, #0
 80040d4:	6832      	ldr	r2, [r6, #0]
 80040d6:	f04f 0600 	mov.w	r6, #0
 80040da:	68a3      	ldr	r3, [r4, #8]
 80040dc:	bf08      	it	eq
 80040de:	1aad      	subeq	r5, r5, r2
 80040e0:	6922      	ldr	r2, [r4, #16]
 80040e2:	bf08      	it	eq
 80040e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040e8:	4293      	cmp	r3, r2
 80040ea:	bfc4      	itt	gt
 80040ec:	1a9b      	subgt	r3, r3, r2
 80040ee:	18ed      	addgt	r5, r5, r3
 80040f0:	341a      	adds	r4, #26
 80040f2:	42b5      	cmp	r5, r6
 80040f4:	d11a      	bne.n	800412c <_printf_common+0xcc>
 80040f6:	2000      	movs	r0, #0
 80040f8:	e008      	b.n	800410c <_printf_common+0xac>
 80040fa:	2301      	movs	r3, #1
 80040fc:	4652      	mov	r2, sl
 80040fe:	4649      	mov	r1, r9
 8004100:	4638      	mov	r0, r7
 8004102:	47c0      	blx	r8
 8004104:	3001      	adds	r0, #1
 8004106:	d103      	bne.n	8004110 <_printf_common+0xb0>
 8004108:	f04f 30ff 	mov.w	r0, #4294967295
 800410c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004110:	3501      	adds	r5, #1
 8004112:	e7c4      	b.n	800409e <_printf_common+0x3e>
 8004114:	2030      	movs	r0, #48	; 0x30
 8004116:	18e1      	adds	r1, r4, r3
 8004118:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004122:	4422      	add	r2, r4
 8004124:	3302      	adds	r3, #2
 8004126:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800412a:	e7c5      	b.n	80040b8 <_printf_common+0x58>
 800412c:	2301      	movs	r3, #1
 800412e:	4622      	mov	r2, r4
 8004130:	4649      	mov	r1, r9
 8004132:	4638      	mov	r0, r7
 8004134:	47c0      	blx	r8
 8004136:	3001      	adds	r0, #1
 8004138:	d0e6      	beq.n	8004108 <_printf_common+0xa8>
 800413a:	3601      	adds	r6, #1
 800413c:	e7d9      	b.n	80040f2 <_printf_common+0x92>
	...

08004140 <_printf_i>:
 8004140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004144:	7e0f      	ldrb	r7, [r1, #24]
 8004146:	4691      	mov	r9, r2
 8004148:	2f78      	cmp	r7, #120	; 0x78
 800414a:	4680      	mov	r8, r0
 800414c:	460c      	mov	r4, r1
 800414e:	469a      	mov	sl, r3
 8004150:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004152:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004156:	d807      	bhi.n	8004168 <_printf_i+0x28>
 8004158:	2f62      	cmp	r7, #98	; 0x62
 800415a:	d80a      	bhi.n	8004172 <_printf_i+0x32>
 800415c:	2f00      	cmp	r7, #0
 800415e:	f000 80d9 	beq.w	8004314 <_printf_i+0x1d4>
 8004162:	2f58      	cmp	r7, #88	; 0x58
 8004164:	f000 80a4 	beq.w	80042b0 <_printf_i+0x170>
 8004168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800416c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004170:	e03a      	b.n	80041e8 <_printf_i+0xa8>
 8004172:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004176:	2b15      	cmp	r3, #21
 8004178:	d8f6      	bhi.n	8004168 <_printf_i+0x28>
 800417a:	a101      	add	r1, pc, #4	; (adr r1, 8004180 <_printf_i+0x40>)
 800417c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004180:	080041d9 	.word	0x080041d9
 8004184:	080041ed 	.word	0x080041ed
 8004188:	08004169 	.word	0x08004169
 800418c:	08004169 	.word	0x08004169
 8004190:	08004169 	.word	0x08004169
 8004194:	08004169 	.word	0x08004169
 8004198:	080041ed 	.word	0x080041ed
 800419c:	08004169 	.word	0x08004169
 80041a0:	08004169 	.word	0x08004169
 80041a4:	08004169 	.word	0x08004169
 80041a8:	08004169 	.word	0x08004169
 80041ac:	080042fb 	.word	0x080042fb
 80041b0:	0800421d 	.word	0x0800421d
 80041b4:	080042dd 	.word	0x080042dd
 80041b8:	08004169 	.word	0x08004169
 80041bc:	08004169 	.word	0x08004169
 80041c0:	0800431d 	.word	0x0800431d
 80041c4:	08004169 	.word	0x08004169
 80041c8:	0800421d 	.word	0x0800421d
 80041cc:	08004169 	.word	0x08004169
 80041d0:	08004169 	.word	0x08004169
 80041d4:	080042e5 	.word	0x080042e5
 80041d8:	682b      	ldr	r3, [r5, #0]
 80041da:	1d1a      	adds	r2, r3, #4
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	602a      	str	r2, [r5, #0]
 80041e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041e8:	2301      	movs	r3, #1
 80041ea:	e0a4      	b.n	8004336 <_printf_i+0x1f6>
 80041ec:	6820      	ldr	r0, [r4, #0]
 80041ee:	6829      	ldr	r1, [r5, #0]
 80041f0:	0606      	lsls	r6, r0, #24
 80041f2:	f101 0304 	add.w	r3, r1, #4
 80041f6:	d50a      	bpl.n	800420e <_printf_i+0xce>
 80041f8:	680e      	ldr	r6, [r1, #0]
 80041fa:	602b      	str	r3, [r5, #0]
 80041fc:	2e00      	cmp	r6, #0
 80041fe:	da03      	bge.n	8004208 <_printf_i+0xc8>
 8004200:	232d      	movs	r3, #45	; 0x2d
 8004202:	4276      	negs	r6, r6
 8004204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004208:	230a      	movs	r3, #10
 800420a:	485e      	ldr	r0, [pc, #376]	; (8004384 <_printf_i+0x244>)
 800420c:	e019      	b.n	8004242 <_printf_i+0x102>
 800420e:	680e      	ldr	r6, [r1, #0]
 8004210:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004214:	602b      	str	r3, [r5, #0]
 8004216:	bf18      	it	ne
 8004218:	b236      	sxthne	r6, r6
 800421a:	e7ef      	b.n	80041fc <_printf_i+0xbc>
 800421c:	682b      	ldr	r3, [r5, #0]
 800421e:	6820      	ldr	r0, [r4, #0]
 8004220:	1d19      	adds	r1, r3, #4
 8004222:	6029      	str	r1, [r5, #0]
 8004224:	0601      	lsls	r1, r0, #24
 8004226:	d501      	bpl.n	800422c <_printf_i+0xec>
 8004228:	681e      	ldr	r6, [r3, #0]
 800422a:	e002      	b.n	8004232 <_printf_i+0xf2>
 800422c:	0646      	lsls	r6, r0, #25
 800422e:	d5fb      	bpl.n	8004228 <_printf_i+0xe8>
 8004230:	881e      	ldrh	r6, [r3, #0]
 8004232:	2f6f      	cmp	r7, #111	; 0x6f
 8004234:	bf0c      	ite	eq
 8004236:	2308      	moveq	r3, #8
 8004238:	230a      	movne	r3, #10
 800423a:	4852      	ldr	r0, [pc, #328]	; (8004384 <_printf_i+0x244>)
 800423c:	2100      	movs	r1, #0
 800423e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004242:	6865      	ldr	r5, [r4, #4]
 8004244:	2d00      	cmp	r5, #0
 8004246:	bfa8      	it	ge
 8004248:	6821      	ldrge	r1, [r4, #0]
 800424a:	60a5      	str	r5, [r4, #8]
 800424c:	bfa4      	itt	ge
 800424e:	f021 0104 	bicge.w	r1, r1, #4
 8004252:	6021      	strge	r1, [r4, #0]
 8004254:	b90e      	cbnz	r6, 800425a <_printf_i+0x11a>
 8004256:	2d00      	cmp	r5, #0
 8004258:	d04d      	beq.n	80042f6 <_printf_i+0x1b6>
 800425a:	4615      	mov	r5, r2
 800425c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004260:	fb03 6711 	mls	r7, r3, r1, r6
 8004264:	5dc7      	ldrb	r7, [r0, r7]
 8004266:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800426a:	4637      	mov	r7, r6
 800426c:	42bb      	cmp	r3, r7
 800426e:	460e      	mov	r6, r1
 8004270:	d9f4      	bls.n	800425c <_printf_i+0x11c>
 8004272:	2b08      	cmp	r3, #8
 8004274:	d10b      	bne.n	800428e <_printf_i+0x14e>
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	07de      	lsls	r6, r3, #31
 800427a:	d508      	bpl.n	800428e <_printf_i+0x14e>
 800427c:	6923      	ldr	r3, [r4, #16]
 800427e:	6861      	ldr	r1, [r4, #4]
 8004280:	4299      	cmp	r1, r3
 8004282:	bfde      	ittt	le
 8004284:	2330      	movle	r3, #48	; 0x30
 8004286:	f805 3c01 	strble.w	r3, [r5, #-1]
 800428a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800428e:	1b52      	subs	r2, r2, r5
 8004290:	6122      	str	r2, [r4, #16]
 8004292:	464b      	mov	r3, r9
 8004294:	4621      	mov	r1, r4
 8004296:	4640      	mov	r0, r8
 8004298:	f8cd a000 	str.w	sl, [sp]
 800429c:	aa03      	add	r2, sp, #12
 800429e:	f7ff fedf 	bl	8004060 <_printf_common>
 80042a2:	3001      	adds	r0, #1
 80042a4:	d14c      	bne.n	8004340 <_printf_i+0x200>
 80042a6:	f04f 30ff 	mov.w	r0, #4294967295
 80042aa:	b004      	add	sp, #16
 80042ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042b0:	4834      	ldr	r0, [pc, #208]	; (8004384 <_printf_i+0x244>)
 80042b2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80042b6:	6829      	ldr	r1, [r5, #0]
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	f851 6b04 	ldr.w	r6, [r1], #4
 80042be:	6029      	str	r1, [r5, #0]
 80042c0:	061d      	lsls	r5, r3, #24
 80042c2:	d514      	bpl.n	80042ee <_printf_i+0x1ae>
 80042c4:	07df      	lsls	r7, r3, #31
 80042c6:	bf44      	itt	mi
 80042c8:	f043 0320 	orrmi.w	r3, r3, #32
 80042cc:	6023      	strmi	r3, [r4, #0]
 80042ce:	b91e      	cbnz	r6, 80042d8 <_printf_i+0x198>
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	f023 0320 	bic.w	r3, r3, #32
 80042d6:	6023      	str	r3, [r4, #0]
 80042d8:	2310      	movs	r3, #16
 80042da:	e7af      	b.n	800423c <_printf_i+0xfc>
 80042dc:	6823      	ldr	r3, [r4, #0]
 80042de:	f043 0320 	orr.w	r3, r3, #32
 80042e2:	6023      	str	r3, [r4, #0]
 80042e4:	2378      	movs	r3, #120	; 0x78
 80042e6:	4828      	ldr	r0, [pc, #160]	; (8004388 <_printf_i+0x248>)
 80042e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042ec:	e7e3      	b.n	80042b6 <_printf_i+0x176>
 80042ee:	0659      	lsls	r1, r3, #25
 80042f0:	bf48      	it	mi
 80042f2:	b2b6      	uxthmi	r6, r6
 80042f4:	e7e6      	b.n	80042c4 <_printf_i+0x184>
 80042f6:	4615      	mov	r5, r2
 80042f8:	e7bb      	b.n	8004272 <_printf_i+0x132>
 80042fa:	682b      	ldr	r3, [r5, #0]
 80042fc:	6826      	ldr	r6, [r4, #0]
 80042fe:	1d18      	adds	r0, r3, #4
 8004300:	6961      	ldr	r1, [r4, #20]
 8004302:	6028      	str	r0, [r5, #0]
 8004304:	0635      	lsls	r5, r6, #24
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	d501      	bpl.n	800430e <_printf_i+0x1ce>
 800430a:	6019      	str	r1, [r3, #0]
 800430c:	e002      	b.n	8004314 <_printf_i+0x1d4>
 800430e:	0670      	lsls	r0, r6, #25
 8004310:	d5fb      	bpl.n	800430a <_printf_i+0x1ca>
 8004312:	8019      	strh	r1, [r3, #0]
 8004314:	2300      	movs	r3, #0
 8004316:	4615      	mov	r5, r2
 8004318:	6123      	str	r3, [r4, #16]
 800431a:	e7ba      	b.n	8004292 <_printf_i+0x152>
 800431c:	682b      	ldr	r3, [r5, #0]
 800431e:	2100      	movs	r1, #0
 8004320:	1d1a      	adds	r2, r3, #4
 8004322:	602a      	str	r2, [r5, #0]
 8004324:	681d      	ldr	r5, [r3, #0]
 8004326:	6862      	ldr	r2, [r4, #4]
 8004328:	4628      	mov	r0, r5
 800432a:	f000 fe13 	bl	8004f54 <memchr>
 800432e:	b108      	cbz	r0, 8004334 <_printf_i+0x1f4>
 8004330:	1b40      	subs	r0, r0, r5
 8004332:	6060      	str	r0, [r4, #4]
 8004334:	6863      	ldr	r3, [r4, #4]
 8004336:	6123      	str	r3, [r4, #16]
 8004338:	2300      	movs	r3, #0
 800433a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800433e:	e7a8      	b.n	8004292 <_printf_i+0x152>
 8004340:	462a      	mov	r2, r5
 8004342:	4649      	mov	r1, r9
 8004344:	4640      	mov	r0, r8
 8004346:	6923      	ldr	r3, [r4, #16]
 8004348:	47d0      	blx	sl
 800434a:	3001      	adds	r0, #1
 800434c:	d0ab      	beq.n	80042a6 <_printf_i+0x166>
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	079b      	lsls	r3, r3, #30
 8004352:	d413      	bmi.n	800437c <_printf_i+0x23c>
 8004354:	68e0      	ldr	r0, [r4, #12]
 8004356:	9b03      	ldr	r3, [sp, #12]
 8004358:	4298      	cmp	r0, r3
 800435a:	bfb8      	it	lt
 800435c:	4618      	movlt	r0, r3
 800435e:	e7a4      	b.n	80042aa <_printf_i+0x16a>
 8004360:	2301      	movs	r3, #1
 8004362:	4632      	mov	r2, r6
 8004364:	4649      	mov	r1, r9
 8004366:	4640      	mov	r0, r8
 8004368:	47d0      	blx	sl
 800436a:	3001      	adds	r0, #1
 800436c:	d09b      	beq.n	80042a6 <_printf_i+0x166>
 800436e:	3501      	adds	r5, #1
 8004370:	68e3      	ldr	r3, [r4, #12]
 8004372:	9903      	ldr	r1, [sp, #12]
 8004374:	1a5b      	subs	r3, r3, r1
 8004376:	42ab      	cmp	r3, r5
 8004378:	dcf2      	bgt.n	8004360 <_printf_i+0x220>
 800437a:	e7eb      	b.n	8004354 <_printf_i+0x214>
 800437c:	2500      	movs	r5, #0
 800437e:	f104 0619 	add.w	r6, r4, #25
 8004382:	e7f5      	b.n	8004370 <_printf_i+0x230>
 8004384:	0800590d 	.word	0x0800590d
 8004388:	0800591e 	.word	0x0800591e

0800438c <__svfiscanf_r>:
 800438c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004390:	461d      	mov	r5, r3
 8004392:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8004394:	4606      	mov	r6, r0
 8004396:	07df      	lsls	r7, r3, #31
 8004398:	460c      	mov	r4, r1
 800439a:	4692      	mov	sl, r2
 800439c:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80043a0:	d405      	bmi.n	80043ae <__svfiscanf_r+0x22>
 80043a2:	898b      	ldrh	r3, [r1, #12]
 80043a4:	0598      	lsls	r0, r3, #22
 80043a6:	d402      	bmi.n	80043ae <__svfiscanf_r+0x22>
 80043a8:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80043aa:	f7fe ff38 	bl	800321e <__retarget_lock_acquire_recursive>
 80043ae:	2300      	movs	r3, #0
 80043b0:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 80043b4:	4ba6      	ldr	r3, [pc, #664]	; (8004650 <__svfiscanf_r+0x2c4>)
 80043b6:	f10d 0804 	add.w	r8, sp, #4
 80043ba:	93a0      	str	r3, [sp, #640]	; 0x280
 80043bc:	4ba5      	ldr	r3, [pc, #660]	; (8004654 <__svfiscanf_r+0x2c8>)
 80043be:	4fa6      	ldr	r7, [pc, #664]	; (8004658 <__svfiscanf_r+0x2cc>)
 80043c0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800465c <__svfiscanf_r+0x2d0>
 80043c4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80043c8:	93a1      	str	r3, [sp, #644]	; 0x284
 80043ca:	9500      	str	r5, [sp, #0]
 80043cc:	f89a 3000 	ldrb.w	r3, [sl]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 8173 	beq.w	80046bc <__svfiscanf_r+0x330>
 80043d6:	5dd9      	ldrb	r1, [r3, r7]
 80043d8:	f10a 0501 	add.w	r5, sl, #1
 80043dc:	f011 0108 	ands.w	r1, r1, #8
 80043e0:	d019      	beq.n	8004416 <__svfiscanf_r+0x8a>
 80043e2:	6863      	ldr	r3, [r4, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	dd0f      	ble.n	8004408 <__svfiscanf_r+0x7c>
 80043e8:	6823      	ldr	r3, [r4, #0]
 80043ea:	781a      	ldrb	r2, [r3, #0]
 80043ec:	5cba      	ldrb	r2, [r7, r2]
 80043ee:	0711      	lsls	r1, r2, #28
 80043f0:	d401      	bmi.n	80043f6 <__svfiscanf_r+0x6a>
 80043f2:	46aa      	mov	sl, r5
 80043f4:	e7ea      	b.n	80043cc <__svfiscanf_r+0x40>
 80043f6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80043f8:	3301      	adds	r3, #1
 80043fa:	3201      	adds	r2, #1
 80043fc:	9245      	str	r2, [sp, #276]	; 0x114
 80043fe:	6862      	ldr	r2, [r4, #4]
 8004400:	6023      	str	r3, [r4, #0]
 8004402:	3a01      	subs	r2, #1
 8004404:	6062      	str	r2, [r4, #4]
 8004406:	e7ec      	b.n	80043e2 <__svfiscanf_r+0x56>
 8004408:	4621      	mov	r1, r4
 800440a:	4630      	mov	r0, r6
 800440c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800440e:	4798      	blx	r3
 8004410:	2800      	cmp	r0, #0
 8004412:	d0e9      	beq.n	80043e8 <__svfiscanf_r+0x5c>
 8004414:	e7ed      	b.n	80043f2 <__svfiscanf_r+0x66>
 8004416:	2b25      	cmp	r3, #37	; 0x25
 8004418:	d012      	beq.n	8004440 <__svfiscanf_r+0xb4>
 800441a:	469a      	mov	sl, r3
 800441c:	6863      	ldr	r3, [r4, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	f340 8095 	ble.w	800454e <__svfiscanf_r+0x1c2>
 8004424:	6822      	ldr	r2, [r4, #0]
 8004426:	7813      	ldrb	r3, [r2, #0]
 8004428:	4553      	cmp	r3, sl
 800442a:	f040 8147 	bne.w	80046bc <__svfiscanf_r+0x330>
 800442e:	6863      	ldr	r3, [r4, #4]
 8004430:	3201      	adds	r2, #1
 8004432:	3b01      	subs	r3, #1
 8004434:	6063      	str	r3, [r4, #4]
 8004436:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004438:	6022      	str	r2, [r4, #0]
 800443a:	3301      	adds	r3, #1
 800443c:	9345      	str	r3, [sp, #276]	; 0x114
 800443e:	e7d8      	b.n	80043f2 <__svfiscanf_r+0x66>
 8004440:	9141      	str	r1, [sp, #260]	; 0x104
 8004442:	9143      	str	r1, [sp, #268]	; 0x10c
 8004444:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8004448:	220a      	movs	r2, #10
 800444a:	2b2a      	cmp	r3, #42	; 0x2a
 800444c:	bf02      	ittt	eq
 800444e:	2310      	moveq	r3, #16
 8004450:	f10a 0502 	addeq.w	r5, sl, #2
 8004454:	9341      	streq	r3, [sp, #260]	; 0x104
 8004456:	46aa      	mov	sl, r5
 8004458:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800445c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8004460:	2b09      	cmp	r3, #9
 8004462:	d91e      	bls.n	80044a2 <__svfiscanf_r+0x116>
 8004464:	2203      	movs	r2, #3
 8004466:	487d      	ldr	r0, [pc, #500]	; (800465c <__svfiscanf_r+0x2d0>)
 8004468:	f000 fd74 	bl	8004f54 <memchr>
 800446c:	b140      	cbz	r0, 8004480 <__svfiscanf_r+0xf4>
 800446e:	2301      	movs	r3, #1
 8004470:	4655      	mov	r5, sl
 8004472:	eba0 0009 	sub.w	r0, r0, r9
 8004476:	fa03 f000 	lsl.w	r0, r3, r0
 800447a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800447c:	4318      	orrs	r0, r3
 800447e:	9041      	str	r0, [sp, #260]	; 0x104
 8004480:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004484:	2b78      	cmp	r3, #120	; 0x78
 8004486:	d807      	bhi.n	8004498 <__svfiscanf_r+0x10c>
 8004488:	2b57      	cmp	r3, #87	; 0x57
 800448a:	d811      	bhi.n	80044b0 <__svfiscanf_r+0x124>
 800448c:	2b25      	cmp	r3, #37	; 0x25
 800448e:	d0c4      	beq.n	800441a <__svfiscanf_r+0x8e>
 8004490:	d858      	bhi.n	8004544 <__svfiscanf_r+0x1b8>
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 80c8 	beq.w	8004628 <__svfiscanf_r+0x29c>
 8004498:	2303      	movs	r3, #3
 800449a:	9347      	str	r3, [sp, #284]	; 0x11c
 800449c:	230a      	movs	r3, #10
 800449e:	9342      	str	r3, [sp, #264]	; 0x108
 80044a0:	e07c      	b.n	800459c <__svfiscanf_r+0x210>
 80044a2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80044a4:	4655      	mov	r5, sl
 80044a6:	fb02 1103 	mla	r1, r2, r3, r1
 80044aa:	3930      	subs	r1, #48	; 0x30
 80044ac:	9143      	str	r1, [sp, #268]	; 0x10c
 80044ae:	e7d2      	b.n	8004456 <__svfiscanf_r+0xca>
 80044b0:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80044b4:	2a20      	cmp	r2, #32
 80044b6:	d8ef      	bhi.n	8004498 <__svfiscanf_r+0x10c>
 80044b8:	a101      	add	r1, pc, #4	; (adr r1, 80044c0 <__svfiscanf_r+0x134>)
 80044ba:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80044be:	bf00      	nop
 80044c0:	08004587 	.word	0x08004587
 80044c4:	08004499 	.word	0x08004499
 80044c8:	08004499 	.word	0x08004499
 80044cc:	080045e5 	.word	0x080045e5
 80044d0:	08004499 	.word	0x08004499
 80044d4:	08004499 	.word	0x08004499
 80044d8:	08004499 	.word	0x08004499
 80044dc:	08004499 	.word	0x08004499
 80044e0:	08004499 	.word	0x08004499
 80044e4:	08004499 	.word	0x08004499
 80044e8:	08004499 	.word	0x08004499
 80044ec:	080045fb 	.word	0x080045fb
 80044f0:	080045d1 	.word	0x080045d1
 80044f4:	0800454b 	.word	0x0800454b
 80044f8:	0800454b 	.word	0x0800454b
 80044fc:	0800454b 	.word	0x0800454b
 8004500:	08004499 	.word	0x08004499
 8004504:	080045d5 	.word	0x080045d5
 8004508:	08004499 	.word	0x08004499
 800450c:	08004499 	.word	0x08004499
 8004510:	08004499 	.word	0x08004499
 8004514:	08004499 	.word	0x08004499
 8004518:	0800460b 	.word	0x0800460b
 800451c:	080045dd 	.word	0x080045dd
 8004520:	0800457f 	.word	0x0800457f
 8004524:	08004499 	.word	0x08004499
 8004528:	08004499 	.word	0x08004499
 800452c:	08004607 	.word	0x08004607
 8004530:	08004499 	.word	0x08004499
 8004534:	080045d1 	.word	0x080045d1
 8004538:	08004499 	.word	0x08004499
 800453c:	08004499 	.word	0x08004499
 8004540:	08004587 	.word	0x08004587
 8004544:	3b45      	subs	r3, #69	; 0x45
 8004546:	2b02      	cmp	r3, #2
 8004548:	d8a6      	bhi.n	8004498 <__svfiscanf_r+0x10c>
 800454a:	2305      	movs	r3, #5
 800454c:	e025      	b.n	800459a <__svfiscanf_r+0x20e>
 800454e:	4621      	mov	r1, r4
 8004550:	4630      	mov	r0, r6
 8004552:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004554:	4798      	blx	r3
 8004556:	2800      	cmp	r0, #0
 8004558:	f43f af64 	beq.w	8004424 <__svfiscanf_r+0x98>
 800455c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800455e:	07da      	lsls	r2, r3, #31
 8004560:	f140 80a4 	bpl.w	80046ac <__svfiscanf_r+0x320>
 8004564:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004566:	2800      	cmp	r0, #0
 8004568:	d067      	beq.n	800463a <__svfiscanf_r+0x2ae>
 800456a:	89a3      	ldrh	r3, [r4, #12]
 800456c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004570:	bf18      	it	ne
 8004572:	f04f 30ff 	movne.w	r0, #4294967295
 8004576:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800457a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800457e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004580:	f042 0220 	orr.w	r2, r2, #32
 8004584:	9241      	str	r2, [sp, #260]	; 0x104
 8004586:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800458c:	9241      	str	r2, [sp, #260]	; 0x104
 800458e:	2210      	movs	r2, #16
 8004590:	2b6f      	cmp	r3, #111	; 0x6f
 8004592:	bf34      	ite	cc
 8004594:	2303      	movcc	r3, #3
 8004596:	2304      	movcs	r3, #4
 8004598:	9242      	str	r2, [sp, #264]	; 0x108
 800459a:	9347      	str	r3, [sp, #284]	; 0x11c
 800459c:	6863      	ldr	r3, [r4, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	dd4e      	ble.n	8004640 <__svfiscanf_r+0x2b4>
 80045a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80045a4:	065b      	lsls	r3, r3, #25
 80045a6:	d404      	bmi.n	80045b2 <__svfiscanf_r+0x226>
 80045a8:	6823      	ldr	r3, [r4, #0]
 80045aa:	781a      	ldrb	r2, [r3, #0]
 80045ac:	5cba      	ldrb	r2, [r7, r2]
 80045ae:	0710      	lsls	r0, r2, #28
 80045b0:	d456      	bmi.n	8004660 <__svfiscanf_r+0x2d4>
 80045b2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	dc65      	bgt.n	8004684 <__svfiscanf_r+0x2f8>
 80045b8:	466b      	mov	r3, sp
 80045ba:	4622      	mov	r2, r4
 80045bc:	4630      	mov	r0, r6
 80045be:	a941      	add	r1, sp, #260	; 0x104
 80045c0:	f000 f8b2 	bl	8004728 <_scanf_chars>
 80045c4:	2801      	cmp	r0, #1
 80045c6:	d079      	beq.n	80046bc <__svfiscanf_r+0x330>
 80045c8:	2802      	cmp	r0, #2
 80045ca:	f47f af12 	bne.w	80043f2 <__svfiscanf_r+0x66>
 80045ce:	e7c5      	b.n	800455c <__svfiscanf_r+0x1d0>
 80045d0:	220a      	movs	r2, #10
 80045d2:	e7dd      	b.n	8004590 <__svfiscanf_r+0x204>
 80045d4:	2300      	movs	r3, #0
 80045d6:	9342      	str	r3, [sp, #264]	; 0x108
 80045d8:	2303      	movs	r3, #3
 80045da:	e7de      	b.n	800459a <__svfiscanf_r+0x20e>
 80045dc:	2308      	movs	r3, #8
 80045de:	9342      	str	r3, [sp, #264]	; 0x108
 80045e0:	2304      	movs	r3, #4
 80045e2:	e7da      	b.n	800459a <__svfiscanf_r+0x20e>
 80045e4:	4629      	mov	r1, r5
 80045e6:	4640      	mov	r0, r8
 80045e8:	f000 fa98 	bl	8004b1c <__sccl>
 80045ec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80045ee:	4605      	mov	r5, r0
 80045f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045f4:	9341      	str	r3, [sp, #260]	; 0x104
 80045f6:	2301      	movs	r3, #1
 80045f8:	e7cf      	b.n	800459a <__svfiscanf_r+0x20e>
 80045fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80045fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004600:	9341      	str	r3, [sp, #260]	; 0x104
 8004602:	2300      	movs	r3, #0
 8004604:	e7c9      	b.n	800459a <__svfiscanf_r+0x20e>
 8004606:	2302      	movs	r3, #2
 8004608:	e7c7      	b.n	800459a <__svfiscanf_r+0x20e>
 800460a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800460c:	06c3      	lsls	r3, r0, #27
 800460e:	f53f aef0 	bmi.w	80043f2 <__svfiscanf_r+0x66>
 8004612:	9b00      	ldr	r3, [sp, #0]
 8004614:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004616:	1d19      	adds	r1, r3, #4
 8004618:	9100      	str	r1, [sp, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f010 0f01 	tst.w	r0, #1
 8004620:	bf14      	ite	ne
 8004622:	801a      	strhne	r2, [r3, #0]
 8004624:	601a      	streq	r2, [r3, #0]
 8004626:	e6e4      	b.n	80043f2 <__svfiscanf_r+0x66>
 8004628:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800462a:	07d8      	lsls	r0, r3, #31
 800462c:	d405      	bmi.n	800463a <__svfiscanf_r+0x2ae>
 800462e:	89a3      	ldrh	r3, [r4, #12]
 8004630:	0599      	lsls	r1, r3, #22
 8004632:	d402      	bmi.n	800463a <__svfiscanf_r+0x2ae>
 8004634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004636:	f7fe fdf3 	bl	8003220 <__retarget_lock_release_recursive>
 800463a:	f04f 30ff 	mov.w	r0, #4294967295
 800463e:	e79a      	b.n	8004576 <__svfiscanf_r+0x1ea>
 8004640:	4621      	mov	r1, r4
 8004642:	4630      	mov	r0, r6
 8004644:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004646:	4798      	blx	r3
 8004648:	2800      	cmp	r0, #0
 800464a:	d0aa      	beq.n	80045a2 <__svfiscanf_r+0x216>
 800464c:	e786      	b.n	800455c <__svfiscanf_r+0x1d0>
 800464e:	bf00      	nop
 8004650:	08004de1 	.word	0x08004de1
 8004654:	08004a05 	.word	0x08004a05
 8004658:	0800594b 	.word	0x0800594b
 800465c:	08005902 	.word	0x08005902
 8004660:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004662:	3201      	adds	r2, #1
 8004664:	9245      	str	r2, [sp, #276]	; 0x114
 8004666:	6862      	ldr	r2, [r4, #4]
 8004668:	3a01      	subs	r2, #1
 800466a:	2a00      	cmp	r2, #0
 800466c:	6062      	str	r2, [r4, #4]
 800466e:	dd02      	ble.n	8004676 <__svfiscanf_r+0x2ea>
 8004670:	3301      	adds	r3, #1
 8004672:	6023      	str	r3, [r4, #0]
 8004674:	e798      	b.n	80045a8 <__svfiscanf_r+0x21c>
 8004676:	4621      	mov	r1, r4
 8004678:	4630      	mov	r0, r6
 800467a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800467c:	4798      	blx	r3
 800467e:	2800      	cmp	r0, #0
 8004680:	d092      	beq.n	80045a8 <__svfiscanf_r+0x21c>
 8004682:	e76b      	b.n	800455c <__svfiscanf_r+0x1d0>
 8004684:	2b04      	cmp	r3, #4
 8004686:	dc06      	bgt.n	8004696 <__svfiscanf_r+0x30a>
 8004688:	466b      	mov	r3, sp
 800468a:	4622      	mov	r2, r4
 800468c:	4630      	mov	r0, r6
 800468e:	a941      	add	r1, sp, #260	; 0x104
 8004690:	f000 f8a4 	bl	80047dc <_scanf_i>
 8004694:	e796      	b.n	80045c4 <__svfiscanf_r+0x238>
 8004696:	4b0f      	ldr	r3, [pc, #60]	; (80046d4 <__svfiscanf_r+0x348>)
 8004698:	2b00      	cmp	r3, #0
 800469a:	f43f aeaa 	beq.w	80043f2 <__svfiscanf_r+0x66>
 800469e:	466b      	mov	r3, sp
 80046a0:	4622      	mov	r2, r4
 80046a2:	4630      	mov	r0, r6
 80046a4:	a941      	add	r1, sp, #260	; 0x104
 80046a6:	f3af 8000 	nop.w
 80046aa:	e78b      	b.n	80045c4 <__svfiscanf_r+0x238>
 80046ac:	89a3      	ldrh	r3, [r4, #12]
 80046ae:	0599      	lsls	r1, r3, #22
 80046b0:	f53f af58 	bmi.w	8004564 <__svfiscanf_r+0x1d8>
 80046b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046b6:	f7fe fdb3 	bl	8003220 <__retarget_lock_release_recursive>
 80046ba:	e753      	b.n	8004564 <__svfiscanf_r+0x1d8>
 80046bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046be:	07da      	lsls	r2, r3, #31
 80046c0:	d405      	bmi.n	80046ce <__svfiscanf_r+0x342>
 80046c2:	89a3      	ldrh	r3, [r4, #12]
 80046c4:	059b      	lsls	r3, r3, #22
 80046c6:	d402      	bmi.n	80046ce <__svfiscanf_r+0x342>
 80046c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046ca:	f7fe fda9 	bl	8003220 <__retarget_lock_release_recursive>
 80046ce:	9844      	ldr	r0, [sp, #272]	; 0x110
 80046d0:	e751      	b.n	8004576 <__svfiscanf_r+0x1ea>
 80046d2:	bf00      	nop
 80046d4:	00000000 	.word	0x00000000

080046d8 <_vfiscanf_r>:
 80046d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046dc:	460c      	mov	r4, r1
 80046de:	4616      	mov	r6, r2
 80046e0:	461f      	mov	r7, r3
 80046e2:	4605      	mov	r5, r0
 80046e4:	b118      	cbz	r0, 80046ee <_vfiscanf_r+0x16>
 80046e6:	6983      	ldr	r3, [r0, #24]
 80046e8:	b90b      	cbnz	r3, 80046ee <_vfiscanf_r+0x16>
 80046ea:	f7fe fcb9 	bl	8003060 <__sinit>
 80046ee:	4b0b      	ldr	r3, [pc, #44]	; (800471c <_vfiscanf_r+0x44>)
 80046f0:	429c      	cmp	r4, r3
 80046f2:	d108      	bne.n	8004706 <_vfiscanf_r+0x2e>
 80046f4:	686c      	ldr	r4, [r5, #4]
 80046f6:	463b      	mov	r3, r7
 80046f8:	4632      	mov	r2, r6
 80046fa:	4621      	mov	r1, r4
 80046fc:	4628      	mov	r0, r5
 80046fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004702:	f7ff be43 	b.w	800438c <__svfiscanf_r>
 8004706:	4b06      	ldr	r3, [pc, #24]	; (8004720 <_vfiscanf_r+0x48>)
 8004708:	429c      	cmp	r4, r3
 800470a:	d101      	bne.n	8004710 <_vfiscanf_r+0x38>
 800470c:	68ac      	ldr	r4, [r5, #8]
 800470e:	e7f2      	b.n	80046f6 <_vfiscanf_r+0x1e>
 8004710:	4b04      	ldr	r3, [pc, #16]	; (8004724 <_vfiscanf_r+0x4c>)
 8004712:	429c      	cmp	r4, r3
 8004714:	bf08      	it	eq
 8004716:	68ec      	ldreq	r4, [r5, #12]
 8004718:	e7ed      	b.n	80046f6 <_vfiscanf_r+0x1e>
 800471a:	bf00      	nop
 800471c:	080058b8 	.word	0x080058b8
 8004720:	080058d8 	.word	0x080058d8
 8004724:	08005898 	.word	0x08005898

08004728 <_scanf_chars>:
 8004728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800472c:	4615      	mov	r5, r2
 800472e:	688a      	ldr	r2, [r1, #8]
 8004730:	4680      	mov	r8, r0
 8004732:	460c      	mov	r4, r1
 8004734:	b932      	cbnz	r2, 8004744 <_scanf_chars+0x1c>
 8004736:	698a      	ldr	r2, [r1, #24]
 8004738:	2a00      	cmp	r2, #0
 800473a:	bf0c      	ite	eq
 800473c:	2201      	moveq	r2, #1
 800473e:	f04f 32ff 	movne.w	r2, #4294967295
 8004742:	608a      	str	r2, [r1, #8]
 8004744:	2700      	movs	r7, #0
 8004746:	6822      	ldr	r2, [r4, #0]
 8004748:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80047d8 <_scanf_chars+0xb0>
 800474c:	06d1      	lsls	r1, r2, #27
 800474e:	bf5f      	itttt	pl
 8004750:	681a      	ldrpl	r2, [r3, #0]
 8004752:	1d11      	addpl	r1, r2, #4
 8004754:	6019      	strpl	r1, [r3, #0]
 8004756:	6816      	ldrpl	r6, [r2, #0]
 8004758:	69a0      	ldr	r0, [r4, #24]
 800475a:	b188      	cbz	r0, 8004780 <_scanf_chars+0x58>
 800475c:	2801      	cmp	r0, #1
 800475e:	d107      	bne.n	8004770 <_scanf_chars+0x48>
 8004760:	682b      	ldr	r3, [r5, #0]
 8004762:	781a      	ldrb	r2, [r3, #0]
 8004764:	6963      	ldr	r3, [r4, #20]
 8004766:	5c9b      	ldrb	r3, [r3, r2]
 8004768:	b953      	cbnz	r3, 8004780 <_scanf_chars+0x58>
 800476a:	2f00      	cmp	r7, #0
 800476c:	d031      	beq.n	80047d2 <_scanf_chars+0xaa>
 800476e:	e022      	b.n	80047b6 <_scanf_chars+0x8e>
 8004770:	2802      	cmp	r0, #2
 8004772:	d120      	bne.n	80047b6 <_scanf_chars+0x8e>
 8004774:	682b      	ldr	r3, [r5, #0]
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	f813 3009 	ldrb.w	r3, [r3, r9]
 800477c:	071b      	lsls	r3, r3, #28
 800477e:	d41a      	bmi.n	80047b6 <_scanf_chars+0x8e>
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	3701      	adds	r7, #1
 8004784:	06da      	lsls	r2, r3, #27
 8004786:	bf5e      	ittt	pl
 8004788:	682b      	ldrpl	r3, [r5, #0]
 800478a:	781b      	ldrbpl	r3, [r3, #0]
 800478c:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004790:	682a      	ldr	r2, [r5, #0]
 8004792:	686b      	ldr	r3, [r5, #4]
 8004794:	3201      	adds	r2, #1
 8004796:	602a      	str	r2, [r5, #0]
 8004798:	68a2      	ldr	r2, [r4, #8]
 800479a:	3b01      	subs	r3, #1
 800479c:	3a01      	subs	r2, #1
 800479e:	606b      	str	r3, [r5, #4]
 80047a0:	60a2      	str	r2, [r4, #8]
 80047a2:	b142      	cbz	r2, 80047b6 <_scanf_chars+0x8e>
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	dcd7      	bgt.n	8004758 <_scanf_chars+0x30>
 80047a8:	4629      	mov	r1, r5
 80047aa:	4640      	mov	r0, r8
 80047ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80047b0:	4798      	blx	r3
 80047b2:	2800      	cmp	r0, #0
 80047b4:	d0d0      	beq.n	8004758 <_scanf_chars+0x30>
 80047b6:	6823      	ldr	r3, [r4, #0]
 80047b8:	f013 0310 	ands.w	r3, r3, #16
 80047bc:	d105      	bne.n	80047ca <_scanf_chars+0xa2>
 80047be:	68e2      	ldr	r2, [r4, #12]
 80047c0:	3201      	adds	r2, #1
 80047c2:	60e2      	str	r2, [r4, #12]
 80047c4:	69a2      	ldr	r2, [r4, #24]
 80047c6:	b102      	cbz	r2, 80047ca <_scanf_chars+0xa2>
 80047c8:	7033      	strb	r3, [r6, #0]
 80047ca:	2000      	movs	r0, #0
 80047cc:	6923      	ldr	r3, [r4, #16]
 80047ce:	443b      	add	r3, r7
 80047d0:	6123      	str	r3, [r4, #16]
 80047d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047d6:	bf00      	nop
 80047d8:	0800594b 	.word	0x0800594b

080047dc <_scanf_i>:
 80047dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e0:	460c      	mov	r4, r1
 80047e2:	4698      	mov	r8, r3
 80047e4:	4b75      	ldr	r3, [pc, #468]	; (80049bc <_scanf_i+0x1e0>)
 80047e6:	b087      	sub	sp, #28
 80047e8:	4682      	mov	sl, r0
 80047ea:	4616      	mov	r6, r2
 80047ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80047f0:	ab03      	add	r3, sp, #12
 80047f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80047f6:	4b72      	ldr	r3, [pc, #456]	; (80049c0 <_scanf_i+0x1e4>)
 80047f8:	69a1      	ldr	r1, [r4, #24]
 80047fa:	4a72      	ldr	r2, [pc, #456]	; (80049c4 <_scanf_i+0x1e8>)
 80047fc:	4627      	mov	r7, r4
 80047fe:	2903      	cmp	r1, #3
 8004800:	bf18      	it	ne
 8004802:	461a      	movne	r2, r3
 8004804:	68a3      	ldr	r3, [r4, #8]
 8004806:	9201      	str	r2, [sp, #4]
 8004808:	1e5a      	subs	r2, r3, #1
 800480a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800480e:	bf81      	itttt	hi
 8004810:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004814:	eb03 0905 	addhi.w	r9, r3, r5
 8004818:	f240 135d 	movwhi	r3, #349	; 0x15d
 800481c:	60a3      	strhi	r3, [r4, #8]
 800481e:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004822:	bf98      	it	ls
 8004824:	f04f 0900 	movls.w	r9, #0
 8004828:	463d      	mov	r5, r7
 800482a:	f04f 0b00 	mov.w	fp, #0
 800482e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004832:	6023      	str	r3, [r4, #0]
 8004834:	6831      	ldr	r1, [r6, #0]
 8004836:	ab03      	add	r3, sp, #12
 8004838:	2202      	movs	r2, #2
 800483a:	7809      	ldrb	r1, [r1, #0]
 800483c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004840:	f000 fb88 	bl	8004f54 <memchr>
 8004844:	b328      	cbz	r0, 8004892 <_scanf_i+0xb6>
 8004846:	f1bb 0f01 	cmp.w	fp, #1
 800484a:	d159      	bne.n	8004900 <_scanf_i+0x124>
 800484c:	6862      	ldr	r2, [r4, #4]
 800484e:	b92a      	cbnz	r2, 800485c <_scanf_i+0x80>
 8004850:	2308      	movs	r3, #8
 8004852:	6822      	ldr	r2, [r4, #0]
 8004854:	6063      	str	r3, [r4, #4]
 8004856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800485a:	6022      	str	r2, [r4, #0]
 800485c:	6822      	ldr	r2, [r4, #0]
 800485e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004862:	6022      	str	r2, [r4, #0]
 8004864:	68a2      	ldr	r2, [r4, #8]
 8004866:	1e51      	subs	r1, r2, #1
 8004868:	60a1      	str	r1, [r4, #8]
 800486a:	b192      	cbz	r2, 8004892 <_scanf_i+0xb6>
 800486c:	6832      	ldr	r2, [r6, #0]
 800486e:	1c51      	adds	r1, r2, #1
 8004870:	6031      	str	r1, [r6, #0]
 8004872:	7812      	ldrb	r2, [r2, #0]
 8004874:	f805 2b01 	strb.w	r2, [r5], #1
 8004878:	6872      	ldr	r2, [r6, #4]
 800487a:	3a01      	subs	r2, #1
 800487c:	2a00      	cmp	r2, #0
 800487e:	6072      	str	r2, [r6, #4]
 8004880:	dc07      	bgt.n	8004892 <_scanf_i+0xb6>
 8004882:	4631      	mov	r1, r6
 8004884:	4650      	mov	r0, sl
 8004886:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800488a:	4790      	blx	r2
 800488c:	2800      	cmp	r0, #0
 800488e:	f040 8085 	bne.w	800499c <_scanf_i+0x1c0>
 8004892:	f10b 0b01 	add.w	fp, fp, #1
 8004896:	f1bb 0f03 	cmp.w	fp, #3
 800489a:	d1cb      	bne.n	8004834 <_scanf_i+0x58>
 800489c:	6863      	ldr	r3, [r4, #4]
 800489e:	b90b      	cbnz	r3, 80048a4 <_scanf_i+0xc8>
 80048a0:	230a      	movs	r3, #10
 80048a2:	6063      	str	r3, [r4, #4]
 80048a4:	6863      	ldr	r3, [r4, #4]
 80048a6:	4948      	ldr	r1, [pc, #288]	; (80049c8 <_scanf_i+0x1ec>)
 80048a8:	6960      	ldr	r0, [r4, #20]
 80048aa:	1ac9      	subs	r1, r1, r3
 80048ac:	f000 f936 	bl	8004b1c <__sccl>
 80048b0:	f04f 0b00 	mov.w	fp, #0
 80048b4:	68a3      	ldr	r3, [r4, #8]
 80048b6:	6822      	ldr	r2, [r4, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d03d      	beq.n	8004938 <_scanf_i+0x15c>
 80048bc:	6831      	ldr	r1, [r6, #0]
 80048be:	6960      	ldr	r0, [r4, #20]
 80048c0:	f891 c000 	ldrb.w	ip, [r1]
 80048c4:	f810 000c 	ldrb.w	r0, [r0, ip]
 80048c8:	2800      	cmp	r0, #0
 80048ca:	d035      	beq.n	8004938 <_scanf_i+0x15c>
 80048cc:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80048d0:	d124      	bne.n	800491c <_scanf_i+0x140>
 80048d2:	0510      	lsls	r0, r2, #20
 80048d4:	d522      	bpl.n	800491c <_scanf_i+0x140>
 80048d6:	f10b 0b01 	add.w	fp, fp, #1
 80048da:	f1b9 0f00 	cmp.w	r9, #0
 80048de:	d003      	beq.n	80048e8 <_scanf_i+0x10c>
 80048e0:	3301      	adds	r3, #1
 80048e2:	f109 39ff 	add.w	r9, r9, #4294967295
 80048e6:	60a3      	str	r3, [r4, #8]
 80048e8:	6873      	ldr	r3, [r6, #4]
 80048ea:	3b01      	subs	r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	6073      	str	r3, [r6, #4]
 80048f0:	dd1b      	ble.n	800492a <_scanf_i+0x14e>
 80048f2:	6833      	ldr	r3, [r6, #0]
 80048f4:	3301      	adds	r3, #1
 80048f6:	6033      	str	r3, [r6, #0]
 80048f8:	68a3      	ldr	r3, [r4, #8]
 80048fa:	3b01      	subs	r3, #1
 80048fc:	60a3      	str	r3, [r4, #8]
 80048fe:	e7d9      	b.n	80048b4 <_scanf_i+0xd8>
 8004900:	f1bb 0f02 	cmp.w	fp, #2
 8004904:	d1ae      	bne.n	8004864 <_scanf_i+0x88>
 8004906:	6822      	ldr	r2, [r4, #0]
 8004908:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800490c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004910:	d1bf      	bne.n	8004892 <_scanf_i+0xb6>
 8004912:	2310      	movs	r3, #16
 8004914:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004918:	6063      	str	r3, [r4, #4]
 800491a:	e7a2      	b.n	8004862 <_scanf_i+0x86>
 800491c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004920:	6022      	str	r2, [r4, #0]
 8004922:	780b      	ldrb	r3, [r1, #0]
 8004924:	f805 3b01 	strb.w	r3, [r5], #1
 8004928:	e7de      	b.n	80048e8 <_scanf_i+0x10c>
 800492a:	4631      	mov	r1, r6
 800492c:	4650      	mov	r0, sl
 800492e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004932:	4798      	blx	r3
 8004934:	2800      	cmp	r0, #0
 8004936:	d0df      	beq.n	80048f8 <_scanf_i+0x11c>
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	05db      	lsls	r3, r3, #23
 800493c:	d50d      	bpl.n	800495a <_scanf_i+0x17e>
 800493e:	42bd      	cmp	r5, r7
 8004940:	d909      	bls.n	8004956 <_scanf_i+0x17a>
 8004942:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004946:	4632      	mov	r2, r6
 8004948:	4650      	mov	r0, sl
 800494a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800494e:	f105 39ff 	add.w	r9, r5, #4294967295
 8004952:	4798      	blx	r3
 8004954:	464d      	mov	r5, r9
 8004956:	42bd      	cmp	r5, r7
 8004958:	d02d      	beq.n	80049b6 <_scanf_i+0x1da>
 800495a:	6822      	ldr	r2, [r4, #0]
 800495c:	f012 0210 	ands.w	r2, r2, #16
 8004960:	d113      	bne.n	800498a <_scanf_i+0x1ae>
 8004962:	702a      	strb	r2, [r5, #0]
 8004964:	4639      	mov	r1, r7
 8004966:	6863      	ldr	r3, [r4, #4]
 8004968:	4650      	mov	r0, sl
 800496a:	9e01      	ldr	r6, [sp, #4]
 800496c:	47b0      	blx	r6
 800496e:	6821      	ldr	r1, [r4, #0]
 8004970:	f8d8 3000 	ldr.w	r3, [r8]
 8004974:	f011 0f20 	tst.w	r1, #32
 8004978:	d013      	beq.n	80049a2 <_scanf_i+0x1c6>
 800497a:	1d1a      	adds	r2, r3, #4
 800497c:	f8c8 2000 	str.w	r2, [r8]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6018      	str	r0, [r3, #0]
 8004984:	68e3      	ldr	r3, [r4, #12]
 8004986:	3301      	adds	r3, #1
 8004988:	60e3      	str	r3, [r4, #12]
 800498a:	2000      	movs	r0, #0
 800498c:	1bed      	subs	r5, r5, r7
 800498e:	44ab      	add	fp, r5
 8004990:	6925      	ldr	r5, [r4, #16]
 8004992:	445d      	add	r5, fp
 8004994:	6125      	str	r5, [r4, #16]
 8004996:	b007      	add	sp, #28
 8004998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800499c:	f04f 0b00 	mov.w	fp, #0
 80049a0:	e7ca      	b.n	8004938 <_scanf_i+0x15c>
 80049a2:	1d1a      	adds	r2, r3, #4
 80049a4:	f8c8 2000 	str.w	r2, [r8]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f011 0f01 	tst.w	r1, #1
 80049ae:	bf14      	ite	ne
 80049b0:	8018      	strhne	r0, [r3, #0]
 80049b2:	6018      	streq	r0, [r3, #0]
 80049b4:	e7e6      	b.n	8004984 <_scanf_i+0x1a8>
 80049b6:	2001      	movs	r0, #1
 80049b8:	e7ed      	b.n	8004996 <_scanf_i+0x1ba>
 80049ba:	bf00      	nop
 80049bc:	08005874 	.word	0x08005874
 80049c0:	08004d6d 	.word	0x08004d6d
 80049c4:	08004c85 	.word	0x08004c85
 80049c8:	08005948 	.word	0x08005948

080049cc <_read_r>:
 80049cc:	b538      	push	{r3, r4, r5, lr}
 80049ce:	4604      	mov	r4, r0
 80049d0:	4608      	mov	r0, r1
 80049d2:	4611      	mov	r1, r2
 80049d4:	2200      	movs	r2, #0
 80049d6:	4d05      	ldr	r5, [pc, #20]	; (80049ec <_read_r+0x20>)
 80049d8:	602a      	str	r2, [r5, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	f7fc fbb8 	bl	8001150 <_read>
 80049e0:	1c43      	adds	r3, r0, #1
 80049e2:	d102      	bne.n	80049ea <_read_r+0x1e>
 80049e4:	682b      	ldr	r3, [r5, #0]
 80049e6:	b103      	cbz	r3, 80049ea <_read_r+0x1e>
 80049e8:	6023      	str	r3, [r4, #0]
 80049ea:	bd38      	pop	{r3, r4, r5, pc}
 80049ec:	20000128 	.word	0x20000128

080049f0 <lflush>:
 80049f0:	8983      	ldrh	r3, [r0, #12]
 80049f2:	f003 0309 	and.w	r3, r3, #9
 80049f6:	2b09      	cmp	r3, #9
 80049f8:	d101      	bne.n	80049fe <lflush+0xe>
 80049fa:	f7fe bac7 	b.w	8002f8c <fflush>
 80049fe:	2000      	movs	r0, #0
 8004a00:	4770      	bx	lr
	...

08004a04 <__srefill_r>:
 8004a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a06:	460c      	mov	r4, r1
 8004a08:	4605      	mov	r5, r0
 8004a0a:	b118      	cbz	r0, 8004a14 <__srefill_r+0x10>
 8004a0c:	6983      	ldr	r3, [r0, #24]
 8004a0e:	b90b      	cbnz	r3, 8004a14 <__srefill_r+0x10>
 8004a10:	f7fe fb26 	bl	8003060 <__sinit>
 8004a14:	4b3c      	ldr	r3, [pc, #240]	; (8004b08 <__srefill_r+0x104>)
 8004a16:	429c      	cmp	r4, r3
 8004a18:	d10a      	bne.n	8004a30 <__srefill_r+0x2c>
 8004a1a:	686c      	ldr	r4, [r5, #4]
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	6063      	str	r3, [r4, #4]
 8004a20:	89a3      	ldrh	r3, [r4, #12]
 8004a22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a26:	069e      	lsls	r6, r3, #26
 8004a28:	d50c      	bpl.n	8004a44 <__srefill_r+0x40>
 8004a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a2e:	e067      	b.n	8004b00 <__srefill_r+0xfc>
 8004a30:	4b36      	ldr	r3, [pc, #216]	; (8004b0c <__srefill_r+0x108>)
 8004a32:	429c      	cmp	r4, r3
 8004a34:	d101      	bne.n	8004a3a <__srefill_r+0x36>
 8004a36:	68ac      	ldr	r4, [r5, #8]
 8004a38:	e7f0      	b.n	8004a1c <__srefill_r+0x18>
 8004a3a:	4b35      	ldr	r3, [pc, #212]	; (8004b10 <__srefill_r+0x10c>)
 8004a3c:	429c      	cmp	r4, r3
 8004a3e:	bf08      	it	eq
 8004a40:	68ec      	ldreq	r4, [r5, #12]
 8004a42:	e7eb      	b.n	8004a1c <__srefill_r+0x18>
 8004a44:	0758      	lsls	r0, r3, #29
 8004a46:	d449      	bmi.n	8004adc <__srefill_r+0xd8>
 8004a48:	06d9      	lsls	r1, r3, #27
 8004a4a:	d405      	bmi.n	8004a58 <__srefill_r+0x54>
 8004a4c:	2309      	movs	r3, #9
 8004a4e:	602b      	str	r3, [r5, #0]
 8004a50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a54:	81a3      	strh	r3, [r4, #12]
 8004a56:	e7e8      	b.n	8004a2a <__srefill_r+0x26>
 8004a58:	071a      	lsls	r2, r3, #28
 8004a5a:	d50b      	bpl.n	8004a74 <__srefill_r+0x70>
 8004a5c:	4621      	mov	r1, r4
 8004a5e:	4628      	mov	r0, r5
 8004a60:	f7fe fa58 	bl	8002f14 <_fflush_r>
 8004a64:	2800      	cmp	r0, #0
 8004a66:	d1e0      	bne.n	8004a2a <__srefill_r+0x26>
 8004a68:	89a3      	ldrh	r3, [r4, #12]
 8004a6a:	60a0      	str	r0, [r4, #8]
 8004a6c:	f023 0308 	bic.w	r3, r3, #8
 8004a70:	81a3      	strh	r3, [r4, #12]
 8004a72:	61a0      	str	r0, [r4, #24]
 8004a74:	89a3      	ldrh	r3, [r4, #12]
 8004a76:	f043 0304 	orr.w	r3, r3, #4
 8004a7a:	81a3      	strh	r3, [r4, #12]
 8004a7c:	6923      	ldr	r3, [r4, #16]
 8004a7e:	b91b      	cbnz	r3, 8004a88 <__srefill_r+0x84>
 8004a80:	4621      	mov	r1, r4
 8004a82:	4628      	mov	r0, r5
 8004a84:	f7fe ffe4 	bl	8003a50 <__smakebuf_r>
 8004a88:	89a6      	ldrh	r6, [r4, #12]
 8004a8a:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8004a8e:	07b3      	lsls	r3, r6, #30
 8004a90:	d00f      	beq.n	8004ab2 <__srefill_r+0xae>
 8004a92:	2301      	movs	r3, #1
 8004a94:	81a3      	strh	r3, [r4, #12]
 8004a96:	4b1f      	ldr	r3, [pc, #124]	; (8004b14 <__srefill_r+0x110>)
 8004a98:	491f      	ldr	r1, [pc, #124]	; (8004b18 <__srefill_r+0x114>)
 8004a9a:	6818      	ldr	r0, [r3, #0]
 8004a9c:	f006 0609 	and.w	r6, r6, #9
 8004aa0:	f7fe fb5c 	bl	800315c <_fwalk>
 8004aa4:	2e09      	cmp	r6, #9
 8004aa6:	81a7      	strh	r7, [r4, #12]
 8004aa8:	d103      	bne.n	8004ab2 <__srefill_r+0xae>
 8004aaa:	4621      	mov	r1, r4
 8004aac:	4628      	mov	r0, r5
 8004aae:	f7fe f9af 	bl	8002e10 <__sflush_r>
 8004ab2:	6922      	ldr	r2, [r4, #16]
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004ab8:	6963      	ldr	r3, [r4, #20]
 8004aba:	6a21      	ldr	r1, [r4, #32]
 8004abc:	6022      	str	r2, [r4, #0]
 8004abe:	47b0      	blx	r6
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	6060      	str	r0, [r4, #4]
 8004ac4:	dc1d      	bgt.n	8004b02 <__srefill_r+0xfe>
 8004ac6:	bf18      	it	ne
 8004ac8:	2200      	movne	r2, #0
 8004aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ace:	bf16      	itet	ne
 8004ad0:	6062      	strne	r2, [r4, #4]
 8004ad2:	f043 0320 	orreq.w	r3, r3, #32
 8004ad6:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8004ada:	e7bb      	b.n	8004a54 <__srefill_r+0x50>
 8004adc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ade:	2900      	cmp	r1, #0
 8004ae0:	d0cc      	beq.n	8004a7c <__srefill_r+0x78>
 8004ae2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ae6:	4299      	cmp	r1, r3
 8004ae8:	d002      	beq.n	8004af0 <__srefill_r+0xec>
 8004aea:	4628      	mov	r0, r5
 8004aec:	f7fe fbb0 	bl	8003250 <_free_r>
 8004af0:	2000      	movs	r0, #0
 8004af2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004af4:	6360      	str	r0, [r4, #52]	; 0x34
 8004af6:	6063      	str	r3, [r4, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d0bf      	beq.n	8004a7c <__srefill_r+0x78>
 8004afc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004afe:	6023      	str	r3, [r4, #0]
 8004b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b02:	2000      	movs	r0, #0
 8004b04:	e7fc      	b.n	8004b00 <__srefill_r+0xfc>
 8004b06:	bf00      	nop
 8004b08:	080058b8 	.word	0x080058b8
 8004b0c:	080058d8 	.word	0x080058d8
 8004b10:	08005898 	.word	0x08005898
 8004b14:	080058f8 	.word	0x080058f8
 8004b18:	080049f1 	.word	0x080049f1

08004b1c <__sccl>:
 8004b1c:	b570      	push	{r4, r5, r6, lr}
 8004b1e:	780b      	ldrb	r3, [r1, #0]
 8004b20:	4604      	mov	r4, r0
 8004b22:	2b5e      	cmp	r3, #94	; 0x5e
 8004b24:	bf13      	iteet	ne
 8004b26:	2200      	movne	r2, #0
 8004b28:	2201      	moveq	r2, #1
 8004b2a:	784b      	ldrbeq	r3, [r1, #1]
 8004b2c:	1c48      	addne	r0, r1, #1
 8004b2e:	bf08      	it	eq
 8004b30:	1c88      	addeq	r0, r1, #2
 8004b32:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004b36:	1e61      	subs	r1, r4, #1
 8004b38:	f801 2f01 	strb.w	r2, [r1, #1]!
 8004b3c:	42a9      	cmp	r1, r5
 8004b3e:	d1fb      	bne.n	8004b38 <__sccl+0x1c>
 8004b40:	b90b      	cbnz	r3, 8004b46 <__sccl+0x2a>
 8004b42:	3801      	subs	r0, #1
 8004b44:	bd70      	pop	{r4, r5, r6, pc}
 8004b46:	f082 0201 	eor.w	r2, r2, #1
 8004b4a:	4605      	mov	r5, r0
 8004b4c:	54e2      	strb	r2, [r4, r3]
 8004b4e:	4628      	mov	r0, r5
 8004b50:	f810 1b01 	ldrb.w	r1, [r0], #1
 8004b54:	292d      	cmp	r1, #45	; 0x2d
 8004b56:	d006      	beq.n	8004b66 <__sccl+0x4a>
 8004b58:	295d      	cmp	r1, #93	; 0x5d
 8004b5a:	d0f3      	beq.n	8004b44 <__sccl+0x28>
 8004b5c:	b909      	cbnz	r1, 8004b62 <__sccl+0x46>
 8004b5e:	4628      	mov	r0, r5
 8004b60:	e7f0      	b.n	8004b44 <__sccl+0x28>
 8004b62:	460b      	mov	r3, r1
 8004b64:	e7f1      	b.n	8004b4a <__sccl+0x2e>
 8004b66:	786e      	ldrb	r6, [r5, #1]
 8004b68:	2e5d      	cmp	r6, #93	; 0x5d
 8004b6a:	d0fa      	beq.n	8004b62 <__sccl+0x46>
 8004b6c:	42b3      	cmp	r3, r6
 8004b6e:	dcf8      	bgt.n	8004b62 <__sccl+0x46>
 8004b70:	4619      	mov	r1, r3
 8004b72:	3502      	adds	r5, #2
 8004b74:	3101      	adds	r1, #1
 8004b76:	428e      	cmp	r6, r1
 8004b78:	5462      	strb	r2, [r4, r1]
 8004b7a:	dcfb      	bgt.n	8004b74 <__sccl+0x58>
 8004b7c:	1af1      	subs	r1, r6, r3
 8004b7e:	3901      	subs	r1, #1
 8004b80:	42b3      	cmp	r3, r6
 8004b82:	bfa8      	it	ge
 8004b84:	2100      	movge	r1, #0
 8004b86:	1c58      	adds	r0, r3, #1
 8004b88:	1843      	adds	r3, r0, r1
 8004b8a:	e7e0      	b.n	8004b4e <__sccl+0x32>

08004b8c <_strtol_l.constprop.0>:
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b92:	4680      	mov	r8, r0
 8004b94:	d001      	beq.n	8004b9a <_strtol_l.constprop.0+0xe>
 8004b96:	2b24      	cmp	r3, #36	; 0x24
 8004b98:	d906      	bls.n	8004ba8 <_strtol_l.constprop.0+0x1c>
 8004b9a:	f7fe f933 	bl	8002e04 <__errno>
 8004b9e:	2316      	movs	r3, #22
 8004ba0:	6003      	str	r3, [r0, #0]
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba8:	460d      	mov	r5, r1
 8004baa:	4f35      	ldr	r7, [pc, #212]	; (8004c80 <_strtol_l.constprop.0+0xf4>)
 8004bac:	4628      	mov	r0, r5
 8004bae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004bb2:	5de6      	ldrb	r6, [r4, r7]
 8004bb4:	f016 0608 	ands.w	r6, r6, #8
 8004bb8:	d1f8      	bne.n	8004bac <_strtol_l.constprop.0+0x20>
 8004bba:	2c2d      	cmp	r4, #45	; 0x2d
 8004bbc:	d12f      	bne.n	8004c1e <_strtol_l.constprop.0+0x92>
 8004bbe:	2601      	movs	r6, #1
 8004bc0:	782c      	ldrb	r4, [r5, #0]
 8004bc2:	1c85      	adds	r5, r0, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d057      	beq.n	8004c78 <_strtol_l.constprop.0+0xec>
 8004bc8:	2b10      	cmp	r3, #16
 8004bca:	d109      	bne.n	8004be0 <_strtol_l.constprop.0+0x54>
 8004bcc:	2c30      	cmp	r4, #48	; 0x30
 8004bce:	d107      	bne.n	8004be0 <_strtol_l.constprop.0+0x54>
 8004bd0:	7828      	ldrb	r0, [r5, #0]
 8004bd2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004bd6:	2858      	cmp	r0, #88	; 0x58
 8004bd8:	d149      	bne.n	8004c6e <_strtol_l.constprop.0+0xe2>
 8004bda:	2310      	movs	r3, #16
 8004bdc:	786c      	ldrb	r4, [r5, #1]
 8004bde:	3502      	adds	r5, #2
 8004be0:	2700      	movs	r7, #0
 8004be2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8004be6:	f10e 3eff 	add.w	lr, lr, #4294967295
 8004bea:	fbbe f9f3 	udiv	r9, lr, r3
 8004bee:	4638      	mov	r0, r7
 8004bf0:	fb03 ea19 	mls	sl, r3, r9, lr
 8004bf4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004bf8:	f1bc 0f09 	cmp.w	ip, #9
 8004bfc:	d814      	bhi.n	8004c28 <_strtol_l.constprop.0+0x9c>
 8004bfe:	4664      	mov	r4, ip
 8004c00:	42a3      	cmp	r3, r4
 8004c02:	dd22      	ble.n	8004c4a <_strtol_l.constprop.0+0xbe>
 8004c04:	2f00      	cmp	r7, #0
 8004c06:	db1d      	blt.n	8004c44 <_strtol_l.constprop.0+0xb8>
 8004c08:	4581      	cmp	r9, r0
 8004c0a:	d31b      	bcc.n	8004c44 <_strtol_l.constprop.0+0xb8>
 8004c0c:	d101      	bne.n	8004c12 <_strtol_l.constprop.0+0x86>
 8004c0e:	45a2      	cmp	sl, r4
 8004c10:	db18      	blt.n	8004c44 <_strtol_l.constprop.0+0xb8>
 8004c12:	2701      	movs	r7, #1
 8004c14:	fb00 4003 	mla	r0, r0, r3, r4
 8004c18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c1c:	e7ea      	b.n	8004bf4 <_strtol_l.constprop.0+0x68>
 8004c1e:	2c2b      	cmp	r4, #43	; 0x2b
 8004c20:	bf04      	itt	eq
 8004c22:	782c      	ldrbeq	r4, [r5, #0]
 8004c24:	1c85      	addeq	r5, r0, #2
 8004c26:	e7cd      	b.n	8004bc4 <_strtol_l.constprop.0+0x38>
 8004c28:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004c2c:	f1bc 0f19 	cmp.w	ip, #25
 8004c30:	d801      	bhi.n	8004c36 <_strtol_l.constprop.0+0xaa>
 8004c32:	3c37      	subs	r4, #55	; 0x37
 8004c34:	e7e4      	b.n	8004c00 <_strtol_l.constprop.0+0x74>
 8004c36:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004c3a:	f1bc 0f19 	cmp.w	ip, #25
 8004c3e:	d804      	bhi.n	8004c4a <_strtol_l.constprop.0+0xbe>
 8004c40:	3c57      	subs	r4, #87	; 0x57
 8004c42:	e7dd      	b.n	8004c00 <_strtol_l.constprop.0+0x74>
 8004c44:	f04f 37ff 	mov.w	r7, #4294967295
 8004c48:	e7e6      	b.n	8004c18 <_strtol_l.constprop.0+0x8c>
 8004c4a:	2f00      	cmp	r7, #0
 8004c4c:	da07      	bge.n	8004c5e <_strtol_l.constprop.0+0xd2>
 8004c4e:	2322      	movs	r3, #34	; 0x22
 8004c50:	4670      	mov	r0, lr
 8004c52:	f8c8 3000 	str.w	r3, [r8]
 8004c56:	2a00      	cmp	r2, #0
 8004c58:	d0a4      	beq.n	8004ba4 <_strtol_l.constprop.0+0x18>
 8004c5a:	1e69      	subs	r1, r5, #1
 8004c5c:	e005      	b.n	8004c6a <_strtol_l.constprop.0+0xde>
 8004c5e:	b106      	cbz	r6, 8004c62 <_strtol_l.constprop.0+0xd6>
 8004c60:	4240      	negs	r0, r0
 8004c62:	2a00      	cmp	r2, #0
 8004c64:	d09e      	beq.n	8004ba4 <_strtol_l.constprop.0+0x18>
 8004c66:	2f00      	cmp	r7, #0
 8004c68:	d1f7      	bne.n	8004c5a <_strtol_l.constprop.0+0xce>
 8004c6a:	6011      	str	r1, [r2, #0]
 8004c6c:	e79a      	b.n	8004ba4 <_strtol_l.constprop.0+0x18>
 8004c6e:	2430      	movs	r4, #48	; 0x30
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1b5      	bne.n	8004be0 <_strtol_l.constprop.0+0x54>
 8004c74:	2308      	movs	r3, #8
 8004c76:	e7b3      	b.n	8004be0 <_strtol_l.constprop.0+0x54>
 8004c78:	2c30      	cmp	r4, #48	; 0x30
 8004c7a:	d0a9      	beq.n	8004bd0 <_strtol_l.constprop.0+0x44>
 8004c7c:	230a      	movs	r3, #10
 8004c7e:	e7af      	b.n	8004be0 <_strtol_l.constprop.0+0x54>
 8004c80:	0800594b 	.word	0x0800594b

08004c84 <_strtol_r>:
 8004c84:	f7ff bf82 	b.w	8004b8c <_strtol_l.constprop.0>

08004c88 <_strtoul_l.constprop.0>:
 8004c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c8c:	4686      	mov	lr, r0
 8004c8e:	460d      	mov	r5, r1
 8004c90:	4f35      	ldr	r7, [pc, #212]	; (8004d68 <_strtoul_l.constprop.0+0xe0>)
 8004c92:	4628      	mov	r0, r5
 8004c94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c98:	5de6      	ldrb	r6, [r4, r7]
 8004c9a:	f016 0608 	ands.w	r6, r6, #8
 8004c9e:	d1f8      	bne.n	8004c92 <_strtoul_l.constprop.0+0xa>
 8004ca0:	2c2d      	cmp	r4, #45	; 0x2d
 8004ca2:	d12f      	bne.n	8004d04 <_strtoul_l.constprop.0+0x7c>
 8004ca4:	2601      	movs	r6, #1
 8004ca6:	782c      	ldrb	r4, [r5, #0]
 8004ca8:	1c85      	adds	r5, r0, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d057      	beq.n	8004d5e <_strtoul_l.constprop.0+0xd6>
 8004cae:	2b10      	cmp	r3, #16
 8004cb0:	d109      	bne.n	8004cc6 <_strtoul_l.constprop.0+0x3e>
 8004cb2:	2c30      	cmp	r4, #48	; 0x30
 8004cb4:	d107      	bne.n	8004cc6 <_strtoul_l.constprop.0+0x3e>
 8004cb6:	7828      	ldrb	r0, [r5, #0]
 8004cb8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004cbc:	2858      	cmp	r0, #88	; 0x58
 8004cbe:	d149      	bne.n	8004d54 <_strtoul_l.constprop.0+0xcc>
 8004cc0:	2310      	movs	r3, #16
 8004cc2:	786c      	ldrb	r4, [r5, #1]
 8004cc4:	3502      	adds	r5, #2
 8004cc6:	f04f 38ff 	mov.w	r8, #4294967295
 8004cca:	fbb8 f8f3 	udiv	r8, r8, r3
 8004cce:	2700      	movs	r7, #0
 8004cd0:	fb03 f908 	mul.w	r9, r3, r8
 8004cd4:	4638      	mov	r0, r7
 8004cd6:	ea6f 0909 	mvn.w	r9, r9
 8004cda:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004cde:	f1bc 0f09 	cmp.w	ip, #9
 8004ce2:	d814      	bhi.n	8004d0e <_strtoul_l.constprop.0+0x86>
 8004ce4:	4664      	mov	r4, ip
 8004ce6:	42a3      	cmp	r3, r4
 8004ce8:	dd22      	ble.n	8004d30 <_strtoul_l.constprop.0+0xa8>
 8004cea:	2f00      	cmp	r7, #0
 8004cec:	db1d      	blt.n	8004d2a <_strtoul_l.constprop.0+0xa2>
 8004cee:	4580      	cmp	r8, r0
 8004cf0:	d31b      	bcc.n	8004d2a <_strtoul_l.constprop.0+0xa2>
 8004cf2:	d101      	bne.n	8004cf8 <_strtoul_l.constprop.0+0x70>
 8004cf4:	45a1      	cmp	r9, r4
 8004cf6:	db18      	blt.n	8004d2a <_strtoul_l.constprop.0+0xa2>
 8004cf8:	2701      	movs	r7, #1
 8004cfa:	fb00 4003 	mla	r0, r0, r3, r4
 8004cfe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004d02:	e7ea      	b.n	8004cda <_strtoul_l.constprop.0+0x52>
 8004d04:	2c2b      	cmp	r4, #43	; 0x2b
 8004d06:	bf04      	itt	eq
 8004d08:	782c      	ldrbeq	r4, [r5, #0]
 8004d0a:	1c85      	addeq	r5, r0, #2
 8004d0c:	e7cd      	b.n	8004caa <_strtoul_l.constprop.0+0x22>
 8004d0e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004d12:	f1bc 0f19 	cmp.w	ip, #25
 8004d16:	d801      	bhi.n	8004d1c <_strtoul_l.constprop.0+0x94>
 8004d18:	3c37      	subs	r4, #55	; 0x37
 8004d1a:	e7e4      	b.n	8004ce6 <_strtoul_l.constprop.0+0x5e>
 8004d1c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004d20:	f1bc 0f19 	cmp.w	ip, #25
 8004d24:	d804      	bhi.n	8004d30 <_strtoul_l.constprop.0+0xa8>
 8004d26:	3c57      	subs	r4, #87	; 0x57
 8004d28:	e7dd      	b.n	8004ce6 <_strtoul_l.constprop.0+0x5e>
 8004d2a:	f04f 37ff 	mov.w	r7, #4294967295
 8004d2e:	e7e6      	b.n	8004cfe <_strtoul_l.constprop.0+0x76>
 8004d30:	2f00      	cmp	r7, #0
 8004d32:	da07      	bge.n	8004d44 <_strtoul_l.constprop.0+0xbc>
 8004d34:	2322      	movs	r3, #34	; 0x22
 8004d36:	f04f 30ff 	mov.w	r0, #4294967295
 8004d3a:	f8ce 3000 	str.w	r3, [lr]
 8004d3e:	b932      	cbnz	r2, 8004d4e <_strtoul_l.constprop.0+0xc6>
 8004d40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d44:	b106      	cbz	r6, 8004d48 <_strtoul_l.constprop.0+0xc0>
 8004d46:	4240      	negs	r0, r0
 8004d48:	2a00      	cmp	r2, #0
 8004d4a:	d0f9      	beq.n	8004d40 <_strtoul_l.constprop.0+0xb8>
 8004d4c:	b107      	cbz	r7, 8004d50 <_strtoul_l.constprop.0+0xc8>
 8004d4e:	1e69      	subs	r1, r5, #1
 8004d50:	6011      	str	r1, [r2, #0]
 8004d52:	e7f5      	b.n	8004d40 <_strtoul_l.constprop.0+0xb8>
 8004d54:	2430      	movs	r4, #48	; 0x30
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1b5      	bne.n	8004cc6 <_strtoul_l.constprop.0+0x3e>
 8004d5a:	2308      	movs	r3, #8
 8004d5c:	e7b3      	b.n	8004cc6 <_strtoul_l.constprop.0+0x3e>
 8004d5e:	2c30      	cmp	r4, #48	; 0x30
 8004d60:	d0a9      	beq.n	8004cb6 <_strtoul_l.constprop.0+0x2e>
 8004d62:	230a      	movs	r3, #10
 8004d64:	e7af      	b.n	8004cc6 <_strtoul_l.constprop.0+0x3e>
 8004d66:	bf00      	nop
 8004d68:	0800594b 	.word	0x0800594b

08004d6c <_strtoul_r>:
 8004d6c:	f7ff bf8c 	b.w	8004c88 <_strtoul_l.constprop.0>

08004d70 <__submore>:
 8004d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d74:	460c      	mov	r4, r1
 8004d76:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004d78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d7c:	4299      	cmp	r1, r3
 8004d7e:	d11b      	bne.n	8004db8 <__submore+0x48>
 8004d80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d84:	f7fe facc 	bl	8003320 <_malloc_r>
 8004d88:	b918      	cbnz	r0, 8004d92 <__submore+0x22>
 8004d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d96:	63a3      	str	r3, [r4, #56]	; 0x38
 8004d98:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004d9c:	6360      	str	r0, [r4, #52]	; 0x34
 8004d9e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004da2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004da6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004daa:	7043      	strb	r3, [r0, #1]
 8004dac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004db0:	7003      	strb	r3, [r0, #0]
 8004db2:	6020      	str	r0, [r4, #0]
 8004db4:	2000      	movs	r0, #0
 8004db6:	e7ea      	b.n	8004d8e <__submore+0x1e>
 8004db8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004dba:	0077      	lsls	r7, r6, #1
 8004dbc:	463a      	mov	r2, r7
 8004dbe:	f000 f8f1 	bl	8004fa4 <_realloc_r>
 8004dc2:	4605      	mov	r5, r0
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	d0e0      	beq.n	8004d8a <__submore+0x1a>
 8004dc8:	eb00 0806 	add.w	r8, r0, r6
 8004dcc:	4601      	mov	r1, r0
 8004dce:	4632      	mov	r2, r6
 8004dd0:	4640      	mov	r0, r8
 8004dd2:	f7fe fa26 	bl	8003222 <memcpy>
 8004dd6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004dda:	f8c4 8000 	str.w	r8, [r4]
 8004dde:	e7e9      	b.n	8004db4 <__submore+0x44>

08004de0 <_ungetc_r>:
 8004de0:	b570      	push	{r4, r5, r6, lr}
 8004de2:	4614      	mov	r4, r2
 8004de4:	1c4a      	adds	r2, r1, #1
 8004de6:	4606      	mov	r6, r0
 8004de8:	460d      	mov	r5, r1
 8004dea:	d103      	bne.n	8004df4 <_ungetc_r+0x14>
 8004dec:	f04f 35ff 	mov.w	r5, #4294967295
 8004df0:	4628      	mov	r0, r5
 8004df2:	bd70      	pop	{r4, r5, r6, pc}
 8004df4:	b118      	cbz	r0, 8004dfe <_ungetc_r+0x1e>
 8004df6:	6983      	ldr	r3, [r0, #24]
 8004df8:	b90b      	cbnz	r3, 8004dfe <_ungetc_r+0x1e>
 8004dfa:	f7fe f931 	bl	8003060 <__sinit>
 8004dfe:	4b41      	ldr	r3, [pc, #260]	; (8004f04 <_ungetc_r+0x124>)
 8004e00:	429c      	cmp	r4, r3
 8004e02:	d11d      	bne.n	8004e40 <_ungetc_r+0x60>
 8004e04:	6874      	ldr	r4, [r6, #4]
 8004e06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e08:	07db      	lsls	r3, r3, #31
 8004e0a:	d405      	bmi.n	8004e18 <_ungetc_r+0x38>
 8004e0c:	89a3      	ldrh	r3, [r4, #12]
 8004e0e:	0598      	lsls	r0, r3, #22
 8004e10:	d402      	bmi.n	8004e18 <_ungetc_r+0x38>
 8004e12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e14:	f7fe fa03 	bl	800321e <__retarget_lock_acquire_recursive>
 8004e18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e1c:	f023 0320 	bic.w	r3, r3, #32
 8004e20:	0759      	lsls	r1, r3, #29
 8004e22:	81a3      	strh	r3, [r4, #12]
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	d42d      	bmi.n	8004e84 <_ungetc_r+0xa4>
 8004e28:	06d3      	lsls	r3, r2, #27
 8004e2a:	d413      	bmi.n	8004e54 <_ungetc_r+0x74>
 8004e2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e2e:	07dd      	lsls	r5, r3, #31
 8004e30:	d4dc      	bmi.n	8004dec <_ungetc_r+0xc>
 8004e32:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004e36:	d1d9      	bne.n	8004dec <_ungetc_r+0xc>
 8004e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e3a:	f7fe f9f1 	bl	8003220 <__retarget_lock_release_recursive>
 8004e3e:	e7d5      	b.n	8004dec <_ungetc_r+0xc>
 8004e40:	4b31      	ldr	r3, [pc, #196]	; (8004f08 <_ungetc_r+0x128>)
 8004e42:	429c      	cmp	r4, r3
 8004e44:	d101      	bne.n	8004e4a <_ungetc_r+0x6a>
 8004e46:	68b4      	ldr	r4, [r6, #8]
 8004e48:	e7dd      	b.n	8004e06 <_ungetc_r+0x26>
 8004e4a:	4b30      	ldr	r3, [pc, #192]	; (8004f0c <_ungetc_r+0x12c>)
 8004e4c:	429c      	cmp	r4, r3
 8004e4e:	bf08      	it	eq
 8004e50:	68f4      	ldreq	r4, [r6, #12]
 8004e52:	e7d8      	b.n	8004e06 <_ungetc_r+0x26>
 8004e54:	0710      	lsls	r0, r2, #28
 8004e56:	d511      	bpl.n	8004e7c <_ungetc_r+0x9c>
 8004e58:	4621      	mov	r1, r4
 8004e5a:	4630      	mov	r0, r6
 8004e5c:	f7fe f85a 	bl	8002f14 <_fflush_r>
 8004e60:	b130      	cbz	r0, 8004e70 <_ungetc_r+0x90>
 8004e62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e64:	07d9      	lsls	r1, r3, #31
 8004e66:	d4c1      	bmi.n	8004dec <_ungetc_r+0xc>
 8004e68:	89a3      	ldrh	r3, [r4, #12]
 8004e6a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004e6e:	e7e2      	b.n	8004e36 <_ungetc_r+0x56>
 8004e70:	89a3      	ldrh	r3, [r4, #12]
 8004e72:	60a0      	str	r0, [r4, #8]
 8004e74:	f023 0308 	bic.w	r3, r3, #8
 8004e78:	81a3      	strh	r3, [r4, #12]
 8004e7a:	61a0      	str	r0, [r4, #24]
 8004e7c:	89a3      	ldrh	r3, [r4, #12]
 8004e7e:	f043 0304 	orr.w	r3, r3, #4
 8004e82:	81a3      	strh	r3, [r4, #12]
 8004e84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e86:	6862      	ldr	r2, [r4, #4]
 8004e88:	b2ed      	uxtb	r5, r5
 8004e8a:	b1d3      	cbz	r3, 8004ec2 <_ungetc_r+0xe2>
 8004e8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	dc05      	bgt.n	8004e9e <_ungetc_r+0xbe>
 8004e92:	4621      	mov	r1, r4
 8004e94:	4630      	mov	r0, r6
 8004e96:	f7ff ff6b 	bl	8004d70 <__submore>
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	d1e1      	bne.n	8004e62 <_ungetc_r+0x82>
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	1e5a      	subs	r2, r3, #1
 8004ea2:	6022      	str	r2, [r4, #0]
 8004ea4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004ea8:	6863      	ldr	r3, [r4, #4]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	6063      	str	r3, [r4, #4]
 8004eae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004eb0:	07da      	lsls	r2, r3, #31
 8004eb2:	d49d      	bmi.n	8004df0 <_ungetc_r+0x10>
 8004eb4:	89a3      	ldrh	r3, [r4, #12]
 8004eb6:	059b      	lsls	r3, r3, #22
 8004eb8:	d49a      	bmi.n	8004df0 <_ungetc_r+0x10>
 8004eba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ebc:	f7fe f9b0 	bl	8003220 <__retarget_lock_release_recursive>
 8004ec0:	e796      	b.n	8004df0 <_ungetc_r+0x10>
 8004ec2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004ec4:	6920      	ldr	r0, [r4, #16]
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	f001 0101 	and.w	r1, r1, #1
 8004ecc:	b160      	cbz	r0, 8004ee8 <_ungetc_r+0x108>
 8004ece:	4298      	cmp	r0, r3
 8004ed0:	d20a      	bcs.n	8004ee8 <_ungetc_r+0x108>
 8004ed2:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8004ed6:	42a8      	cmp	r0, r5
 8004ed8:	d106      	bne.n	8004ee8 <_ungetc_r+0x108>
 8004eda:	3b01      	subs	r3, #1
 8004edc:	3201      	adds	r2, #1
 8004ede:	6023      	str	r3, [r4, #0]
 8004ee0:	6062      	str	r2, [r4, #4]
 8004ee2:	2900      	cmp	r1, #0
 8004ee4:	d184      	bne.n	8004df0 <_ungetc_r+0x10>
 8004ee6:	e7e5      	b.n	8004eb4 <_ungetc_r+0xd4>
 8004ee8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004eec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ef0:	6363      	str	r3, [r4, #52]	; 0x34
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	63a3      	str	r3, [r4, #56]	; 0x38
 8004ef6:	4623      	mov	r3, r4
 8004ef8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004efc:	6023      	str	r3, [r4, #0]
 8004efe:	2301      	movs	r3, #1
 8004f00:	6063      	str	r3, [r4, #4]
 8004f02:	e7ee      	b.n	8004ee2 <_ungetc_r+0x102>
 8004f04:	080058b8 	.word	0x080058b8
 8004f08:	080058d8 	.word	0x080058d8
 8004f0c:	08005898 	.word	0x08005898

08004f10 <_fstat_r>:
 8004f10:	b538      	push	{r3, r4, r5, lr}
 8004f12:	2300      	movs	r3, #0
 8004f14:	4d06      	ldr	r5, [pc, #24]	; (8004f30 <_fstat_r+0x20>)
 8004f16:	4604      	mov	r4, r0
 8004f18:	4608      	mov	r0, r1
 8004f1a:	4611      	mov	r1, r2
 8004f1c:	602b      	str	r3, [r5, #0]
 8004f1e:	f7fc f95b 	bl	80011d8 <_fstat>
 8004f22:	1c43      	adds	r3, r0, #1
 8004f24:	d102      	bne.n	8004f2c <_fstat_r+0x1c>
 8004f26:	682b      	ldr	r3, [r5, #0]
 8004f28:	b103      	cbz	r3, 8004f2c <_fstat_r+0x1c>
 8004f2a:	6023      	str	r3, [r4, #0]
 8004f2c:	bd38      	pop	{r3, r4, r5, pc}
 8004f2e:	bf00      	nop
 8004f30:	20000128 	.word	0x20000128

08004f34 <_isatty_r>:
 8004f34:	b538      	push	{r3, r4, r5, lr}
 8004f36:	2300      	movs	r3, #0
 8004f38:	4d05      	ldr	r5, [pc, #20]	; (8004f50 <_isatty_r+0x1c>)
 8004f3a:	4604      	mov	r4, r0
 8004f3c:	4608      	mov	r0, r1
 8004f3e:	602b      	str	r3, [r5, #0]
 8004f40:	f7fc f959 	bl	80011f6 <_isatty>
 8004f44:	1c43      	adds	r3, r0, #1
 8004f46:	d102      	bne.n	8004f4e <_isatty_r+0x1a>
 8004f48:	682b      	ldr	r3, [r5, #0]
 8004f4a:	b103      	cbz	r3, 8004f4e <_isatty_r+0x1a>
 8004f4c:	6023      	str	r3, [r4, #0]
 8004f4e:	bd38      	pop	{r3, r4, r5, pc}
 8004f50:	20000128 	.word	0x20000128

08004f54 <memchr>:
 8004f54:	4603      	mov	r3, r0
 8004f56:	b510      	push	{r4, lr}
 8004f58:	b2c9      	uxtb	r1, r1
 8004f5a:	4402      	add	r2, r0
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	4618      	mov	r0, r3
 8004f60:	d101      	bne.n	8004f66 <memchr+0x12>
 8004f62:	2000      	movs	r0, #0
 8004f64:	e003      	b.n	8004f6e <memchr+0x1a>
 8004f66:	7804      	ldrb	r4, [r0, #0]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	428c      	cmp	r4, r1
 8004f6c:	d1f6      	bne.n	8004f5c <memchr+0x8>
 8004f6e:	bd10      	pop	{r4, pc}

08004f70 <memmove>:
 8004f70:	4288      	cmp	r0, r1
 8004f72:	b510      	push	{r4, lr}
 8004f74:	eb01 0402 	add.w	r4, r1, r2
 8004f78:	d902      	bls.n	8004f80 <memmove+0x10>
 8004f7a:	4284      	cmp	r4, r0
 8004f7c:	4623      	mov	r3, r4
 8004f7e:	d807      	bhi.n	8004f90 <memmove+0x20>
 8004f80:	1e43      	subs	r3, r0, #1
 8004f82:	42a1      	cmp	r1, r4
 8004f84:	d008      	beq.n	8004f98 <memmove+0x28>
 8004f86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f8e:	e7f8      	b.n	8004f82 <memmove+0x12>
 8004f90:	4601      	mov	r1, r0
 8004f92:	4402      	add	r2, r0
 8004f94:	428a      	cmp	r2, r1
 8004f96:	d100      	bne.n	8004f9a <memmove+0x2a>
 8004f98:	bd10      	pop	{r4, pc}
 8004f9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004fa2:	e7f7      	b.n	8004f94 <memmove+0x24>

08004fa4 <_realloc_r>:
 8004fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fa8:	4680      	mov	r8, r0
 8004faa:	4614      	mov	r4, r2
 8004fac:	460e      	mov	r6, r1
 8004fae:	b921      	cbnz	r1, 8004fba <_realloc_r+0x16>
 8004fb0:	4611      	mov	r1, r2
 8004fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fb6:	f7fe b9b3 	b.w	8003320 <_malloc_r>
 8004fba:	b92a      	cbnz	r2, 8004fc8 <_realloc_r+0x24>
 8004fbc:	f7fe f948 	bl	8003250 <_free_r>
 8004fc0:	4625      	mov	r5, r4
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fc8:	f000 f81b 	bl	8005002 <_malloc_usable_size_r>
 8004fcc:	4284      	cmp	r4, r0
 8004fce:	4607      	mov	r7, r0
 8004fd0:	d802      	bhi.n	8004fd8 <_realloc_r+0x34>
 8004fd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004fd6:	d812      	bhi.n	8004ffe <_realloc_r+0x5a>
 8004fd8:	4621      	mov	r1, r4
 8004fda:	4640      	mov	r0, r8
 8004fdc:	f7fe f9a0 	bl	8003320 <_malloc_r>
 8004fe0:	4605      	mov	r5, r0
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	d0ed      	beq.n	8004fc2 <_realloc_r+0x1e>
 8004fe6:	42bc      	cmp	r4, r7
 8004fe8:	4622      	mov	r2, r4
 8004fea:	4631      	mov	r1, r6
 8004fec:	bf28      	it	cs
 8004fee:	463a      	movcs	r2, r7
 8004ff0:	f7fe f917 	bl	8003222 <memcpy>
 8004ff4:	4631      	mov	r1, r6
 8004ff6:	4640      	mov	r0, r8
 8004ff8:	f7fe f92a 	bl	8003250 <_free_r>
 8004ffc:	e7e1      	b.n	8004fc2 <_realloc_r+0x1e>
 8004ffe:	4635      	mov	r5, r6
 8005000:	e7df      	b.n	8004fc2 <_realloc_r+0x1e>

08005002 <_malloc_usable_size_r>:
 8005002:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005006:	1f18      	subs	r0, r3, #4
 8005008:	2b00      	cmp	r3, #0
 800500a:	bfbc      	itt	lt
 800500c:	580b      	ldrlt	r3, [r1, r0]
 800500e:	18c0      	addlt	r0, r0, r3
 8005010:	4770      	bx	lr
	...

08005014 <_init>:
 8005014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005016:	bf00      	nop
 8005018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800501a:	bc08      	pop	{r3}
 800501c:	469e      	mov	lr, r3
 800501e:	4770      	bx	lr

08005020 <_fini>:
 8005020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005022:	bf00      	nop
 8005024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005026:	bc08      	pop	{r3}
 8005028:	469e      	mov	lr, r3
 800502a:	4770      	bx	lr
